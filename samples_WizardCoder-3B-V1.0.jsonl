{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n# Test cases\nprint(greatest_common_divisor(3, 5))  # Output: 1\nprint(greatest_common_divisor(25, 15))  # Output: 5<|endoftext|>"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n#     return len(set(string.lower()))\n    return len(set(string))\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))  # Output: 4<|endoftext|>"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n#     if not substring:\n#         return 0\n#     count = 0\n#     i = 0\n#     while i < len(string):\n#         if string[i:i+len(substring)] == substring:\n#             count += 1\n#         i += 1\n#     return count\n\n    if not substring:\n        return 0\n    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # 0\nprint(how_many_times('aaa', 'a'))  # 3\nprint(how_many_times('aaaa', 'aa'))  # 3<|endoftext|>"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strcat('hello', 'world')\n    'helloworld'\n    \"\"\"\n\ndef strrev(string: str) -> str:\n    \"\"\" Reverse a string\n    >>> strrev('hello')\n    'olleh'\n    \"\"\"\n\ndef strsplit(string: str, delimiter: str) -> List[str]:\n    \"\"\" Split a string into a list of substrings based on a delimiter\n    >>> strsplit('hello,world', ',')\n    ['hello', 'world']\n    \"\"\"\n\ndef strjoin(strings: List[str], delimiter: str) -> str:\n    \"\"\" Join a list of strings into a single string based on a delimiter\n    >>> strjoin(['hello', 'world'], ',')\n    'hello,world'\n    \"\"\"\n\ndef strcount(string: str, substring: str) -> int:\n    \"\"\" Count the number of occurrences of a substring in a string\n    >>> strcount('hello,world', 'l')\n    2\n    \"\"\"\n\ndef strreplace(string: str, old_substring: str, new_substring: str) -> str:\n    \"\"\" Replace all occurrences of a substring with a new substring in a string\n    >>> strreplace('hello,world', 'l', 'x')\n    'hxe,wrd'\n    \"\"\"\n\ndef strstartswith(string: str, prefix: str) -> bool:\n    \"\"\" Check if a string starts with a given prefix\n    >>> strstartswith('hello', 'he')\n    True\n    >>> strstartswith('hello', 'hi')\n    False\n    \"\"\"\n\ndef strendswith(string: str, suffix: str) -> bool:\n    \"\"\" Check if a string ends with a given suffix\n    >>> strendswith('hello', 'lo')\n    True\n    >>> strendswith('hello', 'll')\n    False\n    \"\"\"\n\ndef strisalpha(string: str) -> bool:\n    \"\"\" Check if a string contains only alphabetic characters\n    >>> strisalpha('hello')\n    True\n    >>> strisalpha('123')\n    False\n    \"\"\"\n\ndef strisdigit(string: str) -> bool:\n    \"\"\" Check if a string contains only digits\n    >>> strisdigit('123')\n    True\n    >>> strisdigit('hello')\n    False\n    \"\"\"\n\ndef strislower(string: str) -> bool:\n    \"\"\" Check if a string contains only lowercase characters\n    >>> strislower('hello')\n    True\n    >>> strislower('HELLO')\n    False\n    \"\"\"\n\ndef strisupper(string: str) -> bool:\n    \"\"\" Check if a string contains only uppercase characters\n    >>> strisupper('HELLO')\n    True\n    >>> strisupper('hello')\n    False\n    \"\"\"\n\ndef strisspace(string: str) -> bool:\n    \"\"\" Check if a string contains only whitespace characters\n    >>> strisspace(' ')\n    True\n    >>> strisspace('')\n    True\n    >>> strisspace('hello')\n    False\n    \"\"\"\n\ndef strisalnum(string: str) -> bool:\n    \"\"\" Check if a string contains only alphanumeric characters\n    >>> strisalnum('hello')\n    True\n    >>> strisalnum('123')\n    False\n    \"\"\"\n\ndef strisalpha(string: str) -> bool:\n    \"\"\" Check if a string contains only alphabetic characters\n    >>> strisalpha('hello')\n    True\n    >>> strisalpha('123')\n    False\n    \"\"\"\n\ndef strislower(string: str) -> bool:\n    \"\"\" Check if a string contains only lowercase characters\n    >>> strislower('hello')\n    True\n    >>> strislower('HELLO')\n    False\n    \"\"\"\n\ndef strisupper(string: str) -> bool:\n    \"\"\" Check if a string contains only uppercase characters\n    >>> strisupper('HELLO')\n    True\n    >>> strisupper('hello')\n    False\n    \"\"\"\n\ndef strisspace(string: str) -> bool:\n    \"\"\" Check if a string contains only whitespace characters\n    >>> strisspace(' ')\n    True\n    >>> strisspace('')\n    True\n    >>> strisspace('hello')\n    False\n    \"\"\"\n\ndef strisalnum(string: str) -> bool:\n    \"\"\" Check if a string contains only alphanumeric characters\n    >>> strisalnum('hello')\n    True\n    >>> strisalnum('123')\n    False\n    \"\"\"\n\ndef strisalpha(string: str) -> bool:\n    \"\"\" Check if a string contains only alphabetic characters\n    >>> strisalpha('hello')\n    True\n    >>> strisalpha('123')\n    False\n   "}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n#     for i in range(1, n):\n#         if n % i == 0:\n#             return i\n#     return n\n\n#     # Alternative approach using trial division\n#     for i in range(2, n):\n#         if n % i == 0:\n#             return i\n#     return n\n\n#     # Alternative approach using trial division with early exit\n#     for i in range(2, int(n**0.5) + 1):\n#         if n % i == 0:\n#             return i\n#     return n\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n] = n\n#         return n\n\n#     return helper(n)\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n] = n\n#         return n\n\n#     return helper(n)\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n] = n\n#         return n\n\n#     return helper(n)\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n] = n\n#         return n\n\n#     return helper(n)\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n] = n\n#         return n\n\n#     return helper(n)\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n] = n\n#         return n\n\n#     return helper(n)\n\n#     # Alternative approach using trial division with early exit and memoization\n#     memo = {}\n#     def helper(n: int) -> int:\n#         if n in memo:\n#             return memo[n]\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 memo[n] = i\n#                 return i\n#         memo[n]"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n\ndef get_zero(l: list):\n    \"\"\"Return only zeroes in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    [0]\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n\ndef get_non_zero(l: list):\n    \"\"\"Return only non-zero numbers in the list.\n    >>> get_non_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_non_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_unique(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [1, 3, 5, 7]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 4, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 9"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return true if a given number is a palindrome, and false otherwise.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(1234)\n    False\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12)\n    False\n    >>> is_palindrome(1)\n    False\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return true if a given number is an Armstrong number, and false otherwise.\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    True\n    >>> is_armstrong(121)\n    False\n    >>> is_armstrong(124)\n    False\n    >>> is_armstrong(120)\n    False\n    >>> is_armstrong(1)\n    False\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"Return true if a given number is a perfect square, and false otherwise.\n    >>> is_perfect_square(16)\n    True\n    >>> is_perfect_square(144)\n    True\n    >>> is_perfect_square(15)\n    False\n    >>> is_perfect_square(12)\n    False\n    >>> is_perfect_square(1)\n    False\n    \"\"\"\n\ndef is_prime_palindrome(n):\n    \"\"\"Return true if a given number is a prime palindrome, and false otherwise.\n    >>> is_prime_palindrome(12321)\n    True\n    >>> is_prime_palindrome(12345)\n    False\n    >>> is_prime_palindrome(1234)\n    False\n    >>> is_prime_palindrome(123)\n    False\n    >>> is_prime_palindrome(12)\n    False\n    >>> is_prime_palindrome(1)\n    False\n    \"\"\"\n\ndef is_prime_armstrong(n):\n    \"\"\"Return true if a given number is a prime Armstrong number, and false otherwise.\n    >>> is_prime_armstrong(153)\n    True\n    >>> is_prime_armstrong(123)\n    True\n    >>> is_prime_armstrong(121)\n    False\n    >>> is_prime_armstrong(124)\n    False\n    >>> is_prime_armstrong(120)\n    False\n    >>> is_prime_armstrong(1)\n    False\n    \"\"\"\n\ndef is_prime_perfect_square(n):\n    \"\"\"Return true if a given number is a prime perfect square, and false otherwise.\n    >>> is_prime_perfect_square(16)\n    True\n    >>> is_prime_perfect_square(144)\n    True\n    >>> is_prime_perfect_square(15)\n    False\n    >>> is_prime_perfect_square(12)\n    False\n    >>> is_prime_perfect_square(1)\n    False\n    \"\"\"\n\ndef is_prime_palindrome_armstrong(n):\n    \"\"\"Return true if a given number is a prime palindrome and Armstrong number, and false otherwise.\n    >>> is_prime_palindrome_armstrong(12321)\n    True\n    >>> is_prime_palindrome_armstrong(12345)\n    False\n    >>> is_prime_palindrome_armstrong(1234)\n    False\n    >>> is_prime_palindrome_armstrong(123)\n    False\n    >>> is_prime_palindrome_armstrong(12)\n    False\n    >>> is_prime_palindrome_armstrong(1)\n    False\n    \"\"\"\n\ndef is_prime_palindrome_perfect_square(n):\n    \"\"\"Return true if a given number is a prime palindrome and perfect square, and false otherwise.\n    >>> is_prime_palindrome_perfect_square(12321)\n    True\n    >>> is_prime_palindrome_perfect_square(12345)\n    False\n    >>> is_prime_palindrome_perfect_square(123"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n#     l = [1, 2, 3]\n#     l = [5, 6, 3, 4, 8, 9, 2]\n    l = sorted(l)\n    l_new = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n            l_new.append(l[i])\n    return l_new\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))<|endoftext|>"}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n#     # Using set to remove duplicates\n#     return sorted(list(set(l)))\n\n#     # Using a dictionary to keep track of unique elements\n#     unique_dict = {}\n#     for elem in l:\n#         if elem not in unique_dict:\n#             unique_dict[elem] = True\n#     return sorted(unique_dict.keys())\n\n    # Using a set to keep track of unique elements\n    unique_set = set()\n    for elem in l:\n        if elem not in unique_set:\n            unique_set.add(elem)\n    return sorted(unique_set)\n\n# Test cases\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]\nprint(unique([1, 2, 3, 4, 5]))  # Output: [1, 2, 3, 4, 5]\nprint(unique([1, 2, 3, 4, 5, 5]))  # Output: [1, 2, 3, 4, 5]\nprint(unique([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]<|endoftext|>"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n#     # Using a loop to iterate through all integers less than n\n#     count = 0\n#     for i in range(1, n):\n#         # If the integer is divisible by 11 or 13, check if it contains the digit 7\n#         if i % 11 == 0 or i % 13 == 0:\n#             if str(i).count('7') > 0:\n#                 count += 1\n#     return count\n\n# Using a list comprehension to achieve the same result in a more concise way\ncount = sum([1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0 and str(i).count('7') > 0])\nreturn count<|endoftext|>"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n#     odd_indices = [i for i in range(len(l)) if i % 2!= 0]\n#     even_indices = [i for i in range(len(l)) if i % 2 == 0]\n#     odd_values = [l[i] for i in odd_indices]\n#     even_values = [l[i] for i in even_indices]\n#     sorted_even_values = sorted(even_values)\n#     sorted_l = [l[i] for i in range(len(l)) if i % 2 == 0]\n#     for i in range(len(sorted_even_values)):\n#         sorted_l[i] = sorted_even_values[i]\n#     return sorted_l\n\n    # Using list comprehension\n    return [l[i] if i % 2 == 0 else sorted(l[i:i+2]) for i in range(len(l))]\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]<|endoftext|>"}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n#     if n == 1:\n#         return 2\n#     elif n == 2:\n#         return 3\n#     else:\n#         fib_n = 1\n#         fib_n_1 = 1\n#         for i in range(2, n):\n#             fib_n = fib_n + fib_n_1\n#             fib_n_1 = fib_n - fib_n_1\n#         return fib_n\n\n#     def is_prime(num: int) -> bool:\n#         if num < 2:\n#             return False\n#         for i in range(2, int(num**0.5) + 1):\n#             if num % i == 0:\n#                 return False\n#         return True\n\n#     fib_n = 1\n#     fib_n_1 = 1\n#     for i in range(2, n):\n#         fib_n = fib_n + fib_n_1\n#         fib_n_1 = fib_n - fib_n_1\n#     if is_prime(fib_n):\n#         return fib_n\n#     else:\n#         return prime_fib(n - 1)\n\n#     def is_prime(num: int) -> bool:\n#         if num < 2:\n#             return False\n#         for i in range(2, int(num**0.5) + 1):\n#             if num % i == 0:\n#                 return False\n#         return True\n\n#     fib_n = 1\n#     fib_n_1 = 1\n#     for i in range(2, n):\n#         fib_n = fib_n + fib_n_1\n#         fib_n_1 = fib_n - fib_n_1\n#     if is_prime(fib_n):\n#         return fib_n\n#     else:\n#         return prime_fib(n - 1)\n\n#     def is_prime(num: int) -> bool:\n#         if num < 2:\n#             return False\n#         for i in range(2, int(num**0.5) + 1):\n#             if num % i == 0:\n#                 return False\n#         return True\n\n#     fib_n = 1\n#     fib_n_1 = 1\n#     for i in range(2, n):\n#         fib_n = fib_n + fib_n_1\n#         fib_n_1 = fib_n - fib_n_1\n#     if is_prime(fib_n):\n#         return fib_n\n#     else:\n#         return prime_fib(n - 1)\n\n#     def is_prime(num: int) -> bool:\n#         if num < 2:\n#             return False\n#         for i in range(2, int(num**0.5) + 1):\n#             if num % i == 0:\n#                 return False\n#         return True\n\n#     fib_n = 1\n#     fib_n_1 = 1\n#     for i in range(2, n):\n#         fib_n = fib_n + fib_n_1\n#         fib_n_1 = fib_n - fib_n_1\n#     if is_prime(fib_n):\n#         return fib_n\n#     else:\n#         return prime_fib(n - 1)\n\n#     def is_prime(num: int) -> bool:\n#         if num < 2:\n#             return False\n#         for i in range(2, int(num**0.5) + 1):\n#             if num % i == 0:\n#                 return False\n#         return True\n\n#     fib_n = 1\n#     fib_n_1 = 1\n#     for i in range(2, n):\n#         fib_n = fib_n + fib"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n# Example usage:\nn = 10\nprint(car_race_collision(n))  # Output: 0\n\nn = 20\nprint(car_race_collision(n))  # Output: 10\n\nn = 30\nprint(car_race_collision(n))  # Output: 20\n\nn = 40\nprint(car_race_collision(n))  # Output: 30\n\nn = 50\nprint(car_race_collision(n))  # Output: 40\n\nn = 60\nprint(car_race_collision(n))  # Output: 50\n\nn = 70\nprint(car_race_collision(n))  # Output: 60\n\nn = 80\nprint(car_race_collision(n))  # Output: 70\n\nn = 90\nprint(car_race_collision(n))  # Output: 80\n\nn = 100\nprint(car_race_collision(n))  # Output: 90<|endoftext|>"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n#     return [x + 1 for x in l]\n    return [x + 1 for x in l]\n\ndef main():\n    print(incr_list([1, 2, 3]))\n    print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\nif __name__ == \"__main__\":\n    main()<|endoftext|>"}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n#     # Check if there are any negative numbers in the list\n#     if any(x < 0 for x in l):\n#         return False\n\n#     # Sort the list in ascending order\n#     l.sort()\n\n#     # Iterate through the list and check if there are any pairs that sum to zero\n#     for i in range(len(l) - 1):\n#         if l[i] + l[i+1] == 0:\n#             return True\n\n#     # If no pairs sum to zero, return False\n#     return False\n\n    # Alternative solution using a dictionary to store the frequency of each element in the list\n    freq = {}\n    for x in l:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n\n    # Check if there are any pairs that sum to zero\n    for x in freq:\n        if freq[x] > 1:\n            return True\n\n    # If no pairs sum to zero, return False\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False<|endoftext|>"}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n#     if base < 2 or base > 10:\n#         raise ValueError(\"Base must be between 2 and 10\")\n\n#     if x == 0:\n#         return \"0\"\n\n#     if x < 0:\n#         x = -x\n#         sign = \"-\"\n#     else:\n#         sign = \"\"\n\n#     digits = []\n#     while x > 0:\n#         digits.append(x % base)\n#         x //= base\n\n#     result = sign + \"\".join(map(str, digits[::-1]))\n\n#     return result\n\n# def change_base(x: int, base: int):\n#     \"\"\"Change numerical base of input number x to base.\n#     return string representation after the conversion.\n#     base numbers are less than 10.\n#     >>> change_base(8, 3)\n#     '22'\n#     >>> change_base(8, 2)\n#     '1000'\n#     >>> change_base(7, 2)\n#     '111'\n#     \"\"\"\n\n#     if base < 2 or base > 10:\n#         raise ValueError(\"Base must be between 2 and 10\")\n\n#     if x == 0:\n#         return \"0\"\n\n#     if x < 0:\n#         x = -x\n#         sign = \"-\"\n#     else:\n#         sign = \"\"\n\n#     digits = []\n#     while x > 0:\n#         digits.append(x % base)\n#         x //= base\n\n#     result = sign + \"\".join(map(str, digits[::-1]))\n\n#     return result\n\n# def change_base(x: int, base: int):\n#     \"\"\"Change numerical base of input number x to base.\n#     return string representation after the conversion.\n#     base numbers are less than 10.\n#     >>> change_base(8, 3)\n#     '22'\n#     >>> change_base(8, 2)\n#     '1000'\n#     >>> change_base(7, 2)\n#     '111'\n#     \"\"\"\n\n#     if base < 2 or base > 10:\n#         raise ValueError(\"Base must be between 2 and 10\")\n\n#     if x == 0:\n#         return \"0\"\n\n#     if x < 0:\n#         x = -x\n#         sign = \"-\"\n#     else:\n#         sign = \"\"\n\n#     digits = []\n#     while x > 0:\n#         digits.append(x % base)\n#         x //= base\n\n#     result = sign + \"\".join(map(str, digits[::-1]))\n\n#     return result\n\n# def change_base(x: int, base: int):\n#     \"\"\"Change numerical base of input number x to base.\n#     return string representation after the conversion.\n#     base numbers are less than 10.\n#     >>> change_base(8, 3)\n#     '22'\n#     >>> change_base(8, 2)\n#     '1000'\n#     >>> change_base(7, 2)\n#     '111'\n#     \"\"\"\n\n#     if base < 2 or base > 10:\n#         raise ValueError(\"Base must be between 2 and 10\")\n\n#     if x == 0:\n#         return \"0\"\n\n#     if x < 0:\n#         x = -x\n#         sign = \"-\"\n#     else:\n#         sign = \"\"\n\n#     digits = []\n#     while x > 0:\n#         digits.append(x % base)\n#         x //= base\n\n#     result = sign + \"\".join(map(str, digits[::-1"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n#    return 0.5 * a * h\n    return 0.5 * a * h\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    15\n    \"\"\"\n    return a + a + h\n\ndef is_valid_triangle(a, h):\n    \"\"\"Check if given length of a side and high is a valid triangle.\n    >>> is_valid_triangle(5, 3)\n    True\n    >>> is_valid_triangle(4, 4)\n    False\n    \"\"\"\n    if a + h > a:\n        return True\n    else:\n        return False\n\ndef is_equilateral_triangle(a, h):\n    \"\"\"Check if given length of a side and high is an equilateral triangle.\n    >>> is_equilateral_triangle(5, 5)\n    True\n    >>> is_equilateral_triangle(4, 4)\n    False\n    \"\"\"\n    if a == h:\n        return True\n    else:\n        return False\n\ndef is_isosceles_triangle(a, h):\n    \"\"\"Check if given length of a side and high is an isosceles triangle.\n    >>> is_isosceles_triangle(5, 5)\n    False\n    >>> is_isosceles_triangle(4, 4)\n    True\n    \"\"\"\n    if a == h or a == h:\n        return True\n    else:\n        return False\n\ndef is_scalene_triangle(a, h):\n    \"\"\"Check if given length of a side and high is a scalene triangle.\n    >>> is_scalene_triangle(5, 5)\n    False\n    >>> is_scalene_triangle(4, 4)\n    False\n    \"\"\"\n    if a!= h and a!= h:\n        return True\n    else:\n        return False\n\ndef is_right_triangle(a, h):\n    \"\"\"Check if given length of a side and high is a right triangle.\n    >>> is_right_triangle(5, 5)\n    True\n    >>> is_right_triangle(4, 4)\n    False\n    \"\"\"\n    if a == h or a == h:\n        return True\n    else:\n        return False\n\ndef is_obtuse_triangle(a, h):\n    \"\"\"Check if given length of a side and high is an obtuse triangle.\n    >>> is_obtuse_triangle(5, 5)\n    False\n    >>> is_obtuse_triangle(4, 4)\n    True\n    \"\"\"\n    if a == h or a == h:\n        return False\n    else:\n        return True\n\ndef is_acute_triangle(a, h):\n    \"\"\"Check if given length of a side and high is an acute triangle.\n    >>> is_acute_triangle(5, 5)\n    False\n    >>> is_acute_triangle(4, 4)\n    False\n    \"\"\"\n    if a == h or a == h:\n        return False\n    else:\n        return True\n\ndef is_obtuse_acute_triangle(a, h):\n    \"\"\"Check if given length of a side and high is an obtuse acute triangle.\n    >>> is_obtuse_acute_triangle(5, 5)\n    False\n    >>> is_obtuse_acute_triangle(4, 4)\n    True\n    \"\"\"\n    if a == h or a == h:\n        return False\n    else:\n        return True\n\ndef is_right_obtuse_triangle(a, h):\n    \"\"\"Check if given length of a side and high is a right obtuse triangle.\n    >>> is_right_obtuse_triangle(5, 5)\n    False\n    >>> is_right_obtuse_triangle(4, 4)\n    True\n    \"\"\"\n    if a == h or a == h:\n        return False\n    else:\n        return True\n\ndef is_right_acute_triangle(a, h):\n    \"\"\"Check if given length of a side and high is a right acute triangle.\n    >>> is_right_acute_triangle(5, 5)\n    False\n    >>> is_right_acute_triangle(4, 4)\n    True\n    \"\"\"\n    if a == h or a == h:\n        return False\n    else:\n        return True\n\ndef is_equilateral_right_triangle(a, h):\n    \"\"\"Check if given length of a side and high is an equilateral right triangle.\n    >>> is_equilateral_right_triangle(5, 5)"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\ndef fib4_iterative(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    a, b, c = 0, 0, 2\n    for _ in range(n):\n        a, b, c = b, c, a + b + c\n    return c\n\ndef fib4_recursive(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4_recursive(n-1) + fib4_recursive(n-2) + fib4_recursive(n-3) + fib4_recursive(n-4)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()<|endoftext|>"}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    [3]\n    >>> mode([-10, 4, 6, 1000, 10, 20])\n    [10, 20]\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    3.0\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n\ndef variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> variance([3, 1, 2, 4, 5])\n    2.0\n    >>> variance([-10, 4, 6, 1000, 10, 20])\n    10000.0\n    \"\"\"\n\ndef standard_deviation(l: list):\n    \"\"\"Return standard deviation of elements in the list l.\n    >>> standard_deviation([3, 1, 2, 4, 5])\n    1.0\n    >>> standard_deviation([-10, 4, 6, 1000, 10, 20])\n    100.0\n    \"\"\"\n\ndef correlation(x: list, y: list):\n    \"\"\"Return correlation coefficient between two lists x and y.\n    >>> correlation([1, 2, 3], [4, 5, 6])\n    0.8\n    >>> correlation([1, 2, 3], [4, 5, 6, 7])\n    0.9\n    \"\"\"\n\ndef pearson_correlation(x: list, y: list):\n    \"\"\"Return Pearson correlation coefficient between two lists x and y.\n    >>> pearson_correlation([1, 2, 3], [4, 5, 6])\n    0.8\n    >>> pearson_correlation([1, 2, 3], [4, 5, 6, 7])\n    0.9\n    \"\"\"\n\ndef spearman_correlation(x: list, y: list):\n    \"\"\"Return Spearman correlation coefficient between two lists x and y.\n    >>> spearman_correlation([1, 2, 3], [4, 5, 6])\n    0.8\n    >>> spearman_correlation([1, 2, 3], [4, 5, 6, 7])\n    0.9\n    \"\"\"\n\ndef z_score(x: float, mean: float, std_dev: float):\n    \"\"\"Return z-score of x with respect to mean and standard deviation.\n    >>> z_score(3, 2, 1)\n    1.6448536269515367\n    \"\"\"\n\ndef t_score(x: float, mean: float, std_dev: float):\n    \"\"\"Return t-score of x with respect to mean and standard deviation.\n    >>> t_score(3, 2, 1)\n    2.185039863261518\n    \"\"\"\n\ndef chi_square_test(x: list, y: list):\n    \"\"\"Return chi-square test of independence between two lists x and y.\n    >>> chi_square_test([1, 2, 3], [4, 5, 6])\n    0.0\n    >>> chi_square_test([1, 2, 3], [4, 5, 6, 7])\n    0.0\n    \"\"\"\n\ndef fisher_exact_test(x: list, y: list):\n    \"\"\"Return Fisher exact test of independence between two lists x and y.\n    >>> fisher_exact_test([1, 2, 3], [4, 5, 6])\n    0.0\n    >>> fisher_exact_test([1, 2, 3], [4, 5, 6, 7])\n    0.0\n    \"\"\"\n\ndef kruskal_wallis_test(x: list,"}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\ndef modpow(base: int, exponent: int, modulus: int) -> int:\n    \"\"\"Return base^exponent modulo modulus (be aware of numerics).\n    >>> modpow(3, 5, 101)\n    1\n    >>> modpow(1101, 101, 101)\n    2\n    >>> modpow(0, 101, 101)\n    1\n    >>> modpow(3, 11, 101)\n    8\n    >>> modpow(100, 101, 101)\n    1\n    \"\"\"\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b (be aware of numerics).\n    >>> gcd(3, 5)\n    1\n    >>> gcd(1101, 101)\n    1\n    >>> gcd(0, 101)\n    101\n    >>> gcd(3, 11)\n    1\n    >>> gcd(100, 101)\n    1\n    \"\"\"\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return the least common multiple of a and b (be aware of numerics).\n    >>> lcm(3, 5)\n    15\n    >>> lcm(1101, 101)\n    1001\n    >>> lcm(0, 101)\n    101\n    >>> lcm(3, 11)\n    33\n    >>> lcm(100, 101)\n    1000\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(100)\n    True\n    \"\"\"\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return a list of prime factors of n.\n    >>> factorize(3)\n    [3]\n    >>> factorize(5)\n    [5]\n    >>> factorize(7)\n    [7]\n    >>> factorize(11)\n    [11]\n    >>> factorize(100)\n    [2, 5, 5]\n    \"\"\"\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\"Return a list of prime factors of n.\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(5)\n    [5]\n    >>> prime_factors(7)\n    [7]\n    >>> prime_factors(11)\n    [11]\n    >>> prime_factors(100)\n    [2, 5, 5]\n    \"\"\"\n\ndef prime_factorization(n: int) -> List[Tuple[int, int]]:\n    \"\"\"Return a list of tuples (prime, exponent) of prime factors of n.\n    >>> prime_factorization(3)\n    [(3, 1)]\n    >>> prime_factorization(5)\n    [(5, 1)]\n    >>> prime_factorization(7)\n    [(7, 1)]\n    >>> prime_factorization(11)\n    [(11, 1)]\n    >>> prime_factorization(100)\n    [(2, 2), (5, 1)]\n    \"\"\"\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"Return True if n is a perfect square, False otherwise.\n    >>> is_perfect_square(9)\n    True\n    >>> is_perfect_square(16)\n    True\n    >>> is_perfect_square(25)\n    True\n    >>> is_perfect_square(36)\n    False\n    >>> is_perfect_square(49)\n    False\n    \"\"\"\n\ndef is_square(n: int) -> bool:\n    \"\"\"Return True if n is a square, False otherwise.\n    >>> is_square(9)\n    False\n    >>> is_square(16)\n    True\n    >>> is_square(25)\n    True"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n#     vowels = 'aeiouAEIOU'\n#     for vowel in vowels:\n#         text = text.replace(vowel, '')\n#     return text\n    \n    # Using list comprehension\n    return ''.join([char for char in text if char not in 'aeiouAEIOU'])\n\n# Test cases\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))<|endoftext|>"}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n#     return all(x < t for x in l)\n\n# Using list comprehension\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using generator expression\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set and sorted\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set and sorted and zip\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set and sorted and zip and enumerate\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set and sorted and zip and enumerate and reversed\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set and sorted and zip and enumerate and reversed and sorted\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Using list comprehension with generator expression and filter and lambda and map and reduce and sorted and zip and enumerate and reversed and sorted and set and sorted and zip and enumerate and reversed and sorted and set\ndef below_"}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0.7142857142857143\n    \"\"\"\n\ndef main():\n    add(2, 3)\n    subtract(5, 7)\n    multiply(2, 3)\n    divide(5, 7)\n\nif __name__ == \"__main__\":\n    main()<|endoftext|>"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_count(s0: str, s1: str):\n    \"\"\"\n    Count the number of characters that are the same in two words.\n    >>> same_chars_count('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    10\n    >>> same_chars_count('abcd', 'dddddddabc')\n    0\n    >>> same_chars_count('dddddddabc', 'abcd')\n    0\n    >>> same_chars_count('eabcd', 'dddddddabc')\n    0\n    >>> same_chars_count('abcd', 'dddddddabce')\n    0\n    >>> same_chars_count('eabcdzzzz', 'dddzzzzzzzddddabc')\n    0\n    \"\"\"\n    count = 0\n    for i in range(min(len(s0), len(s1))):\n        if s0[i] == s1[i]:\n            count += 1\n    return count\n\ndef same_chars_percentage(s0: str, s1: str):\n    \"\"\"\n    Calculate the percentage of characters that are the same in two words.\n    >>> same_chars_percentage('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    0.5\n    >>> same_chars_percentage('abcd', 'dddddddabc')\n    0.0\n    >>> same_chars_percentage('dddddddabc', 'abcd')\n    0.0\n    >>> same_chars_percentage('eabcd', 'dddddddabc')\n    0.0\n    >>> same_chars_percentage('abcd', 'dddddddabce')\n    0.0\n    >>> same_chars_percentage('eabcdzzzz', 'dddzzzzzzzddddabc')\n    0.0\n    \"\"\"\n    count = same_chars_count(s0, s1)\n    total = min(len(s0), len(s1))\n    return count / total if total > 0 else 0\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()<|endoftext|>"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number using iteration.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()<|endoftext|>"}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [2, 3, 5, 7]\n    >>> prime_factors(2048)\n    [2]\n    \"\"\"\n\ndef prime_factorization(n: int) -> Dict[int, int]:\n    \"\"\"Return a dictionary of prime factors and their multiplicities of n.\n    >>> prime_factorization(13195)\n    {2: 2, 3: 1, 5: 1, 7: 1}\n    >>> prime_factorization(2048)\n    {2: 1}\n    \"\"\"\n\ndef prime_factorization_string(n: int) -> str:\n    \"\"\"Return a string representation of the prime factorization of n.\n    >>> prime_factorization_string(13195)\n    '2^2 * 3^1 * 5^1 * 7^1'\n    >>> prime_factorization_string(2048)\n    '2^1'\n    \"\"\"\n\ndef prime_factorization_list(n: int) -> List[Tuple[int, int]]:\n    \"\"\"Return a list of tuples representing the prime factorization of n.\n    >>> prime_factorization_list(13195)\n    [(2, 2), (3, 1), (5, 1), (7, 1)]\n    >>> prime_factorization_list(2048)\n    [(2, 1)]\n    \"\"\"\n\ndef prime_factorization_dict(n: int) -> Dict[int, int]:\n    \"\"\"Return a dictionary of prime factors and their multiplicities of n.\n    >>> prime_factorization_dict(13195)\n    {2: 2, 3: 1, 5: 1, 7: 1}\n    >>> prime_factorization_dict(2048)\n    {2: 1}\n    \"\"\"\n\ndef prime_factorization_dict_string(n: int) -> str:\n    \"\"\"Return a string representation of the prime factorization of n.\n    >>> prime_factorization_dict_string(13195)\n    '2^2 * 3^1 * 5^1 * 7^1'\n    >>> prime_factorization_dict_string(2048)\n    '2^1'\n    \"\"\"\n\ndef prime_factorization_dict_list(n: int) -> List[Tuple[int, int]]:\n    \"\"\"Return a list of tuples representing the prime factorization of n.\n    >>> prime_factorization_dict_list(13195)\n    [(2, 2), (3, 1), (5, 1), (7, 1)]\n    >>> prime_factorization_dict_list(2048)\n    [(2, 1)]\n    \"\"\"\n\ndef prime_factorization_dict_list_string(n: int) -> str:\n    \"\"\"Return a string representation of the prime factorization of n.\n    >>> prime_factorization_dict_list_string(13195)\n    '2^2 * 3^1 * 5^1 * 7^1'\n    >>> prime_factorization_dict_list_string(2048)\n    '2^1'\n    \"\"\"\n\ndef prime_factorization_dict_list_string_sorted(n: int) -> str:\n    \"\"\"Return a string representation of the prime factorization of n, sorted by prime factor.\n    >>> prime_factorization_dict_list_string_sorted(13195)\n    '2^2 * 3^1 * 5^1 * 7^1'\n    >>> prime_factorization_dict_list_string_sorted(2048)\n    '2^1'\n    \"\"\"\n\ndef prime_factorization_dict_list_string_sorted_reverse(n: int)"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n#     # Using a loop to sum numbers from 1 to n\n#     total = 0\n#     for i in range(1, n+1):\n#         total += i\n#     return total\n\n#     # Using recursion to sum numbers from 1 to n\n#     def sum_helper(n):\n#         if n == 0:\n#             return 0\n#         else:\n#             return n + sum_helper(n-1)\n#     return sum_helper(n)\n\n    # Using a generator expression to sum numbers from 1 to n\n    return sum(range(1, n+1))\n\n# Test cases\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100))  # Output: 5050\nprint(sum_to_n(5))  # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))  # Output: 1<|endoftext|>"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\ndef evaluate(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Evaluate the polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    15\n    >>> evaluate([1, 2, 3], 2)\n    10\n    \"\"\"\n\ndef simplify(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    Simplify the polynomial by removing terms that are zero.\n    >>> simplify([3, 1, 0, 4, 5])\n    [3, 4, 5]\n    >>> simplify([1, 2, 3, 0, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n\ndef factor(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    Factor the polynomial into its prime factors.\n    >>> factor([3, 1, 2, 4, 5])\n    [(2, 1), (3, 1), (5, 1)]\n    >>> factor([1, 2, 3])\n    [(1, 1), (2, 1), (3, 1)]\n    \"\"\"\n\ndef gcd(a: int, b: int):\n    \"\"\" Compute the greatest common divisor of a and b.\n    >>> gcd(12, 18)\n    6\n    >>> gcd(12, 12)\n    12\n    \"\"\"\n\ndef lcm(a: int, b: int):\n    \"\"\" Compute the least common multiple of a and b.\n    >>> lcm(12, 18)\n    36\n    >>> lcm(12, 12)\n    120\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\" Check if n is prime.\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    \"\"\"\n\ndef prime_factors(n: int):\n    \"\"\" Compute the prime factors of n.\n    >>> prime_factors(12)\n    [(2, 2), (3, 1)]\n    >>> prime_factors(13)\n    [(2, 1), (3, 1)]\n    \"\"\"\n\ndef is_square(n: int):\n    \"\"\" Check if n is a perfect square.\n    >>> is_square(16)\n    True\n    >>> is_square(17)\n    False\n    \"\"\"\n\ndef square_root(n: int):\n    \"\"\" Compute the square root of n.\n    >>> square_root(16)\n    4\n    >>> square_root(17)\n    4\n    \"\"\"\n\ndef is_prime_power(n: int):\n    \"\"\" Check if n is a prime power.\n    >>> is_prime_power(12)\n    True\n    >>> is_prime_power(13)\n    False\n    \"\"\"\n\ndef prime_power(n: int):\n    \"\"\" Compute the prime power of n.\n    >>> prime_power(12)\n    (2, 2)\n    >>> prime_power(13)\n    (2, 1)\n    \"\"\"\n\ndef is_perfect_square(n: int):\n    \"\"\" Check if n is a perfect square.\n    >>> is_perfect_square(16)\n    True\n    >>> is_perfect_square(17)\n    False\n    \"\"\"\n\ndef perfect_square(n: int):\n    \"\"\" Compute the perfect square of n.\n    >>> perfect_square(16)\n    4\n    >>> perfect_square(17)\n    4\n    \"\"\"\n\ndef is_perfect_power(n: int):\n    \"\"\" Check if n is a perfect power.\n    >>> is_perfect_power(16)\n    True\n    >>> is_perfect_power(17)\n    False\n    \"\"\"\n\ndef perfect_power(n: int):\n    \"\"\" Compute the perfect power of n.\n    >>> perfect_power(16)\n    (2, 4)\n    >>> perfect_power(17)\n    (2, 3)\n    \"\"\"\n\ndef is_perfect_cube(n: int"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n# Solution:\n# We can use dynamic programming to compute the nth element of the fibfib sequence.\n# We can define a function fibfib(n) that takes an integer n as input and returns the nth element of the fibfib sequence.\n# We can initialize two variables, fib1 and fib2, to 0 and 1, respectively.\n# We can then loop through the sequence from 2 to n-1, updating the values of fib1 and fib2 as follows:\n# fib1 = fib2\n# fib2 = fib1 + fib2\n# We can then return the value of fib2, which is the nth element of the fibfib sequence.\n\ndef fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for i in range(2, n):\n            fib1 = fib2\n            fib2 = fib1 + fib2\n        return fib2\n\n# Test cases:\nprint(fibfib(1))  # 0\nprint(fibfib(5))  # 4\nprint(fibfib(8))  # 24<|endoftext|>"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n# Solution:\n# We can solve this problem by iterating over each character in the string and\n# checking if it is a vowel. If it is, we increment a counter. If it is not a\n# vowel, we check if it is the last character in the string and if it is, we\n# check if it is a vowel. If it is, we increment the counter.\n\ndef vowels_count(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n        elif char == s[-1] and char in 'aeiouAEIOU':\n            count += 1\n    return count\n\n# Test cases:\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3<|endoftext|>"}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\ndef digit_sum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digit_sum(\"\") => 0\n        digit_sum(\"abAB\") => 131\n        digit_sum(\"abcCd\") => 67\n        digit_sum(\"helloE\") => 69\n        digit_sum(\"woArBld\") => 131\n        digit_sum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 65 for c in s if c.isupper())\n\n# Test cases\nprint(digit_sum(\"\"))  # Output: 0\nprint(digit_sum(\"abAB\"))  # Output: 131\nprint(digit_sum(\"abcCd\"))  # Output: 67\nprint(digit_sum(\"helloE\"))  # Output: 69\nprint(digit_sum(\"woArBld\"))  # Output: 131\nprint(digit_sum(\"aAaaaXa\"))  # Output: 153<|endoftext|>"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\ndef count_mango(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    count_mango(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    count_mango(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    count_mango(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    count_mango(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples, oranges, mangoes = s.split()\n    apples = int(apples)\n    oranges = int(oranges)\n    mangoes = int(mangoes)\n    return mangoes - apples - oranges<|endoftext|>"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\ndef pluck_even_smallest(arr):\n    if not arr:\n        return []\n\n    even_smallest = [float('inf'), -1]\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = i\n\n    if smallest_even == float('inf'):\n        return []\n\n    return [smallest_even, smallest_index]\n\n# Test cases\nprint(pluck_even_smallest([4, 2, 3]))  # Output: [2, 1]\nprint(pluck_even_smallest([1, 2, 3]))  # Output: [2, 1]\nprint(pluck_even_smallest([]))  # Output: []\nprint(pluck_even_smallest([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]<|endoftext|>"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n# Solution:\n# We can solve this problem by iterating through the list and keeping track of the frequency of each integer. \n# We can then iterate through the list again and find the integer with the highest frequency greater than zero.\n# If no such integer exists, we return -1.\n\ndef search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n    \n    for num in lst:\n        if num > 0 and freq[num] >= num:\n            return num\n    \n    return -1\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1<|endoftext|>"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n#     if not lst:\n#         return []\n\n#     min_val = min(lst)\n#     max_val = max(lst)\n\n#     if min_val == max_val:\n#         return lst\n\n#     if min_val < max_val:\n#         return [max_val] + [min_val] + [x for x in lst if x!= min_val and x!= max_val]\n\n#     return [min_val] + [x for x in lst if x!= min_val] + [max_val]\n\n    if not lst:\n        return []\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    if min_val == max_val:\n        return lst\n\n    if min_val < max_val:\n        return [max_val] + [min_val] + [x for x in lst if x!= min_val and x!= max_val]\n\n    return [min_val] + [x for x in lst if x!= min_val] + [max_val]\n\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))  # Output: []<|endoftext|>"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n#     if a + b > c and a + c > b and b + c > a:\n#         s = (a + b + c) / 2\n#         area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n#         return round(area, 2)\n#     else:\n#         return -1\n\n# Using Heron's formula to calculate the area of a triangle\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n\n# Testing the function\nprint(triangle_area(3, 4, 5)) # 6.00\nprint(triangle_area(1, 2, 10)) # -1<|endoftext|>"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\ndef is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef sum_of_elements(lst):\n    return sum(lst)\n\ndef will_it_fly(lst, w):\n    if not is_palindrome(lst):\n        return False\n    if sum_of_elements(lst) > w:\n        return False\n    return True\n\n# Test cases\nprint(will_it_fly([1, 2], 5))  # False\nprint(will_it_fly([3, 2, 3], 1))  # False\nprint(will_it_fly([3, 2, 3], 9))  # True\nprint(will_it_fly([3], 5))  # True<|endoftext|>"}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n#     # Check if the array is already palindromic\n#     if all(x == x[::-1] for x in arr):\n#         return 0\n\n#     # Sort the array in ascending order\n#     arr.sort()\n\n#     # Initialize variables\n#     min_changes = float('inf')\n#     current_change = 0\n#     current_sum = 0\n\n#     # Iterate through the array\n#     for i in range(len(arr)):\n#         # Calculate the difference between the current element and the next element\n#         diff = arr[i] - arr[i+1]\n\n#         # If the difference is greater than the current change, update the minimum changes\n#         if diff > current_change:\n#             min_changes = min(min_changes, current_change)\n\n#             # Reset the current change and current sum\n#             current_change = 0\n#             current_sum = 0\n\n#         # Add the difference to the current sum\n#         current_sum += diff\n\n#         # If the current sum is greater than the current change, update the current change\n#         if current_sum > current_change:\n#             current_change = current_sum\n\n#     # Add the last change to the minimum changes\n#     min_changes = min(min_changes, current_change)\n\n#     return min_changes\n\n#     # Check if the array is already palindromic\n#     if all(x == x[::-1] for x in arr):\n#         return 0\n\n#     # Sort the array in ascending order\n#     arr.sort()\n\n#     # Initialize variables\n#     min_changes = float('inf')\n#     current_change = 0\n#     current_sum = 0\n\n#     # Iterate through the array\n#     for i in range(len(arr)):\n#         # Calculate the difference between the current element and the next element\n#         diff = arr[i] - arr[i+1]\n\n#         # If the difference is greater than the current change, update the minimum changes\n#         if diff > current_change:\n#             min_changes = min(min_changes, current_change)\n\n#             # Reset the current change and current sum\n#             current_change = 0\n#             current_sum = 0\n\n#         # Add the difference to the current sum\n#         current_sum += diff\n\n#         # If the current sum is greater than the current change, update the current change\n#         if current_sum > current_change:\n#             current_change = current_sum\n\n#     # Add the last change to the minimum changes\n#     min_changes = min(min_changes, current_change)\n\n#     return min_changes\n\n#     # Check if the array is already palindromic\n#     if all(x == x[::-1] for x in arr):\n#         return 0\n\n#     # Sort the array in ascending order\n#     arr.sort()\n\n#     # Initialize variables\n#     min_changes = float('inf')\n#     current_change = 0\n#     current_sum = 0\n\n#     # Iterate through the array\n#     for i in range(len(arr)):\n#         # Calculate the difference between the current element and the next element\n#         diff = arr[i] - arr[i+1]\n\n#         # If the difference is greater than the current change, update the minimum changes\n#         if diff > current_change:\n#             min_changes = min(min_changes, current_change)\n\n#             # Reset the current change and current sum\n#             current_change = 0\n#             current_sum = 0\n\n#         # Add the difference to"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\ndef total_match(lst1, lst2):\n    lst1.sort()\n    lst2.sort()\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2<|endoftext|>"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n# Solution:\ndef is_multiply_prime(a):\n    if a < 100:\n        return False\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    for i in range(3, int(a**0.5)+1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n# Test cases\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(100)) # False\nprint(is_multiply_prime(101)) # False<|endoftext|>"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n# Solution\ndef is_simple_power(x, n):\n    if n**int(n) == x:\n        return True\n    else:\n        return False<|endoftext|>"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n# Solution:\ndef iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        for i in range(1, int(a**0.5)+1):\n            if a % i == 0:\n                return False\n        return True\n\n# Test cases\nprint(iscube(1)) # True\nprint(iscube(2)) # False\nprint(iscube(-1)) # True\nprint(iscube(64)) # True\nprint(iscube(0)) # True\nprint(iscube(180)) # False<|endoftext|>"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n# Helper function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Main function to count the number of primes in a hexadecimal number\ndef count_primes(num):\n    count = 0\n    for digit in num:\n        if digit in \"0123456789ABCDEF\":\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count\n\n# Test cases\nprint(count_primes(\"AB\"))  # Output: 1\nprint(count_primes(\"1077E\"))  # Output: 2\nprint(count_primes(\"ABED1A33\"))  # Output: 4\nprint(count_primes(\"123456789ABCDEF0\"))  # Output: 6\nprint(count_primes(\"2020\"))  # Output: 2<|endoftext|>"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n# Solution\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\"\n\n# Test cases\nprint(decimal_to_binary(15))   # returns \"db1111db\"\nprint(decimal_to_binary(32))   # returns \"db100000db\"<|endoftext|>"}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\ndef is_happy_helper(s, index, seen):\n    if index == len(s):\n        return True\n    if s[index] in seen:\n        return False\n    seen.add(s[index])\n    if s[index] == '0':\n        return False\n    return is_happy_helper(s, index + 1, seen)\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    seen = set()\n    return is_happy_helper(s, 0, seen)\n\n# Test cases\nprint(is_happy(\"a\"))  # False\nprint(is_happy(\"aa\"))  # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\"xyy\"))  # False<|endoftext|>"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\ndef grade_equation(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades<|endoftext|>"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Write a function that takes an integer n and returns True if n is a prime\n    number or False otherwise\n    Examples\n    is_prime(11) == True\n    is_prime(12) == False\n    is_prime(2) == True\n    is_prime(3) == False\n    \"\"\"\n\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string is a\n    palindrome or False otherwise\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('hello') == False\n    is_palindrome('A man, a plan, a canal: Panama') == True\n    \"\"\"\n\ndef longest_substring(string):\n    \"\"\"Write a function that takes a string and returns the length of the longest\n    substring that contains only one unique character\n    Examples\n    longest_substring('abcabcbb') == 3\n    longest_substring('bbbbb') == 1\n    longest_substring('pwwkew') == 3\n    \"\"\"\n\ndef longest_substring_without_repeating_characters(string):\n    \"\"\"Write a function that takes a string and returns the length of the longest\n    substring that contains only one unique character\n    Examples\n    longest_substring_without_repeating_characters('abcabcbb') == 3\n    longest_substring_without_repeating_characters('bbbbb') == 1\n    longest_substring_without_repeating_characters('pwwkew') == 3\n    \"\"\"\n\ndef longest_palindrome_substring(string):\n    \"\"\"Write a function that takes a string and returns the longest palindromic\n    substring in the string\n    Examples\n    longest_palindrome_substring('babad') == 'bab'\n    longest_palindrome_substring('cbbd') == 'bb'\n    longest_palindrome_substring('a') == 'a'\n    \"\"\"\n\ndef longest_common_substring(string1, string2):\n    \"\"\"Write a function that takes two strings and returns the longest common\n    substring between the two strings\n    Examples\n    longest_common_substring('abcd', 'dcba') == 'dcb'\n    longest_common_substring('abc', 'def') == ''\n    longest_common_substring('abc', 'abc') == 'abc'\n    \"\"\"\n\ndef longest_common_prefix(string1, string2):\n    \"\"\"Write a function that takes two strings and returns the longest common\n    prefix between the two strings\n    Examples\n    longest_common_prefix('abcd', 'dcba') == 'abc'\n    longest_common_prefix('abc', 'def') == ''\n    longest_common_prefix('abc', 'abc') == 'abc'\n    \"\"\"\n\ndef longest_common_suffix(string1, string2):\n    \"\"\"Write a function that takes two strings and returns the longest common\n    suffix between the two strings\n    Examples\n    longest_common_suffix('abcd', 'dcba') == 'dcb'\n    longest_common_suffix('abc', 'def') == ''\n    longest_common_suffix('abc', 'abc') == 'abc'\n    \"\"\"\n\ndef longest_common_subsequence(string1, string2):\n    \"\"\"Write a function that takes two strings and returns the longest common\n    subsequence between the two strings\n    Examples\n    longest_common_subsequence('abcd', 'dcba') == 'dcba'\n    longest_common_subsequence('abc', 'def') == ''\n    longest_common_subsequence('abc', 'abc') == 'abc'\n    \"\"\"\n\ndef longest_common_supersequence(string1, string2):\n    \"\"\"Write a function that takes two strings and returns the longest common\n    supersequence between the two strings\n    Examples\n    longest_common_supersequence('abcd', 'dcba') == 'dcba'\n    longest_common_supersequence('abc', 'def') == ''\n    longest_common_supersequence('abc', 'abc') == 'abc'\n    \"\"\"\n\ndef longest_common_substrings(string1, string2):\n    \"\"\"Write a function that takes two strings and returns a list of all the\n    longest common substrings between the two strings\n    Examples\n    longest_common_substrings('abcd', 'dcba') == ['dcb', 'cba']\n    longest_common_substrings('abc', 'def') == []\n    longest_common_substrings('abc', 'abc') == ['abc']\n    \"\"\""}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n# Example usage:\nn = 3\nprint(starts_one_ends(n))  # Output: 12<|endoftext|>"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n# Solution\ndef sum_of_digits(N):\n    binary = bin(N)[2:]\n    return sum(int(digit) for digit in binary)\n\n# Test cases\nprint(sum_of_digits(1000))  # Output: 1\nprint(sum_of_digits(150))   # Output: 6\nprint(sum_of_digits(147))   # Output: 12<|endoftext|>"}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n#     lst = [4, 2, 6, 7]\n    even_at_odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    return sum(even_at_odd_indices)\n\n# Test cases\nprint(add([4, 2, 6, 7])) # Output: 2<|endoftext|>"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n# Solution:\ndef anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)\n\n# Test cases\nprint(anti_shuffle('Hi')) # Output: 'Hi'\nprint(anti_shuffle('hello')) # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # Output: 'Hello!!!Wdlor'<|endoftext|>"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n#     if not lst:\n#         return []\n\n#     rows = []\n#     for i, row in enumerate(lst):\n#         if len(row) == x:\n#             rows.append((i, row.index(x)))\n#     rows.sort(key=lambda x: (x[0], -x[1]))\n#     return rows\n\n#     # Alternative solution using itertools\n#     return list(itertools.product(range(len(lst)), repeat=x))\n\n#     # Alternative solution using nested loops\n#     result = []\n#     for i, row in enumerate(lst):\n#         if len(row) == x:\n#             for j, col in enumerate(row):\n#                 if col == x:\n#                     result.append((i, j))\n#     result.sort(key=lambda x: (x[0], -x[1]))\n#     return result\n\n    # Alternative solution using nested loops\n    result = []\n    for i, row in enumerate(lst):\n        if len(row) == x:\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n# Test cases\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1)) # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nprint(get_row([], 1)) # []\nprint(get_row([[], [1], [1, 2, 3]], 3)) # [(2, 2)]<|endoftext|>"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\ndef rotate_alphabet(s):\n    \"\"\"Create a function rotate_alphabet that takes a string as an argument\n    and returns a string rotated by the given amount.\n    For example:\n    rotate_alphabet('hi', 2) returns 'lm'\n    rotate_alphabet('asdfghjkl', 3) returns 'ewhjklnop'\n    rotate_alphabet('gf', 1) returns 'kj'\n    rotate_alphabet('et', 0) returns 'ix'\n    \"\"\"\n\n# Test cases\nprint(encrypt('hi'))  # Output: 'lm'\nprint(encrypt('asdfghjkl'))  # Output: 'ewhjklnop'\nprint(encrypt('gf'))  # Output: 'kj'\nprint(encrypt('et'))  # Output: 'ix'\n\nprint(rotate_alphabet('hi', 2))  # Output: 'lm'\nprint(rotate_alphabet('asdfghjkl', 3))  # Output: 'ewhjklnop'\nprint(rotate_alphabet('gf', 1))  # Output: 'kj'\nprint(rotate_alphabet('et', 0))  # Output: 'ix'<|endoftext|>"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    second_smallest = None\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))  # Output: None\nprint(next_smallest([1, 1]))  # Output: None<|endoftext|>"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n# Solution:\n# We can iterate over the string and check if the first word is \"I\". If it is,\n# we increment a counter. We can then continue iterating over the string and\n# check if the next word starts with \"I\". If it does, we decrement the counter.\n# If the counter reaches 0, we have found a boredom.\n\ndef is_bored(S):\n    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                return 1\n    return 0\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1<|endoftext|>"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n# Solution\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n            return False\n    else:\n        return False<|endoftext|>"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n#     # Helper function to swap case of a character\n#     def swap_case(char):\n#         if char.isupper():\n#             return char.lower()\n#         else:\n#             return char.upper()\n\n#     # Helper function to replace vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n#     def replace_vowels(char):\n#         if char in 'aeiouAEIOU':\n#             index = 'aeiouAEIOU'.index(char)\n#             return 'aeiouAEIOU'[index+2]\n\n#     # Helper function to encode a message\n#     def encode_message(message):\n#         encoded_message = ''\n#         for char in message:\n#             if char.isalpha():\n#                 encoded_message += swap_case(char)\n#             else:\n#                 encoded_message += char\n#         return encoded_message\n\n#     # Helper function to count the number of occurrences of a character in a string\n#     def count_occurrences(string, char):\n#         count = 0\n#         for c in string:\n#             if c == char:\n#                 count += 1\n#         return count\n\n#     # Helper function to find the letter that appears 2 places ahead of a vowel in the english alphabet\n#     def find_letter(char):\n#         index = 'aeiouAEIOU'.index(char)\n#         return 'aeiouAEIOU'[index+2]\n\n#     # Helper function to replace vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n#     def replace_vowels(char):\n#         if char in 'aeiouAEIOU':\n#             index = 'aeiouAEIOU'.index(char)\n#             return 'aeiouAEIOU'[index+2]\n\n#     # Helper function to encode a message\n#     def encode_message(message):\n#         encoded_message = ''\n#         for char in message:\n#             if char.isalpha():\n#                 encoded_message += swap_case(char)\n#             elif char.islower():\n#                 encoded_message += replace_vowels(char)\n#             else:\n#                 encoded_message += char\n#         return encoded_message\n\n#     # Helper function to count the number of occurrences of a character in a string\n#     def count_occurrences(string, char):\n#         count = 0\n#         for c in string:\n#             if c == char:\n#                 count += 1\n#         return count\n\n#     # Helper function to find the letter that appears 2 places ahead of a vowel in the english alphabet\n#     def find_letter(char):\n#         index = 'aeiouAEIOU'.index(char)\n#         return 'aeiouAEIOU'[index+2]\n\n#     # Helper function to replace vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n#     def replace_vowels(char):\n#         if char in 'aeiouAEIOU':\n#             index = 'aeiouAEIOU'.index(char)\n#             return 'aeiouAEIOU'[index+2]\n\n#     # Helper function to encode a message\n#     def encode_message(message):\n#         encoded_message = ''\n#         for char in message:\n#             if char.isalpha():\n#                 encoded_message += swap_case(char)\n#             elif char.islower():\n#                 encoded_message += replace_vowels(char)\n#             else:\n#                 encoded_message += char\n#         return encoded_message\n\n#     # Helper function to count the number of occurrences of a character in a string\n#     def count_occurrences(string, char):\n#         count = 0\n#         for c in string:\n#             if c == char:\n#                 count +="}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n# Solution\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n    return max_prime\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef main():\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    max_prime = largest_prime(lst)\n    print(sum_of_digits(max_prime))\n\nif __name__ == \"__main__\":\n    main()<|endoftext|>"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n# Solution:\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            continue\n        if key.isupper():\n            return False\n    return True\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # True<|endoftext|>"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is a prime number, and False otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(20) => True\n    is_prime(1) => False\n    is_prime(18) => True\n    \"\"\"\n\ndef count_primes(n):\n    \"\"\"Implement a function that takes an non-negative integer n and returns the number of prime numbers less than n.\n    for example:\n    count_primes(5) => 2\n    count_primes(11) => 4\n    count_primes(0) => 0\n    count_primes(20) => 7\n    count_primes(1) => 0\n    count_primes(18) => 4\n    \"\"\"\n\ndef main():\n    n = int(input(\"Enter a non-negative integer: \"))\n    print(\"Counting up to\", n, \":\", count_up_to(n))\n    print(\"Is 5 prime?\", is_prime(5))\n    print(\"Counting primes less than\", n, \":\", count_primes(n))\n\nif __name__ == \"__main__\":\n    main()<|endoftext|>"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\ndef unit_digits(n):\n    \"\"\"Return a list of the unit digits of the given number.\"\"\"\n    return [int(d) for d in str(n) if int(d)!= 0]\n\ndef multiply_unit_digits(a, b):\n    \"\"\"Return the product of the unit digits of the given numbers.\"\"\"\n    return sum(unit_digits(a) * unit_digits(b))\n\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    result = multiply_unit_digits(a, b)\n    print(\"The product of the unit digits of\", a, \"and\", b, \"is\", result)\n\nif __name__ == \"__main__\":\n    main()<|endoftext|>"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n# Solution:\ndef count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg'))  # Output: 0\nprint(count_upper('dBBE'))  # Output: 0<|endoftext|>"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n# Solution:\n# We can use the built-in `round()` function to round a number to the nearest integer.\n# However, we need to make sure that the number is not equidistant from two integers.\n# To do this, we can check if the absolute difference between the number and the nearest integer\n# is greater than or equal to 0.5. If it is, we need to round the number up or down.\n#\n# Here's the code:\n\ndef closest_integer(value):\n    # Convert the value to a float\n    num = float(value)\n\n    # Round the number to the nearest integer\n    rounded = round(num)\n\n    # Check if the number is equidistant from two integers\n    if abs(rounded - num) >= 0.5:\n        # If it is, round the number up or down\n        if num > 0:\n            rounded += 1\n        else:\n            rounded -= 1\n\n    return rounded\n\n# Test cases\nprint(closest_integer(\"10\"))  # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15<|endoftext|>"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n# Solution\ndef words_string(s):\n    return s.split(\",\")<|endoftext|>"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n# Solution:\n# We can solve this problem by using the fact that the greatest even integer\n# less than or equal to a given number x is the smallest odd integer greater\n# than or equal to x. Therefore, we can iterate through all odd integers greater\n# than or equal to x and return the smallest one that is less than or equal to y.\n\ndef choose_num(x, y):\n    for i in range(x, y+1, 2):\n        if i <= y:\n            return i\n    return -1\n\n# Test cases\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1<|endoftext|>"}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n# Solution:\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return str(round(sum(range(n, m+1)) / (m-n+1)))\n\n# Test cases\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\"<|endoftext|>"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n#     # Remove even digits from the list\n#     x = [num for num in x if num % 2!= 0]\n\n#     # Sort the list in increasing order\n#     x.sort()\n\n#     return x\n\n#     # Alternative solution using set\n#     return sorted(set(x) - set([num for num in x if num % 2 == 0]))\n\n    # Using a dictionary to store the count of each digit\n    digit_count = {}\n    for num in x:\n        for digit in str(num):\n            digit_count[digit] = digit_count.get(digit, 0) + 1\n\n    # Filter out the even digits\n    unique_digits = [num for num in x if digit_count[str(num)[-1]] == 1]\n\n    return unique_digits\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []<|endoftext|>"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n#     # Check if the array is empty\n#     if not arr:\n#         return []\n\n#     # Check if the array has any strange number\n#     for num in arr:\n#         if not isinstance(num, int):\n#             return ['One']\n\n    # Sort the array\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each digit by its corresponding name\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(DIGITS[num])\n        else:\n            result.append('One')\n\n    return result\n\n# Test cases\narr1 = [2, 1, 1, 4, 5, 8, 2, 3]\narr2 = []\narr3 = [1, -1, 55]\n\nprint(by_length(arr1))  # Output: ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\nprint(by_length(arr2))  # Output: []\nprint(by_length(arr3))  # Output: ['One']<|endoftext|>"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n# Solution:\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test cases\nprint(f(5))  # Output: [1, 2, 6, 24, 15]<|endoftext|>"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n# Solution:\n# We can solve this problem by iterating over the array and keeping track of the sum of digits.\n# If the sum of digits is greater than 0, we increment a counter.\n# If the number is negative, we subtract the first signed digit from the sum of digits.\n# We can use the built-in `abs()` function to get the absolute value of the first signed digit.\n\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))  # 0\nprint(count_nums([-1, 11, -11]))  # 1\nprint(count_nums([1, 1, 2]))  # 3<|endoftext|>"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\ndef right_shift(arr, n):\n    \"\"\"Perform n right shifts on the given array\"\"\"\n    for i in range(n):\n        arr.append(arr.pop(0))\n    return arr\n\ndef is_sorted(arr):\n    \"\"\"Check if the given array is sorted in non-decreasing order\"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef move_one_ball_helper(arr, n):\n    \"\"\"Helper function to check if it is possible to get an array sorted in \n    non-decreasing order by performing n right shift operations\"\"\"\n    if n == 0:\n        return is_sorted(arr)\n    if n % 2 == 0:\n        return move_one_ball_helper(right_shift(arr, n//2), n//2)\n    else:\n        return move_one_ball_helper(right_shift(arr, n//2+1), n//2)\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    return move_one_ball_helper(arr, len(arr))\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2])) # True\nprint(move_one_ball([3, 5, 4, 1, 2])) # False<|endoftext|>"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n# Solution:\n# We can solve this problem by iterating through the two lists and checking if\n# it is possible to exchange any two elements to make the first list of even numbers.\n# We can do this by comparing the first element of each list and checking if the\n# difference between the two elements is even. If it is, we can exchange the two\n# elements and check if the first list of even numbers is valid. If it is, we can\n# return \"YES\". If not, we can return \"NO\".\n\ndef exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if is_valid(lst1):\n                return \"YES\"\n            lst1[i], lst2[i] = lst1[i], lst2[i]\n    return \"NO\"\n\ndef is_valid(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] % 2 == 0 and lst[i + 1] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # \"NO\"<|endoftext|>"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\ndef test_histogram():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b b a') == {'b': 4}\n    assert histogram('') == {}<|endoftext|>"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n# Solution\ndef reverse_delete(s,c):\n    # Initialize result string and flag\n    result = \"\"\n    flag = False\n\n    # Iterate through s\n    for i in range(len(s)):\n        # If current character is not equal to any character in c\n        if s[i] not in c:\n            # Append current character to result string\n            result += s[i]\n        else:\n            # If current character is equal to any character in c, set flag to True\n            flag = True\n\n    # Check if result string is palindrome\n    if result == result[::-1]:\n        return (result, flag)\n    else:\n        return (result, False)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)<|endoftext|>"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n#     # Create a list of tuples containing the string and its length\n#     string_lengths = [(s, len(s)) for s in lst]\n\n#     # Create a list of tuples containing the string and its number of odd digits\n#     odd_digits = [(s, sum(1 for c in s if c.isdigit() and int(c) % 2!= 0)) for s in lst]\n\n#     # Create a list of tuples containing the string and its number of even digits\n#     even_digits = [(s, sum(1 for c in s if c.isdigit() and int(c) % 2 == 0)) for s in lst]\n\n#     # Combine the two lists of tuples\n#     combined = [(s, len(s), odd_digits[i][1], even_digits[i][1]) for i, (s, len_s) in enumerate(string_lengths)]\n\n#     # Create a list of strings containing the desired output\n#     output = [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digits[i][1], len_s, odd_digits[i][0], even_digits[i][0]) for i, (len_s, odd_count, even_count) in enumerate(combined)]\n\n#     return output\n\n    # Create a list of tuples containing the string and its length\n    string_lengths = [(s, len(s)) for s in lst]\n\n    # Create a list of tuples containing the string and its number of odd digits\n    odd_digits = [(s, sum(1 for c in s if c.isdigit() and int(c) % 2!= 0)) for s in lst]\n\n    # Create a list of tuples containing the string and its number of even digits\n    even_digits = [(s, sum(1 for c in s if c.isdigit() and int(c) % 2 == 0)) for s in lst]\n\n    # Combine the two lists of tuples\n    combined = [(s, len(s), odd_digits[i][1], even_digits[i][1]) for i, (s, len_s) in enumerate(string_lengths)]\n\n    # Create a list of strings containing the desired output\n    output = [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digits[i][1], len_s, odd_digits[i][0], even_digits[i][0]) for i, (len_s, odd_count, even_count) in enumerate(combined)]\n\n    return output<|endoftext|>"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n#     # Using Kadane's algorithm\n#     max_so_far = nums[0]\n#     min_so_far = nums[0]\n#     for num in nums[1:]:\n#         max_so_far = max(max_so_far + num, num)\n#         min_so_far = min(min_so_far + num, num)\n#     return max_so_far\n\n#     # Using Kadane's algorithm with O(n) space complexity\n#     max_so_far = nums[0]\n#     min_so_far = nums[0]\n#     for num in nums[1:]:\n#         max_so_far = max(max_so_far + num, num)\n#         min_so_far = min(min_so_far + num, num)\n#     return max_so_far - min_so_far\n\n#     # Using Kadane's algorithm with O(n) space complexity and O(1) time complexity\n#     max_so_far = nums[0]\n#     for num in nums[1:]:\n#         max_so_far = max(max_so_far + num, num)\n#     return max_so_far\n\n    # Using Kadane's algorithm with O(n) space complexity and O(1) time complexity\n    max_so_far = nums[0]\n    for num in nums[1:]:\n        max_so_far = max(max_so_far + num, num)\n    return max_so_far\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6<|endoftext|>"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n# Solution:\n# We can solve this problem by using dynamic programming. We will create a 2D array dp where dp[i][j] represents the maximum number of times we need to lower the buckets to empty the well at row i and column j.\n# We will initialize dp[i][j] to 0 for all i and j.\n# We will then iterate through the grid and for each well, we will iterate through the columns from left to right.\n# For each column, we will calculate the maximum number of times we need to lower the buckets to empty the well.\n# We will do this by iterating through the rows from top to bottom and for each row, we will calculate the maximum number of times we need to lower the buckets to empty the well.\n# We will then update the dp[i][j] value with the maximum of the current value and the maximum number of times we need to lower the buckets to empty the well.\n# Finally, we will return the maximum value in the dp array.\n\ndef max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                # Calculate the maximum number of times we need to lower the buckets to empty the well\n                max_times = 0\n                for k in range(i, -1, -1):\n                    if grid[k][j] == 0:\n                        break\n                    max_times += 1\n                for k in range(j, -1, -1):\n                    if grid[i][k] == 0:\n                        break\n                    max_times += 1\n                dp[i][j] = max_times\n\n                # Calculate the maximum number of times we need to lower the buckets to empty the well\n                max_times = 0\n                for k in range(i, n):\n                    if grid[k][j] == 0:\n                        break\n                    max_times += 1\n                for k in range(j, m):\n                    if grid[i][k] == 0:\n                        break\n                    max_times += 1\n                dp[i][j] = max(dp[i][j], max_times)\n\n    # Return the maximum value in the dp array\n    return max(dp[i][j] for i in range(n) for j in range(m))\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0<|endoftext|>"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n# Solution:\ndef count_consonants(word):\n    \"\"\"Helper function to count the number of consonants in a word\"\"\"\n    return sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n\ndef select_words_with_n_consonants(s, n):\n    \"\"\"Main function to select words with n consonants\"\"\"\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if count_consonants(word) == n:\n            selected_words.append(word)\n    return selected_words\n\n# Test cases\nprint(select_words_with_n_consonants(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\nprint(select_words_with_n_consonants(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\nprint(select_words_with_n_consonants(\"simple white space\", 2))  # Output: []\nprint(select_words_with_n_consonants(\"Hello world\", 4))  # Output: [\"world\"]\nprint(select_words_with_n_consonants(\"Uncle sam\", 3))  # Output: [\"Uncle\"]<|endoftext|>"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n# Solution:\ndef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    left_vowel = ''\n    right_vowel = ''\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            left_vowel = word[i]\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            right_vowel = word[i]\n            break\n    if left_vowel == '' or right_vowel == '':\n        return ''\n    if left_vowel == right_vowel:\n        return left_vowel\n    if abs(ord(left_vowel) - ord(right_vowel)) == 1:\n        return left_vowel\n    if abs(ord(left_vowel) - ord(right_vowel)) == 2:\n        return right_vowel\n    return ''\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\")) # Output: \"u\"\nprint(get_closest_vowel(\"FULL\")) # Output: \"U\"\nprint(get_closest_vowel(\"quick\")) # Output: \"\"\nprint(get_closest_vowel(\"ab\")) # Output: \"\"<|endoftext|>"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n# Solution:\n# We can solve this problem by using dynamic programming. We will create a 2D\n# array dp where dp[i][j] will be True if it is possible to concatenate the\n# first i strings with the last j strings to form a valid string.\n#\n# We will fill the dp array in a bottom-up manner. For each position i, we will\n# check if it is possible to concatenate the first i-1 strings with the last j\n# strings. If it is possible, we will check if the resulting string is good. If\n# it is good, we will set dp[i][j] to True.\n#\n# If it is not possible to concatenate the first i-1 strings with the last j\n# strings, we will set dp[i][j] to False.\n#\n# Finally, we will check if dp[0][n-1] is True. If it is, we will return 'Yes'.\n# Otherwise, we will return 'No'.\n\ndef match_parens(lst):\n    n = len(lst)\n    dp = [[False] * n for _ in range(n)]\n\n    for i in range(n):\n        if lst[i] == '(':\n            dp[i][i] = True\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if lst[i] == '(' and lst[j] == ')':\n                dp[i][j] = dp[i+1][j-1]\n            elif lst[i] == ')' and lst[j] == '(':\n                dp[i][j] = dp[i+1][j]\n\n    if dp[0][n-1]:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))  # Output: 'No'<|endoftext|>"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n# Solution:\n# We can solve this problem by using a min heap. We will push the first k elements of the array into the heap. Then, we will pop the maximum element from the heap and add it to the result list. We will continue this process until the heap has only k elements.\n\ndef max_heapify(arr, n, i):\n    \"\"\"\n    Helper function to max heapify an array.\n    \"\"\"\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        max_heapify(arr, n, largest)\n\ndef build_max_heap(arr):\n    \"\"\"\n    Build a max heap from an array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        max_heapify(arr, n, i)\n\ndef max_heap_extract_max(arr):\n    \"\"\"\n    Extract the maximum element from a max heap.\n    \"\"\"\n    n = len(arr)\n    max_val = arr[0]\n    arr[0] = arr[n - 1]\n    arr.pop()\n    max_heapify(arr, n - 1, 0)\n    return max_val\n\ndef max_heap_pop_max(arr):\n    \"\"\"\n    Pop the maximum element from a max heap.\n    \"\"\"\n    max_val = max_heap_extract_max(arr)\n    arr.pop()\n    return max_val\n\ndef max_heap_pop_k_max(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a max heap.\n    \"\"\"\n    while k > 0:\n        max_heap_extract_max(arr)\n        k -= 1\n\ndef max_heap_pop_k_max_from_array(arr, k):\n    \"\"\"\n    Pop the k maximum elements from an array.\n    \"\"\"\n    max_heap_pop_k_max(arr, k)\n    return arr\n\ndef max_heap_pop_k_max_from_heap(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a max heap.\n    \"\"\"\n    max_heap_pop_k_max(arr, k)\n    return arr\n\ndef max_heap_pop_k_max_from_list(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a list.\n    \"\"\"\n    max_heap_pop_k_max(arr, k)\n    return arr\n\ndef max_heap_pop_k_max_from_tuple(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a tuple.\n    \"\"\"\n    max_heap_pop_k_max(arr, k)\n    return arr\n\ndef max_heap_pop_k_max_from_set(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a set.\n    \"\"\"\n    max_heap_pop_k_max(arr, k)\n    return arr\n\ndef max_heap_pop_k_max_from_dict(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a dictionary.\n    \"\"\"\n    max_heap_pop_k_max(arr, k)\n    return arr\n\ndef max_heap_pop_k_max_from_sorted_list(arr, k):\n    \"\"\"\n    Pop the k maximum elements from a sorted list.\n    \"\"\"\n    max_heap_pop_k_max(arr"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n#     odd_sum = 0\n#     for i in range(len(lst)):\n#         if lst[i] % 2!= 0:\n#             odd_sum += lst[i]\n#     return odd_sum\n\n#     odd_sum = 0\n#     for i in range(len(lst)):\n#         if i % 2!= 0:\n#             odd_sum += lst[i]\n#     return odd_sum\n\n    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            odd_sum += lst[i]\n    return odd_sum<|endoftext|>"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n#     # Base case: if n is 1, return [1]\n#     if n == 1:\n#         return [1]\n\n#     # Initialize variables\n#     prev_num = n\n#     collatz_seq = []\n\n#     # Loop until n is 1\n#     while prev_num!= 1:\n#         # If prev_num is even, add half of prev_num to collatz_seq\n#         if prev_num % 2 == 0:\n#             collatz_seq.append(prev_num // 2)\n#         # If prev_num is odd, add 3 times prev_num plus 1 to collatz_seq\n#         else:\n#             collatz_seq.append(3 * prev_num + 1)\n#         # Update prev_num\n#         prev_num = collatz_seq[-1]\n\n#     # Return collatz_seq\n#     return collatz_seq\n\n#     # Alternative solution using recursion\n#     def get_odd_collatz_helper(n):\n#         if n == 1:\n#             return [1]\n#         else:\n#             return get_odd_collatz_helper(n // 2) + [3 * n + 1]\n\n#     return get_odd_collatz_helper(n)\n\n#     # Another alternative solution using list comprehension\n#     return sorted([x for x in range(1, n + 1) if x % 2!= 0])<|endoftext|>"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n# Solution:\ndef valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the year is a valid four-digit number\n    try:\n        year = int(year)\n        if year < 1000 or year > 9999:\n            return False\n    except ValueError:\n        return False\n\n    # Check if the month is a valid number between 1 and 12\n    try:\n        month = int(month)\n        if month < 1 or month > 12:\n            return False\n    except ValueError:\n        return False\n\n    # Check if the day is a valid number between 1 and the number of days in the month\n    try:\n        day = int(day)\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        else:\n            if day < 1 or day > 31:\n                return False\n    except ValueError:\n        return False\n\n    # If all the rules are satisfied, return True\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False<|endoftext|>"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\ndef split_words(txt):\n    words = txt.split()\n    if len(words) == 1:\n        return words[0]\n    else:\n        return words\n\n# Test cases\nprint(split_words(\"Hello world!\")) # [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\")) # [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\")) # 3<|endoftext|>"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n# Solution\ndef is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False<|endoftext|>"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n# Solution:\n# We can solve this problem by first checking if the two intervals intersect.\n# If they don't intersect, then the length of the intersection is 0, which is not a prime number.\n# If they intersect, then we can calculate the length of the intersection by subtracting the start of the first interval from the end of the second interval.\n# If the length of the intersection is a prime number, then it is a prime number.\n# If the length of the intersection is not a prime number, then it is not a prime number.\n\n# Let's implement this solution in Python.\n\ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number, otherwise False.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the two intervals intersect.\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Calculate the length of the intersection.\n    length = end1 - start2\n\n    # Check if the length of the intersection is a prime number.\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases.\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"<|endoftext|>"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n# Solution:\n# We can solve this problem using dynamic programming. We will create a 2D array dp\n# where dp[i][j] represents the minimum path of length k that starts from cell (i, j).\n# We will fill in the dp array using the following recurrence relation:\n# dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n# If we start from cell (i, j) and move to any of its neighbor cells, we will\n# choose the cell with the smaller value.\n# We will also keep track of the minimum path of length k that starts from any cell.\n# We will fill in the dp array using the following recurrence relation:\n# dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n# If we start from any cell and move to cell (i, j), we will choose the cell with the smaller value.\n# We will return the minimum path of length k that starts from any cell.\n\n# Let's implement this solution in Python.\n\ndef minPath(grid, k):\n    N = len(grid)\n    dp = [[float('inf')] * N for _ in range(N)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[N-1][N-1]\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3)) # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1)) # Output: [1]<|endoftext|>"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n#     if n == 1:\n#         return [1]\n#     elif n == 2:\n#         return [1, 3]\n#     elif n == 3:\n#         return [1, 3, 2]\n#     else:\n#         tri_list = [1, 3, 2]\n#         for i in range(3, n + 1):\n#             tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n#         return tri_list\n\n#     # Using recursion\n#     def tri_helper(n, prev_2, prev_1, curr):\n#         if n == 1:\n#             return [curr]\n#         elif n == 2:\n#             return [curr, prev_1]\n#         elif n == 3:\n#             return [curr, prev_1, prev_2]\n#         else:\n#             return tri_helper(n - 1, prev_2, prev_1, curr + prev_1 + prev_2)\n\n#     return tri_helper(n, 1, 3, 1)\n\n    # Using dynamic programming\n    def tri_helper(n, prev_2, prev_1, curr):\n        if n == 1:\n            return [curr]\n        elif n == 2:\n            return [curr, prev_1]\n        elif n == 3:\n            return [curr, prev_1, prev_2]\n        else:\n            return tri_helper(n - 1, prev_2, prev_1, curr + prev_1 + prev_2)\n\n    tri_list = [1, 3, 2]\n    for i in range(3, n + 1):\n        tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n    return tri_list[:n + 1]\n\n\n# Test cases\nprint(tri(3))  # Output: [1, 3, 2, 8]\nprint(tri(4))  # Output: [1, 3, 2, 8, 13]\nprint(tri(5))  # Output: [1, 3, 2, 8, 13, 21]\nprint(tri(6))  # Output: [1, 3, 2, 8, 13, 21, 34]\nprint(tri(7))  # Output: [1, 3, 2, 8, 13, 21, 34, 55]\nprint(tri(8))  # Output: [1, 3, 2, 8, 13, 21, 34, 55, 89]\nprint(tri(9))  # Output: [1, 3, 2, 8, 13, 21, 34, 55, 89, 144]\nprint(tri(10))  # Output: [1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233]\nprint(tri(11))  # Output: [1, 3,"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n#     if n < 1:\n#         return 0\n\n#     odd_digits = 1\n#     while n > 0:\n#         digit = n % 10\n#         if digit % 2 == 1:\n#             odd_digits *= digit\n#         n //= 10\n\n#     return odd_digits if odd_digits > 0 else 0\n\n# def digits(n):\n#     \"\"\"Given a positive integer n, return the product of the odd digits.\n#     Return 0 if all digits are even.\n#     For example:\n#     digits(1)  == 1\n#     digits(4)  == 0\n#     digits(235) == 15\n#     \"\"\"\n\n#     if n < 1:\n#         return 0\n\n#     odd_digits = 1\n#     while n > 0:\n#         digit = n % 10\n#         if digit % 2 == 1:\n#             odd_digits *= digit\n#         n //= 10\n\n#     return odd_digits if odd_digits > 0 else 0\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n < 1:\n        return 0\n\n    odd_digits = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits *= digit\n        n //= 10\n\n    return odd_digits if odd_digits > 0 else 0\n\n# Test cases\nprint(digits(1))  # Output: 1\nprint(digits(4))  # Output: 0\nprint(digits(235))  # Output: 15<|endoftext|>"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\ndef is_valid_subsequence(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\ndef is_nested(string):\n    if not is_valid_subsequence(string):\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True<|endoftext|>"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n# Solution:\ndef sum_squares(lst):\n    return sum(int(ceil(x))**2 for x in lst)\n\n# Test cases\nprint(sum_squares([1,2,3])) # Output: 14\nprint(sum_squares([1,4,9])) # Output: 98\nprint(sum_squares([1,3,5,7])) # Output: 84\nprint(sum_squares([1.4,4.2,0])) # Output: 29\nprint(sum_squares([-2.4,1,1])) # Output: 6<|endoftext|>"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n# Solution\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    else:\n        return False<|endoftext|>"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n# Solution:\n# We can solve this problem by iterating through the array and keeping track of\n# the largest index of an element which is not greater than or equal to the\n# element immediately preceding it. We can do this by keeping track of the\n# largest index seen so far and comparing it to the current index. If the current\n# index is greater than or equal to the largest index seen so far, we update\n# the largest index seen so far.\n\n# We can also use a dictionary to store the indices of the elements in the array.\n# We can then use this dictionary to find the largest index of an element which\n# is not greater than or equal to the element immediately preceding it.\n\ndef can_arrange(arr):\n    largest_index = -1\n    indices = {}\n\n    for i, num in enumerate(arr):\n        if num not in indices:\n            indices[num] = i\n        if indices[num] < largest_index:\n            largest_index = indices[num]\n\n    return largest_index if largest_index!= -1 else -1\n\n# Test cases\nprint(can_arrange([1,2,4,3,5])) # Output: 3\nprint(can_arrange([1,2,3])) # Output: -1<|endoftext|>"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n# Solution:\n# We can solve this problem by iterating through the list and keeping track of the largest and smallest integers seen so far. We can initialize these variables to None and then iterate through the list. If we encounter a negative integer, we update the largest variable to that integer. If we encounter a positive integer, we update the smallest variable to that integer. Finally, we return a tuple containing the largest and smallest integers seen so far.\n\ndef largest_smallest_integers(lst):\n    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n        elif num > 0:\n            if smallest is None or num < smallest:\n                smallest = num\n    return (largest, smallest)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) # Output: (None, 1)\nprint(largest_smallest_integers([])) # Output: (None, None)\nprint(largest_smallest_integers([0])) # Output: (None, None)<|endoftext|>"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\ndef compare_one(a, b):\n    if type(a) == type(b):\n        return a\n    elif type(a) == int and type(b) == float:\n        return b\n    elif type(a) == float and type(b) == int:\n        return a\n    elif type(a) == str and type(b) == str:\n        return a\n    else:\n        return None<|endoftext|>"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n#     n = 8\n#     if n % 2 == 0:\n#         return False\n#     for i in range(2, int(n**0.5)+1):\n#         if n % i == 0:\n#             return False\n#     return True\n\n    n = 8\n    if n % 2 == 0:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    if n % 4 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True<|endoftext|>"}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n# Solution:\n# We can use the formula for the factorial of a positive integer n as:\n# n! = n * (n-1)!\n# We can use this formula to calculate the factorial of a given integer n.\n# We can then multiply this factorial by the factorial of n-1 and n-2 and so on,\n# until we reach the factorial of 1.\n\n# We can implement this algorithm in Python as follows:\n\ndef special_factorial(n):\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Recursive case: calculate the factorial of n-1 and n-2 and so on\n    factorial = special_factorial(n-1) * special_factorial(n-2) *... * special_factorial(1)\n\n    # Multiply the factorial of n by the factorial of n-1 and n-2 and so on\n    return n * factorial\n\n# Test the function:\nprint(special_factorial(4))  # Output: 288<|endoftext|>"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n# Solution:\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    \n    return text<|endoftext|>"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n# Solution:\ndef file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of the allowed extensions\n    after_dot = file_name.split('.')[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'<|endoftext|>"}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n#     # Step 1: Initialize the sum variable to 0\n#     sum = 0\n\n#     # Step 2: Loop through the list\n#     for i in range(len(lst)):\n\n#         # Step 3: Check if the index is a multiple of 3 or 4\n#         if i % 3 == 0 or i % 4 == 0:\n\n#             # Step 4: Square the integer entry if its index is a multiple of 3\n#             if i % 3 == 0:\n#                 lst[i] = lst[i] ** 2\n\n#             # Step 5: Cube the integer entry if its index is a multiple of 4 and not a multiple of 3\n#             if i % 4 == 0 and i % 3!= 0:\n#                 lst[i] = lst[i] ** 3\n\n#     # Step 6: Return the sum of all entries in the list\n#     return sum(lst)\n\n#     # Alternative solution using list comprehension\n#     return sum([x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 and i % 3!= 0 else x for i, x in enumerate(lst)])\n\n    # Alternative solution using list comprehension and lambda function\n    return sum(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 and i % 3!= 0 else x for i, x in enumerate(lst))\n\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126<|endoftext|>"}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_words(sentence):\n    words = sentence.split()\n    prime_lengths = [len(word) for word in words if is_prime(len(word))]\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\n# Test cases\nprint(prime_words(\"This is a test\"))  # Output: \"is\"\nprint(prime_words(\"lets go for swimming\"))  # Output: \"go for\"<|endoftext|>"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False<|endoftext|>"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n# Solution:\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 == 1 and (num % 10) % 2 == 1:\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15])) # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Output: 2<|endoftext|>"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n# Solution:\n# We can solve this problem by iterating through all possible triples (a[i], a[j], a[k])\n# and checking if their sum is a multiple of 3. If it is, we increment a counter.\n# We can use a nested loop to iterate through all possible pairs of indices i and j.\n# We can also use a set to keep track of the indices we have already checked.\n\ndef count_valid_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i < j:\n                for k in range(j + 1, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        count += 1\n    return count\n\n# Test the function\nprint(count_valid_triples(5))  # Output: 1<|endoftext|>"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n# Planet names\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Function to find the closest planet to the sun\ndef closest_planet(planet1, planet2):\n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the index of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Find the orbits of planet1 and planet2\n    orbit1 = planets[index1:index2+1]\n    orbit2 = planets[index2:index1+1]\n    \n    # Find the common orbits\n    common_orbits = set(orbit1) & set(orbit2)\n    \n    # Sort the common orbits by proximity to the sun\n    sorted_orbits = sorted(common_orbits, key=lambda x: planets.index(x))\n    \n    return sorted_orbits\n\n# Test cases\nprint(closest_planet(\"Jupiter\", \"Neptune\")) # Output: (\"Saturn\", \"Uranus\")\nprint(closest_planet(\"Earth\", \"Mercury\")) # Output: (\"Venus\")\nprint(closest_planet(\"Mercury\", \"Uranus\")) # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")<|endoftext|>"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\ndef list_sort(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Remove odd-length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n\n    return lst\n\n# Test cases\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]<|endoftext|>"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"A simple function to check if a number is prime or not.\n\n    Examples:\n    is_prime(7) == True\n    is_prime(15) == False\n    is_prime(100) == True\n    \n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y_prime(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y_prime(7, 34, 12) == 34\n    for x_or_y_prime(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))  # Output: 5\n\nprint(x_or_y_prime(7, 34, 12))  # Output: 34\nprint(x_or_y_prime(15, 8, 5))  # Output: 5<|endoftext|>"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))  # Output: 0\nprint(double_the_difference([9, -2]))  # Output: 81\nprint(double_the_difference([0]))  # Output: 0<|endoftext|>"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n#     # check if the lengths are equal\n#     if len(game)!= len(guess):\n#         return \"Arrays must be of equal length\"\n\n#     # initialize an empty array to store the differences\n#     differences = []\n\n#     # loop through each index in the arrays\n#     for i in range(len(game)):\n#         # if the guess is correct, add 0 to the differences array\n#         if game[i] == guess[i]:\n#             differences.append(0)\n\n#         # if the guess is incorrect, add the absolute difference to the differences array\n#         else:\n#             differences.append(abs(game[i] - guess[i]))\n\n#     return differences\n\n# def compare(game,guess):\n#     \"\"\"I think we all remember that feeling when the result of some long-awaited\n#     event is finally known. The feelings and thoughts you have at that moment are\n#     definitely worth noting down and comparing.\n#     Your task is to determine if a person correctly guessed the results of a number of matches.\n#     You are given two arrays of scores and guesses of equal length, where each index shows a match. \n#     Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n#     the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n#     example:\n\n#     compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n#     compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n#     \"\"\"\n\n#     # check if the lengths are equal\n#     if len(game)!= len(guess):\n#         return \"Arrays must be of equal length\"\n\n#     # initialize an empty array to store the differences\n#     differences = []\n\n#     # loop through each index in the arrays\n#     for i in range(len(game)):\n#         # if the guess is correct, add 0 to the differences array\n#         if game[i] == guess[i]:\n#             differences.append(0)\n\n#         # if the guess is incorrect, add the absolute difference to the differences array\n#         else:\n#             differences.append(abs(game[i] - guess[i]))\n\n#     return differences\n\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1"}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n# Solution:\n# We can iterate over the list of extensions and calculate the strength of each extension.\n# Then, we can find the strongest extension and return the class name followed by the strongest extension name.\n\ndef strongest_extension(class_name, extensions):\n    strengths = []\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strengths.append(CAP - SM)\n    strongest_index = strengths.index(max(strengths))\n    return f\"{class_name}.{extensions[strongest_index]}\"\n\n# Test the function with the example\nprint(strongest_extension('my_class', ['AA', 'Be', 'CC'])) # Output: my_class.AA<|endoftext|>"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Check if the second word is a substring of the first word\n    if b in a:\n        return True\n\n    # Check if the second word is a substring of any of the rotations of the first word\n    for i in range(len(a)):\n        if b in a[i:] + a[:i]:\n            return True\n\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern_check(\"efef\",\"eeff\")) # False\nprint(cycpattern_check(\"himenss\",\"simen\")) # True<|endoftext|>"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n# Solution:\n# We can solve this problem by iterating through each digit of the number and checking if it is even or odd.\n# We can use the modulo operator to check if a number is even or odd. If the remainder of the number divided by 2 is 0, then the number is even, otherwise it is odd.\n# We can then count the number of even and odd digits and return a tuple with the counts.\n\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)<|endoftext|>"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n#     if a + b > c and a + c > b and b + c > a:\n#         return True\n#     else:\n#         return False\n\n    # Using Heron's formula\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    if area == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False<|endoftext|>"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef unique_chars(word):\n    \"\"\"Write a function that accepts a string.\n    The function should return the number of unique characters in the string.\n\n    unique_chars(\"hello\") == 5\n    unique_chars(\"world\") == 5\n    unique_chars(\"python\") == 6\n    \"\"\"\n\ndef find_max_unique_chars(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_unique_chars([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_unique_chars([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_unique_chars([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars_count = unique_chars(word)\n        if unique_chars_count > max_unique_chars:\n            max_word = word\n            max_unique_chars = unique_chars_count\n\n    return max_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\",\"cc\"]))  # Output: \"\"aaaaaaa\"\n\nprint(find_max_unique_chars([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max_unique_chars([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max_unique_chars([\"aaaaaaa\", \"bb\",\"cc\"]))  # Output: \"\"aaaaaaa\"<|endoftext|>"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n# Test cases\nprint(eat(5, 6, 10)) # [11, 4]\nprint(eat(4, 8, 9)) # [12, 1]\nprint(eat(1, 10, 10)) # [11, 0]\nprint(eat(2, 11, 5)) # [7, 0]<|endoftext|>"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n#     if len(operator)!= len(operand) - 1:\n#         raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n\n#     if len(operand) < 2:\n#         raise ValueError(\"Operand list has less than two elements.\")\n\n#     if not operator:\n#         raise ValueError(\"Operator list is empty.\")\n\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError(\"Invalid operator.\")\n\n    return result<|endoftext|>"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n# Solution:\ndef reverse_case(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\n# Test cases\nprint(reverse_case(\"1234\")) # Output: \"4321\"\nprint(reverse_case(\"ab\")) # Output: \"AB\"\nprint(reverse_case(\"#a@C\")) # Output: \"#A@c\"<|endoftext|>"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n#     if not text:\n#         return None\n\n    import hashlib\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n\n\n# Test cases\nprint(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')\nprint(string_to_md5('') is None)\nprint(string_to_md5('abc') == '900150983cd24fb0d6963f7d28e17f72')\nprint(string_to_md5('12345678901234567890123456789012') == 'd41d8cd98f00b204e9800998ecf8427e')<|endoftext|>"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n<|endoftext|>"}
