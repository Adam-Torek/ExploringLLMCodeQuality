"""
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""

def amicable_numbers_sum(n):
    """
    >>> amicable_numbers_sum(999)
    504
    """
    return sum(amicable_numbers(n))

def amicable_numbers(n):
    """
    >>> amicable_numbers(999)
    [220, 284]
    """
    amicable_numbers = []
    for i in range(1, n):
        if is_amicable(i):
            amicable_numbers.append(i)
    return amicable_numbers

def is_amicable(n):
    """
    >>> is_amicable(220)
    True
    >>> is_amicable(284)
    True
    >>> is_amicable(100)
    False
    """
    return sum(proper_divisors(n)) == n and sum(proper_divisors(sum(proper_divisors(n)))) == n and n!= sum(proper_divisors(n))

def proper_divisors(n):
    """
    >>> proper_divisors(220)
    [1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110]
    >>> proper_divisors(284)
    [1, 2, 4, 71, 142]
    """
    return [i for i in range(1, n) if n % i == 0]

if __name__ == '__main__':
    import doctest
    doctest.testmod()
<file_sep>/python/project_euler/problem_001.py
"""
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def multiples_of_3_or_5(n):
    """
    >>> multiples_of_3_or_5(10)
    23
    >>> multiples_of_3_or_5(1000)
    233168
    """
    return sum([i for i in range(n) if i % 3 == 0 or i % 5 == 0])

if __name__ == '__main__':
    import doctest
    doctest.testmod()
<file_sep>/python/project_euler/problem_003.py
"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
"""

def largest_prime_factor(n):
    """
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(600851475143)
    6857
    """
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n

if __name__ == '__main__':
    import doctest
    doctest.testmod()
<file_sep>/python/project_euler/problem_002.py
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def fibonacci_even_sum(n):
    """
    >>> fibonacci_even_sum(10)
    10
    >>> fibonacci_even_sum(4000000)
    4613732
    """
    return sum([i for i in fibonacci(n) if i % 2 == 0])

def fibonacci(n):
    """
    >>> fibonacci(