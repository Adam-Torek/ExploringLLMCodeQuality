"""
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""

def check_occurences(list_of_tuples):
    # your code here
    return {k: v for k, v in Counter(list_of_tuples).items()}


def test_check_occurences():
    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 4, (2, 5): 4, (3, 6): 2}
    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 8, (2, 5): 8, (3, 6): 4}
    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 12, (2, 5): 12, (3, 6): 6}
    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1