"""
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""

def is_octagonal(n):
    return (8*n**2 - 24*n + 17) ** 0.5 == int((8*n**2 - 24*n + 17) ** 0.5)

def nth_octagonal(n):
    i = 1
    while True:
        if is_octagonal(i):
            if i == n:
                return i
            i += 1
        else:
            i += 1

print(nth_octagonal(100))
/project_euler/problem_001.py
"""
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def sum_multiples(n):
    return sum([i for i in range(n) if i % 3 == 0 or i % 5 == 0])

print(sum_multiples(1000))
/project_euler/problem_002.py
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

def sum_even_fibonacci(n):
    return sum([fibonacci(i) for i in range(n) if fibonacci(i) % 2 == 0])

print(sum_even_fibonacci(4000000))
/project_euler/problem_003.py
"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
"""

def is_prime(n):
    if n == 1:
        return False
    elif n == 2:
        return True
    else:
        for i in range(2, n):
            if n % i == 0:
                return False
        return True

def largest_prime_factor(n):
    for i in range(n, 1, -1):
        if n % i == 0 and is_prime(i):
            return i

print(largest_prime_factor(600851475143))
/project_euler/problem_004.py
"""
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def largest_palindrome(n):
    return max([i*j for i in range(100, 1000) for j in range(100, 1000) if is_palindrome(i*j)])

print(largest_palindrome(3))
/project_euler/problem_005.py
"""
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def is_divisible(n):
    return all([n % i == 0 for i in range(1, 21)])

def smallest_divisible(n):
    i