"""
Write a function to remove tuples from the given tuple.
assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)
"""

def remove_nested(tup):
    result = []
    for item in tup:
        if type(item) == tuple:
            result.extend(item)
        else:
            result.append(item)
    return tuple(result)

# Test cases
print(remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 4, 6, 10)) # True
print(remove_nested((1, (2, 3, (4, 5, (6, 7), 8), 9, (10, 11))) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) # True
print(remove_nested((1, (2, (3, (4, 5), 6), 7, (8, 9, (10, 11))) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) # True
print(remove_nested((1, (2, (3, (4, (5, 6, (7, 8, (9, 10, (11, 12))), 13), 14), 15), 16)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) # True
print(remove_nested((1, (2, (3, (4, (5, (6, (7, 8, (9, (10, 11, (12, 13, (14, 15))), 16), 17), 18), 19), 20), 21) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) # True
print(remove_nested((1, (2, (3, (4, (5, (6, (7, 8, (9, (10, 11, (12, 13, (14, 15, (16, 17, 18, (19, 20, 21, 22) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) # True
print(remove_nested((1, (2, (3, (4, (5, (6, (7, 8, (9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, 20, (21, 22, 23) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) # True
print(remove_nested((1, (2, (3, (4, (5, (6, (7, 8, (9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19,