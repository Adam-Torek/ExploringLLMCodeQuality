"""
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
def bell_number(n):
    """
    Bell numbers are defined as the sum of the reciprocals of the factorials of the positive integers.
    The first few Bell numbers are: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 89544878739, 144967470209, 241578171428, 390881695120, 632459867215, 1023341557864, 16558014109375, 26791429615280, 433494437170944, 7014087331622776, 11349031701650110, 183631190325846976, 2971215073161561805, 48075269765775636864, 777874204951281795056, 125862690253584211097623976, 203650110742460416201660636856403766975289505440883277824000000, 3295128009916862797724709369995937494945923078164062862089986280348253421170679
    """
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return sum([bell_number(n-i) * (1/i) for i in range(1, n+1)])