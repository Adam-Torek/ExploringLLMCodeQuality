"""
Write a python function to find the element of a list having maximum length.
assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']
"""

def Find_Max(list):
    max_len = 0
    for i in list:
        if len(i) > max_len:
            max_len = len(i)
            max_element = i
    return max_element

print(Find_Max([['A'],['A','B'],['A','B','C']]))
/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/