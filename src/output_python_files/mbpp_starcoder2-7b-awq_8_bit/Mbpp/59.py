"""
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""

def is_octagonal(n):
    return (1 + 8 * n) ** 0.5 % 1 == 0

def octagonal(n):
    i = 1
    while True:
        if is_octagonal(i):
            if n == 1:
                return i
            else:
                n -= 1
        i += 1

print octagonal(100)
/python/project_euler/problem_001.py
"""
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def sum_multiples(n):
    return sum([i for i in range(n) if i % 3 == 0 or i % 5 == 0])

print sum_multiples(1000)
/python/project_euler/problem_004.py
"""
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def largest_palindrome():
    largest = 0
    for i in range(100, 1000):
        for j in range(100, 1000):
            if is_palindrome(i * j) and i * j > largest:
                largest = i * j
    return largest

print largest_palindrome()
/python/project_euler/problem_003.py
"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
"""

def largest_prime_factor(n):
    i = 2
    while i * i <= n:
        if n % i == 0:
            n /= i
        else:
            i += 1
    return n

print largest_prime_factor(600851475143)
/python/project_euler/problem_002.py
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def fibonacci(n):
    a, b = 1, 2
    while b < n:
        yield b
        a, b = b, a + b

def sum_even_fibonacci(n):
    return sum([i for i in fibonacci(n) if i % 2 == 0])

print sum_even_fibonacci(4000000)
/python/project_euler/problem_005.py
"""
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def smallest_multiple(n):
    i = 1
    while True:
        if all([i % j == 0 for j in range(1, n + 1)]):
            return i
        i += 1

print smallest_multiple(20)
/python/project_euler/problem_006.py
"""
The sum of the squares of the first ten natural numbers is,

12 + 22 +... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 +... + 10)2 =