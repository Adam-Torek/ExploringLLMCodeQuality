"""
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
from math import comb


def bell_number(n):
    """
    Bell number is the number of ways to partition a set into non-empty subsets.
    """
    return sum(comb(n, i) for i in range(1, n + 1))


if __name__ == "__main__":
    assert bell_number(2) == 2
    assert bell_number(3) == 5
    assert bell_number(4) == 15
    assert bell_number(5) == 28
    assert bell_number(10) == 220
    assert bell_number(15) == 1307674368000
    assert bell_number(20) == 64032032047978543612669647924926195344230709555551119534361125405182222373125222383355.0
    assert bell_number(30) == 1.1619288948377190332262258516533791464231949553429277226026062748884527584615493249615501830863833578888012555269324523312833522335330310201315116069954970594249192251182132511161961464346578932973651822223313602853266135105628802524611100520631668492531573178040248398563357271484320212460121717854024839856335727148432021246012171785402483985633572714843202124601217178540248398563357271484320212460121717854024839856335727148432021246012171785402483985633572714843202124601217178540248398563357271484320212460121717854024839856335727148432021246012171785402483985633572714843202124601217178540248398563357271484320212460121717854024839856335727148432021246012171785402483985633572714843202124601217178540248398