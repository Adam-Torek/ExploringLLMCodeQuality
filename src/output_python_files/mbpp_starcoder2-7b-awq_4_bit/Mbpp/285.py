"""
Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.
assert text_match_two_three("ac")==(False)
"""

def text_match_two_three(text):
    return text.count("ab") in [2,3]

assert text_match_two_three("ac")==(False)
assert text_match_two_three("ab")==(True)
assert text_match_two_three("abb")==(True)
assert text_match_two_three("abbb")==(True)
assert text_match_two_three("abbbb")==(False)
assert text_match_two_three("abbbbb")==(False)
assert text_match_two_three("abbbbbbb")==(False)
assert text_match_two_three("abbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")==(False)
assert text_match_two_three("abbbbbbbbbbbbbbbbbbbbbbbbbbbbb