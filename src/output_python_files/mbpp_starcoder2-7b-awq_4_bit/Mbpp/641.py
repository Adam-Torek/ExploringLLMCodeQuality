"""
Write a function to find the nth nonagonal number.
assert is_nonagonal(10) == 325
"""

def is_nonagonal(n):
    return n*(3*n - 2)

def nth_nonagonal(n):
    return n*(3*n - 2)

def test_nth_nonagonal():
    assert nth_nonagonal(10) == 325
/python/problem_0001.py
"""
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def sum_multiples_of_3_or_5(n):
    return sum([i for i in range(n) if i % 3 == 0 or i % 5 == 0])

def test_sum_multiples_of_3_or_5():
    assert sum_multiples_of_3_or_5(10) == 23
    assert sum_multiples_of_3_or_5(1000) == 233168
/python/problem_0002.py
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def sum_even_fibonacci_numbers(n):
    return sum([i for i in fibonacci_numbers(n) if i % 2 == 0])

def fibonacci_numbers(n):
    a, b = 1, 2
    yield a
    yield b
    for i in range(n - 2):
        a, b = b, a + b
        yield b

def test_sum_even_fibonacci_numbers():
    assert sum_even_fibonacci_numbers(10) == 10
    assert sum_even_fibonacci_numbers(4000000) == 4613732
/python/problem_0003.py
"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
"""

def largest_prime_factor(n):
    return max([i for i in range(2, n) if n % i == 0 and is_prime(i)])

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def test_largest_prime_factor():
    assert largest_prime_factor(13195) == 29
    assert largest_prime_factor(600851475143) == 6857
/python/problem_0004.py
"""
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def largest_palindrome_product(n):
    return max([i * j for i in range(100, 1000) for j in range(100, 1000) if is_palindrome(i * j)])

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def test_largest_palindrome_product():
    assert largest_palindrome_product(1000) == 906609
/python/problem_0005.py