{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return []\n            if not current_group:\n                current_group = '('\n            stack.pop()\n            if not stack:\n                result.append(current_group + ')')\n                current_group = ''\n        else:\n            current_group += char\n    if stack:\n        return []\n    return result\n\ndef count_valid_groups(paren_string: str) -> int:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    count the number of valid groups in the string. A group is valid if it is properly balanced and not nested within\n    any other group.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> count_valid_groups('( ) (( )) (( )( ))')\n    2\n    \"\"\"\n    groups = separate_paren_groups(paren_string)\n    return len(groups)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a given number is prime or not.\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Return a list of prime factors of a given number.\n    >>> prime_factors(12)\n    [2, 2, 3]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if is_prime(divisor) and n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two numbers.\n    >>> gcd(12, 8)\n    4\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two numbers.\n    >>> lcm(12, 8)\n    24\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef is_square(n: int) -> bool:\n    \"\"\" Check if a given number is a square number or not.\n    >>> is_square(9)\n    True\n    >>> is_square(10)\n    False\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Check if a given number is a perfect square or not.\n    >>> is_perfect_square(9)\n    True\n    >>> is_perfect_square(10)\n    False\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef is_pythagorean_triplet(a: int, b: int, c: int) -> bool:\n    \"\"\" Check if a, b, c are Pythagorean triplet.\n    >>> is_pythagorean_triplet(3, 4, 5)\n    True\n    >>> is_pythagorean_triplet(5, 12, 13)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef is_pythagorean_triplet_with_sum(a: int, b: int, c: int, target: int) -> bool:\n    \"\"\" Check if a, b, c are Pythagorean triplet with a+b+c=target.\n    >>> is_pythagorean_triplet_with_sum(3, 4, 5, 10)\n    True\n    >>> is_pythagorean_triplet_with_sum(5, 12, 13, 16)\n    False\n    \"\"\"\n    return a+b+c == target and is_pythagorean_triplet(a, b, c)\n\ndef is_pythagorean_triplet_with_product(a: int, b: int, c: int, target: int) -> bool:\n    \"\"\" Check if a, b, c are Pythagorean triplet with a*b*c=target.\n    >>>"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance += operation\n        else:\n            balance += operation\n        if balance < 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_level = 0\n    current_level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        if current_level == 0:\n            result.append(max_level)\n            max_level = 0\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if not numbers else 1 * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result\n\ndef max_profit(prices: List[int]) -> int:\n    \"\"\"\n    Given a list of prices, find the maximum profit that can be made from buying and selling a stock once.\n    >>> max_profit([9, 11, 8, 5, 7, 12, 14, 16])\n    7\n    \"\"\"\n    if not prices:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit\n\ndef max_profit_dp(prices: List[int]) -> int:\n    \"\"\"\n    Given a list of prices, find the maximum profit that can be made from buying and selling a stock once.\n    >>> max_profit_dp([9, 11, 8, 5, 7, 12, 14, 16])\n    7\n    \"\"\"\n    if not prices:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit\n\ndef max_profit_with_k_transactions(prices: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of prices and a number of transactions k, find the maximum profit that can be made from buying\n    and selling a stock k times.\n    >>> max_profit_with_k_transactions([9, 11, 8, 5, 7, 12, 14, 16], 2)\n    7\n    \"\"\"\n    if not prices or k == 0:\n        return 0\n    if k >= len(prices) // 2:\n        return max_profit(prices)\n    profits = [0] * k\n    for i in range(1, len(prices)):\n        for j in range(k):\n            if j == 0:\n                profits[j] = max(profits[j], prices[i] - prices[i-1])\n            else:\n                profits[j] = max(profits[j], prices[i] - prices[i-1] + profits[j-1])\n    return max(profits)\n\ndef max_profit_with_k_transactions_dp(prices: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of prices and a number of transactions k, find the maximum profit that can be made from buying\n    and selling a stock k times.\n    >>> max_profit_with_k_transactions_dp([9, 11, 8, 5, 7, 12, 14, 16], 2)\n    7\n    \"\"\"\n    if not prices or k == 0:\n        return 0\n    if k >= len(prices) // 2:\n        return max_profit(prices)\n    profits = [0"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\ndef test_make_palindrome():\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('race') == 'racecar'\n    assert make_palindrome('hello') == 'helloh'\n    assert make_palindrome('world') == 'worldw'\n    assert make_palindrome('python') == 'pythonpytho'\n    assert make_palindrome('a') == 'aa'\n    assert make_palindrome('ab') == 'aba'\n    assert make_palindrome('abc') == 'abcba'\n    assert make_palindrome('abcd') == 'abcddcba'\n    assert make_palindrome('abcde') == 'abcdeedcba'\n    assert make_palindrome('abcdef') == 'abcdefedcba'\n    assert make_palindrome('abcdefg') == 'abcdefgfedcba'\n    assert make_palindrome('abcdefgh') == 'abcdefgfedcbag'\n    assert make_palindrome('abcdefghi') == 'abcdefghihgfedcba'\n    assert make_palindrome('abcdefghij') == 'abcdefghihgfedcbaij'\n    assert make_palindrome('abcdefghijkl') == 'abcdefghihgfedcbaijkl'\n    assert make_palindrome('abcdefghijklm') == 'abcdefghihgfedcbaijklm'\n    assert make_palindrome('abcdefghijklmn') == 'abcdefghihgfedcbaijklmn'\n    assert make_palindrome('abcdefghijklmno') == 'abcdefghihgfedcbaijklmno'\n    assert make_palindrome('abcdefghijklmnop') == 'abcdefghihgfedcbaijklmnopp'\n    assert make_palindrome('abcdefghijklmnopq') == 'abcdefghihgfedcbaijklmnoqp'\n    assert make_palindrome('abcdefghijklmnopqr') == 'abcdefghihgfedcbaijklmnorpq'\n    assert make_palindrome('abcdefghijklmnopqrs') == 'abcdefghihgfedcbaijklmnorpqrs'\n    assert make_palindrome('abcdefghijklmnopqrst') == 'abcdefghihgfedcbaijklmnorpqrst'\n    assert make_palindrome('abcdefghijklmnopqrstu') == 'abcdefghihgfedcbaijklmnorpqrstu'\n    assert make_palindrome('abcdefghijklmnopqrstuv') == 'abcdefghihgfedcbaijklmnorpqrstuv'\n    assert make_palindrome('abcdefghijklmnopqrstuvw') == 'abcdefghihgfedcbaijklmnorpqrstuvw'\n"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\ndef string_and(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary AND on these inputs and return result also as a string.\n    >>> string_and('010', '110')\n    '010'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result\n\ndef string_or(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary OR on these inputs and return result also as a string.\n    >>> string_or('010', '110')\n    '111'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' or b[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n    return result\n\ndef string_not(a: str) -> str:\n    \"\"\" Input is a string consisting only of 1s and 0s.\n    Perform binary NOT on this input and return result also as a string.\n    >>> string_not('010')\n    '101'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '0':\n            result += '1'\n        else:\n            result += '0'\n    return result\n\ndef binary_to_decimal(binary: str) -> int:\n    \"\"\" Input is a string consisting only of 1s and 0s.\n    Convert this binary number to decimal and return the result as an integer.\n    >>> binary_to_decimal('1010')\n    10\n    \"\"\"\n    decimal = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            decimal += 2**(len(binary)-1-i)\n    return decimal\n\ndef decimal_to_binary(decimal: int, num_bits: int) -> str:\n    \"\"\" Input is an integer and the number of bits to use for the binary representation.\n    Convert this decimal number to binary and return the result as a string.\n    >>> decimal_to_binary(10, 4)\n    '1010'\n    \"\"\"\n    binary = ''\n    for i in range(num_bits):\n        if decimal % 2 == 1:\n            binary += '1'\n        else:\n            binary += '0'\n        decimal //= 2\n    return binary[::-1]\n\ndef decimal_to_hex(decimal: int) -> str:\n    \"\"\" Input is an integer.\n    Convert this decimal number to hexadecimal and return the result as a string.\n    >>> decimal_to_hex(10)\n    'A'\n    \"\"\"\n    hex_chars = '0123456789ABCDEF'\n    hex_string = ''\n    while decimal > 0:\n        hex_string += hex_chars[decimal % 16]\n        decimal //= 16\n    return hex_string[::-1]\n\ndef hex"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Return a list of prime factors of a positive integer n\n    >>> prime_factors(12)\n    [2, 2, 3]\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef prime_factorization(n: int) -> str:\n    \"\"\" Return a string of prime factors of a positive integer n\n    >>> prime_factorization(12)\n    '2*2*3'\n    \"\"\"\n    return '*'.join(str(x) for x in prime_factors(n))\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Return True if n is a perfect square, False otherwise\n    >>> is_perfect_square(9)\n    True\n    >>> is_perfect_square(10)\n    False\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef is_prime_power(n: int) -> bool:\n    \"\"\" Return True if n is a prime power, False otherwise\n    >>> is_prime_power(12)\n    False\n    >>> is_prime_power(15)\n    True\n    \"\"\"\n    if is_prime(n):\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_product(n: int) -> bool:\n    \"\"\" Return True if n is a product of primes, False otherwise\n    >>> is_prime_product(12)\n    True\n    >>> is_prime_product(24)\n    False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and not is_prime(i):\n            return False\n    return True\n\ndef is_prime_sum(n: int) -> bool:\n    \"\"\" Return True if n is a sum of primes, False otherwise\n    >>> is_prime_sum(12)\n    True\n    >>> is_prime_sum(24)\n    False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n - i > 0 and is_prime(i) and is_prime_product(n - i):\n            return True\n    return False\n\ndef is_prime_cube(n: int) -> bool:\n    \"\"\" Return True if"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\ndef longest_common_prefix(strings: List[str]) -> str:\n    \"\"\" Return the longest common prefix of a list of strings\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    \"\"\"\n    if not strings:\n        return ''\n    shortest = min(strings, key=len)\n    prefixes = [p for p in all_prefixes(shortest) if all(s.startswith(p) for s in strings)]\n    return prefixes[0] if prefixes else ''\n\ndef longest_common_suffix(strings: List[str]) -> str:\n    \"\"\" Return the longest common suffix of a list of strings\n    >>> longest_common_suffix(['dog', 'doggy', 'dogg']\n    'g'\n    \"\"\"\n    if not strings:\n        return ''\n    shortest = min(strings, key=len)\n    suffixes = [shortest[i:] for i in range(len(shortest) + 1)]\n    common = longest_common_prefix(suffixes)\n    return common if common else ''\n\ndef longest_common_subsequence(strings: List[str]) -> str:\n    \"\"\" Return the longest common subsequence of a list of strings\n    >>> longest_common_subsequence(['ABCDGH', 'AEDFHR', 'BEHHR', 'CDEFR'])\n    'BH'\n    \"\"\"\n    if not strings:\n        return ''\n    shortest = min(strings, key=len)\n    subsequence = ''\n    for i in range(len(shortest)):\n        for string in strings:\n            if shortest[i] in string:\n                subsequence += shortest[i]\n                break\n    return subsequence\n\ndef longest_common_supersequence(strings: List[str]) -> str:\n    \"\"\" Return the longest common supersequence of a list of strings\n    >>> longest_common_supersequence(['ABCDGH', 'AEDFHR', 'BEHHR', 'CDEFR'])\n    'ABCDGH'\n    \"\"\"\n    if not strings:\n        return ''\n    shortest = min(strings, key=len)\n    supersequence = ''\n    for i in range(len(shortest)):\n        for string in strings:\n            if shortest[i] in string:\n                supersequence += shortest[i]\n                break\n    return supersequence\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n\n\ndef count_words(s: str) -> int:\n    \"\"\" Return the number of words in a string.\n    >>> count_words('hello world')\n    1\n    >>> count_words('a b c d e')\n    4\n    >>> count_words('')\n    0\n    \"\"\"\n    return len(s.split())\n\ndef count_unique_words(s: str) -> int:\n    \"\"\" Return the number of unique words in a string.\n    >>> count_unique_words('hello world')\n    1\n    >>> count_unique_words('a b c d e')\n    4\n    >>> count_unique_words('a b a b c d e')\n    4\n    \"\"\"\n    return len(set(s.split()))\n\ndef count_vowels(s: str) -> int:\n    \"\"\" Return the number of vowels in a string.\n    >>> count_vowels('hello world')\n    2\n    >>> count_vowels('aeiou')\n    5\n    >>> count_vowels('')\n    0\n    \"\"\"\n    vowels = 'aeiou'\n    return sum(s.count(v) for v in vowels)\n\ndef count_consecutive_vowels(s: str) -> int:\n    \"\"\" Return the number of consecutive vowels in a string.\n    >>> count_consecutive_vowels('hello world')\n    1\n    >>> count_consecutive_vowels('aeiou')\n    4\n    >>> count_consecutive_vowels('')\n    0\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and (i == len(s) - 1 or s[i+1] not in vowels):\n            count += 1\n    return count\n\ndef count_uppercase_words(s: str) -> int:\n    \"\"\" Return the number of words in a string that contain at least one uppercase letter.\n    >>> count_uppercase_words('Hello world')\n    1\n    >>> count_uppercase_words('Aeiou')\n    2\n    >>> count_uppercase_words('')\n    0\n    \"\"\"\n    return sum(1 for word in s.split() if any(c.isupper() for c in word))\n\ndef count_pairs(s: str, p: str) -> int:\n    \"\"\" Return the number of times a substring p appears as a pair in a string s.\n    >>> count_pairs('abababc', 'ab')\n    2\n    >>> count_pairs('aabbcc', 'cd')\n    0\n    \"\"\"\n    return s.count(p) // 2\n\ndef count_substring_occurrences(s: str, p: str) -> int:\n    \"\"\" Return the number of times a substring p appears in a string s.\n    >>> count_substring_occurrences('abababc', 'ab')\n    2\n    >>> count_substring_occurrences('aabbcc', 'cd')\n    0\n    \"\"\"\n    return s.count(p)\n\ndef count_substring_pairs(s: str, p: str) -> int:\n    \"\"\" Return the number of times a substring p appears as a pair in a string s.\n    >>> count_substring_pairs('abababc', 'ab')\n    2\n    >>> count_substring_pairs('aabbcc', 'cd')\n    0\n    \"\"\"\n    return count_pairs(s, p)\n\ndef count_substring_triplets(s: str, p: str) -> int:\n    \"\"\" Return the number of times a substring p appears as a triplet in a string s.\n    >>> count_substring_triplets('"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_list = music_string.split('|')\n    result = []\n    for note in music_list:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.':\n            result.append(1)\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        i = string.find(substring, i) + 1\n        if i > 0:\n            count += 1\n        else:\n            break\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list = [num_dict[num] for num in num_list]\n    num_list.sort()\n    return ' '.join([str(num) for num in num_list])\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Return the string with words sorted alphabetically\n    >>> sort_strings('cat dog elephant zebra')\n    'cat dog elephant zebra'\n    \"\"\"\n    return ' '.join(sorted(strings.split()))\n\ndef find_missing_numbers(numbers: List[int]) -> List[int]:\n    \"\"\" Input is a list of integers.\n    Return a list of missing numbers in ascending order.\n    If there are no missing numbers, return an empty list.\n    If the list is empty, return an empty list.\n    If the list has only one element, return an empty list.\n    If the list has two elements, return a list with the second element minus the first element.\n    If the list has three or more elements, return a list with the difference between the second and third elements,\n    and the difference between the third and fourth elements, and so on.\n    >>> find_missing_numbers([1, 2, 3, 5, 6, 7, 8, 9])\n    [4]\n    >>> find_missing_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [3]\n    >>> find_missing_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [3, 4]\n    \"\"\"\n    if len(numbers) < 2:\n        return []\n    diffs = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]\n    missing_numbers = []\n    for i in range(1, len(diffs)):\n        if diffs[i] != diffs[i-1]:\n            missing_numbers.append(numbers[i-1] + diffs[i-1])\n    return missing_numbers\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    result = (float('inf'), float('inf'))\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\ndef rescale_to_range(numbers: List[float], new_min: float, new_max: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become new_min and the largest will become new_max\n    >>> rescale_to_range([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 10.0)\n    [0.0, 2.5, 5.0, 7.5, 10.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) * (new_max - new_min) + new_min for num in numbers]\n\ndef normalize_to_range(numbers: List[float], new_min: float, new_max: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become new_min and the largest will become new_max\n    >>> normalize_to_range([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 10.0)\n    [0.0, 0.0, 0.0, 0.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) * (new_max - new_min) + new_min for num in numbers]\n\ndef normalize_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> normalize_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.0, 0.0, 0.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\ndef normalize_to_zero_one(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> normalize_to_zero_one([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.0, 0.0, 0.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\ndef normalize_to_zero_one_with_zero(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if string is palindrome, False otherwise\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n    return string == string[::-1]\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Return count of vowels in given string\n    >>> count_vowels('hello')\n    1\n    >>> count_vowels('world')\n    1\n    \"\"\"\n    vowels = 'aeiou'\n    return sum(1 for char in string.lower() if char in vowels)\n\ndef count_consonants(string: str) -> int:\n    \"\"\" Return count of consonants in given string\n    >>> count_consonants('hello')\n    3\n    >>> count_consonants('world')\n    4\n    \"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    return sum(1 for char in string.lower() if char in consonants)\n\ndef count_chars(string: str) -> int:\n    \"\"\" Return count of unique characters in given string\n    >>> count_chars('hello')\n    2\n    >>> count_chars('world')\n    6\n    \"\"\"\n    return len(set(string.lower()) - set('aeiou')\n\ndef count_words(string: str) -> int:\n    \"\"\" Return count of words in given string\n    >>> count_words('hello world')\n    2\n    >>> count_words('hello hello')\n    1\n    \"\"\"\n    return len(string.split())\n\ndef count_unique_words(string: str) -> int:\n    \"\"\" Return count of unique words in given string\n    >>> count_unique_words('hello world')\n    2\n    >>> count_unique_words('hello hello')\n    1\n    \"\"\"\n    return len(set(string.lower().split()))\n\ndef count_sentences(string: str) -> int:\n    \"\"\" Return count of sentences in given string\n    >>> count_sentences('Hello, world! Nice to meet you.')\n    2\n    \"\"\"\n    return len(string.split('. '))\n\ndef count_punctuation(string: str) -> int:\n    \"\"\" Return count of punctuation in given string\n    >>> count_punctuation('Hello, world!')\n    1\n    \"\"\"\n    return sum(string.count(char) for char in '.,!?;:')\n\ndef count_uppercase(string: str) -> int:\n    \"\"\" Return count of uppercase letters in given string\n    >>> count_uppercase('Hello, world!')\n    1\n    \"\"\"\n    return sum(1 for char in string if char.isupper())\n\ndef count_lowercase(string: str) -> int:\n    \"\"\" Return count of lowercase letters in given string\n    >>> count_lowercase('Hello, world!')\n    9\n    \"\"\"\n    return sum(1 for char in string if char.islower())\n\ndef count_digits(string: str) -> int:\n    \"\"\" Return count of digits in given string\n    >>> count_digits('Hello, world!')\n    0\n    \"\"\"\n    return sum(1 for char in string if char.isdigit())\n\ndef count_spaces(string: str) -> int:\n    \"\"\" Return count of spaces in given string\n    >>> count_spaces('Hello, world!')\n    1\n    \"\"\"\n    return sum(1 for char"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime or not\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Find the prime factors of a number\n    >>> prime_factors(15)\n    [3, 5]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if is_prime(divisor) and n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor = largest_divisor(n)\n    return factors\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(prime_factors(n))\n\nif __name__ == \"__main__\":\n    main() "}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        if n > 2 and is_prime(n):\n            factors.append(n)\n        return factors\n\n    return prime_factors(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-1, -5, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_zeros(l: list):\n    \"\"\"Return only zeros in the list.\n    >>> get_zeros([-1, 2, -4, 5, 6])\n    []\n    >>> get_zeros([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n    return [x for x in l if x == 0]\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [-1, 5, 3]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 3, 1]\n    \"\"\"\n    return [x for x in l if x % 2 != 0]\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 6]\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n\ndef get_divisible_by_3(l: list):\n    \"\"\"Return only numbers divisible by 3 in the list.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [5]\n    >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 123]\n    \"\"\"\n    return [x for x in l if x % 3 == 0]\n\ndef get_divisible_by_4(l: list):\n    \"\"\"Return only numbers divisible by 4 in the list.\n    >>> get_divisible_by_4([-1, 2, -4, 5, 6])\n    [-4]\n    >>> get_divisible_by_4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-4]\n    \"\"\"\n    return [x for x in l if x % 4 == 0]\n\ndef get_divisible_by_5(l: list):\n    \"\"\"Return only numbers divisible by 5 in the list.\n    >>> get_divisible_by_5([-1, 2, -4, 5, 6])\n    [5]\n    >>> get_divisible_by_5([5, 3, -5, 2, -3, 3, 9,"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    \"\"\"Return a list of the prime factors of a given number.\n    >>> prime_factors(10)\n    [2, 5]\n    >>> prime_factors(15)\n    [3, 3, 5]\n    >>> prime_factors(7)\n    [7]\n    >>> prime_factors(100)\n    [2, 2, 5, 5]\n    >>> prime_factors(101)\n    [101]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if is_prime(divisor):\n            while n % divisor == 0:\n                factors.append(divisor)\n                n //= divisor\n        else:\n            divisor += 1\n    return factors\n\ndef prime_factorization(n):\n    \"\"\"Return the prime factorization of a given number.\n    >>> prime_factorization(10)\n    [2, 2, 5]\n    >>> prime_factorization(15)\n    [3, 5]\n    >>> prime_factorization(7)\n    [7]\n    >>> prime_factorization(100)\n    [2, 2, 5, 5]\n    >>> prime_factorization(101)\n    [101]\n    \"\"\"\n    factors = []\n    while n > 1:\n        factors.extend(prime_factors(n))\n        n = 1\n        for factor in factors:\n            n //= factor\n    return factors\n\ndef is_permutation(a, b):\n    \"\"\"Return true if a is a permutation of b, and false otherwise.\n    >>> is_permutation(1234, 4321)\n    True\n    >>> is_permutation(1234, 432)\n    False\n    >>> is_permutation(123, 432)\n    False\n    >>> is_permutation(123, 124)\n    False\n    \"\"\"\n    return sorted(str(a)) == sorted(str(b))\n\ndef is_palindrome(n):\n    \"\"\"Return true if a given number is a palindrome, and false otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(1001)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_prime_palindrome(n):\n    \"\"\"Return true if a given number is a prime palindrome, and false otherwise.\n    >>> is_prime_palindrome(12321)\n    True\n    >>> is_prime_palindrome(12345)\n    False\n    >>> is_prime_palindrome(1001)\n    False\n    \"\"\"\n    return is_prime(n) and is_palindrome(n)\n\ndef is_prime_permutation_palindrome(n):\n    \"\"\"Return true if a given number is a prime permutation palindrome, and false otherwise.\n    >>> is_prime_permutation_palindrome(12321)\n    True\n    >>> is_prime_permutation_palindrome(12345)\n    False\n    >>> is_prime_permutation_palindrome(1001)\n    True\n"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    if xs[0] != 0:\n        raise ValueError(\"Largest non-zero coefficient must be 1\")\n    if n == 2:\n        return -xs[1] / xs[2]\n    else:\n        return find_zero(xs[2:]) / xs[1]\n\ndef main():\n    xs = [1, 2, 3, 4, 5]\n    print(find_zero(xs))\n\nif __name__ == \"__main__\":\n    main()\n"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    return sorted([l[i] for i in range(len(l)) if i % 3 != 0] + [l[i] for i in range(len(l)) if i % 3 == 0])\n\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))\nprint(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n# where n is the length of the input list\n\n# This function iterates through the list once to create a new list with the non-divisible by 3 elements and then sorts it, and then appends the divisible by 3 elements to the end of the list.\n# The space complexity is O(n) because we create a new list with the same length as the input list. "}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\n\n# Example usage:\nprint(unique([5, 3, 5, 2, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]\n\n\n# Note: The function first converts the list to a set to remove duplicates, then sorts the set and returns it as a list. \n# The key argument in the sorted() function is used to sort the list based on the index of the elements in the original list. \n# This ensures that the sorted list contains the elements in the same order as the original list. "}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n\n\n# Test cases\nprint(max_element([1, 2, 3])) # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 9, 0, 123, 1, -10])) # Output: 123\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Can be optimized using a single loop to find the maximum element in the list\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n\n# Test cases\nprint(max_element([1, 2, 3])) # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 9, 0, 123, 1, -10])) # Output: 123\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Can be optimized using a single loop to find the maximum element in the list\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n\n# Test cases\nprint(max_element([1, 2, 3])) # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 9, 0, 123, 1, -10])) # Output: 123\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Using a variable to store the current maximum element\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_"}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = [i for i in range(0, len(l), 2) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    return [l[i] if i % 2 == 1 else even_values.pop(0) for i in range(len(l))]\n\n\n# Test cases\nprint(sort_even([1, 2, 3]))\nprint(sort_even([5, 6, 3, 4]))\n\n\n# Explanation:\n# The function first creates a list of even indices using a list comprehension. Then it creates a new list of even values using another list comprehension.\n# It then sorts the even values in ascending order using the sort() method. Finally, it creates a new list l' by iterating over the range of indices of l and\n# checking if the index is odd or even. If the index is odd, it adds the value of l at that index to the new list. If the index is even, it adds the first value\n# of the sorted even_values list to the new list. This ensures that the even values are sorted and the odd values are unchanged.\n# The function returns the new list l'. "}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups of three characters.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # reverse order of elements in each group.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # join groups to form original string.\n    return \"\".join(groups)\n\ndef encode_base64(s: str):\n    \"\"\"\n    returns base64 encoded string.\n    \"\"\"\n    return base64.b64encode(s.encode(\"utf-8\")).decode(\"utf-8\")\n\ndef decode_base64(s: str):\n    \"\"\"\n    takes as input base64 encoded string. Returns decoded string.\n    \"\"\"\n    return base64.b64decode(s.encode(\"utf-8\")).decode(\"utf-8\")\n\ndef encode_base64_cyclic(s: str):\n    \"\"\"\n    returns base64 encoded string with cyclic encoding.\n    \"\"\"\n    return encode_base64(encode_cyclic(s))\n\ndef decode_base64_cyclic(s: str):\n    \"\"\"\n    takes as input base64 encoded string with cyclic encoding. Returns decoded string.\n    \"\"\"\n    return decode_cyclic(decode_base64(s))\n\ndef encode_base64_cyclic_urlsafe(s: str):\n    \"\"\"\n    returns base64 urlsafe encoded string with cyclic encoding.\n    \"\"\"\n    return base64.urlsafe_b64encode(encode_cyclic(s).encode(\"utf-8\")).decode(\"utf-8\")\n\ndef decode_base64_cyclic_urlsafe(s: str):\n    \"\"\"\n    takes as input base64 urlsafe encoded string with cyclic encoding. Returns decoded string.\n    \"\"\"\n    return decode_cyclic(base64.urlsafe_b64decode(s.encode(\"utf-8\")).decode(\"utf-8\"))\n\ndef encode_base64_urlsafe(s: str):\n    \"\"\"\n    returns base64 urlsafe encoded string.\n    \"\"\"\n    return base64.urlsafe_b64encode(s.encode(\"utf-8\")).decode(\"utf-8\")\n\ndef decode_base64_urlsafe(s: str):\n    \"\"\"\n    takes as input base64 urlsafe encoded string. Returns decoded string.\n    \"\"\"\n    return base64.urlsafe_b64decode(s.encode(\"utf-8\")).decode(\"utf-8\")\n\ndef encode_base64_urlsafe_cyclic(s: str):\n    \"\"\"\n    returns base64 urlsafe encoded string with cyclic encoding.\n    \"\"\"\n    return encode_base64_urlsafe(encode_cyclic(s))\n\ndef decode_base64_urlsafe_cyclic(s: str):\n    \"\"\"\n    takes as input base64 urlsafe encoded string with cyclic encoding. Returns decoded string.\n    \"\"\"\n    return decode_cyclic(decode_base64_urlsafe(s))\n\ndef encode_base64_urlsafe_cyclic_urlsafe(s: str):\n    \"\"\"\n    returns base64 urlsafe encoded string with cyclic encoding.\n    \"\"\"\n    return base64.urlsafe_b64encode(encode_cyclic(s).encode(\"utf-8\")).decode(\"utf-8\")\n\ndef decode_base64_urlsafe_cyclic_urlsafe(s: str):\n    \"\"\"\n    takes as"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2\n\n\n# Example usage:\nprint(car_race_collision(5))  # Output: 10\nprint(car_race_collision(10))  # Output: 45\nprint(car_race_collision(100))  # Output: 4950\n\n\n# Note: This function is a simple application of the formula for the sum of the first n\n# integers, which is n * (n-1) // 2. "}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\n\ndef incr_list_v2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_v2([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_v2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\n\ndef incr_list_v3(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_v3([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_v3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\n\ndef incr_list_v4(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_v4([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_v4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\ndef incr_list_v5(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_v5([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_v5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\ndef incr_list_v6(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_v6([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_v6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\ndef incr_list_v7(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_v7([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_v7([5, 3, 5, 2, 3, 3, 9, 0, "}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0])) # False\nprint(pairs_sum_to_zero([1, 3, -2, 1])) # False\nprint(pairs_sum_to_zero([1, 2, 3, 7])) # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) # True\nprint(pairs_sum_to_zero([1])) # False\n\n\n# Test cases\nprint(pairs_sum_to_zero([1, 2, 3, 4, 5, 6])) # False\nprint(pairs_sum_to_zero([1, -1, 2, 3, -2, 4, -3])) # True\nprint(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7])) # False\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4])) # True\nprint(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5])) # True\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6])) # True\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7])) # False\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8])) # True\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9])) # False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10])) # True\nprint(pairs_sum_to_zero([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10"}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res\n\n\ndef change_base_recursive(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive(8, 3)\n    '22'\n    >>> change_base_recursive(8, 2)\n    '100'\n    >>> change_base_recursive(7, 2)\n    '11'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if x == 0:\n        return '0'\n    return str(x % base) + change_base_recursive(x // base, base)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\ndef rectangle_area(a, b):\n    \"\"\"Given length of two sides return area for a rectangle.\n    >>> rectangle_area(5, 3)\n    15\n    \"\"\"\n    return a * b\n\ndef square_area(a):\n    \"\"\"Given side of a square return area.\n    >>> square_area(5)\n    25\n    \"\"\"\n    return a ** 2\n\ndef circle_area(r):\n    \"\"\"Given radius of a circle return area.\n    >>> circle_area(5)\n    78.5398\n    \"\"\"\n    return 3.14159 * r ** 2\n\ndef trapezoid_area(a, b, h):\n    \"\"\"Given two sides and height return area for a trapezoid.\n    >>> trapezoid_area(5, 3, 2)\n    10.0\n    \"\"\"\n    return 0.5 * (a + b) * h\n\ndef rhombus_area(d1, d2):\n    \"\"\"Given two diagonals return area for a rhombus.\n    >>> rhombus_area(5, 3)\n    15\n    \"\"\"\n    return 0.5 * d1 * d2\n\ndef parallelogram_area(a, b):\n    \"\"\"Given two sides return area for a parallelogram.\n    >>> parallelogram_area(5, 3)\n    15\n    \"\"\"\n    return a * b\n\ndef kite_area(a, b):\n    \"\"\"Given two sides return area for a kite.\n    >>> kite_area(5, 3)\n    15\n    \"\"\"\n    return 0.5 * a * b\n\ndef scalene_triangle_area(a, b, c):\n    \"\"\"Given three sides return area for a scalene triangle.\n    >>> scalene_triangle_area(5, 3, 4)\n    6.0\n    \"\"\"\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\ndef equilateral_triangle_area(a):\n    \"\"\"Given side return area for an equilateral triangle.\n    >>> equilateral_triangle_area(5)\n    15\n    \"\"\"\n    return (3 ** 0.5) * a ** 2 / 4\n\ndef isosceles_triangle_area(a, b, h):\n    \"\"\"Given two sides and height return area for an isosceles triangle.\n    >>> isosceles_triangle_area(5, 3, 2)\n    10.8284\n    \"\"\"\n    return 0.5 * a * b * h\n\ndef right_triangle_area(a, h):\n    \"\"\"Given two sides and height return area for a right triangle.\n    >>> right_triangle_area(5, 3)\n    15\n    \"\"\"\n    return 0.5 * a * h\n\ndef irregular_triangle_area(a, b, c):\n    \"\"\"Given three sides return area for an irregular triangle.\n    >>> irregular_triangle_area(5, 3, 4)\n    6.0\n    \"\"\"\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\ndef regular_polygon_area(n"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c\n\n\n# Test cases\nprint(fib4(5)) # Output: 4\nprint(fib4(6)) # Output: 8\nprint(fib4(7)) # Output: 14\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# This function uses a loop to compute the n-th element of the fib4 sequence, which is more efficient than the recursive approach. "}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2-1]) / 2\n    else:\n        return l[n//2]\n\n\n# Example usage:\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 100, 10, 20]))  # Output: 15.0\n\n\n# Test cases:\nprint(median([1, 2, 3, 4, 5]))  # Output: 3\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 5\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 5.5\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # Output: 6\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # Output: 6.5\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # Output: 7\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))  # Output: 7.5\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))  # Output: 8\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))  # Output: 8.5\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))  # Output: 9\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))  # Output: 9.5\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))  # Output: 10\nprint(median([1, 2, 3, 4, 5, 6, 7, "}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str, start: int, end: int):\n    \"\"\"\n    Checks if given string is a palindrome using recursion\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 3)\n    False\n    \"\"\"\n    if start >= end:\n        return True\n    if text[start] != text[end]:\n        return False\n    return is_palindrome_recursive(text, start + 1, end - 1)\n\n\ndef is_palindrome_recursive_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using recursion with stack\n    >>> is_palindrome_recursive_with_stack('')\n    True\n    >>> is_palindrome_recursive_with_stack('aba')\n    True\n    >>> is_palindrome_recursive_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    while len(stack) > 1:\n        if stack.pop() != stack.pop():\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p\n\n\ndef modinv(a: int, p: int) -> int:\n    \"\"\"Return the modular inverse of a modulo p.\n    >>> modinv(2, 5)\n    3\n    >>> modinv(7, 11)\n    8\n    >>> modinv(101, 101)\n    1\n    \"\"\"\n    def egcd(a: int, b: int) -> Tuple[int, int, int]:\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            gcd, x, y = egcd(b % a, a)\n            return (gcd, y - (b // a) * x, x)\n\n    return egcd(a, p)[2] % p\n\ndef modpow(base: int, exp: int, p: int) -> int:\n    \"\"\"Return base^exp modulo p.\n    >>> modpow(2, 3, 5)\n    2\n    >>> modpow(2, 10, 5)\n    3\n    >>> modpow(7, 101, 11)\n    8\n    \"\"\"\n    return (base ** exp) % p\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(7919)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(12, 8)\n    4\n    >>> gcd(17, 21)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(12, 8)\n    24\n    >>> lcm(17, 21)\n    34\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef crt(a: int, m: int, b: int, n: int) -> int:\n    \"\"\"Return the Chinese Remainder Theorem solution x.\n    >>> crt(2, 3, 5, 7)\n    13\n    >>> crt(1, 3, 7, 11)\n    1\n    \"\"\"\n    M = m * n\n    M_inv = modinv(M, n)\n    return (a * modpow(m, b, n) * M_inv * n) % M\n\ndef crt_list(a: List[int], m: List[int], n: List[int]) -> List[int]:\n    \"\"\"Return the Chinese Remainder Theorem solution for a list of moduli.\n    >>> crt_list([2, 3], [3, 7], [5, 11])\n    [13, 1]\n    \"\"\"\n    M = prod(n)\n    M_inv = modinv(M, prod(m))\n    return [(a[i] * modpow(m[i], b[i], M) * M_inv * lcm(m[i], n[i]) * M // m[i]) % M"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s) if ch.isalpha() else ch for ch in s]\n\n\ndef encode_rot13(s: str):\n    \"\"\"\n    returns encoded string using rot13 cipher.\n    \"\"\"\n    return s.encode(\"rot13\")\n\ndef decode_rot13(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rot13 function. Returns decoded string.\n    \"\"\"\n    return s.encode(\"rot13\")\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string using vigenere cipher with key.\n    \"\"\"\n    key = key.lower()\n    key_len = len(key)\n    return \"\".join([chr(((ord(ch) + ord(key[i % key_len]) - 2*ord(\"a\")) % 26 + ord(\"a\")) for i, ch in enumerate(s) if ch.isalpha())]\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    key = key.lower()\n    key_len = len(key)\n    return \"\".join([chr(((ord(ch) - ord(key[i % key_len]) - 2*ord(\"a\")) % 26 + ord(\"a\")) for i, ch in enumerate(s) if ch.isalpha())]\n\ndef encode_xor(s: str, key: str):\n    \"\"\"\n    returns encoded string using xor cipher with key.\n    \"\"\"\n    key = key.lower()\n    return \"\".join([chr(ord(ch) ^ ord(key[i % len(key)]) for i, ch in enumerate(s)])\n\ndef decode_xor(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_xor function. Returns decoded string.\n    \"\"\"\n    key = key.lower()\n    return \"\".join([chr(ord(ch) ^ ord(key[i % len(key)]) for i, ch in enumerate(s)])\n\ndef encode_base64(s: str):\n    \"\"\"\n    returns encoded string using base64 encoding.\n    \"\"\"\n    return base64.b64encode(s.encode(\"utf-8\")).decode(\"utf-8\")\n\ndef decode_base64(s: str):\n    \"\"\"\n    takes as input string encoded with encode_base64 function. Returns decoded string.\n    \"\"\"\n    return base64.b64decode(s.encode(\"utf-8\")).decode(\"utf-8\")\n\ndef encode_hex(s: str):\n    \"\"\"\n    returns encoded string using hex encoding.\n    \"\"\"\n    return s.encode(\"utf-8\").hex()\n\ndef decode_hex(s: str):\n    \"\"\"\n    takes as input string encoded with encode_hex function. Returns decoded string.\n    \"\"\"\n    return bytes.fromhex(s).decode(\"utf-8\")\n\ndef encode_b64_to_hex(s: str):\n    \"\"\"\n    returns encoded string using base64 encoding and then hex encoding.\n    \"\"\"\n    return encode_hex(encode_base64(s))\n\ndef decode_hex_to_b64(s: str):\n    \"\"\"\n    takes as input string encoded with encode_b64_to_hex function. Returns decoded string.\n    \"\"\"\n    return decode_base64(decode_hex(s))\n\ndef encode_base"}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100) == True)\nprint(below_threshold([1, 20, 4, 10], 5) == False)\n\n\n# Explanation:\n# The function takes a list l and a threshold t as input. It iterates through the list and checks if any number in the list is greater than or equal to t. If it finds a number that is greater than or equal to t, it returns False. If it iterates through the entire list without finding a number greater than or equal to t, it returns True. This means that all the numbers in the list are below the threshold t. "}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\ndef subtract(x: int, y: int) -> int:\n    \"\"\"Subtract y from x\n    >>> subtract(7, 3)\n    4\n    >>> subtract(10, 5)\n    5\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int) -> int:\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int) -> float:\n    \"\"\"Divide x by y\n    >>> divide(7, 3)\n    2.3333333333333333335\n    >>> divide(10, 2)\n    5.0\n    \"\"\"\n    return x / y\n\ndef power(x: int, y: int) -> int:\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n    return x ** y\n\ndef is_even(n: int) -> bool:\n    \"\"\"Check if a number is even\n    >>> is_even(4)\n    True\n    >>> is_even(5)\n    False\n    \"\"\"\n    return n % 2 == 0\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef factorial(n: int) -> int:\n    \"\"\"Calculate the factorial of a number\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Calculate the nth Fibonacci number\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"Calculate the sum of the digits of a number\n    >>> sum_of_digits(42)\n    6\n    >>> sum_of_digits(123)\n    6\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef reverse_string(s: str) -> str:\n    \"\"\"Reverse a string\n    >>> reverse_string(\"hello\")\n    \"olleh\"\n    >>> reverse_string(\"Python\")\n    \"nohtyP\"\n    \"\"\"\n    return s[::-1]\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"hello\")\n    False\n    \"\"\"\n    return s == reverse_string(s)\n\ndef count_vowels(s: str) -> int:\n    \"\"\"Count the number of"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return s0_set == s1_set\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\n# Test cases\nprint(fib(10)) # Output: 55\nprint(fib(1)) # Output: 1\nprint(fib(8)) # Output: 21\n\n\n# Time complexity: O(2^n)\n# Space complexity: O(n)\n\n# Better approach:\n\ndef fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n# Test cases\nprint(fib(10)) # Output: 55\nprint(fib(1)) # Output: 1\nprint(fib(8)) # Output: 21\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# This approach uses a loop to calculate the n-th Fibonacci number, which is more efficient than the recursive approach. "}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n# Test cases\nprint(correct_bracketing(\"<\")) # False\nprint(correct_bracketing(\"<>\")) # True\nprint(correct_bracketing(\"<<><>>\")) # True\nprint(correct_bracketing(\"><<>\")) # False\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n\n# Efficient Solution\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\")) # False\nprint(correct_bracketing(\"<>\")) # True\nprint(correct_bracketing(\"<<><>>\")) # True\nprint(correct_bracketing(\"><<>\")) # False\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# This solution is more efficient as it uses a stack to keep track of opening brackets and pops the last opening bracket when a closing bracket is encountered. If the stack is empty or the popped opening bracket is not the expected closing bracket, return False. If all opening brackets have a corresponding closing bracket, return True.\n\n# Another solution is to use a counter variable to keep track of the number of opening brackets and closing brackets. If the counter is ever negative, return False. If the counter is 0 at the end, return True.\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b == \"<\":\n            count += 1\n        elif b == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n\n# Test cases\nprint(correct_bracketing(\"<\")) # False\nprint(correct_bracketing(\"<>\")) # True\nprint(correct_bracketing(\"<<><>>\")) # True\nprint(correct_bracketing(\"><<>\")) # False\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# This solution uses a counter variable to keep track of the number of opening and closing brackets. If the counter is ever negative, return False. If the counter is 0 at the end, return True. This solution is more efficient as it does not require a stack. "}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\n# Test cases\nprint(monotonic([1, 2, 4, 20])) # True\nprint(monotonic([1, 20, 4, 10])) # False\nprint(monotonic([4, 1, 0, -10])) # True\nprint(monotonic([1, 2, 3, 4, 5])) # True\nprint(monotonic([5, 4, 3, 2, 1])) # False\nprint(monotonic([1, 1, 1, 1])) # True\nprint(monotonic([1, 2, 1, 2])) # False\nprint(monotonic([1, 2, 3, 1, 2, 3])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # True\nprint(monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 1])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    return sorted(list(common_set)\n\n\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]\n\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(n)\n\n\n# Better solution\n\ndef better_common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> better_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> better_common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2))\n\n\n# Test cases\nprint(better_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(better_common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(n)\n\n# Best solution\n\ndef best_common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> best_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> best_common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1 & set2)\n\n# Test cases\nprint(best_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(best_common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# The best solution uses set intersection which is faster than sorting the list and then finding common elements. "}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n\n\n# Test cases\nprint(sum_to_n(30)) # Output: 465\nprint(sum_to_n(100)) # Output: 5050\nprint(sum_to_n(5)) # Output: 15\nprint(sum_to_n(10)) # Output: 55\nprint(sum_to_n(1)) # Output: 1\n\n\n# Additional test cases\nprint(sum_to_n(0)) # Output: 0\nprint(sum_to_n(1000)) # Output: 5050\nprint(sum_to_n(10000)) # Output: 500500\nprint(sum_to_n(100000)) # Output: 50005000\n\n# Test case for negative input\ntry:\n    print(sum_to_n(-10))\nexcept ValueError:\n    print(\"Invalid input. Please enter a positive integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(3.5))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for string input\ntry:\n    print(sum_to_n(\"hello\"))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for float input\ntry:\n    print(sum_to_n(3.0))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for zero input\ntry:\n    print(sum_to_n(0))\nexcept ValueError:\n    print(\"Invalid input. Please enter a positive integer.\")\n\n# Test case for float input\ntry:\n    print(sum_to_n(3.5))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for string input\ntry:\n    print(sum_to_n(\"hello\"))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for negative input\ntry:\n    print(sum_to_n(-10))\nexcept ValueError:\n    print(\"Invalid input. Please enter a positive integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(3.5))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(\"hello\"))\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(3.0)\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(\"hello\")\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(-10)\nexcept ValueError:\n    print(\"Invalid input. Please enter a positive integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(3.5)\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum_to_n(\"hello\")\nexcept TypeError:\n    print(\"Invalid input. Please enter an integer.\")\n\n# Test case for non-integer input\ntry:\n    print(sum"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\n# Test cases\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False\nprint(correct_bracketing(\")(\")) # False\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n\n# Alternative solution using stack\ndef correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False\nprint(correct_bracketing(\")(\")) # False\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Another alternative solution using recursion\ndef correct_bracketing(brackets: str):\n    def helper(i: int, j: int) -> bool:\n        if i >= len(brackets) or j >= len(brackets):\n            return True\n        if brackets[i] == \"(\" and brackets[j] == \")\":\n            return helper(i+1, j-1)\n        elif brackets[i] == \"(\":\n            return helper(i+1, j)\n        elif brackets[j] == \")\":\n            return helper(i, j-1)\n        else:\n            return False\n    return helper(0, len(brackets)-1)\n\n# Test cases\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False\nprint(correct_bracketing(\")(\")) # False\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Another alternative solution using stack and recursion\ndef correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False\nprint(correct_bracketing(\")(\")) # False\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Another alternative solution using stack and recursion\ndef correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False\nprint(correct_bracketing(\")(\")) # False\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[1] * (i + 1) for i in range(len(xs) - 1)]\n\n\n# test cases\nprint(derivative([3, 1, 2, 4, 5])) # [1, 4, 12, 20]\nprint(derivative([1, 2, 3])) # [2, 6]\nprint(derivative([1])) # []\nprint(derivative([])) # []\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Can be optimized by using a loop instead of list comprehension.\n# But the list comprehension is more concise and readable. "}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b\n        return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(\"aeiouy\")\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Hello\") == 2\n    assert vowels_count(\"World\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Aeiouy\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n    assert vowels_count(\"Python\") == 2\n   "}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]\n\n\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\n\ndef is_circular_prime(n):\n    \"\"\"Return True if n is a circular prime, False otherwise.\n    >>> is_circular_prime(12321)\n    True\n    >>> is_circular_prime(13)\n    False\n    \"\"\"\n    return all(is_prime(int(circular_shift(n, i)) for i in range(len(str(n))) if n != 0)\n\n\n\ndef circular_primes(n):\n    \"\"\"Return the number of circular primes less than n.\n    >>> circular_primes(100)\n    55\n    \"\"\"\n    return sum(1 for i in range(1, n) if is_circular_prime(i))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(circular_primes(100000000))\n"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\n# Test cases\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153\nprint(digitSum(\"aAaaaXa1\")) # => 153\nprint(digitSum(\"aAaaaXa1bBc\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcD\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDd\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdE\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEf\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfG\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGh\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhI\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIj\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjK\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKl\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlM\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMn\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnO\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnOp\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnOpQ\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnOpQr\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnOpQrs\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnOpQrst\")) # => 153\nprint(digitSum(\"aAaaaXa1bBcDdEfGhIjKlMnOpQ"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples, oranges = s.split()\n    apples = int(apples.split()[0])\n    oranges = int(oranges.split()[0])\n    return n - apples - oranges\n\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) # 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3)) # 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # 19\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 0)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 1000)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 1000)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 1000)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101)) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100)) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100) # 0\nprint(fruit_distribution(\"100 apples and 1 oranges\", 101) # 1\nprint(fruit_distribution(\"100 apples and 1 oranges\", 100) # 0\nprint(fruit_distribution(\"100 apples"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n\n    min_val = float('inf')\n    min_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = i\n        elif val % 2 == 0 and val == min_val and i < min_idx:\n            min_idx = i\n\n    if min_val == float('inf'):\n        return []\n\n    return [min_val, min_idx]\n\n\n\n# Test cases\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))  # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]\nprint(pluck([1, 3, 5, 7, 9]))  # Output: []\nprint(pluck([2, 4, 6, 8, 10]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 10, 12]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 10]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 10, 10]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 10, 10, 10]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 10, 10, 10, 10]))  # Output: [2, 1]\nprint(pluck([1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 10, 10, 10, 10, 10]))"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    max_num = -1\n    for key, value in freq.items():\n        if value >= key:\n            if key > max_num:\n                max_num = key\n    return max_num\n\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1\nprint(search([1, 2, 3, 4, 5])) # Output: -1\nprint(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5])) # Output: 5\nprint(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6])) # Output: 6\nprint(search([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: -1\nprint(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 10\nprint(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10])) # Output: 10\nprint(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10])) # Output: 10\nprint(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10])) # Output: 10\nprint(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10])) # Output: 10\nprint(search([1, 2,"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    return [min_val, max_val] + strange_sort_list(lst)\n\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 9, 2, 8, 3, 7, 4, 5, 6]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 11, 2, 9, 3, 8, 4, 7, 5, 6]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 12, 2, 11, 3, 10, 4, 9, 7, 6]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 13, 2, 12, 3, 11, 4, 10, 9, 7]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 14, 2, 13, 3, 12, 4, 11, 9, 8]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases\nprint(triangle_area(3, 4, 5)) # Output: 6.00\nprint(triangle_area(1, 2, 10)) # Output: -1\nprint(triangle_area(7, 8, 10)) # Output: 24.33\nprint(triangle_area(10, 20, 17)) # Output: 31.66\nprint(triangle_area(1, 1, 1)) # Output: -1\nprint(triangle_area(10, 20, 15)) # Output: -1\nprint(triangle_area(1, 1, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(5, 5, 5)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output: -1\nprint(triangle_area(1, 2, 3)) # Output:"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) <= w:\n        if q == q[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Test cases\nprint(will_it_fly([1, 2], 5)) # False\nprint(will_it_fly([3, 2, 3], 1)) # False\nprint(will_it_fly([3, 2, 3], 9)) # True\nprint(will_it_fly([3], 5)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 10)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 15)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 20)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 25)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 30)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 35)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 40)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 45)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 50)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 55)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 60)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 65)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 70)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 75)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 80)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 85)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 90)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 95)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 100)) # False\nprint(will_it_fly([1, 2, 3, 4, 5], 105)) # True\nprint(will_it_fly([1, 2, 3, 4, 5], 110)) # False\nprint(will_it_fly([1, 2, 3, 4, "}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n\n    # Calculate the sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the sum of the first and last half of the array\n    first_half_sum = sum(arr[:n//2])\n    second_half_sum = sum(arr[n//2:])\n\n    # Calculate the difference between the sums\n    diff = abs(first_half_sum - second_half_sum)\n\n    # Calculate the minimum number of changes needed to make the array palindromic\n    return min(diff, total_sum - diff)\n\n\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 3\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # Output: 5\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # Output: 6\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # Output: 7\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))  # Output: 8\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))  # Output: 9\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))  # Output: 10\nprint(smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars = 0\n    for i in lst1:\n        total_chars += len(i)\n    for i in lst2:\n        total_chars += len(i)\n    if total_chars < len(lst1):\n        return lst1\n    else:\n        return lst2\n\n\n# Test cases\nprint(total_match([], [])) # []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) # ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) # ['4']\nprint(total_match(['hi', 'admin'], ['hi', 'admin'])) # ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi'])) # ['hI', 'hi']\nprint(total_match(['hi', 'admin'], ['hi', 'admin', 'project'])) # ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project']) # ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'project']) # ['hI', 'hi', 'admin', 'project']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'admin', 'project', 'project', 'project', 'project', 'project"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, 10):\n        if is_prime(a // i):\n            count += 1\n        if count == 3:\n            return True\n    return False\n\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(25))  # False\nprint(is_multiply_prime(15))  # False\nprint(is_multiply_prime(45))  # True\nprint(is_multiply_prime(60))  # False\nprint(is_multiply_prime(75))  # False\nprint(is_multiply_prime(90))  # True\nprint(is_multiply_prime(100))  # False\n\n\n# Alternative solution:\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i) and is_prime(a % i):\n            count += 1\n        if count == 3:\n            return True\n    return False\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(25))  # False\nprint(is_multiply_prime(15))  # False\nprint(is_multiply_prime(45))  # True\nprint(is_multiply_prime(60))  # False\nprint(is_multiply_prime(75))  # False\nprint(is_multiply_prime(90))  # True\nprint(is_multiply_prime(100))  # False\n\n# Another alternative solution:\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i) and is_prime(a % i):\n            count += 1\n        if count == 3:\n            return True\n    return False\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(25))  # False\nprint(is_multiply_prime(15))  # False\nprint(is_multiply_prime(45))  # True\nprint(is_multiply_prime(60))  # False\nprint(is_multiply_prime(75))  # False\nprint(is_multiply_prime(90))  # True"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n ** int(x) == x\n\n\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(1, 1))  # True\nprint(is_simple_power(5, 3))  # False\nprint(is_simple_power(10, 2))  # False\nprint(is_simple_power(10, 3))  # False\nprint(is_simple_power(10, 5))  # False\nprint(is_simple_power(10, 10))  # True\nprint(is_simple_power(10, 11))  # False\nprint(is_simple_power(10, 0))  # False\nprint(is_simple_power(0, 10))  # False\nprint(is_simple_power(0, 0))  # False\n"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a == int(round(a ** (1/3)) ** 3\n\n\n# Test cases\nprint(iscube(1)) # True\nprint(iscube(2)) # False\nprint(iscube(-1)) # True\nprint(iscube(64)) # True\nprint(iscube(0)) # True\nprint(iscube(180)) # False\n\n# Test cases with edge cases\nprint(iscube(1)) # True\nprint(iscube(2)) # False\nprint(iscube(-1)) # True\nprint(iscube(64)) # True\nprint(iscube(0)) # True\nprint(iscube(180)) # False\n\n# Test cases with other values\nprint(iscube(125)) # True\nprint(iscube(126)) # False\nprint(iscube(127)) # False\nprint(iscube(128)) # True\nprint(iscube(129)) # False\nprint(iscube(130)) # False\nprint(iscube(125)) # True\nprint(iscube(126)) # False\nprint(iscube(127)) # False\nprint(iscube(128)) # True\nprint(iscube(129)) # False\nprint(iscube(130)) # False\nprint(iscube(131)) # False\nprint(iscube(132)) # True\nprint(iscube(133)) # False\nprint(iscube(134)) # False\nprint(iscube(135)) # True\nprint(iscube(136)) # False\nprint(iscube(137)) # False\nprint(iscube(138)) # True\nprint(iscube(139)) # False\nprint(iscube(144)) # True\nprint(iscube(145)) # False\nprint(iscube(146)) # False\nprint(iscube(147)) # True\nprint(iscube(148)) # False\nprint(iscube(149)) # False\nprint(iscube(150)) # True\nprint(iscube(151)) # False\nprint(iscube(152)) # False\nprint(iscube(153)) # True\nprint(iscube(154)) # False\nprint(iscube(155)) # False\nprint(iscube(156)) # True\nprint(iscube(157)) # False\nprint(iscube(158)) # False\nprint(iscube(159)) # True\nprint(iscube(160)) # False\nprint(iscube(161)) # False\nprint(iscube(162)) # True\nprint(iscube(163)) # False\nprint(iscube(164)) # False\n"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def hex_to_decimal(hex_num):\n        decimal_num = 0\n        for i, digit in enumerate(hex_num):\n            if digit.isdigit():\n                decimal_num += int(digit) * 16**i\n            else:\n                decimal_num += {\n                    'A': 10,\n                    'B': 11,\n                    'C': 12,\n                    'D': 13,\n                    'E': 14,\n                    'F': 15\n                }[digit] * 16**i\n        return decimal_num\n\n    hex_digits = ['2', '3', '5', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            count += 1\n        elif is_prime(hex_to_decimal(digit)):\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2\n"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a binary string and your task is to convert it to decimal format.\n    The function should return an integer.\n\n    Examples:\n    binary_to_decimal(\"1111\")   # returns 7\n    binary_to_decimal(\"100000\")   # returns 16\n    \"\"\"\n    return int(binary[2:-2], 2)\n\n\n\ndef decimal_to_hexadecimal(decimal):\n    \"\"\"You will be given a decimal number and your task is to convert it to hexadecimal format.\n    The function should return a string, with each character representing a hexadecimal digit.\n\n    Examples:\n    decimal_to_hexadecimal(15)   # returns \"db0fdb\"\n    decimal_to_hexadecimal(32)   # returns \"db10db\"\n    \"\"\"\n    return hex(decimal)[2:]\n\n\n\ndef hexadecimal_to_decimal(hexadecimal):\n    \"\"\"You will be given a hexadecimal string and your task is to convert it to decimal format.\n    The function should return an integer.\n\n    Examples:\n    hexadecimal_to_decimal(\"1f\")   # returns 31\n    hexadecimal_to_decimal(\"10\")   # returns 16\n    \"\"\"\n    return int(hexadecimal, 16)\n\n\n\ndef hexadecimal_to_binary(hexadecimal):\n    \"\"\"You will be given a hexadecimal string and your task is to convert it to binary format.\n    The function should return a string, with each character representing a binary number.\n\n    Examples:\n    hexadecimal_to_binary(\"1f\")   # returns \"db11111db\"\n    hexadecimal_to_binary(\"10\")   # returns \"db1010db\"\n    \"\"\"\n    return bin(int(hexadecimal, 16))[2:]\n\n\n\ndef binary_to_hexadecimal(binary):\n    \"\"\"You will be given a binary string and your task is to convert it to hexadecimal format.\n    The function should return a string, with each character representing a hexadecimal digit.\n\n    Examples:\n    binary_to_hexadecimal(\"1111\")   # returns \"db0fdb\"\n    binary_to_hexadecimal(\"1010\")   # returns \"db10db\"\n    \"\"\"\n    return hex(int(binary[2:-2], 2))[2:]\n\n\n\ndef main():\n    decimal = 15\n    print(f\"Decimal"}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\n\n# Test cases\nprint(is_happy(\"aabb\")) # False\nprint(is_happy(\"abc\")) # True\nprint(is_happy(\"abcd\")) # True\nprint(is_happy(\"aaa\")) # False\nprint(is_happy(\"xyy\")) # False\nprint(is_happy(\"abca\")) # False\nprint(is_happy(\"abcaa\")) # False\nprint(is_happy(\"abcb\")) # True\nprint(is_happy(\"abc\")) # True\nprint(is_happy(\"abcabc\")) # False\nprint(is_happy(\"abcab\")) # True\nprint(is_happy(\"abcabcabc\")) # True\nprint(is_happy(\"abcabcab\")) # False\nprint(is_happy(\"abcabcabcd\")) # True\nprint(is_happy(\"abcabcabcdc\")) # False\nprint(is_happy(\"abcabcabcde\")) # False\nprint(is_happy(\"abcabcabcdea\")) # True\nprint(is_happy(\"abcabcabcdeab\")) # False\nprint(is_happy(\"abcabcabcdeabcd\")) # True\nprint(is_happy(\"abcabcabcdeabc\")) # False\nprint(is_happy(\"abcabcabcdeabcde\")) # False\nprint(is_happy(\"abcabcabcdeabcdef\")) # True\nprint(is_happy(\"abcabcabcdeabcdefg\")) # False\nprint(is_happy(\"abcabcabcdeabcdefgf\")) # True\nprint(is_happy(\"abcabcabcdeabcdefgh\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghi\")) # True\nprint(is_happy(\"abcabcabcdeabcdefghij\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghijk\")) # True\nprint(is_happy(\"abcabcabcdeabcdefghijkl\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghijklm\")) # True\nprint(is_happy(\"abcabcabcdeabcdefghijklmn\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghijklmno\")) # True\nprint(is_happy(\"abcabcabcdeabcdefghijklmnp\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghijklmnpq\")) # True\nprint(is_happy(\"abcabcabcdeabcdefghijklmnpqr\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghijklmnpqrs\")) # True\nprint(is_happy(\"abcabcabcdeabcdefghijklmnpqrst\")) # False\nprint(is_happy(\"abcabcabcdeabcdefghijklmnpqrstu\")) # True\nprint(is_h"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\n# Test the function with the example\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])) # Output: ['A+', 'B', 'C-', 'C', 'A-']\n\n# Test the function with some other inputs\nprint(numerical_letter_grade([3.8, 3.5, 2.9, 2.1, 1.8, 1.5, 0.9])) # Output: ['A', 'B', 'C', 'D+', 'D', 'E']\nprint(numerical_letter_grade([3.2, 2.9, 2.1, 1.8, 1.5, 0.9, 0.0])) # Output: ['B-', 'B', 'D', 'D', 'E', 'E']\nprint(numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])) # Output: ['E', 'E', 'E', 'E', 'E', 'E', 'E']\nprint(numerical_letter_grade([4.5, 4.2, 3.9, 3.6, 3.3, 2.6, 1.1])) # Output: ['A', 'A', 'B', 'B', 'C', 'D-']\n\n# Test the function with some edge cases\nprint(numerical_letter_grade([4.1, 3.8, 3.6, 3.3, 2.9, 2.6, 1.1, 0.0])) # Output: ['A', 'A', 'B', 'B', 'C', 'D', 'E']\nprint(numerical_letter_grade([4.0, 3.7, 3.3, 2.7, "}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False\nprint(prime_length('123'))  # False\nprint(prime_length(''))  # False\nprint(prime_length('a'))  # False\nprint(prime_length('1'))  # False\nprint(prime_length('2'))  # True\nprint(prime_length('11'))  # True\nprint(prime_length('233'))  # True\nprint(prime_length('1234'))  # False\nprint(prime_length('12345'))  # False\nprint(prime_length('123456'))  # False\nprint(prime_length('1234567'))  # False\nprint(prime_length('12345678'))  # False\nprint(prime_length('123456789'))  # False\nprint(prime_length('1234567890'))  # False\nprint(prime_length('12345678901'))  # False\nprint(prime_length('123456789012'))  # False\nprint(prime_length('1234567890123'))  # False\nprint(prime_length('12345678901234'))  # False\nprint(prime_length('123456789012345'))  # False\nprint(prime_length('1234567890123456'))  # False\nprint(prime_length('12345678901234567'))  # False\nprint(prime_length('123456789012345678'))  # False\nprint(prime_length('1234567890123456789'))  # False\nprint(prime_length('12345678901234567890'))  # False\nprint(prime_length('123456789012345678901'))  # False\nprint(prime_length('1234567890123456789012'))  # False\nprint(prime_length('12345678901234567890123'))  # False\nprint(prime_length('12345678901234567890"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1):10**n):\n        if i % 10 == 1 or i // 10**(n-1) == 1:\n            count += 1\n    return count\n\n\n\ndef test_count_ones_start_end():\n    assert count_ones_start_end(1) == 9\n    assert count_ones_start_end(2) == 90\n    assert count_ones_start_end(3) == 900\n    assert count_ones_start_end(4) == 9000\n    assert count_ones_start_end(5) == 90000\n    assert count_ones_start_end(6) == 900000\n    assert count_ones_start_end(7) == 9000000\n    assert count_ones_start_end(8) == 90000000\n    assert count_ones_start_end(9) == 900000000\n    assert count_ones_start_end(10) == 9000000000\n    assert count_ones_start_end(11) == 90000000000\n    assert count_ones_start_end(12) == 900000000000\n    assert count_ones_start_end(13) == 9000000000000\n    assert count_ones_start_end(14) == 90000000000000\n    assert count_ones_start_end(15) == 90000000000000\n    assert count_ones_start_end(16) == 900000000000000\n    assert count_ones_start_end(17) == 900000000000000\n    assert count_ones_start_end(18) == 9000000000000000\n    assert count_ones_start_end(19) == 90000000000000000\n    assert count_ones_start_end(20) == 900000000000000000\n\n\n\nif __name__ == \"__main__\":\n    test_count_ones_start_end()\n    print(count_ones_start_end(10))\n"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    return ''.join(str(int(digit) for digit in binary)\n\n\n\n# Test cases\nprint(sum_binary_digits(100))  # Output: \"1\"\nprint(sum_binary_digits(150))  # Output: \"110\"\nprint(sum_binary_digits(147))  # Output: \"110\"\nprint(sum_binary_digits(10000))  # Output: \"111111\"\nprint(sum_binary_digits(100000))  # Output: \"11111110\"\nprint(sum_binary_digits(1000000))  # Output: \"1111111111110\"\nprint(sum_binary_digits(10000000))  # Output: \"1111111111111110\"\nprint(sum_binary_digits(100000000))  # Output: \"111111111111111110\"\nprint(sum_binary_digits(1000000000))  # Output: \"11111111111111111110\"\nprint(sum_binary_digits(10000000000))  # Output: \"111111111111111111110\"\nprint(sum_binary_digits(10000000000))  # Output: \"1111111111111111111110\"\nprint(sum_binary_digits(100000000000))  # Output: \"11111111111111111111110\"\nprint(sum_binary_digits(100000000000))  # Output: \"11111111111111111111110\"\nprint(sum_binary_digits(100000000000))  # Output: \"11111111111111111111110\"\nprint(sum_binary_digits(1000000000000))  # Output: \"111111111111111111111110\"\nprint(sum_binary_digits(1000000000000))  # Output: \"111111111111111111111110\"\nprint(sum_binary_digits(1000000000000))  # Output: \"11111111111111111"}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\n# Test cases\nprint(add([4, 2, 6, 7]))  # Output: 2\nprint(add([1, 3, 5, 8, 4, 6, 7, 9, 2]))  # Output: 12\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 0\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 20\nprint(add([1, 3, 5, 7, 9, 11, 13, 15]))  # Output: 0\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))  # Output: 30\nprint(add([1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        if word.isalpha():\n            result.append(''.join(sorted(word)))\n        else:\n            result.append(word)\n    return ' '.join(result)\n\n\n\ndef test_anti_shuffle():\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    assert anti_shuffle('Python is awesome') == 'Python aei ssw'\n    assert anti_shuffle('This is a test') == 'This a ehts si'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n    assert anti_shuffle('The quick brown fox jumps over the lazy dog') == 'The aecb fijwkxo nopr stv'\n   "}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)) if x in row else None)\n    return sorted(result, key=lambda x: x[0])\n\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nprint(get_row([], 1)) # []\nprint(get_row([[], [1], [1, 2, 3]], 3)) # [(2, 2)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)) # [(0, 0), (1, 4), (2, 5), (1, 0)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 2)) # [(0, 1), (1, 3), (2, 4)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 3)) # [(0, 2), (1, 2), (2, 3)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 4)) # [(0, 3), (1, 1), (2, 1)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5)) # [(0, 4), (1, 2), (2, 4)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 6)) # [(0, 4), (1, 3), (2, 2)]\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 7)) # []\nprint(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 0)) # []\nprint(get_row([[1,2,3,4,5,6], [1,2,"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 3, 5, 2, 4]) == [1, 3, 2, 4, 5]\n    assert sort_array([1, 3, 5, 2, 4, 6]) == [6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7]) == [1, 3, 2, 4, 5, 6, 7]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7, 8]) == [8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7, 8, 9, 10, 11]) == [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7, 8, 9, 10, 11, 12]) == [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([1, 3, 5, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13]) == [1"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    new_dict = {char: new_alphabet[i] for i, char in enumerate(alphabet)}\n    return ''.join([new_dict.get(char, char) for char in s])\n\n\n# Test cases\nprint(encrypt('hi'))  # Output: 'lm'\nprint(encrypt('asdfghjkl'))  # Output: 'ewhjklnop'\nprint(encrypt('gf'))  # Output: 'kj'\nprint(encrypt('et'))  # Output: 'ix'\n\n# Test cases with uppercase letters\nprint(encrypt('HI'))  # Output: 'LM'\nprint(encrypt('ASDFGHJKL'))  # Output: 'EWHJKLNOP'\nprint(encrypt('GF'))  # Output: 'KJ'\nprint(encrypt('ET'))  # Output: 'IX'\n\n# Test cases with numbers and spaces\nprint(encrypt('1234567890'))  # Output: '345678901'\nprint(encrypt('hello world'))  # Output: 'jgnnq pbhvchg'\nprint(encrypt('Hello World'))  # Output: 'Jgnnq Pbhvchg'\n"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]\n\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5])) # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2])) # Output: 2\nprint(next_smallest([])) # Output: None\nprint(next_smallest([1, 1])) # Output: None\nprint(next_smallest([1, 2, 3, 4, 5, 3])) # Output: 3\nprint(next_smallest([1, 2, 3, 4, 5, 5])) # Output: 3\nprint(next_smallest([1, 1, 2, 2, 3])) # Output: 2\nprint(next_smallest([1, 2, 3, 4, 5, 5, 5])) # Output: 3\nprint(next_smallest([1, 1, 1, 2, 2, 3])) # Output: 2\nprint(next_smallest([1, 1, 1, 2, 2, 2])) # Output: None\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 3\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 11])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 11])) # Output: 6\nprint(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 11, 11])) # Output: 6\n"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for word in S.split() if word == \"I\" and S.startswith(\"I\"))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n\n\nprint(any_int(5, 2, 7)) # True\nprint(any_int(3, 2, 2)) # False\nprint(any_int(3, -2, 1)) # True\nprint(any_int(3.6, -2.2, 2)) # False\nprint(any_int(1, 2, 3)) # False\nprint(any_int(1, 2, 4)) # True\nprint(any_int(1, 2, 3.6)) # False\nprint(any_int(1, 2, '3')) # False\n\n\n# Solution\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n\nprint(any_int(5, 2, 7)) # True\nprint(any_int(3, 2, 2)) # False\nprint(any_int(3, -2, 1)) # True\nprint(any_int(3.6, -2.2, 2)) # False\nprint(any_int(1, 2, 3)) # False\nprint(any_int(1, 2, 4)) # True\nprint(any_int(1, 2, 3.6)) # False\nprint(any_int(1, 2, '3')) # False"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            index = vowels.index(letter.lower())\n            new_message += vowels[(index + 2) % 5]\n        else:\n            new_message += letter.upper() if letter.isupper() else letter.lower()\n    return new_message\n\n\n# Test cases\nprint(encode('test')) # Output: 'TGST'\nprint(encode('This is a message')) # Output: 'tHKS KS C MGSSCGG'\nprint(encode('Hello world')) # Output: 'Ifmmp xpsme'\nprint(encode('Python is awesome')) # Output: 'Rznhtn zs rqwbqn'\nprint(encode('I love programming')) # Output: 'J lv qnvg qnvqngrmgr'\nprint(encode('Aa bb cc dd ee')) # Output: 'Bb cc dd ff gg'\nprint(encode('Zz yy xy wx vu')) # Output: 'Aa bb cc dd ee'\nprint(encode('Qwertyuiop')) # Output: 'Asdfghjkl'\nprint(encode('Qq ww ee rr tt yy uu')) # Output: 'Rr ss dd ff gg'\nprint(encode('Python is not case sensitive')) # Output: 'Rpzthn zs nt rqwbqn tq rqybqn'\nprint(encode('The quick brown fox jumps over the lazy dog')) # Output: 'Thd fgr gbq nfjc qbhv qbzcgd qbzcgd'\nprint(encode('The lazy dog is not amused')) # Output: 'Thd lzy dg zs nt qbzcgd qbzcgd'\nprint(encode('The lazy dog is not amused.')) # Output: 'Thd lzy dg zs nt qbzcgd qbzcgd.'\nprint(encode('The quick brown fox jumps over the lazy dog.')) # Output: 'Thd fgr gbq nfjc qbhv qbzcgd qbzcgd.'\nprint(encode('The quick brown fox jumps over the lazy dog!')) # Output: 'Thd fgr gbq nfjc qbhv qbzcgd qbzcgd!'\nprint(encode('The quick brown fox jumps over the lazy dog?')) # Output: 'Thd fgr gbq nfjc qbhv qbzcgd qbzcgd?'\nprint(encode('The quick brown fox jumps over the lazy dog:')) # Output: 'Thd fgr gbq nfjc qbhv qbzcgd qbzcg"}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_prime = max(lst)\n    while not is_prime(max_prime):\n        lst.remove(max_prime)\n        max_prime = max(lst)\n    return sum_of_digits(max_prime)\n\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,2,181,32,4,32,3,2,32,324,4,3])) # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21])) # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7])) # Output: 7\n\n# Test cases for edge cases\nprint(skjkasdkd([0])) # Output: 0\nprint(skjkasdkd([1])) # Output: 1\nprint(skjkasdkd([1,2])) # Output: 3\nprint(skjkasdkd([1,2,3])) # Output: 6\nprint(skjkasdkd([1,2,3,4])) # Output: 10\nprint(skjkasdkd([1,2,3,4,5])) # Output: 15\nprint(skjkasdkd([1,2,3,4,5,6])) # Output: 15\nprint(skjkasdkd([1,2,3,4,5,6,7])) # Output: 15\nprint(skjkasdkd([1,2,3,4,5,6,7,8])) # Output: 15\nprint(skjkasdkd([1,2,3,4,5,6,7,8,9])) # Output: 15\nprint("}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # True\nprint(check_dict_case({})) # False\n\n# Test case for empty dictionary\nprint(check_dict_case({})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"c\":\"cherry\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"C\":\"cherry\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"c\":\"cherry\", \"d\":\"date\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"c\":\"cherry\", \"D\":\"date\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"c\":\"cherry\", \"D\":\"date\", \"e\":\"elderberry\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"c\":\"cherry\", \"D\":\"date\", \"E\":\"elderberry\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"c\":\"cherry\", \"D\":\"date\", \"e\":\"elderberry\", \"F\":\"fig\"})) # False\n\n# Test case for dictionary with mixed keys\nprint(check"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\n# Test cases\nprint(count_up_to(5)) # [2, 3]\nprint(count_up_to(11)) # [2, 3, 5, 7]\nprint(count_up_to(0)) # []\nprint(count_up_to(20)) # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1)) # []\nprint(count_up_to(18)) # [2, 3, 5, 7, 11, 13, 17]\nprint(count_up_to(100)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprint(count_up_to(101)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprint(count_up_to(10)) # [2, 3, 5, 7]\nprint(count_up_to(15)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\nprint(count_up_to(1000)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprint(count_up_to(101)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprint(count_up_"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = str(a)\n    b = str(b)\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    a = [int(i) for i in str(a[-1])]\n    b = [int(i) for i in str(b[-1])]\n    return a[0] * b[0]\n\n\nprint(multiply(148, 412)) # Output: 16\nprint(multiply(19, 28)) # Output: 72\nprint(multiply(2020, 1851)) # Output: 0\nprint(multiply(14, -15)) # Output: 20\n\n# Test.describe(\"Example Tests\")\n# Test.assert_equals(multiply(148, 412), 16)\n# Test.assert_equals(multiply(19, 28), 72)\n# Test.assert_equals(multiply(2020, 1851), 0)\n# Test.assert_equals(multiply(14, -15), 20)\n# Test.assert_equals(multiply(100, 100), 0)\n# Test.assert_equals(multiply(123, 456), 12)\n# Test.assert_equals(multiply(12, 34), 4)\n# Test.assert_equals(multiply(10000, 10000), 0)\n# Test.assert_equals(multiply(1234, 5678), 12)\n# Test.assert_equals(multiply(123, 456), 12)\n# Test.assert_equals(multiply(12, 34), 4)\n# Test.assert_equals(multiply(123, 456), 12)\n# Test.assert_equals(multiply(1234, 5678), 12)\n# Test.assert_equals(multiply(12345, 6789), 12)\n# Test.assert_equals(multiply(123456, 7890), 12)\n# Test.assert_equals(multiply(1234567, 890123), 12)\n# Test.assert_equals(multiply(12345678, 901234), 12)\n# Test.assert_equals(multiply(123456789, 1012345), 12)\n# Test.assert_equals(multiply(1234567890, 11112345), 12)\n# Test.assert_equals(multiply(12345678901, 1234567890), 12)\n# Test.assert_equals(multiply(123456789012, 12345678901), 12)\n# Test.assert_equals(multiply(1234567890123, 123456789012), 12)\n# Test.assert_equals(multiply(12345678901234, 1234567890"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n\n\n# Test cases\nprint(count_upper('aBCdEf')) # Output: 1\nprint(count_upper('abcdefg')) # Output: 0\nprint(count_upper('dBBE')) # Output: 0\nprint(count_upper('AbcDeF')) # Output: 1\nprint(count_upper('aBcDeF')) # Output: 1\nprint(count_upper('AbCdEf')) # Output: 2\nprint(count_upper('aBcDeFg')) # Output: 2\nprint(count_upper('aBcDeFgH')) # Output: 2\nprint(count_upper('aBcDeFgHi')) # Output: 3\nprint(count_upper('aBcDeFgHiJ')) # Output: 3\nprint(count_upper('aBcDeFgHiJk')) # Output: 4\nprint(count_upper('aBcDeFgHiJkL')) # Output: 4\nprint(count_upper('aBcDeFgHiJkLm')) # Output: 5\nprint(count_upper('aBcDeFgHiJkLmN')) # Output: 5\nprint(count_upper('aBcDeFgHiJkLmNo')) # Output: 6\nprint(count_upper('aBcDeFgHiJkLmNoP')) # Output: 6\nprint(count_upper('aBcDeFgHiJkLmNoPq')) # Output: 7\nprint(count_upper('aBcDeFgHiJkLmNoPqR')) # Output: 7\nprint(count_upper('aBcDeFgHiJkLmNoPqRs')) # Output: 8\nprint(count_upper('aBcDeFgHiJkLmNoPqRsT')) # Output: 8\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTu')) # Output: 9\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuV')) # Output: 9\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVw')) # Output: 10\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwX')) # Output: 10\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwXy')) # Output: 11\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZ')) # Output: 11\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZa')) # Output: 12\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZaB')) # Output: 12\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZaBc')) # Output: 13\nprint(count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZaBcD')) # Output: 13\nprint("}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    return int(round(float(value)) if float(value) - round(float(value)) == 0.5 else round(float(value)) + (1 if float(value) - round(float(value) > 0 else -1)) * 0.5)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i + 1)\n    return result\n\n\n\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2 * i for i in range(n)]\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"This is a test\"))  # [\"This\", \"is\", \"a\", \"test\"]\nprint(words_string(\"Hello world\"))  # [\"Hello\", \"world\"]\nprint(words_string(\"A, long, list, of, words, in, this, format\"))  # [\"A\", \"long\", \"of\", \"words\", \"in\", \"this\", \"format\"]\nprint(words_string(\"One, two, three, four, five, six, seven, eight, nine, ten\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\nprint(words_string(\"One two three four five six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four, five six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"One two three four five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \""}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\n# Test cases\nprint(choose_num(12, 15)) # Output: 14\nprint(choose_num(13, 12)) # Output: -1\nprint(choose_num(10, 15)) # Output: 14\nprint(choose_num(16, 20)) # Output: 20\nprint(choose_num(17, 20)) # Output: -1\nprint(choose_num(10, 10)) # Output: 10\nprint(choose_num(10, 11)) # Output: -1\nprint(choose_num(10, 12)) # Output: 10\nprint(choose_num(10, 13)) # Output: 12\nprint(choose_num(10, 14)) # Output: 14\nprint(choose_num(10, 15)) # Output: 14\nprint(choose_num(10, 16)) # Output: 16\nprint(choose_num(10, 17)) # Output: -1\nprint(choose_num(10, 18)) # Output: -1\nprint(choose_num(10, 19)) # Output: -1\nprint(choose_num(10, 20)) # Output: 20\nprint(choose_num(10, 21)) # Output: -1\nprint(choose_num(10, 22)) # Output: -1\nprint(choose_num(10, 23)) # Output: -1\nprint(choose_num(10, 24)) # Output: -1\nprint(choose_num(10, 25)) # Output: -1\nprint(choose_num(10, 26)) # Output: -1\nprint(choose_num(10, 27)) # Output: -1\nprint(choose_num(10, 28)) # Output: -1\nprint(choose_num(10, 29)) # Output: -1\nprint(choose_num(10, 30)) # Output: -1\nprint(choose_num(10, 31)) # Output: -1\nprint(choose_num(10, 32)) # Output: -1\nprint(choose_num(10, 33)) # Output: -1\nprint(choose_num(10, 34)) # Output: -1\nprint(choose_num(10, 35)) # Output: -1\nprint(choose_num(10, 36)) # Output: -1\nprint(choose_num(10, 37)) # Output: -1\nprint(choose_num(10, 38)) # Output: -1\nprint(choose_num(10, 39)) # Output: -1\nprint(choose_num(10, 40)) # Output: -1\nprint(choose_num(10, 41)) # Output: -1\nprint(choose_num(10, 42)) # Output: -1\nprint(choose_num(10, 43)) # Output: -1\nprint(choose_num(10, 44)) # Output: -1\nprint(choose_num(10, 45)) # Output: -1\nprint(choose_num(10, 46)) # Output: -1\nprint(choose_num(10, "}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n\n# Test cases\nprint(rounded_avg(1, 5)) # Output: \"0b11\"\nprint(rounded_avg(7, 5)) # Output: -1\nprint(rounded_avg(10, 20)) # Output: \"0b1111\"\nprint(rounded_avg(20, 33)) # Output: \"0b11010\"\nprint(rounded_avg(1, 10)) # Output: \"0b1111\"\nprint(rounded_avg(10, 1)) # Output: \"0b1111\"\nprint(rounded_avg(10, 11)) # Output: \"0b1111\"\nprint(rounded_avg(10, 12)) # Output: \"0b1111\"\nprint(rounded_avg(10, 13)) # Output: \"0b1111\"\nprint(rounded_avg(10, 14)) # Output: \"0b1111\"\nprint(rounded_avg(10, 15)) # Output: \"0b1111\"\nprint(rounded_avg(10, 16)) # Output: \"0b1111\"\nprint(rounded_avg(10, 17)) # Output: \"0b1111\"\nprint(rounded_avg(10, 18)) # Output: \"0b1111\"\nprint(rounded_avg(10, 19)) # Output: \"0b1111\"\nprint(rounded_avg(10, 20)) # Output: \"0b1111\"\nprint(rounded_avg(10, 21)) # Output: \"0b1111\"\nprint(rounded_avg(10, 22)) # Output: \"0b1111\"\nprint(rounded_avg(10, 23)) # Output: \"0b1111\"\nprint(rounded_avg(10, 24)) # Output: \"0b1111\"\nprint(rounded_avg(10, 25)) # Output: \"0b1111\"\nprint(rounded_avg(10, 26)) # Output: \"0b1111\"\nprint(rounded_avg(10, 27)) # Output: \"0b1111\"\nprint(rounded_avg(10, 28)) # Output: \"0b1111\"\nprint(rounded_avg(10, 29)) # Output: \"0b1111\"\nprint(rounded_avg(10, 30)) # Output: \"0b1111\"\nprint(rounded_avg(10, 31)) # Output: \"0b1111\"\nprint(rounded_avg(10, 32)) # Output: \"0b1111\"\nprint(rounded_avg(10, 33)) # Output: \"0b1111\"\nprint(rounded_avg(10, 34)) # Output: \"0b1111\"\nprint(rounded_avg(10, 35))"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            result.append(i)\n    return sorted(result)\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if not arr:\n        return []\n    \n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    arr.reverse()\n    \n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    \n    return result\n\n# Test cases\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3])) # [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])) # [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # [\"Nine\", \"Eight\", \"Seven\", \"Six\","}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(f(5))\n\n# Output: [1, 2, 6, 24, 15, 120]\n\n# Explanation:\n# The factorial of 2 is 2, the factorial of 4 is 24, the factorial of 6 is 720, and so on.\n# The sum of numbers from 1 to 2 is 3, the sum of numbers from 1 to 4 is 10, the sum of numbers from 1 to 6 is 21.\n# The function returns a list of size 5, with the values of the elements at even indices being the factorials,\n# and the values at odd indices being the sums of numbers from 1 to i.\n\n# Note that we use the built-in function range() to generate the numbers from 1 to i, and the built-in function sum() to calculate the sum.\n# We also use the ternary operator to check if i is even or odd, and append the factorial or the sum accordingly. "}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\n\n# Test cases\nprint(def_odd_palindrome(3))  # (1, 2)\nprint(def_odd_palindrome(12))  # (4, 6)\nprint(def_odd_palindrome(100))  # (25, 75)\nprint(def_odd_palindrome(10000))  # (500, 500)\nprint(def_odd_palindrome(100000))  # (16666, 8334)\n"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def count_digits(n):\n        if n == 0:\n            return 0\n        elif n < 0:\n            return count_digits(-n)\n        else:\n            return 1 + count_digits(n // 10)\n\n    def sum_digits(n):\n        if n == 0:\n            return 0\n        elif n < 0:\n            return -sum_digits(-n)\n        else:\n            return n % 10 + sum_digits(n // 10)\n\n    return sum(1 for num in arr if sum_digits(num) > 0)\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2])) # True\nprint(move_one_ball([3, 5, 4, 1, 2])) # False\nprint(move_one_ball([1, 2, 3, 4, 5])) # True\nprint(move_one_ball([5, 4, 3, 2, 1])) # True\nprint(move_one_ball([1, 2, 3, 4])) # True\nprint(move_one_ball([1, 2, 3])) # True\nprint(move_one_ball([1, 2, 2, 3])) # False\nprint(move_one_ball([1, 2, 1, 3])) # False\nprint(move_one_ball([1])) # True\nprint(move_one_ball([])) # True\n"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_numbers = [num for num in lst1 if num % 2 == 0]\n    odd_numbers = [num for num in lst1 if num % 2 != 0]\n    even_numbers2 = [num for num in lst2 if num % 2 == 0]\n    odd_numbers2 = [num for num in lst2 if num % 2 != 0]\n\n    if len(even_numbers) > len(even_numbers2):\n        return \"NO\"\n\n    for num in even_numbers:\n        if num in odd_numbers2:\n            return \"YES\"\n\n    return \"NO\"\n\n\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # \"NO\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))  # \"NO\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]))  # \"NO\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # \"NO\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # \"NO\"\nprint(exchange([1, 2, 3, 4], [1, 2, 3, "}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    test = test.split()\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    result = {}\n    for key, value in hist.items():\n        if value == max_count:\n            result[key] = value\n    return result\n\n\n\ndef test_histogram():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b a') == {'b': 4}\n    assert histogram('') == {}\n    assert histogram('a a a a a a b b c c') == {'a': 4, 'b': 1, 'c': 1}\n    assert histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    assert histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z') == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2, 'h': 2, 'i': 2, 'j': 2, 'k': 2, 'l': 2, 'm': 2, 'n': 2, 'o': 2, 'p': 2, 'q': 2, 'r': 2, 's': 2, 't': 2, 'u': 2, 'v': 2, 'w': 2, 'x': 2, 'y': 2, 'z': 2}\n    assert histogram('a b c d e f g h i j k l m n o"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([i for i in s if i not in c])\n    return s, s == s[::-1]\n\n\ns = \"abcde\"\nc = \"ae\"\nprint(def_delete(s,c))\n\ns = \"abcdef\"\nc = \"b\"\nprint(def_delete(s,c))\n\ns = \"abcdedcba\"\nc = \"ab\"\nprint(def_delete(s,c))\n\n\n# Output:\n# ('bcd', False)\n# ('acdef', False)\n# ('cdedc', True) "}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return result\n\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"1111111\"]))\n\n# Expected output:\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\n# Explanation:\n# In the first case, there is only one string in the input, and it has 4 odd digits, so the output should be \"the number of odd elements 4n the str4ng 4 of the 4nput.\"\n# In the second case, there are two strings, and the first one has 1 odd digit, and the second one has 6 odd digits, so the output should be [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] "}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n    min_subarray_sum = float('inf')\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        min_subarray_sum = min(min_subarray_sum, current_sum)\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return min_subarray_sum if min_subarray_sum != float('inf') else 0\n\n\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6\nprint(minSubArraySum([1, 2, 3, 4, 1]))  # Output: 1\nprint(minSubArraySum([1, 2, 3, 4]))  # Output: 1\nprint(minSubArraySum([1]))  # Output: 1\nprint(minSubArraySum([]))  # Output: 0\nprint(minSubArraySum([-1]))  # Output: -1\nprint(minSubArraySum([0, 0, 0, 0]))  # Output: 0\nprint(minSubArraySum([1, 2, -1, -2, -3]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4, -5]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4, -5, -6]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4, -5, -6, -7]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4, -5, -6, -7, -8]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))  # Output: -1\nprint(minSubArraySum([1, 2, -1, -2, -3"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    def lower_bucket(grid, bucket_capacity, row, col, direction):\n        \"\"\"\n        Helper function to lower the bucket in the given direction\n        \"\"\"\n        if direction == 'left':\n            col -= 1\n        elif direction == 'right':\n            col += 1\n        elif direction == 'up':\n            row -= 1\n        elif direction == 'down':\n            row += 1\n\n        if 0 <= row < len(grid) and 0 <= col < len(grid[0]) and grid[row][col] == 1:\n            grid[row][col] = 0\n            bucket_capacity -= 1\n            if bucket_capacity == 0:\n                return grid, bucket_capacity, True\n            else:\n                return lower_bucket(grid, bucket_capacity, row, col, direction)\n        else:\n            return grid, bucket_capacity, False\n\n    def count_lowers(grid, bucket_capacity):\n        \"\"\"\n        Helper function to count the number of times the bucket needs to be lowered\n        \"\"\"\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    grid, bucket_capacity, can_lower = lower_bucket(grid, bucket_capacity, i, j, 'left')\n                    if can_lower:\n                        count += 1\n                        grid, bucket_capacity, can_lower = lower_bucket(grid, bucket_capacity, i, j, 'right')\n                        if can_lower:\n                            count += 1\n                        else:\n                            return count\n                    else:\n                        return count\n                    grid, bucket_capacity, can_lower = lower_bucket(grid, bucket_capacity, i, j, 'up')\n                    if can_lower:\n                        count += 1\n                        grid, bucket_capacity, can_lower = lower_bucket(grid, bucket_capacity, i, j, 'down')\n                        if can_lower:\n                            count += 1\n                        else:\n                            return count\n                        return count\n\n    def count_lowers_helper(grid, bucket_capacity):\n        \"\"\"\n        Helper function to count the number of times the bucket needs to be lowered\n        \"\"\"\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    count += 1\n                    grid[i][j] = 0\n                    bucket_capacity -= 1\n                    if bucket_capacity == 0:\n                        return count\n                    count += count_lowers"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # initialize an empty list to store the words with n consonants\n    result = []\n    # iterate through each word in the list\n    for word in words:\n        # count the number of consonants in the word\n        consonants = sum(1 for letter in word if letter.lower() not in 'aeiou')\n        # if the word has exactly n consonants, add it to the result list\n        if consonants == n:\n            result.append(word)\n    return result\n\n# test the function with the given examples\nprint(select_words(\"Mary had a little lamb\", 4)) # should return [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3)) # should return [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2)) # should return []\nprint(select_words(\"Hello world\", 4)) # should return [\"world\"]\nprint(select_words(\"Uncle sam\", 3)) # should return [\"Uncle\"]\n\n# test the function with some additional examples\nprint(select_words(\"This is a test string\", 5)) # should return [\"This\", \"string\"]\nprint(select_words(\"This is a test string\", 1)) # should return [\"a\", \"is\", \"test\"]\nprint(select_words(\"This is a test string\", 0)) # should return []\nprint(select_words(\"\", 10)) # should return []\nprint(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 10)) # should return []\nprint(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 0)) # should return []\nprint(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 1)) # should return [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nprint(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2)) # should return [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nprint(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3)) # should return [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nprint(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    word = word.upper()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\")) # \"u\"\nprint(get_closest_vowel(\"FULL\")) # \"U\"\nprint(get_closest_vowel(\"quick\")) # \"\"\nprint(get_closest_vowel(\"ab\")) # \"\"\nprint(get_closest_vowel(\"hello\")) # \"o\"\nprint(get_closest_vowel(\"world\")) # \"o\"\nprint(get_closest_vowel(\"python\")) # \"o\"\nprint(get_closest_vowel(\"programming\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_vowel(\"programminglanguage\")) # \"o\"\nprint(get_closest_"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'\n\n\n\n# Test cases\nprint(match_parens(['()(', ')']) == 'Yes')\nprint(match_parens([')', ')']) == 'No')\nprint(match_parens(['(())', '()']) == 'Yes')\nprint(match_parens(['(())', '(()']) == 'No')\nprint(match_parens(['(())', '())']) == 'Yes')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens(['(())', '(()())']) == 'Yes')\nprint(match_parens(['(())', '(()))']) == 'No')\nprint(match_parens(['(())', '(()(']) == 'No')\nprint(match_parens(['(())', '(())']) == 'Yes')\nprint(match_parens"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return [max(arr)]\n    if k == 1:\n        return [min(arr)]\n    if k == len(arr):\n        return sorted(arr)\n\n    arr.sort()\n    return arr[:k]\n\n\n\nif __name__ == \"__main__\":\n    print(find_k_largest_elements([-3, -4, 5], 3))  # Output: [-4, -3, 5]\n    print(find_k_largest_elements([4, -4, 4], 2))  # Output: [4, 4]\n    print(find_k_largest_elements([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]\n"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 != 0)\n\n\n# Test cases\nprint(solution([5, 8, 7, 1])) # Output: 12\nprint(solution([3, 3, 3, 3, 3])) # Output: 9\nprint(solution([30, 13, 24, 321])) # Output: 0\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 1\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 1\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) # Output: 11\nprint(solution([1, 2, 3, 4, 5, 6,"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Iterate through the first k elements of the sorted array\n    for i in range(k):\n        # If the current element has two digits, add it to the total\n        if len(str(arr[i])) == 2:\n            total += arr[i]\n\n    return total\n\n\n# Test the function with the given example\narr = [111, 21, 3, 400, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24\n\n# Test the function with another example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 3\nprint(add_elements(arr, k))  # Output: 0\n\n# Test the function with another example\narr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nk = 4\nprint(add_elements(arr, k))  # Output: 0\n\n# Test the function with another example\narr = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nk = 4\nprint(add_elements(arr, k))  # Output: 0\n\n# Test the function with another example\narr = [1000, 200, 300, 400, 500, 600, 700, 800, 900]\nk = 4\nprint(add_elements(arr, k))  # Output: 10000\n\n# Test the function with another example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 1\nprint(add_elements(arr, k))  # Output: 1\n\n# Test the function with another example\narr = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nk = 1\nprint(add_elements(arr, k))  # Output: 10000\n\n# Test the function with another example\narr = [1000, 200, 300, 400, 500, 600, 700, 800, 900]\nk = 1\nprint(add_elements(arr, k))  # Output: 10000\n\n# Test the function with another example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 7\nprint(add_elements(arr, k))  # Output: 24\n\n# Test the function with another example\narr = [100, 200, 3"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        n //= 2\n    else:\n        n = 3 * n + 1\n    odd_list = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        odd_list.append(n)\n    return odd_list\n\n\n# Test cases\nprint(get_odd_collatz(5)) # [1, 5]\nprint(get_odd_collatz(13)) # [1, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\nprint(get_odd_collatz(7)) # [1, 7]\nprint(get_odd_collatz(1)) # [1]\nprint(get_odd_collatz(2)) # []\nprint(get_odd_collatz(3)) # [3]\nprint(get_odd_collatz(10)) # [1, 10, 5, 16, 8, 4, 2, 1]\nprint(get_odd_collatz(17)) # [1, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\nprint(get_odd_collatz(25)) # [1, 25, 76, 38, 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n\n# Time complexity: O(log n)\n# Space complexity: O(log n)"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if len(date) != 10 or not date.endswith('-') or not date.startswith('-'):\n        return False\n\n    if not (1 <= month <= 12) or not (1 <= day <= 31):\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and not (1 <= day <= 31):\n        return False\n    elif month in [4, 6, 9, 11] and not (1 <= day <= 30):\n        return False\n    elif month == 2 and not (1 <= day <= 29):\n        return False\n    elif month == 2 and year % 4 == 0 and (year % 100 == 0 and year % 400 != 0) or year % 4 != 0:\n        return False\n    elif month == 2 and year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) and not (1 <= day <= 29):\n        return False\n\n    return True\n\n\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False\nprint(valid_date('03-11-20000'))  # False\nprint(valid_date('02-29-2020'))  # True\nprint(valid_date('02-29-2021'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29-2024'))  # False\nprint(valid_date('02-29"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 == 1:\n                count += 1\n        return count\n\n# Test cases\nprint(split_words(\"Hello world!\")) # [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\")) # [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\")) # 3\nprint(split_words(\"a\")) # 1\nprint(split_words(\"\")) # 0\nprint(split_words(\"A\")) # 0\nprint(split_words(\"Abcdef\")) # 1\nprint(split_words(\"Abcdefg\")) # 2\nprint(split_words(\"Abcdefgh\")) # 3\nprint(split_words(\"Abcdefghij\")) # 4\nprint(split_words(\"Abcdefghijk\")) # 5\nprint(split_words(\"Abcdefghijkl\")) # 6\nprint(split_words(\"Abcdefghijklm\")) # 7\nprint(split_words(\"Abcdefghijklmn\")) # 8\nprint(split_words(\"Abcdefghijklmnop\")) # 9\nprint(split_words(\"Abcdefghijklmnopq\")) # 10\nprint(split_words(\"Abcdefghijklmnopqr\")) # 11\nprint(split_words(\"Abcdefghijklmnopqrs\")) # 12\nprint(split_words(\"Abcdefghijklmnopqrst\")) # 13\nprint(split_words(\"Abcdefghijklmnopqrstu\")) # 14\nprint(split_words(\"Abcdefghijklmnopqrstuv\")) # 15\nprint(split_words(\"Abcdefghijklmnopqrstuvw\")) # 16\nprint(split_words(\"Abcdefghijklmnopqrstuvwx\")) # 17\nprint(split_words(\"Abcdefghijklmnopqrstuvwxy\")) # 18\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyz\")) # 19\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyzabc\")) # 20\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyzabcd\")) # 21\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyzabcde\")) # 22\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyzabcdef\")) # 23\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyzabcdefg\")) # 24\nprint(split_words(\"Abcdefghijklmnopqrstuvwxyzabcdefgh"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 7, 9])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 10])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 11])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # True\nprint(is_sorted([1"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if is_prime(intersection_end - intersection_start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"\nprint(intersection((1, 3), (2, 4)))  # \"NO\"\nprint(intersection((-1, 5), (2, 7)))  # \"NO\"\nprint(intersection((-1, 5), (4, 7)))  # \"YES\"\nprint(intersection((-1, 5), (5, 7)))  # \"NO\"\nprint(intersection((-1, 5), (-3, 7)))  # \"YES\"\nprint(intersection((-1, 5), (-3, 6)))  # \"NO\"\nprint(intersection((-1, 5), (-3, 5)))  # \"YES\"\nprint(intersection((-1, 5), (-3, 4)))  # \"NO\"\nprint(intersection((-1, 5), (1, 5))  # \"YES\"\nprint(intersection((-1, 5), (1, 6))  # \"NO\"\nprint(intersection((-1, 5), (-3, 6))  # \"YES\"\nprint(intersection((-1, 5), (-3, 7))  # \"NO\"\nprint(intersection((-1, 5), (-3, 5))  # \"YES\"\nprint(intersection((-1, 5), (-3, 4))  # \"NO\"\nprint(intersection((-1, 5), (1, 5))  # \"YES\"\nprint(intersection((-1, 5), (1, 6))  # \"NO\"\nprint(intersection((-1, 5), (-3, 6))  # \"YES\"\nprint(intersection((-1, 5), (-3, 7))  # \"NO\"\nprint(intersection((-1, 5), (-3, 5))  # \"YES\"\nprint(intersection((-1, 5), (-3, 4))  # \"NO\"\n\n# Test cases with negative numbers\nprint(intersection((-1, 5), (-"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x) * (-1) ** (x < 0) for x in arr)\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    if k > n*n:\n        return []\n    if k == 1:\n        return [min(grid[0][0])]\n    if k == 2:\n        return [min(grid[0][0], grid[0][1]), min(grid[1][0], grid[1][1])]\n\n    def dfs(grid, k, i, j, visited, path, res):\n        if k == 0:\n            res.append(path)\n            return\n        visited[i][j] = True\n        for x, y in [(i-1, j), (i, j-1), (i+1, j), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                dfs(grid, k-1, x, y, visited, path + [grid[x][y]], res)\n        visited[i][j] = False\n\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    res = []\n    dfs(grid, k, 0, 0, visited, [grid[0][0]], res)\n    return sorted(res[0])\n\n\n# Test cases\ngrid1 = [ [1,2,3], [4,5,6], [7,8,9] ]\ngrid2 = [ [5,9,3], [4,1,6], [7,8,2] ]\nprint(minPath(grid1, 3)) # Output: [1, 2, 1]\nprint(minPath(grid2, 1)) # Output: [1]\nprint(minPath(grid2, 2)) # Output: [1, 2]\nprint(minPath(grid2, 3)) # Output: [1, 2, 1]\nprint(minPath(grid2, 4)) # Output: [1, 2, 1, 1]\nprint(minPath(grid2, 5)) # Output: [1, 2, 1, 2, 1]\nprint(minPath(grid2, 6)) # Output: [1, 2, 1, 2, 1, 1]\nprint(minPath(grid2, 7)) # Output: [1, 2, 1, 2, 1, 2, 1]\nprint(minPath(grid2, 8)) # Output: [1, 2, 1, 2,"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        tribonacci = [1, 3, 2]\n        for i in range(3, n + 1):\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci\n\n\n# Test cases\nprint(tri(3))  # Output: [1, 3, 2, 8]\nprint(tri(5))  # Output: [1, 3, 2, 8, 17, 64, 256]\nprint(tri(10))  # Output: [1, 3, 2, 8, 17, 64, 256, 128, 793, 480, 2808, 1607, 11340, 6476, 3835]\nprint(tri(0))  # Output: []\nprint(tri(1))  # Output: [1]\nprint(tri(2))  # Output: [1, 3]\nprint(tri(4))  # Output: [1, 3, 2, 8]\nprint(tri(100))  # Output: [1, 3, 2, 8, 17, 64, 256, 128, 793, 480, 2808, 1607, 11340, 6476, 3835, 22457, 130038, 73087, 43467, 241370, 1223866, 650807, 3545708, 1974224, 10968767, 6167836, 34027385, 18419192, 10968767, 6167836, 34027385, 1974224, 1096"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\n# Test cases\nprint(digits(1))  # Output: 1\nprint(digits(4))  # Output: 0\nprint(digits(235))  # Output: 15\nprint(digits(1024))  # Output: 0\nprint(digits(1111))  # Output: 3\nprint(digits(987654321))  # Output: 9\nprint(digits(123456789))  # Output: 0\nprint(digits(1234567890))  # Output: 0\nprint(digits(12345678901234567890))  # Output: 0\nprint(digits(123456789012345678901234567890))  # Output: 0\nprint(digits(1234567890123456789012345678901234567890))  # Output: 0\nprint(digits(12345678901234567890123456789012345678901234567890))  # Output: 0\nprint(digits(123456789012345678901234567890123456789012345678901234567890))  # Output: 0\nprint(digits(1234567890123456789012345678901234567890123456789012345678901234567890))  # Output: 0\nprint(digits(12345678901234567890123456789012345678901234"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True\n\n# Test cases\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[]')) # False\n# print(is_nested('[[]')) # False\n# print(is_nested('[]]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[]')) # False\n# print(is_nested('[[]')) # False\n# print(is_nested('[]]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[]')) # False\n# print(is_nested('[[]')) # False\n# print(is_nested('[]]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_nested('[][]')) # False\n# print(is_nested('[[][]')) # False\n# print(is_"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst = [int(math.ceil(x))**2 for x in lst]\n    return sum(lst)\n\n\n# Test cases\nprint(sum_squares([1,2,3])) # should return 14\nprint(sum_squares([1,4,9])) # should return 98\nprint(sum_squares([1,3,5,7])) # should return 84\nprint(sum_squares([1.4,4.2,0])) # should return 29\nprint(sum_squares([-2.4,1,1])) # should return 6\n\n\n# Test cases\nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert sum_squares([-2.4,1,1]) == 6\n\n# Test cases with negative numbers\nassert sum_squares([-1,2,-3]) == 9\nassert sum_squares([-1,4,-9]) == 98\nassert sum_squares([-1,3,-5,-7]) == 84\nassert sum_squares([-1.4,-4.2,0]) == 29\nassert sum_squares([-2.4,-1,1]) == 6\n\n# Test cases with decimals\nassert sum_squares([1.5,2.6,3.1]) == 14\nassert sum_squares([1.4,4.2,9.0]) == 98\nassert sum_squares([1.3,5.5,7.7]) == 84\nassert sum_squares([1.4,4.2,0.0]) == 29\nassert sum_squares([-2.4,-1.0,1.0]) == 6\n\n# Test cases with negative decimals\nassert sum_squares([-1.5,-2.6,-3.1]) == 9\nassert sum_squares([-1.4,-4.2,-9.0]) == 98\nassert sum_squares([-1.3,-5.5,-7.7]) == 84\nassert sum_squares([-1.4,-4.2,0.0]) == 29\nassert sum_squares([-2.4,-1.0,-1.0]) == 6\n\n# Test cases with negative numbers and decimals\nassert sum_squares([-1.5,2.6,-3.1]) == 9\nassert sum_squares([-1.4,4.2,-9.0]) == 98\nassert sum_squares([-1.3,5.5,-7.7]) == 84\nassert sum_squares([-1.4,4.2,0.0]) == 29\nassert sum_squares([-2.4,-1.0,-1.0]) == 6\n\n# Test cases with negative numbers and decimals\nassert sum_squares([-1.5,2.6,-3.1]) == 9\nassert sum_squares([-1.4,4.2,-9.0]) == 98\nassert sum_squares([-1.3,5.5,-7.7]) == 84\nassert sum_squares([-1.4,4.2,0.0]) == 29\nassert sum_squares([-"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:\n        return False\n    if txt[-1].isalpha() and not txt[-2].isalpha():\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # should return False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # should return True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # should return False\nprint(check_if_last_char_is_a_letter(\"\")) # should return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # should return True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # should return False\nprint(check_if_last_char_is_a_letter(\"\")) # should return False "}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n\n\n# Test cases\nprint(can_arrange([1,2,4,3,5])) # Output: 3\nprint(can_arrange([1,2,3])) # Output: -1\nprint(can_arrange([5,4,3,2,1])) # Output: 0\nprint(can_arrange([3,2,1,4])) # Output: 2\nprint(can_arrange([1,3,2,4])) # Output: 1\nprint(can_arrange([4,3,2,1])) # Output: 0\nprint(can_arrange([3,1,4,2])) # Output: 1\nprint(can_arrange([2,4,6,8,10])) # Output: 1\nprint(can_arrange([10,8,6,4,2])) # Output: 0\nprint(can_arrange([1,2,3,4,5])) # Output: 3\nprint(can_arrange([5,3,2,1])) # Output: 0\nprint(can_arrange([1,2,3,4])) # Output: -1\nprint(can_arrange([1,1,1,1])) # Output: -1\nprint(can_arrange([1,2,3,3,4,5])) # Output: 3\nprint(can_arrange([5,4,3,2,1,1])) # Output: 0\nprint(can_arrange([1,2,3,4,5,5])) # Output: 3\nprint(can_arrange([1,2,3,4,5,5])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,6])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7,6])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7,6,7])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7,6,7,6])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7,6,7,6,7])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7,6,7,6,7,6])) # Output: 3\nprint(can_arrange([1,2,3,4,5,6,7,7,6,7,6,7,6,7,6,7])) # Output:"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_int = None\n    pos_int = None\n    for i in lst:\n        if i < 0:\n            if neg_int is None or i > neg_int:\n                neg_int = i\n        elif i > 0:\n            if pos_int is None or i < pos_int:\n                pos_int = i\n    return (neg_int, pos_int)\n\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) # (None, 1)\nprint(largest_smallest_integers([])) # (None, None)\nprint(largest_smallest_integers([0])) # (None, None)\nprint(largest_smallest_integers([-1, 2, 3, 4, 5, 6, 7, 8, 9])) # (-1, 1)\nprint(largest_smallest_integers([-5, -3, -2, -1, 0, 1, 2, 3, 4])) # (-5, 0)\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4])) # (-5, 1)\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])) # (None, None)\nprint(largest_smallest_integers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) # (-1, 1)\nprint(largest_smallest_integers([-5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) # (-5, 1)\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9])) # (-9, None)\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])) # (None, None)\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9])) # (-9, None)\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])) # (None, None)\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9])) # (-9, None)\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # (None, 1)\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10])) # (-9, 1)\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # (None, None)\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    a = float(a.replace(\",\", \".\")) if isinstance(a, str) else a\n    b = float(b.replace(\",\", \".\")) if isinstance(b, str) else b\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a if isinstance(a, type(b)) else b\n    else:\n        return b if isinstance(b, type(a)) else a\n\n\n# Test cases\nprint(compare_one(1, 2.5))  # 2.5\nprint(compare_one(1, \"2,3\"))  # \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \"6\"\nprint(compare_one(\"1\", 1))  # None\nprint(compare_one(1, \"2,3\"))  # \"2,3\"\nprint(compare_one(\"1\", \"2,3\"))  # \"2,3\"\nprint(compare_one(1, 3))  # 3\nprint(compare_one(\"1\", \"3\"))  # \"3\"\nprint(compare_one(\"1\", \"1\"))  # None\nprint(compare_one(1, 1))  # None\nprint(compare_one(\"1\", \"1\"))  # None\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1,5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one(\"1.5\", \"2.5\"))  # \"2.5\"\nprint(compare_one(\"1.5\", \"2,5\"))  # \"2,5\"\nprint(compare_one"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if i+j+k+l == n and i%2 == 0 and j%2 == 0 and k%2 == 0 and l%2 == 0:\n                        return True\n    return False\n\n\n# Test cases\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True\nprint(is_equal_to_sum_even(10)) # True\nprint(is_equal_to_sum_even(12)) # False\nprint(is_equal_to_sum_even(14)) # True\nprint(is_equal_to_sum_even(16)) # True\nprint(is_equal_to_sum_even(20)) # True\nprint(is_equal_to_sum_even(22)) # False\nprint(is_equal_to_sum_even(24)) # True\nprint(is_equal_to_sum_even(26)) # False\nprint(is_equal_to_sum_even(28)) # True\nprint(is_equal_to_sum_even(30)) # False\nprint(is_equal_to_sum_even(32)) # True\nprint(is_equal_to_sum_even(34)) # False\nprint(is_equal_to_sum_even(36)) # True\nprint(is_equal_to_sum_even(40)) # True\nprint(is_equal_to_sum_even(42)) # False\nprint(is_equal_to_sum_even(44)) # True\nprint(is_equal_to_sum_even(46)) # False\nprint(is_equal_to_sum_even(48)) # True\nprint(is_equal_to_sum_even(50)) # False\nprint(is_equal_to_sum_even(52)) # True\nprint(is_equal_to_sum_even(54)) # False\nprint(is_equal_to_sum_even(56)) # True\nprint(is_equal_to_sum_even(58)) # False\nprint(is_equal_to_sum_even(60)) # True\nprint(is_equal_to_sum_even(62)) # False\nprint(is_equal_to_sum_even(64)) # True\nprint(is_equal_to_sum_even(66)) # False\nprint(is_equal_to_sum_even(68)) # True\nprint(is_equal_to_sum_even(70)) # False\nprint(is_equal_to_sum_even(72)) # True\nprint(is_equal_to_sum_even(74)) # False\nprint(is_equal_to_sum_even(76)) # True\nprint(is_equal_to_sum_even(78)) # False\nprint(is_equal_to_sum_even(80)) # True\nprint(is_equal_to_sum_even(82)) # False\nprint(is_equal_to_sum_even(84)) # True\nprint(is_equal_to_sum_even(86)) # False\nprint(is_equal_to_sum_even(88)) # True\nprint(is_equal_to_sum_even(90)) # False\nprint("}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(n, 0, -1):\n            result *= i\n        return result\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(special_factorial(4))  # Output: 288\n"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r'\\s+', lambda x: '-' if len(x.group(0)) > 1 else '_', text)\n\n\ndef fix_spaces_in_dict(d):\n    \"\"\"\n    Given a dictionary d, recursively replace all spaces in keys and values with underscores\n    \"\"\"\n    if isinstance(d, dict):\n        return {fix_spaces(k): fix_spaces_in_dict(v) for k, v in d.items()}\n    elif isinstance(d, (list, tuple)):\n        return [fix_spaces_in_dict(x) for x in d]\n    else:\n        return d\n\ndef fix_spaces_in_dict_recursive(d):\n    \"\"\"\n    Given a dictionary d, recursively replace all spaces in keys and values with underscores\n    \"\"\"\n    if isinstance(d, dict):\n        return {fix_spaces(k): fix_spaces_in_dict_recursive(v) for k, v in d.items()}\n    elif isinstance(d, (list, tuple)):\n        return [fix_spaces_in_dict_recursive(x) for x in d]\n    else:\n        return d\n\ndef fix_spaces_in_dict_recursive_inplace(d):\n    \"\"\"\n    Given a dictionary d, recursively replace all spaces in keys and values with underscores\n    \"\"\"\n    if isinstance(d, dict):\n        for k, v in d.items():\n            d[fix_spaces(k)] = fix_spaces_in_dict_recursive_inplace(v)\n        return d\n    elif isinstance(d, (list, tuple)):\n        return [fix_spaces_in_dict_recursive_inplace(x) for x in d]\n    else:\n        return d\n\ndef fix_spaces_in_dict_recursive_inplace_2(d):\n    \"\"\"\n    Given a dictionary d, recursively replace all spaces in keys and values with underscores\n    \"\"\"\n    if isinstance(d, dict):\n        for k, v in list(d.items()):\n            if isinstance(v, (dict, list, tuple):\n                fix_spaces_in_dict_recursive_inplace_2(v)\n            d[fix_spaces(k)] = fix_spaces_in_dict_recursive_inplace_2(v)\n        return d\n    elif isinstance(d, (list, tuple):\n        for i, x in enumerate(d):\n            if isinstance(x, (dict, list, tuple):\n                fix_spaces_in_dict_recursive_inplace_2(x)\n            d[i] = fix_spaces_in_dict_recursive_inplace_2(x)\n        return d\n    else:\n        return d\n\ndef fix_spaces_in_dict_recursive_inplace_3(d):\n    \"\"\"\n    Given a dictionary d, recursively replace all spaces in keys and values with underscores\n    \"\"\"\n    if isinstance(d, dict):\n        for k, v in list(d.items()):\n            if isinstance(v, (dict, list, tuple):\n                fix_spaces_in_dict_recursive_inplace_3(v)\n            d[fix_spaces(k)] = fix_spaces_in_dict_"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count('.') > 1 or file_name.count('.') == 0:\n        return 'No'\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n    if not file_name.split('.')[-1].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not file_name.split('.')[0].isalpha():\n        return 'No'\n    return 'Yes'\n\n\n# Test cases\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\nprint(file_name_check(\"example.exe\")) # => 'Yes'\nprint(file_name_check(\"example.py\")) # => 'No'\nprint(file_name_check(\"example.txt.py\")) # => 'No'\nprint(file_name_check(\"example.dll.exe\")) # => 'No'\nprint(file_name_check(\"example.exe.txt\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt\")) # => 'No'\nprint(file_name_check(\"example.exe.dll\")) # => 'Yes'\nprint(file_name_check(\"example.exe.dll.exe\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.dll\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt.exe\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt.dll\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt.exe.dll\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt.exe.dll.txt\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt.exe.dll.exe\")) # => 'No'\nprint(file_name_check(\"example.exe.dll.txt.exe.dll.exe.txt\")) # => 'No'\nprint(file_name_check(\"a.exe\")) # => 'Yes'\nprint(file_name_check(\"A.exe\")) # => 'Yes'\nprint(file_name_check(\"a.txt\")) # => 'Yes'\nprint(file_name_check(\"A.txt\")) # => 'Yes'\nprint(file_name_check(\"a.dll\")) # => 'Yes'\nprint(file_name_check(\"A.dll\")) # => 'Yes'\nprint(file_name_check(\"a.exe.txt\")) # => 'Yes'\nprint(file_name_check(\"A.exe.txt\")) # => 'Yes'\nprint(file_name_check(\"a.dll.exe\")) # => 'Yes'\nprint(file_name_check(\"A.dll.exe\")) # => 'Yes'\nprint(file_name_check(\"a.exe.dll\")) # => 'Yes'\nprint(file_name_check(\"A.exe.dll\")) # => 'Yes'\nprint(file_name_check(\"a.dll.txt\")) # => 'Yes'\nprint(file_name_check(\"A.dll.txt\")) # => 'Yes'\nprint(file_name_check(\"a.exe.dll."}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i]**3\n    return result\n\n\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 130\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 1300\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # Output: 13000\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # Output: 130000\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))  # Output: 1300000\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))  # Output: 13000000\n\n\n# Test cases for edge cases\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))  # Output: 130000000\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))  # Output: 1300000000\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))  # Output: 13000000000\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\n\n\n# Test cases\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\"\nprint(words_in_sentence(\"prime numbers\"))  # Output: \"\"\nprint(words_in_sentence(\"prime numbers are cool\"))  # Output: \"prime numbers\"\nprint(words_in_sentence(\"I love programming\"))  # Output: \"love programming\"\nprint(words_in_sentence(\"I love programming and testing\"))  # Output: \"love programming and\"\nprint(words_in_sentence(\"I love programming and testing prime numbers\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11 23\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11 23 29\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11 23 29 31\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11 23 29 31 47\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11 23 29 31 47 53\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 11 23 29 31 47 53 59\"))  # Output: \"love programming and testing\"\nprint(words_in_sentence(\"I love programming and testing prime numbers 123 456 789 "}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    if x_denominator * n_numerator % n_denominator == 0:\n        return True\n    else:\n        return False\n\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\nprint(simplify(\"1/2\", \"1/4\"))  # True\nprint(simplify(\"1/3\", \"1/3\"))  # True\nprint(simplify(\"1/4\", \"1/2\"))  # False\nprint(simplify(\"1/2\", \"1/4\"))  # True\nprint(simplify(\"1/3\", \"1/6\"))  # False\nprint(simplify(\"1/6\", \"1/3\"))  # True\nprint(simplify(\"1/10\", \"1/6\"))  # True\nprint(simplify(\"1/10\", \"5/6\"))  # False\nprint(simplify(\"1/10\", \"7/6\"))  # False\nprint(simplify(\"1/10\", \"1/10\"))  # True\nprint(simplify(\"1/10\", \"11/10\"))  # False\nprint(simplify(\"1/10\", \"13/10\"))  # False\nprint(simplify(\"1/10\", \"17/10\"))  # False\nprint(simplify(\"1/10\", \"19/10\"))  # False\nprint(simplify(\"1/10\", \"23/10\"))  # False\nprint(simplify(\"1/10\", \"29/10\"))  # False\nprint(simplify(\"1/10\", \"31/10\"))  # False\nprint(simplify(\"1/10\", \"37/10\"))  # False\nprint(simplify(\"1/10\", \"41/10\"))  # False\nprint(simplify(\"1/10\", \"47/10\"))  # False\nprint(simplify(\"1/10\", \"53/10\"))  # False\nprint(simplify(\"1/10\", \"59/10\"))  # False\nprint(simplify(\"1/10\", \"61/10\"))  # False\nprint(simplify(\"1/10\", \"67/10\"))  # False\nprint(simplify(\"1/10\", \"71/10\"))  # False\nprint(simplify(\"1/10\", \"73/10\"))  # False\nprint(simplify(\"1/10\", \"79/10\"))  # False\nprint(simplify(\"1/10\", \"83/10\"))  # False\nprint(simplify(\"1/10\", \"89/10\"))  # False\nprint(simplify(\"1/10\", \"97/10\"))  # False\nprint(simplify(\"1/10\", \"101/10\"))  # False\nprint(simplify(\"1/10\", \"103/10\"))  # False\nprint(simplify(\""}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15])) # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Output: 2\nprint(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 0\nprint(specialFilter([11, 13, 15, 17, 19, 21, 23, 25, 27, 29])) # Output: 4\nprint(specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19])) # Output: 4\nprint(specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 2, 4, 6, 8, 10])) # Output: 0\nprint(specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])) # Output: 4\n\n# Test case for negative numbers\nprint(specialFilter([-11, -13, -15, -17, -19])) # Output: 0\nprint(specialFilter([-1, -3, -5, -7, -9])) # Output: 0\nprint(specialFilter([-11, -13, -15, -17, -19, -21, -23, -25, -27, -29])) # Output: 0\nprint(specialFilter([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29])) # Output: 0\n\n# Test case for even numbers\nprint(specialFilter([112, 114, 116, 118, 120, 122])) # Output: 0\nprint(specialFilter([121, 123, 125, 127, 129])) # Output: 0\nprint(specialFilter([112, 114, 116, 118, 120, 122, 121, 123, 125, 127, 129])) # Output: 2\nprint(specialFilter([112, 114, 116, 118, 120, 122, 121, 123, 125, 127, 129, 131, 133, 135])) # Output: 4\n\n# Test case for even numbers with negative numbers\nprint(specialFilter([-112, -114, -11"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n\n\n# Test the function with the given example\nprint(get_max_triples(5))  # Output: 1\n\n# Test the function with other examples\nprint(get_max_triples(10))  # Output: 4\nprint(get_max_triples(100))  # Output: 10\nprint(get_max_triples(1000))  # Output: 100\nprint(get_max_triples(10000))  # Output: 1000\n\n# Test the function with custom input\nprint(get_max_triples(100000))  # Output: 10000\nprint(get_max_triples(1000000))  # Output: 100000\nprint(get_max_triples(10000000))  # Output: 100000\nprint(get_max_triples(100000000))  # Output: 100000\n\n# Test the function with edge cases\nprint(get_max_triples(1))  # Output: 0\nprint(get_max_triples(2))  # Output: 0\nprint(get_max_triples(3))  # Output: 0\nprint(get_max_triples(4))  # Output: 0\nprint(get_max_triples(5))  # Output: 0\nprint(get_max_triples(6))  # Output: 0\nprint(get_max_triples(7))  # Output: 0\nprint(get_max_triples(8))  # Output: 0\nprint(get_max_triples(9))  # Output: 0\nprint(get_max_triples(10))  # Output: 0\nprint(get_max_triples(11))  # Output: 0\nprint(get_max_triples(12))  # Output: 0\nprint(get_max_triples(13))  # Output: 0\nprint(get_max_triples(14))  # Output: 0\nprint(get_max_triples(15))  # Output: 0\nprint(get_max_triples(16))  # Output: 0\nprint(get_max_triples(17))  # Output: 0\nprint(get_max_triples(18))  # Output: 0\nprint(get_max_triples(19))  # Output: 0\nprint(get_max_triples(20))  # Output: 0\nprint(get_max_triples(21))  # Output: 0\nprint(get_max_triples(22))  # Output: 0\nprint(get_max_triples(23))  # Output: 0\nprint(get_max_triples(24))  # Output: 0\nprint(get_max_triples(25))  # Output: 0\nprint(get_max_triples(26"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        return tuple(planets[index2+1:index1])\n    else:\n        return tuple(planets[index1+1:index2])\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\")) # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\")) # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\")) # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Mars\", \"Saturn\")) # ()\nprint(bf(\"Saturn\", \"Mars\")) # ()\nprint(bf(\"Uranus\", \"Jupiter\")) # ()\nprint(bf(\"Venus\", \"Earth\")) # ()\nprint(bf(\"Earth\", \"Venus\")) # ()\nprint(bf(\"Jupiter\", \"Earth\")) # ()\nprint(bf(\"Saturn\", \"Venus\")) # ()\nprint(bf(\"Uranus\", \"Venus\")) # ()\nprint(bf(\"Neptune\", \"Mercury\")) # ()\nprint(bf(\"Mars\", \"Mars\")) # ()\nprint(bf(\"Mercury\", \"Mercury\")) # ()\nprint(bf(\"Uranus\", \"Uranus\")) # ()\nprint(bf(\"Neptune\", \"Neptune\")) # ()\nprint(bf(\"Saturn\", \"Saturn\")) # ()\nprint(bf(\"Venus\", \"Venus\")) # ()\nprint(bf(\"Mars\", \"Mars\")) # ()\nprint(bf(\"Jupiter\", \"Jupiter\")) # ()\nprint(bf(\"Saturn\", \"Saturn\")) # ()\nprint(bf(\"Uranus\", \"Uranus\")) # ()\nprint(bf(\"Neptune\", \"Neptune\")) # ()\nprint(bf(\"Mercury\", \"Mercury\")) # ()\nprint(bf(\"Venus\", \"Venus\")) # ()\nprint(bf(\"Mars\", \"Mars\")) # ()\nprint(bf(\"Jupiter\", \"Jupiter\")) # ()\nprint(bf(\"Saturn\", \"Saturn\")) # ()\nprint(bf(\"Uranus\", \"Uranus\")) # ()\nprint(bf(\"Neptune\", \"Neptune\")) # ()\nprint(bf(\"Mercury\", \"Mercury\")) # ()\nprint(bf(\"Venus\", \"Venus\")) # ()\nprint(bf(\"Mars\", \"Mars\")) # ()\nprint(bf(\"Jupiter\", \"Jupiter\")) # ()\nprint(bf(\"Saturn\", \"Saturn\")) # ()\nprint(bf(\"Uranus\", \"Uranus\")) # ()\nprint(bf(\"Neptune\", \"Neptune\")) # ()\nprint(bf(\"Mercury\", \"Mercury\")) # ()\nprint(bf"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [x for x in lst if len(x) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))\n\n\n\ndef test_list_sort():\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    assert list_sort([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\"]) == [\"apple\", \"orange\", \"banana\", \"grape\", \"kiwi\"]\n    assert list_sort([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"kiwi\"]) == [\"apple\", \"orange\", \"banana\", \"grape\", \"kiwi\", \"kiwi\"]\n    assert list_sort([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\"]) == [\"apple\", \"orange\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"kiwi\"]\n    assert list_sort([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\"] == [\"apple\", \"orange\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\"]\n    assert list_sort([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \""}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y\n\n# Test cases\nprint(x_or_y(7, 34, 12)) # Output: 34\nprint(x_or_y(15, 8, 5)) # Output: 5\nprint(x_or_y(1, 10, 20)) # Output: 20\nprint(x_or_y(2, 10, 20)) # Output: 20\n\n# Test cases with edge cases\nprint(x_or_y(1, 10, 20)) # Output: 20\nprint(x_or_y(0, 10, 20)) # Output: 20\nprint(x_or_y(-1, 10, 20)) # Output: 20\nprint(x_or_y(2, 10, 20)) # Output: 10\nprint(x_or_y(3, 10, 20)) # Output: 10\nprint(x_or_y(4, 10, 20)) # Output: 10\nprint(x_or_y(5, 10, 20)) # Output: 10\nprint(x_or_y(6, 10, 20)) # Output: 10\nprint(x_or_y(7, 10, 20) # Output: 10\nprint(x_or_y(8, 10, 20) # Output: 10\nprint(x_or_y(9, 10, 20) # Output: 10\nprint(x_or_y(10, 10, 20) # Output: 10\nprint(x_or_y(11, 10, 20) # Output: 10\nprint(x_or_y(12, 10, 20) # Output: 10\nprint(x_or_y(13, 10, 20) # Output: 10\nprint(x_or_y(14, 10, 20) # Output: 10\nprint(x_or_y(15, 10, 20) # Output: 10\nprint(x_or_y(16, 10, 20) # Output: 10\nprint(x_or_y(17, 10, 20) # Output: 10\nprint(x_or_y(18, 10, 20) # Output: 10\nprint(x_or_y(19, 10, 20) # Output: 10\nprint(x_or_y(20, 10, 20) # Output: 10\nprint(x_or_y(21, 10, 20) # Output: 10\nprint(x_or_y(22, 10, 20) # Output: 10\nprint(x_or"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                result += num ** 2\n    return result * 2\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0])) # Output: 10\nprint(double_the_difference([-1, -2, 0])) # Output: 0\nprint(double_the_difference([9, -2])) # Output: 81\nprint(double_the_difference([0])) # Output: 0\nprint(double_the_difference([])) # Output: 0\n\n# Additional test cases\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 160\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 300\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # Output: 410\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # Output: 560\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # Output: 720\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # Output: 900\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # Output: 1140\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # Output: 1360\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # Output: 1600\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n\n\n# Test cases\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])) # [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) # [4,4,1,0,0,6]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,6])) # [0,0,0,0,0,0]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,5])) # [0,0,0,0,1,1]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,7])) # [0,0,0,0,1,1]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4]) # [0,0,0,0,1,1]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,5,6]) # [0,0,0,0,0,0,0]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4,6]) # [0,0,0,0,1,1,0]\n\n# Test cases for edge cases\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,7,8])) # [0,0,0,0,1,1,1]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4,5])) # [0,0,0,0,1,1,0]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4,6]) # [0,0,0,0,1,1,0]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4,5,6]) # [0,0,0,0,1,1,0]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4,5,7]) # [0,0,0,0,1,1,1]\nprint(compare([1,2,3,4,5,6],[1,2,3,4,5,4,5,6,7]) # [0,0,0,0,1,1,0,1]\nprint"}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    max_strength = -1\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n\n# Test cases\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])) # Output: \"Slices.SErviNGSliCes\"\nprint(Strongest_Extension(\"my_class\", ['AA', 'Be', 'CC'])) # Output: \"my_class.AA\"\nprint(Strongest_Extension(\"Car\", ['A', 'B', 'C'])) # Output: \"Car.A\"\nprint(Strongest_Extension(\"my_class\", ['a', 'b', 'c'])) # Output: \"my_class.a\"\nprint(Strongest_Extension(\"my_class\", ['A', 'B', 'C'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['aBc', 'bCd', 'cDe'])) # Output: \"my_class.aBc\"\nprint(Strongest_Extension(\"my_class\", ['a', 'B', 'C'])) # Output: \"my_class.a\"\nprint(Strongest_Extension(\"my_class\", ['A', 'b', 'C'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['A', 'B', 'c'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['a', 'b', 'C'])) # Output: \"my_class.a\"\nprint(Strongest_Extension(\"my_class\", ['A', 'b', 'c'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['a', 'B', 'C'])) # Output: \"my_class.a\"\nprint(Strongest_Extension(\"my_class\", ['A', 'B', 'c'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['a', 'b', 'C'])) # Output: \"my_class.a\"\nprint(Strongest_Extension(\"my_class\", ['A', 'b', 'c'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['a', 'B', 'C'])) # Output: \"my_class.a\"\nprint(Strongest_Extension(\"my_class\", ['A', 'b', 'c'])) # Output: \"my_class.A\"\nprint(Strongest_Extension(\"my_class\", ['a', 'B', 'C'])) # Output: \"my_class.a\"\nprint(Str"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    a = a + a\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        a = a[1:]\n    return False\n\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True\n\n# Edge cases\nprint(cycpattern_check(\"\", \"\")) # False\nprint(cycpattern_check(\"a\", \"a\")) # True\nprint(cycpattern_check(\"abc\", \"cba\")) # True\nprint(cycpattern_check(\"abc\", \"abcd\")) # False\nprint(cycpattern_check(\"abc\", \"abcd\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cycpattern_check(\"abc\", \"abdc\")) # False\nprint(cyc"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\n\ndef test_even_odd_count():\n    assert even_odd_count(12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(-123456789) == (4, 5)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(100) == (2, 0)\n    assert even_odd_count(1000) == (2, 1)\n    assert even_odd_count(10000) == (3, 1)\n    assert even_odd_count(100000) == (4, 1)\n    assert even_odd_count(1000000) == (4, 2)\n    assert even_odd_count(10000000) == (5, 1)\n    assert even_odd_count(100000000) == (5, 2)\n    assert even_odd_count(1000000000) == (6, 2)\n    assert even_odd_count(10000000000) == (6, 3)\n    assert even_odd_count(10000000000) == (7, 3)\n    assert even_odd_count(100000000000) == (7, 4)\n    assert even_odd_count(100000000000) == (8, 4)\n    assert even_odd_count(1000000000000) == (8, 5)\n    assert even_odd_count(10000000000000) == (9, 5)\n    assert even_odd_count(100000000000000) == (10, 5)\n    assert even_odd_count(100000000000000) == (10, 6)\n    assert even_odd_count(1000000000000000) == (11, 6)\n    assert even_odd_count(10000000000000000) == (11, 7)\n    assert even_odd_count(100000000000"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 39999\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLIV'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    roman_numerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.upper()\n\n\n\ndef main():\n    \"\"\"\n    Test the functions with some examples.\n    \"\"\"\n    print(int_to_mini_roman(19))  # Output: xix\n    print(int_to_mini_roman(152))  # Output: clii\n    print(int_to_mini_roman(426))  # Output: cdxxvi\n\n    print(int_to_roman(19))  # Output: XIX\n    print(int_to_roman(152))  # Output: CLIV\n    print(int_to_roman(426))  # Output: CDXXVI\n\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False\nprint(right_angle_triangle(5, 12, 13)) # True\nprint(right_angle_triangle(7, 24, 25)) # False\nprint(right_angle_triangle(10, 10, 10)) # True\nprint(right_angle_triangle(5, 12, 13)) # True\nprint(right_angle_triangle(1, 2, 3)) # False\nprint(right_angle_triangle(4, 5, 6)) # False\nprint(right_angle_triangle(7, 24, 25)) # False\nprint(right_angle_triangle(10, 10, 10)) # True\n\n# Test cases with floating point numbers\nprint(right_angle_triangle(3.0, 4.0, 5.0)) # True\nprint(right_angle_triangle(1.0, 2.0, 3.0)) # False\nprint(right_angle_triangle(5.0, 12.0, 13.0)) # True\nprint(right_angle_triangle(7.0, 24.0, 25.0)) # False\nprint(right_angle_triangle(10.0, 10.0, 10.0)) # True\nprint(right_angle_triangle(5.0, 12.0, 13.0)) # True\nprint(right_angle_triangle(1.0, 2.0, 3.0)) # False\nprint(right_angle_triangle(4.0, 5.0, 6.0)) # False\nprint(right_angle_triangle(7.0, 24.0, 25.0)) # False\nprint(right_angle_triangle(10.0, 10.0, 10.0)) # True\n\n# Test cases with negative numbers\nprint(right_angle_triangle(-3, 4, 5)) # True\nprint(right_angle_triangle(-1, -2, 3)) # False\nprint(right_angle_triangle(-5, 12, 13)) # True\nprint(right_angle_triangle(-7, 24, 25)) # False\nprint(right_angle_triangle(-10, -10, -10)) # True\nprint(right_angle_triangle(-5, -12, -13)) # True\nprint(right_angle_triangle(-1, -2, -3"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_count:\n            max_count = unique_chars\n            max_word = word\n        elif unique_chars == max_count and word < max_word:\n            max_word = word\n    return max_word\n\n\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # Output: \"aaaaaaa\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\"]))  # Output: \"ghi\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]))  # Output: \"jkl\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"]))  # Output: \"pqr\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"]))  # Output: \"stu\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"uvw\"]))  # Output: \"uvw\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"uvw\", \"xyz\"]))  # Output: \"xyz\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"uvw\", \"xyz\", \"abc\"]))  # Output: \"abc\"\nprint(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"uvw\", \"xyz\", \"abc\", \"def\"]))  # Output: \"def\"\n"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [remaining, 0]\n    else:\n        return [number + need, remaining - need]\n\n\n# Test cases\nprint(eat(5, 6, 10)) # [11, 4]\nprint(eat(4, 8, 9)) # [12, 1]\nprint(eat(1, 10, 10)) # [11, 0]\nprint(eat(2, 11, 5)) # [7, 0]\nprint(eat(100, 100, 100)) # [200, 0]\nprint(eat(100, 100, 0)) # [100, 0]\nprint(eat(0, 100, 100)) # [100, 0]\nprint(eat(100, 0, 100)) # [100, 100]\nprint(eat(100, 100, 1)) # [101, 0]\nprint(eat(100, 100, 0)) # [100, 0]\nprint(eat(0, 0, 100)) # [0, 100]\nprint(eat(0, 100, 0)) # [0, 0]\nprint(eat(100, 100, 100)) # [200, 0]\nprint(eat(100, 100, 1)) # [101, 0]\nprint(eat(100, 100, 0)) # [100, 0]\nprint(eat(0, 0, 0)) # [0, 0]\nprint(eat(100, 0, 0)) # [0, 0]\nprint(eat(0, 100, 0)) # [0, 0]\nprint(eat(100, 100, 100)) # [200, 0]\nprint(eat(100, 100, 1)) # [101, 0]\nprint(eat(100, 100, 0)) # [100, 0]\nprint(eat(0, 0, 0)) # [0, 0]\n\n# Test cases for edge cases\nprint(eat(0, 100, 100)) # [0, 0]\nprint(eat(100, 0, 0)) # [0, 0]\nprint(eat(100, 100, 100)) # [200,"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\n\n# Test cases\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5])) # Output: 9\nprint(do_algebra(['*', '//', '**'], [2, 3, 4, 5, 2]) # Output: 16\nprint(do_algebra(['+', '*', '**', '+'], [2, 3, 4, 5, 2, 6]) # Output: 12\nprint(do_algebra(['-', '*', '+', '**'], [2, 3, 4, 5, 2, 6]) # Output: 12\nprint(do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['-', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['-', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['-', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['-', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['-', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 2, 6]) # Output: 16\nprint(do_algebra(['-', '*', '**', '//'], [2, 3, 4,"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result if result else s[::-1]\n\n\n    # Alternative solution:\n    # return ''.join(c.upper() if c.islower() else c.lower() for c in s) if any(c.isalpha() for c in s) else s[::-1]\n\n\n\n# Test cases\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\nprint(solve(\"\"))  # \"\"\nprint(solve(\"Hello, World!\"))  # \"hELLO, wORLD!\"\nprint(solve(\"aBcDeFgHiJkLmNoP\"))  # \"aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234\"))  # \"aBcDeFgHiJkLmNoP1234\"\nprint(solve(\"1234aBcDeFgHiJkLmNoP\"))  # \"4321aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234aBcDeFgHiJkLmNoP\"))  # \"aBcDeFgHiJkLmNoP1234aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234\"))  # \"aBcDeFgHiJkLmNoP1234\"\nprint(solve(\"aBcDeFgHiJkLmNoP\"))  # \"aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234aBcDeFgHiJkLmNoP\"))  # \"aBcDeFgHiJkLmNoP1234aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234\"))  # \"aBcDeFgHiJkLmNoP1234\"\nprint(solve(\"aBcDeFgHiJkLmNoP\"))  # \"aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234aBcDeFgHiJkLmNoP\"))  # \"aBcDeFgHiJkLmNoP1234aBcDeFgHiJkLmNoP\"\nprint(solve(\"aBcDeFgHiJkLmNoP1234\"))  # \"aBcDeFgHiJkLmNoP1234\"\nprint(solve(\"aBcDeFgHiJkLm"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'a591a6d40bf4204c105ee06bb2e30a253f866f8fc917b9e439b25e014e75d6e8793e522d4622c6f66f738b80dbe6d2'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\n\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf15428505d1d831c51cfa4b26f0c7f78efc9b8d4d14d75b263f7c9a8f5549e27afbebaef1a07c7d'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha512(text.encode('utf-8')).hexdigest()\n\n\n\ndef string_to_sha3_512(text):\n    \"\"\"\n    Given a string 'text', return its sha3_512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha3_512('Hello world') == '8d5a614c37c9642899486f4c8a545b38d05c0d9139f74d3717d3852298739f7c0d4c7d5d87876d8994872d088d16d8d1d510d41f475f9'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha3_512(text.encode('utf-8')).hexdigest()\n\n\n\ndef string_to_sha3_384(text):\n    \"\"\"\n    Given a string 'text', return its sha3_384 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha3_384('Hello world') == 'a1f6d8a292c7e4c4e8f4c3426d58e2b03e24e988731e5414f2c30d0e1"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return sorted(even_digits)\n\n\n\n# Test cases\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []\nprint(generate_integers(100, 200))  # Output: [100, 120, 140, 160, 180]\nprint(generate_integers(100, 2000))  # Output: [100, 120, 140, 160, 180, 200]\nprint(generate_integers(1000, 20000))  # Output: [100, 120, 140, 160, 180, 200]\n"}
