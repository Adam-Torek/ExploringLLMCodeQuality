{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                raise ValueError(\"Invalid parenthesis string\")\n        else:\n            raise ValueError(\"Invalid parenthesis string\")\n    if stack:\n        raise ValueError(\"Invalid parenthesis string\")\n    for item in stack:\n        result.append(item)\n    return result"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return -number\n    integer = int(number)\n    return number - integer\n\n\ndef truncate_number_with_precision(number: float, precision: int) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number with a given precision.\n    >>> truncate_number_with_precision(3.5, 2)\n    0.5\n    \"\"\"\n    if number < 0:\n        return -number\n    integer = int(number)\n    return round(number - integer, precision)\n\n\ndef truncate_number_with_decimals(number: float, decimals: int) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number with a given number of decimals.\n    >>> truncate_number_with_decimals(3.5, 2)\n    3\n    \"\"\"\n    if number < 0:\n        return -number\n    integer = int(number)\n    return integer + decimals * (number - integer)\n\n\ndef truncate_number_with_decimals_and_precision(number: float, decimals: int, precision: int) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number with a given number of decimals and\n    a given precision.\n    >>> truncate_number_with_decimals_and_precision(3.5, 2, 2)\n    3\n    \"\"\"\n    if number < 0:\n        return -number\n    integer = int(number)\n    return integer + decimals * (number - integer)\n\n\ndef truncate_number_with_decimals_and_precision_and_sign(number: float, decimals: int, precision: int, sign: bool) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number with a given number of decimals and\n    a given precision and sign.\n    >>> truncate_number_with_decimals_and_precision_and_sign(3.5, 2, 2, False)\n    3.5\n    >>> truncate_number_with_decimals_and_precision_and_sign(3.5, 2, 2, True)\n    3.5\n    \"\"\"\n    if number < 0:\n        return -number\n    integer = int(number)\n    return integer + decimals * (number - integer)\n\n\ndef truncate_number_with_decimals_and_precision_and_sign_and_rounding(number: float, decimals: int, precision: int, sign: bool, rounding: str) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number with a given number of decimals and\n    a given precision and sign and rounding.\n    >>> truncate_number"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    current_balance = 0\n    for operation in operations:\n        if operation < 0:\n            current_balance -= operation\n        else:\n            current_balance += operation\n        if current_balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    from functools import reduce\n    from operator import abs\n\n    def mean(numbers: List[float]) -> float:\n        return reduce(lambda a, x: a + x, numbers) / len(numbers)\n\n    return reduce(lambda a, x: a + abs(x - mean(numbers)), numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[i] for i in range(len(numbers) - 1)\n             if i % 2 == 0 else numbers[i] + [delimeter] + numbers[i + 1]]"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_level = 0\n    levels = []\n    for paren in paren_string.split():\n        if paren == '(':\n            levels.append(1)\n        elif paren == ')':\n            if levels.pop() == 1:\n                max_level = max(max_level, levels[-1])\n            else:\n                raise ValueError(\"Invalid parenthesis string\")\n    return levels\n\n\ndef parse_nested_parens_with_depth(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens_with_depth('(((()))()())')\n    [3, 2, 1]\n    \"\"\"\n    max_level = 0\n    levels = []\n    for paren in paren_string.split():\n        if paren == '(':\n            levels.append(1)\n        elif paren == ')':\n            if levels.pop() == 1:\n                max_level = max(max_level, levels[-1])\n            else:\n                raise ValueError(\"Invalid parenthesis string\")\n    return levels"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_numbers = sum(numbers)\n        product_numbers = 1\n        for number in numbers:\n            product_numbers *= number\n        return (sum_numbers, product_numbers)\n\n\nif __name__ == '__main__':\n    print(sum_product([1, 2, 3, 4]))"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    return result\n\n\ndef rolling_max_with_window(numbers: List[int], window: int) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max_with_window([1, 2, 3, 2, 3, 4, 2], 2)\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers or window <= 0:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-window], numbers[i]))\n    return result\n\n\ndef rolling_max_with_window_and_offset(numbers: List[int], window: int, offset: int) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max_with_window_and_offset([1, 2, 3, 2, 3, 4, 2], 2, 1)\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers or window <= 0 or offset <= 0:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-window], numbers[i - offset]))\n    return result\n\n\ndef rolling_max_with_window_and_offset_and_stride(numbers: List[int], window: int, offset: int, stride: int) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max_with_window_and_offset_and_stride([1, 2, 3, 2, 3, 4, 2], 2, 1, 2)\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers or window <= 0 or offset <= 0 or stride <= 0:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers), stride):\n        result.append(max(result[-window], numbers[i - offset]))\n    return result\n\n\ndef rolling_max_with_window_and_offset_and_stride_and_fill_value(numbers: List[int], window: int, offset: int, stride: int, fill_value: int) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max_with_window_and_offset_and_stride_and_fill_value([1, 2, 3, 2, 3, 4, 2], 2, 1, 2, 0)\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers or window <= 0 or offset <= 0 or stride <= 0 or fill_value is not int:\n        return []\n   "}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if is_palindrome(string[i:j+1]):\n                return string[i:j+1] + string[:i][::-1]\n    return ''\n\n\ndef test_make_palindrome():\n    \"\"\" Test make_palindrome function \"\"\"\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('hello') == 'olleh'\n    assert make_palindrome('world') == 'dlrow'\n    assert make_palindrome('madam') == 'madam'\n    assert make_palindrome('racecar') == 'racecar'\n    assert make_palindrome('a') == 'a'\n    assert make_palindrome('abcd') == 'abcd'\n    assert make_palindrome('abcd123') == 'abcd123'\n    assert make_palindrome('abcd12345') == 'abcd12345'\n    assert make_palindrome('abcd123456789') == 'abcd123456789'\n    assert make_palindrome('abcd1234567890') == 'abcd1234567890'\n    assert make_palindrome('abcd1234567890123') == 'abcd1234567890123'\n    assert make_palindrome('abcd123456789012345') == 'abcd123456789012345'\n    assert make_palindrome('abcd12345678901234567890123') == 'abcd12345678901234567890123'\n    assert make_palindrome('abcd1234567890123456789012345') == 'abcd1234567890123456789012345'\n    assert make_palindrome('abcd12345678901234567890123456789012345') == 'abcd12345678901234567890123456789012345'\n    assert make_palindrome('abcd123456789012345678901234567890123456789012345') == 'abcd123456789012345678901234567890123456789012345'\n    assert make_palindrome('abcd1234567890123456789012345678901"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(chr(int(x, 2) ^ int(y, 2)) for x, y in zip(a, b))\n\n\ndef string_xor_all(strings: List[str]) -> str:\n    \"\"\" Input is a list of strings a, b, ..., n consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_all(['010', '110', '101'])\n    '111'\n    \"\"\"\n    return ''.join(chr(int(x, 2) ^ int(y, 2)) for x, y in zip(*strings))"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n\ndef longest_prefix(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest common prefix. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_prefix([])\n\n    >>> longest_prefix(['a', 'b', 'c'])\n    None\n    >>> longest_prefix(['a', 'ab', 'abc'])\n    'a'\n    \"\"\"\n    if not strings:\n        return None\n    return ''.join(max(strings, key=lambda x: x[:len(x) - 1]))\n\n\ndef longest_suffix(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest common suffix. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_suffix([])\n\n    >>> longest_suffix(['a', 'b', 'c'])\n    None\n    >>> longest_suffix(['a', 'ab', 'abc'])\n    'c'\n    \"\"\"\n    if not strings:\n        return None\n    return ''.join(max(strings, key=lambda x: x[len(x) - 1:]))\n\n\ndef longest_common_substring(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest common substring. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_common_substring([])\n\n    >>> longest_common_substring(['a', 'b', 'c'])\n    None\n    >>> longest_common_substring(['a', 'ab', 'abc', 'bca'])\n    'a'\n    \"\"\"\n    if not strings:\n        return None\n    strings.sort()\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if strings[i] == strings[j]:\n                return strings[i]\n    return None\n\n\ndef longest_common_substring_with_replacement(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest common substring. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_common_substring_with_replacement([])\n\n    >>> longest_common_substring_with_replacement(['a', 'b', 'c'])\n    None\n    >>> longest_common_substring_with_replacement(['a', 'ab', 'abc', 'bca'])\n    'a'\n    \"\"\"\n    if not strings:\n        return None\n    strings.sort()\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if strings[i] == strings[j]:\n                return strings[i]\n    return None\n\n\ndef longest_common_substring_with_replacement_and_order(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest common substring. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_common_substring_with_replacement_and_order([])\n\n    >>> longest_common_substring_with_replacement_and_order(['a', 'b', 'c'])\n    None\n    >>> longest_common_substring_with_replacement_and_order(['a', 'ab', 'abc', 'bca'])\n    'a'\n    \"\"\"\n    if not strings:\n        return None\n    strings.sort()\n    for i in range(len(strings)):\n        for j in range(i"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    result = greatest_common_divisor(a, b)\n    print(f\"The greatest common divisor of {a} and {b} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    suffixes = []\n    for i in range(len(string) + 1):\n        suffixes.append(string[i:])\n    return suffixes"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n\ndef string_sequence_with_spaces(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_spaces(0)\n    '0'\n    >>> string_sequence_with_spaces(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n\ndef string_sequence_with_spaces_and_commas(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_spaces_and_commas(0)\n    '0'\n    >>> string_sequence_with_spaces_and_commas(5)\n    '0, 1, 2, 3, 4, 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n\ndef string_sequence_with_spaces_and_commas_and_parentheses(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_spaces_and_commas_and_parentheses(0)\n    '0'\n    >>> string_sequence_with_spaces_and_commas_and_parentheses(5)\n    '0, 1, 2, 3, 4, 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n\ndef string_sequence_with_spaces_and_commas_and_parentheses_and_brackets(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_spaces_and_commas_and_parentheses_and_brackets(0)\n    '0'\n    >>> string_sequence_with_spaces_and_commas_and_parentheses_and_brackets(5)\n    '0, 1, 2, 3, 4, 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n\ndef string_sequence_with_spaces_and_commas_and_parentheses_and_brackets_and_dashes(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_spaces_and_commas_and_parentheses_and_brackets_and_dashes(0)\n    '0'\n    >>> string_sequence_with_spaces_and_commas_and_parentheses_and_brackets_and_dashes(5)\n    '0, 1, 2, 3, 4, 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n\ndef string_sequence_with_spaces_and_commas_and_parentheses_and_brackets_and_dashes_and_underscores(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_spaces_and_commas_and_parentheses_and_brackets_and_dashes_and_underscores(0)\n    '0'\n    >>> string_sequence_with_spaces_and_commas_and_parentheses_and_brackets_and_dashes_and"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert string to lower case\n    string = string.lower()\n\n    # Create an empty set\n    char_set = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is not in the set, add it\n        if char not in char_set:\n            char_set.add(char)\n\n    # Return the length of the set\n    return len(char_set)\n\n\n# Test the function\nprint(count_distinct_characters('xyzXYZ'))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = []\n    current_beat = 0\n    for note in music_string:\n        if note == 'o':\n            current_beat += 4\n        elif note == 'o|':\n            current_beat += 2\n        elif note == '.':\n            current_beat += 1\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n        notes.append(current_beat)\n        current_beat = 0\n    return notes"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == substring:\n        return 1 + len(string) - 1\n    else:\n        count = 0\n        for i in range(len(string) - len(substring) + 1):\n            if string[i:i+len(substring)] == substring:\n                count += 1\n        return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(how_many_times('', 'a'))\n    print(how_many_times('aaa', 'a'))\n    print(how_many_times('aaaa', 'aa'))"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.strip().split()\n    numbers.sort()\n    return ' '.join(numbers)\n\n\ndef sort_numbers_in_words(words: List[str]) -> List[str]:\n    \"\"\"\n    >>> sort_numbers_in_words(['three', 'one', 'five', 'two', 'three', 'five', 'two', 'one'])\n    ['one', 'two', 'three', 'five', 'five', 'one', 'two', 'three']\n    \"\"\"\n    words.sort()\n    return words"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = sorted(numbers, key=lambda x: numbers.index(x))[-2:]\n    return closest_pair\n\n\ndef find_closest_elements_with_threshold(numbers: List[float], threshold: float) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_with_threshold([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 0.5)\n    (2.0, 2.2)\n    >>> find_closest_elements_with_threshold([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = sorted(numbers, key=lambda x: numbers.index(x))[-2:]\n    return closest_pair if abs(closest_pair[0] - closest_pair[1]) < threshold else None\n\n\ndef find_closest_elements_with_threshold_and_order(numbers: List[float], threshold: float) -> Tuple[float, float, List[float]]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_with_threshold_and_order([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 0.5)\n    (2.0, 2.2, [1.0, 3.0, 4.0, 5.0])\n    >>> find_closest_elements_with_threshold_and_order([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n    (2.0, 2.0, [1.0, 3.0, 4.0, 5.0])\n    \"\"\"\n    closest_pair = sorted(numbers, key=lambda x: numbers.index(x))[-2:]\n    if abs(closest_pair[0] - closest_pair[1]) < threshold:\n        return closest_pair, [x for x in numbers if x != closest_pair[0] and x != closest_pair[1]], closest_pair[0]\n    else:\n        return closest_pair, [], closest_pair[0]"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to rescale\")\n    max_num = max(numbers)\n    min_num = min(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n\ndef filter_float(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_float(['a', 3.14, 5])\n    [3.14]\n    >>> filter_float([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_string(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_string(['a', 3.14, 5])\n    []\n    >>> filter_string(['1', '2', '3', 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_dict(values: List[Any]) -> List[dict]:\n    \"\"\" Filter given list of any python values only for dictionaries\n    >>> filter_dict(['a', 3.14, 5])\n    []\n    >>> filter_dict(['1', '2', '3', 'abc', {}, []])\n    ['{}']\n    \"\"\"\n    return [value for value in values if isinstance(value, dict)]\n\n\ndef filter_list(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_list(['a', 3.14, 5])\n    []\n    >>> filter_list(['1', '2', '3', 'abc', {}, []])\n    ['[]']\n    \"\"\"\n    return [value for value in values if isinstance(value, list)]"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    return string[::-1]\n\ndef strsplit(string: str, delimiter: str) -> list:\n    \"\"\" Return list of substrings by splitting given string with delimiter\n    >>> strsplit('12345', '23')\n    ['1', '45']\n    >>> strsplit('12345', '123')\n    ['45']\n    \"\"\"\n    return string.split(delimiter)\n\ndef strjoin(strings: list, delimiter: str) -> str:\n    \"\"\" Return joined string with given delimiter\n    >>> strjoin(['1', '45'], '23')\n    '12345'\n    >>> strjoin(['1', '45'], '123')\n    '45'\n    \"\"\"\n    return ''.join(strings)\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return new string with given old string replaced by new string\n    >>> strreplace('12345', '23', '123')\n    '12345'\n    >>> strreplace('12345', '23', '1234')\n    '12345'\n    \"\"\"\n    return string.replace(old, new)\n\ndef strformat(string: str, format: str) -> str:\n    \"\"\" Return formatted string\n    >>> strformat('12345', '{0:03d}')\n    '001'\n    >>> strformat('12345', '{0:03d}')\n    '123'\n    \"\"\"\n    return string.format(format)\n\ndef strcasefold(string: str) -> str:\n    \"\"\" Return string in lower case\n    >>> strcasefold('AbCdEf')\n    'abcdef'\n    >>> strcasefold('AbCdEf')\n    'AbCdEf'\n    \"\"\"\n    return string.lower()\n\ndef strcapitalize(string: str) -> str:\n    \"\"\" Return string with first letter capitalized\n    >>> strcapitalize('abcdef')\n    'Abcdef'\n    >>> strcapitalize('abcdef')\n    'Abcdef'\n    \"\"\"\n    return string.capitalize()\n\ndef strstrip(string: str) -> str:\n    \"\"\" Return string with leading and trailing white spaces removed\n    >>> strstrip('  123   ')\n    '123'\n    >>> strstrip('  123   ')\n    '123'\n    \"\"\"\n    return string.strip()\n\ndef strljust(string: str, length: int) -> str:\n    \"\"\" Return left justified string with given length\n    >>> strljust('123', 5)\n    '123   '\n    >>> strljust('123', 5)\n    '123   '\n    \"\"\"\n    return string.ljust(length, ' ')\n\ndef strrjust(string: str, length: int) -> str:\n    \"\"\" Return right justified string with given length\n    >>> strrjust('123', 5)\n    '123   '\n    >>> strrjust('123', 5)\n    '123   '\n    \"\"\"\n    return string.rjust(length, ' ')\n\ndef strcenter"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Find the largest divisor of n\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return 1\n\n\ndef main():\n    # Test the function\n    num = int(input(\"Enter a number: \"))\n    print(f\"The largest divisor of {num} is {largest_divisor(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    factors = []\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.append(i)\n            factors.append(count)\n        i += 1\n    if n > 1:\n        factors.append(n)\n        factors.append(1)\n    return factors\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is_prime(33)\n    True\n    >>> is_prime(34)\n    False\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    False\n    >>> is_prime(37)\n    True\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)\n    False\n    >>> is_prime(41)\n    True\n    >>> is_prime(42)\n    False\n    >>> is_prime(43)\n    True\n    >>> is_prime(44)\n    False\n    >>> is_prime(45)\n    False\n    >>> is_prime(46)\n    False\n    >>> is_prime(47)\n    True\n    >>> is_prime(48)\n    False\n    >>> is_prime(49)\n    False\n    >>> is_prime(50)\n    False\n    >>> is_prime(51)\n    True\n    >>> is_prime(52)\n    False\n    >>> is_prime(53)\n    True\n    >>> is_prime(54)\n    False\n    >>> is_prime(55)\n    False\n    >>> is"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n\n\ndef is_valid_number(string: str) -> bool:\n    \"\"\" For a given string, check if it is a valid number.\n    >>> is_valid_number('123')\n    True\n    >>> is_valid_number('123a')\n    False\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_valid_password(string: str) -> bool:\n    \"\"\" For a given string, check if it is a valid password.\n    A password is considered valid if it is at least 8 characters long, contains at least one uppercase letter, one lowercase letter, one number, and one special character.\n    >>> is_valid_password('123456789!')\n    True\n    >>> is_valid_password('123')\n    False\n    \"\"\"\n    if len(string) < 8:\n        return False\n    has_upper = any(char.isupper() for char in string)\n    has_lower = any(char.islower() for char in string)\n    has_number = any(char.isdigit() for char in string)\n    has_special = any(char.isalpha() or char.isspace() for char in string)\n    return has_upper and has_lower and has_number and has_special\n\n\ndef is_valid_email(string: str) -> bool:\n    \"\"\" For a given string, check if it is a valid email address.\n    >>> is_valid_email('user@example.com')\n    True\n    >>> is_valid_email('user')\n    False\n    \"\"\"\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, string) is not None\n\n\ndef is_valid_url(string: str) -> bool:\n    \"\"\" For a given string, check if it is a valid URL.\n    >>> is_valid_url('https://www.google.com')\n    True\n    >>> is_valid_url('http://example')\n    True\n    >>> is_valid_url('https://example')\n    False\n    \"\"\"\n    import re\n    pattern = r'^https?://\\S+$'\n    return re.match(pattern, string) is not None\n\n\ndef is_valid_phone_number(string: str) -> bool:\n    \"\"\" For a given string, check if it is a valid phone number.\n    >>> is_valid_phone_number('123-456-7890')\n    True\n    >>> is_valid_phone_number('1234567890')\n    False\n    \"\"\"\n    import re\n    pattern = r'^\\+?[\\d\\s()-]*$'\n    return re.match(pattern, string) is not None\n\n\ndef is_valid_credit_card_number(string: str) -> bool:\n    \"\"\" For a given string, check if it is a valid credit card number.\n    >>> is_valid_credit_card_number('1234 5678 9012 3456')\n    True\n    >>> is_valid_credit_card_number('1234567890123456')\n    False\n    \"\"\"\n    import re\n    pattern = r'^\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}$'\n    return re."}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10]\n    >>> get_even([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11])\n    []\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 5, 7, 9]\n    >>> get_odd([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11])\n    [1, 3, 5, 7, 9]\n    \"\"\"\n    return [x for x in l if x % 2 != 0]\n\n\ndef get_even_and_odd(l: list):\n    \"\"\"Return only even and odd numbers in the list.\n    >>> get_even_and_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    >>> get_even_and_odd([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11])\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    \"\"\"\n    return [x for x in l if x % 2 == 0 or x % 2 != 0]\n\n\ndef get_even_or_odd(l: list):\n    \"\"\"Return only even or odd numbers in the list.\n    >>> get_even_or_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    >>> get_even_or_odd([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11])\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    \"\"\"\n    return [x for x in l if x % 2 == 0 or x % 2 != 0]\n\n\ndef get_even_and_odd_or_even(l: list):\n    \"\"\"Return only even and odd or even numbers in the list.\n    >>> get_even_and_odd_or_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    >>> get_even_and_odd_or_even([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11])\n    [2, 4,"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factorization(n):\n    \"\"\"Return a list of the prime factors of n.\n    >>> prime_factorization(12)\n    [2, 2, 3]\n    >>> prime_factorization(101)\n    [101]\n    >>> prime_factorization(11)\n    [11]\n    >>> prime_factorization(13441)\n    [13441]\n    >>> prime_factorization(61)\n    [61]\n    >>> prime_factorization(4)\n    [2, 2]\n    >>> prime_factorization(1)\n    []\n    \"\"\"\n    if n == 1:\n        return []\n    if n % 2 == 0:\n        return [2]\n    factors = []\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            while n % i == 0:\n                n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef prime_factorization_iterative(n):\n    \"\"\"Return a list of the prime factors of n.\n    >>> prime_factorization_iterative(12)\n    [2, 2, 3]\n    >>> prime_factorization_iterative(101)\n    [101]\n    >>> prime_factorization_iterative(11)\n    [11]\n    >>> prime_factorization_iterative(13441)\n    [13441]\n    >>> prime_factorization_iterative(61)\n    [61]\n    >>> prime_factorization_iterative(4)\n    [2, 2]\n    >>> prime_factorization_iterative(1)\n    []\n    \"\"\"\n    if n == 1:\n        return []\n    if n % 2 == 0:\n        return [2]\n    factors = []\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            while n % i == 0:\n                n //= i\n            factors.append(i)\n        i += 2\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef prime_factorization_recursive(n):\n    \"\"\"Return a list of the prime factors of n.\n    >>> prime_factorization_recursive(12)\n    [2, 2, 3]\n    >>> prime_factorization_recursive(101)\n    [101]\n    >>> prime_factorization_recursive(11)\n    [11]\n    >>> prime_factorization_recursive(13441)\n    [13441]\n    >>> prime_factorization_recursive(61)\n    [61]\n    >>> prime_factorization_recursive(4)\n    [2, 2]\n    >>> prime_factorization_recursive(1)\n    []\n    \"\"\"\n    if n == 1:\n        return []\n    if n % 2 == 0:\n        return [2]\n    factors = []\n   "}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs must have a non-zero coefficient\")\n    n = len(xs)\n    for i in range(n):\n        if xs[i] == 0:\n            raise ValueError(\"xs must have a non-zero coefficient\")\n    x = -xs[n - 1] / 2 * xs[n - 2]\n    return x\n\n\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots find all zero points of polynomial with coefficients xs.\n    find_roots returns a list of all zero points.\n    >>> round(find_roots([1, 2]), 2) # f(x) = 1 + 2x\n    [-0.5, 0.5]\n    >>> round(find_roots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    [-1.0, 1.0]\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs must have a non-zero coefficient\")\n    n = len(xs)\n    for i in range(n):\n        if xs[i] == 0:\n            raise ValueError(\"xs must have a non-zero coefficient\")\n    x = -xs[n - 1] / 2 * xs[n - 2]\n    return [x] + find_roots(xs[:-1])"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i:i+3]))\n    return l_prime\n\n\ndef sort_third_2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i:i+3]))\n    return l_prime\n\n\ndef sort_third_3(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i:i+3]))\n    return l_prime\n\n\ndef sort_third_4(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l"}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return a new dictionary with unique keys\n    >>> unique_dict({'a': 1, 'b': 2, 'a': 3, 'c': 4})\n    {'a': 1, 'b': 2, 'c': 4}\n    \"\"\"\n    return {k: v for k, v in d.items() if k not in d.keys()}\n\n\ndef unique_list(l: list):\n    \"\"\"Return a new list with unique elements\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n\ndef unique_tuple(t: tuple):\n    \"\"\"Return a new tuple with unique elements\n    >>> unique_tuple((5, 3, 5, 2, 3, 3, 9, 0, 123))\n    (0, 2, 3, 5, 9, 123)\n    \"\"\"\n    return tuple(set(t))\n\n\ndef unique_set(s: set):\n    \"\"\"Return a new set with unique elements\n    >>> unique_set({'a': 1, 'b': 2, 'a': 3, 'c': 4})\n    {'a': 1, 'b': 2, 'c': 4}\n    \"\"\"\n    return {k: v for k, v in s.items() if k not in s.keys()}\n\n\ndef unique_string(s: str):\n    \"\"\"Return a new string with unique characters\n    >>> unique_string('aabbbcc')\n    'abc'\n    \"\"\"\n    return ''.join(sorted(set(s)))\n\n\ndef unique_bytes(b: bytes):\n    \"\"\"Return a new bytes object with unique bytes\n    >>> unique_bytes(b'aabbbcc')\n    b'abc'\n    \"\"\"\n    return bytes(sorted(set(b)))"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return min(l)\n\n\ndef sum_list(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_list([1, 2, 3])\n    6\n    >>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    115\n    \"\"\"\n    if not l:\n        return 0\n    else:\n        return sum(l)\n\n\ndef product_list(l: list):\n    \"\"\"Return product of all elements in the list.\n    >>> product_list([1, 2, 3])\n    6\n    >>> product_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    if not l:\n        return 1\n    else:\n        return 1 * product_list(l[1:])\n\n\ndef average_list(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>> average_list([1, 2, 3])\n    2.0\n    >>> average_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1.0\n    \"\"\"\n    if not l:\n        return 0\n    else:\n        return sum_list(l) / len(l)\n\n\ndef length_list(l: list):\n    \"\"\"Return length of the list.\n    >>> length_list([1, 2, 3])\n    3\n    >>> length_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    11\n    \"\"\"\n    if not l:\n        return 0\n    else:\n        return len(l)\n\n\ndef reverse_list(l: list):\n    \"\"\"Return reversed list.\n    >>> reverse_list([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, -2, 3, 9, 0, 1, 5, 3, 2, 123]"}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i % 10 == 7:\n                count += 1\n                i //= 10\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(fizz_buzz(78))"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l' = list(l)\n    l'[::2] = sorted(l'[::2])\n    return l'\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_odd([5, 6, 3, 4])\n    [5, 6, 3, 4]\n    \"\"\"\n    l' = list(l)\n    l'[1::2] = sorted(l'[1::2])\n    return l'\n\n\ndef sort_even_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_odd([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l' = list(l)\n    l'[::2] = sorted(l'[::2])\n    l'[1::2] = sorted(l'[1::2])\n    return l'\n\n\ndef sort_odd_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_odd_even([5, 6, 3, 4])\n    [5, 6, 3, 4]\n    \"\"\"\n    l' = list(l)\n    l'[1::2] = sorted(l'[1::2])\n    l'[::2] = sorted(l'[::2])\n    return l'\n\n\ndef sort_even_odd_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_odd_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_odd_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l' = list(l)\n    l'[1::2] = sorted(l'[1::2])\n    l'[::2] = sorted(l'[::2])\n    l'[::2] = sorted(l'[::2])\n    return l'\n\n\ndef sort_odd_even_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the"}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of three.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef test_encode_decode_cyclic():\n    \"\"\"\n    tests encode_cyclic and decode_cyclic functions.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded = encode_cyclic(s)\n    decoded = decode_cyclic(encoded)\n    assert decoded == s\n\n\nif __name__ == \"__main__\":\n    test_encode_decode_cyclic()"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 2\n    fib_list = [2, 3]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n        if is_prime(fib_list[i]):\n            return fib_list[i]\n    return None\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(prime_fib(10))"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    l = [1, 3, 5, 0]\n    print(triples_sum_to_zero(l))\n    l = [1, 3, -2, 1]\n    print(triples_sum_to_zero(l))\n    l = [1, 2, 3, 7]\n    print(triples_sum_to_zero(l))\n    l = [2, 4, -5, 3, 9, 7]\n    print(triples_sum_to_zero(l))\n    l = [1]\n    print(triples_sum_to_zero(l))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize variables\n    left_cars = []\n    right_cars = []\n    num_collisions = 0\n\n    # Generate random positions for the cars\n    for i in range(n):\n        left_cars.append(random.randint(0, 100))\n        right_cars.append(random.randint(100, 200))\n\n    # Iterate over the left cars\n    for i in range(n):\n        # Check if the left car is colliding with any of the right cars\n        for j in range(n):\n            if left_cars[i] > right_cars[j]:\n                num_collisions += 1\n\n    return num_collisions\n\n\n# Test the function\nprint(car_race_collision(5))"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\ndef incr_dict(d: dict):\n    \"\"\"Return new dictionary with all values incremented by 1.\n    >>> incr_dict({'a': 1, 'b': 2, 'c': 3})\n    {'a': 2, 'b': 3, 'c': 4}\n    >>> incr_dict({'a': 5, 'b': 3, 'c': 5, 'd': 2, 'e': 3, 'f': 3, 'g': 9, 'h': 0, 'i': 123})\n    {'a': 6, 'b': 4, 'c': 6, 'd': 3, 'e': 4, 'f': 4, 'g': 10, 'h': 1, 'i': 124}\n    \"\"\"\n    return {k: v + 1 for k, v in d.items()}\n\n\ndef incr_tuple(t: tuple):\n    \"\"\"Return new tuple with all elements incremented by 1.\n    >>> incr_tuple((1, 2, 3))\n    (2, 3, 4)\n    >>> incr_tuple((5, 3, 5, 2, 3, 3, 9, 0, 123))\n    (6, 4, 6, 3, 4, 4, 10, 1, 124)\n    \"\"\"\n    return (i + 1 for i in t)\n\n\ndef incr_str(s: str):\n    \"\"\"Return new string with all characters incremented by 1.\n    >>> incr_str('abc')\n    'bcd'\n    >>> incr_str('12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] + l[i+1] == 0:\n            return True\n        if l[i] + l[i+1] < 0:\n            break\n    return False\n\n\ndef pairs_sum_to_zero_with_duplicates(l):\n    \"\"\"\n    pairs_sum_to_zero_with_duplicates takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_with_duplicates([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_with_duplicates([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_with_duplicates([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_with_duplicates([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_with_duplicates([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] + l[i+1] == 0:\n            return True\n        if l[i] + l[i+1] < 0:\n            break\n    return False\n\n\ndef pairs_sum_to_zero_with_duplicates_and_sorted(l):\n    \"\"\"\n    pairs_sum_to_zero_with_duplicates_and_sorted takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_with_duplicates_and_sorted([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_with_duplicates_and_sorted([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_with_duplicates_and_sorted([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_with_duplicates_and_sorted([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_with_duplicates_and_sorted([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] + l[i+1] == 0:\n            return True\n        if l[i] + l[i+1] < 0:\n            break\n    return False\n\n\ndef pairs_sum_to_zero_with_duplicates_and_sorted_and_unique(l):\n    \"\"\"\n    pairs_sum_to_zero_with_duplicates_and_sorted_and_unique takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero,"}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = ''\n    while x != 0:\n        x, d = divmod(x, base)\n        result += str(d)\n    return result[::-1]\n\n\ndef change_base_test():\n    \"\"\"Test for change_base function\"\"\"\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'\n    assert change_base(10, 2) == '1000'\n    assert change_base(10, 10) == '10'\n    assert change_base(10, 1) == '1000000000000'\n    assert change_base(10, 100) == '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\ndef rectangle_area(w, h):\n    \"\"\"Given width and height return area for a rectangle.\n    >>> rectangle_area(5, 3)\n    15\n    \"\"\"\n    return w * h\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(5)\n    78.53981633974483\n    \"\"\"\n    return 3.141592653589793 * r ** 2\n\ndef square_area(s):\n    \"\"\"Given side return area for a square.\n    >>> square_area(5)\n    25\n    \"\"\"\n    return s ** 2\n\ndef trapezoid_area(b1, b2, h):\n    \"\"\"Given lengths of two parallel sides and height return area for a trapezoid.\n    >>> trapezoid_area(5, 6, 3)\n    13.5\n    \"\"\"\n    return (b1 + b2) / 2 * h\n\ndef parallelogram_area(b1, b2, h):\n    \"\"\"Given lengths of two parallel sides and height return area for a parallelogram.\n    >>> parallelogram_area(5, 6, 3)\n    15\n    \"\"\"\n    return b1 * h + b2 * h\n\ndef kite_area(a, b):\n    \"\"\"Given lengths of two sides of a kite return area for a kite.\n    >>> kite_area(5, 6)\n    15\n    \"\"\"\n    return a * b / 2\n\ndef pentagon_area(a, b, c, d, e):\n    \"\"\"Given lengths of five sides of a pentagon return area for a pentagon.\n    >>> pentagon_area(5, 6, 7, 8, 9)\n    45.0\n    \"\"\"\n    s = (a + b + c + d + e) / 2\n    return s * (s - a) * (s - b) * (s - c) * (s - d)\n\ndef hexagon_area(a, b, c, d, e, f):\n    \"\"\"Given lengths of six sides of a hexagon return area for a hexagon.\n    >>> hexagon_area(5, 6, 7, 8, 9, 10)\n    90.0\n    \"\"\"\n    s = (a + b + c + d + e + f) / 2\n    return s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f)\n\ndef heptagon_area(a, b, c, d, e, f, g):\n    \"\"\"Given lengths of seven sides of a heptagon return area for a heptagon.\n    >>> heptagon_area(5, 6, 7, 8, 9, 10, 11)\n    120.0\n    \"\"\"\n    s = (a + b + c + d + e + f + g) / 2\n    return s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g)\n\ndef octagon_area(a, b, c, d, e, f, g, h):\n    \"\"\"Given lengths of eight sides of"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n < 4:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n\ndef fib4_test():\n    \"\"\"Test the fib4 function\"\"\"\n    for i in range(8):\n        print(f\"fib4({i}) = {fib4(i)}\")\n\n\nif __name__ == '__main__':\n    fib4_test()"}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n\ndef median_of_two_sorted_arrays(a: list, b: list):\n    \"\"\"Return median of two sorted arrays a and b.\n    >>> median_of_two_sorted_arrays([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\n    5.0\n    >>> median_of_two_sorted_arrays([-10, 4, 6, 1000, 10, 20], [10000, 100000, 1000000])\n    100000.0\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return 0\n    if len(a) == 1 and len(b) == 1:\n        return (a[0] + b[0]) / 2\n    if len(a) == 1:\n        return median(b)\n    if len(b) == 1:\n        return median(a)\n    if len(a) == len(b):\n        return median(a + b)\n    else:\n        return median(a) + median(b)\n\n\ndef median_of_three_sorted_arrays(a: list, b: list, c: list):\n    \"\"\"Return median of three sorted arrays a, b, and c.\n    >>> median_of_three_sorted_arrays([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [100, 1000, 10000])\n    5.0\n    >>> median_of_three_sorted_arrays([-10, 4, 6, 1000, 10, 20], [10000, 100000, 1000000], [10000000, 100000000, 1000000000])\n    100000000.0\n    \"\"\"\n    if len(a) == 0 or len(b) == 0 or len(c) == 0:\n        return 0\n    if len(a) == 1 and len(b) == 1 and len(c) == 1:\n        return (a[0] + b[0] + c[0]) / 3\n    if len(a) == 1 and len(b) == 1:\n        return median(c)\n    if len(a) == 1 and len(c) == 1:\n        return median(b)\n    if len(b) == 1 and len(c) == 1:\n        return median(a)\n    if len(a) == len(b) and len(b) == len(c):\n        return median(a + b + c)\n    else:\n        return median(a) + median(b) + median(c)\n\n\ndef median_of_k_sorted_arrays(a: list, b: list, c: list, *k: list):\n    \"\"\"Return median of k sorted arrays a, b, c"}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    text = ''.join(c for c in text if c.isalnum())\n    return text == text[::-1]\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(is_palindrome(''))\n    print(is_palindrome('aba'))\n    print(is_palindrome('aaaaa'))\n    print(is_palindrome('zbcd'))\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (1 << n) % p\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the modular inverse of n modulo p.\n    >>> modp_inv(10, 11)\n    5\n    >>> modp_inv(10, 101)\n    1\n    >>> modp_inv(100, 101)\n    1\n    >>> modp_inv(100, 11)\n    1\n    >>> modp_inv(100, 1000000007)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == p - 1:\n        return 1\n    if n == p:\n        return 0\n    if n % p == 0:\n        return 0\n    x = 0\n    y = 1\n    while True:\n        a = modp(x * x % p, p)\n        if a == n:\n            break\n        x = (x * x + y) % p\n        y = (y * (p - a)) % p\n    return y\n\ndef modp_mul_inv(n: int, p: int):\n    \"\"\"Return n * modp_inv(n, p).\n    >>> modp_mul_inv(10, 11)\n    55\n    >>> modp_mul_inv(10, 101)\n    10\n    >>> modp_mul_inv(100, 101)\n    100\n    >>> modp_mul_inv(100, 11)\n    100\n    >>> modp_mul_inv(100, 1000000007)\n    100\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == p - 1:\n        return p - 1\n    if n == p:\n        return 0\n    if n % p == 0:\n        return 0\n    x = 0\n    y = 1\n    while True:\n        a = modp(x * x % p, p)\n        if a == n:\n            break\n        x = (x * x + y) % p\n        y = (y * (p - a)) % p\n    return y * modp_inv(n, p)\n\ndef modp_pow(n: int, p: int):\n    \"\"\"Return n**p modulo p.\n    >>> modp_pow(2, 3)\n    8\n    >>> modp_pow(2, 4)\n    16\n    >>> modp_pow(2, 5)\n    32\n    >>> modp_pow(2, 6)\n    64\n    >>> modp_pow(2, 7)\n    128\n    >>> modp_pow(2, 8)\n    256\n    >>> modp_pow(2, 9)\n    512\n    >>> modp_pow(2, 10)\n    1024\n    >>> modp_pow(2, 11)\n    2048\n    >>> modp_pow(2, 12)\n    4096\n    >>> modp_pow(2, 13)\n    8192\n    >>> modp_pow(2, 14)\n    16384\n    >>> modp_pow(2, 15)\n    32768\n    >>> modp_pow(2, 16)\n    65536\n    >>> modp_pow("}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef main():\n    s = input(\"Enter a string: \")\n    print(\"Encoded string:\", encode_shift(s))\n    print(\"Decoded string:\", decode_shift(encode_shift(s)))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    text = text.translate(str.maketrans('', '', vowels))\n    return text\n\n\ndef remove_vowels_in_words(text):\n    \"\"\"\n    remove_vowels_in_words is a function that takes string and returns string with words without vowels.\n    >>> remove_vowels_in_words('')\n    ''\n    >>> remove_vowels_in_words(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_in_words('abcdef')\n    'bcdf'\n    >>> remove_vowels_in_words('aaaaa')\n    ''\n    >>> remove_vowels_in_words('aaBAA')\n    'B'\n    >>> remove_vowels_in_words('zbcd')\n    'zbcd'\n    \"\"\"\n    words = text.split()\n    for i in range(len(words)):\n        words[i] = remove_vowels(words[i])\n    return ' '.join(words)\n\n\ndef remove_vowels_in_sentence(text):\n    \"\"\"\n    remove_vowels_in_sentence is a function that takes string and returns string with sentence without vowels.\n    >>> remove_vowels_in_sentence('')\n    ''\n    >>> remove_vowels_in_sentence(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_in_sentence('abcdef')\n    'bcdf'\n    >>> remove_vowels_in_sentence('aaaaa')\n    ''\n    >>> remove_vowels_in_sentence('aaBAA')\n    'B'\n    >>> remove_vowels_in_sentence('zbcd')\n    'zbcd'\n    \"\"\"\n    sentence = text.split('. ')\n    for i in range(len(sentence)):\n        sentence[i] = remove_vowels_in_words(sentence[i])\n    return ' '.join(sentence)\n\n\ndef remove_vowels_in_paragraph(text):\n    \"\"\"\n    remove_vowels_in_paragraph is a function that takes string and returns string with paragraph without vowels.\n    >>> remove_vowels_in_paragraph('')\n    ''\n    >>> remove_vowels_in_paragraph(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_in_paragraph('abcdef')\n    'bcdf'\n    >>> remove_vowels_in_paragraph('aaaaa')\n    ''\n    >>> remove_vowels_in_paragraph('aaBAA')\n    'B'\n    >>> remove_vowels_in_paragraph('zbcd')\n    'zbcd'\n    \"\"\"\n    paragraph = text.split('\\n\\n')\n    for i in range(len(paragraph)):\n        paragraph[i] = remove_vowels_in_sentence(paragraph[i])\n    return '\\n\\n'.join(paragraph)\n\n\ndef remove_vowels_in_text(text):\n    \"\"\"\n    remove_vowels_in_text is a function that takes string and returns string without vowels.\n    >>> remove_vowels_in_text('')\n    ''\n    >>> remove_vowels_in_text(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_in_"}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\n    for x in l:\n        if x <= t:\n            return False\n    return True\n\n\ndef threshold_range(l: list, t1: int, t2: int):\n    \"\"\"Return True if all numbers in the list l are between threshold t1 and t2.\n    >>> threshold_range([1, 2, 4, 10], 1, 10)\n    True\n    >>> threshold_range([1, 20, 4, 10], 5, 10)\n    False\n    \"\"\"\n    for x in l:\n        if x < t1 or x > t2:\n            return False\n    return True\n\n\ndef threshold_range_inclusive(l: list, t1: int, t2: int):\n    \"\"\"Return True if all numbers in the list l are between threshold t1 and t2,\n    inclusive.\n    >>> threshold_range_inclusive([1, 2, 4, 10], 1, 10)\n    True\n    >>> threshold_range_inclusive([1, 20, 4, 10], 5, 10)\n    True\n    \"\"\"\n    for x in l:\n        if x < t1 or x > t2:\n            return False\n    return True\n\n\ndef threshold_range_exclusive(l: list, t1: int, t2: int):\n    \"\"\"Return True if all numbers in the list l are between threshold t1 and t2,\n    exclusive.\n    >>> threshold_range_exclusive([1, 2, 4, 10], 1, 10)\n    True\n    >>> threshold_range_exclusive([1, 20, 4, 10], 5, 10)\n    False\n    \"\"\"\n    for x in l:\n        if x < t1 or x > t2:\n            return False\n    return True\n\n\ndef threshold_range_exclusive_inclusive(l: list, t1: int, t2: int):\n    \"\"\"Return True if all numbers in the list l are between threshold t1 and t2,\n    exclusive.\n    >>> threshold_range_exclusive_inclusive([1, 2, 4, 10], 1, 10)\n    True\n    >>> threshold_range_exclusive_inclusive([1, 20, 4, 10], 5, 10)\n    False\n    \"\"\"\n    for x in l:\n        if x < t1 or x > t2:\n            return False\n    return True\n\n\ndef threshold_range_exclusive_inclusive_exclusive(l: list, t1: int, t2: int):\n    \"\"\"Return True if all numbers in the list l are between threshold t1 and t2,\n    exclusive.\n    >>> threshold_range_exclusive_inclusive_exclusive([1, 2, 4, 10], 1, 10)\n    True\n    >>> threshold_range_exclusive_inclusive_exclusive([1, 20, 4, 10], 5, 10)\n    False\n    \"\"\"\n   "}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.6666666666666667\n    >>> divide(5, 7)\n    0.7142857142857143\n    \"\"\"\n    return x / y\n\ndef modulus(x: int, y: int):\n    \"\"\"Modulus of two numbers x and y\n    >>> modulus(2, 3)\n    0\n    >>> modulus(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\ndef sum_of_squares(x: int):\n    \"\"\"Sum of squares of a number x\n    >>> sum_of_squares(5)\n    25\n    \"\"\"\n    return x * x\n\ndef sum_of_cubes(x: int):\n    \"\"\"Sum of cubes of a number x\n    >>> sum_of_cubes(5)\n    125\n    \"\"\"\n    return x * x * x\n\ndef sum_of_powers(x: int, y: int):\n    \"\"\"Sum of powers of a number x to the power of y\n    >>> sum_of_powers(2, 3)\n    8\n    >>> sum_of_powers(5, 3)\n    625\n    \"\"\"\n    return sum([x**i for i in range(1, y+1)])\n\ndef sum_of_inverses(x: int):\n    \"\"\"Sum of inverses of a number x\n    >>> sum_of_inverses(5)\n    1/5 + 1/4 + 1/3 + 1/2 + 1/1\n    5\n    \"\"\"\n    return sum([1/i for i in range(1, x+1)])\n\ndef sum_of_roots(x: int):\n    \"\"\"Sum of roots of a number x\n    >>> sum_of_roots(16)\n    4 + 4\n    8\n    \"\"\"\n    return sum([int(x**0.5) for x in range(1, x+1)])\n\ndef sum_of_primes(x: int):\n    \"\"\"Sum of primes less than or equal to x\n    >>> sum_of_primes(10)\n    2 + 3 + 5\n    10\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 7"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n\ndef same_chars_in_order(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters in the same order.\n    >>> same_chars_in_order('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_in_order('abcd', 'dddddddabc')\n    True\n    >>> same_chars_in_order('dddddddabc', 'abcd')\n    True\n    >>> same_chars_in_order('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_in_order('abcd', 'dddddddabce')\n    False\n    >>> same_chars_in_order('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n\ndef same_chars_in_order_with_spaces(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters in the same order,\n    with spaces included.\n    >>> same_chars_in_order_with_spaces('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_in_order_with_spaces('abcd', 'dddddddabc')\n    True\n    >>> same_chars_in_order_with_spaces('dddddddabc', 'abcd')\n    True\n    >>> same_chars_in_order_with_spaces('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_in_order_with_spaces('abcd', 'dddddddabce')\n    False\n    >>> same_chars_in_order_with_spaces('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n\ndef same_chars_in_order_with_spaces_and_case(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters in the same order,\n    with spaces included and case ignored.\n    >>> same_chars_in_order_with_spaces_and_case('eAbCdZz', 'dDdZz')\n    True\n    >>> same_chars_in_order_with_spaces_and_case('abCd', 'dDd')\n    True\n    >>> same_chars_in_order_with_spaces_and_case('dDd', 'abCd')\n    True\n    >>> same_chars_in_order_with_spaces_and_case('eAbCdZz', 'dDdZz')\n    False\n    >>> same_chars_in_order_with_spaces_and_case('abCd', 'dDd')\n    False\n    >>> same_chars_in_order_with_spaces_and_"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_memo(n: int):\n    \"\"\"Return n-th Fibonacci number using memoization.\n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    memo = [0, 1]\n    if len(memo) < n:\n        memo.extend([fib(i) for i in range(len(memo), n)])\n    return memo[n]\n\n\ndef fib_generator(n: int):\n    \"\"\"Return n-th Fibonacci number using generator.\n    >>> next(fib_generator(10))\n    0\n    >>> next(fib_generator(10))\n    1\n    >>> next(fib_generator(10))\n    1\n    >>> next(fib_generator(10))\n    2\n    >>> next(fib_generator(10))\n    3\n    >>> next(fib_generator(10))\n    5\n    >>> next(fib_generator(10))\n    8\n    >>> next(fib_generator(10))\n    13\n    >>> next(fib_generator(10))\n    21\n    >>> next(fib_generator(10))\n    34\n    >>> next(fib_generator(10))\n    55\n    >>> next(fib_generator(10))\n    89\n    >>> next(fib_generator(10))\n    144\n    >>> next(fib_generator(10))\n    233\n    >>> next(fib_generator(10))\n    377\n    >>> next(fib_generator(10))\n    610\n    >>> next(fib_generator(10))\n    987\n    >>> next(fib_generator(10))\n    1597\n    >>> next(fib_generator(10))\n    2584\n    >>> next(fib_generator(10))\n    4181\n    >>> next(fib_generator(10))\n    6765\n    >>> next(fib_generator(10))\n    10946\n    >>> next(fib_generator(10))\n    17711\n    >>> next(fib_generator(10))\n    28657\n    >>> next(fib_generator(10))\n    46368\n    >>> next(fib_generator(10))\n    75025\n    >>> next(fib_generator(10))\n    121393\n    >>> next(fib_generator(10))\n    196418\n    >>> next(fib_generator(10))\n    317811\n    >>> next(fib_generator(10))\n    514229\n    >>> next(fib_generator(10))\n    832040\n    >>> next(fib_generator(10))\n    1346269\n    >>> next(fib_generator(10))\n    2178309\n    >>> next(fib_generator(10))\n    3524578\n    >>> next(fib_generator(10))\n    570"}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n        else:\n            stack.append(bracket)\n    return not stack\n\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    assert correct_bracketing(\"<\") == False\n    assert correct_bracketing(\"<>\") == True\n    assert correct_bracketing(\"<<><>>\") == True\n    assert correct_bracketing(\"><<>\") == False\n\n\nif __name__ == \"__main__\":\n    test_correct_bracketing()"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_sort(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_sort([1, 2, 4, 20])\n    True\n    >>> monotonic_sort([1, 20, 4, 10])\n    False\n    >>> monotonic_sort([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_sort_with_duplicates(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_sort_with_duplicates([1, 2, 4, 20])\n    True\n    >>> monotonic_sort_with_duplicates([1, 20, 4, 10])\n    False\n    >>> monotonic_sort_with_duplicates([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_sort_with_duplicates_2(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_sort_with_duplicates_2([1, 2, 4, 20])\n    True\n    >>> monotonic_sort_with_duplicates_2([1, 20, 4, 10])\n    False\n    >>> monotonic_sort_with_duplicates_2([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_sort_with_duplicates_3(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_sort_with_duplicates_3([1, 2, 4, 20])\n    True\n    >>> monotonic_sort_with_duplicates_3([1, 20, 4, 10])\n    False\n    >>> monotonic_sort_with_duplicates_3([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n\ndef monotonic_sort_with_duplicates_4(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_sort_with_duplicates_4([1, 2, 4, 20])\n    True\n    >>> monotonic_sort_with_duplicates_4([1, 20, 4, 10])\n    False\n    >>> monotonic_sort_with_duplicates_"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(list(set(l1)))\n    l2 = sorted(list(set(l2)))\n    return [x for x in l1 if x in l2]\n\n\ndef common_with_order(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_order([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_with_order([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(list(set(l1)))\n    l2 = sorted(list(set(l2)))\n    return [x for x in l1 if x in l2]\n\n\ndef common_with_order_and_count(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_order_and_count([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_with_order_and_count([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(list(set(l1)))\n    l2 = sorted(list(set(l2)))\n    return [x for x in l1 if x in l2]\n\n\ndef common_with_order_and_count_and_reverse(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_order_and_count_and_reverse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_with_order_and_count_and_reverse([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(list(set(l1)))\n    l2 = sorted(list(set(l2)))\n    return [x for x in l1 if x in l2]\n\n\ndef common_with_order_and_count_and_reverse_and_remove_duplicates(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_order_and_count_and_reverse_and_remove_duplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_with_order_and_count_and_reverse_and_remove_duplicates([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(list(set(l1)))\n    l2 = sorted(list(set(l2)))\n    return [x for x in l1 if x in l2]\n\n\ndef common_with_order_and_count_and_reverse_and_remove_duplicates_and_reverse(l"}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\ndef largest_prime_factor_iterative(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_iterative(13195)\n    29\n    >>> largest_prime_factor_iterative(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return largest_prime_factor_recursive(n // i)\n        i += 2\n    return n\n\n\ndef largest_prime_factor_recursive_iterative(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive_iterative(13195)\n    29\n    >>> largest_prime_factor_recursive_iterative(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return largest_prime_factor_recursive_iterative(n // i)\n        i += 2\n    return n\n\n\ndef largest_prime_factor_recursive_iterative_optimized(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive_iterative_optimized(13195)\n    29\n    >>> largest_prime_factor_recursive_iterative_optimized(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return largest_prime_factor_recursive_iterative_optimized(n // i)\n        i += 2\n    return n\n\n\ndef largest_prime_factor_recursive_iter"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\ndef sum_to_n_with_list(n: int):\n    \"\"\"sum_to_n_with_list is a function that sums numbers from 1 to n using a list.\n    >>> sum_to_n_with_list(30)\n    465\n    >>> sum_to_n_with_list(100)\n    5050\n    >>> sum_to_n_with_list(5)\n    15\n    >>> sum_to_n_with_list(10)\n    55\n    >>> sum_to_n_with_list(1)\n    1\n    >>> sum_to_n_with_list(10)\n    55\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\ndef sum_to_n_with_generator(n: int):\n    \"\"\"sum_to_n_with_generator is a function that sums numbers from 1 to n using a generator.\n    >>> sum_to_n_with_generator(30)\n    465\n    >>> sum_to_n_with_generator(100)\n    5050\n    >>> sum_to_n_with_generator(5)\n    15\n    >>> sum_to_n_with_generator(10)\n    55\n    >>> sum_to_n_with_generator(1)\n    1\n    >>> sum_to_n_with_generator(10)\n    55\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\ndef sum_to_n_with_map(n: int):\n    \"\"\"sum_to_n_with_map is a function that sums numbers from 1 to n using a map.\n    >>> sum_to_n_with_map(30)\n    465\n    >>> sum_to_n_with_map(100)\n    5050\n    >>> sum_to_n_with_map(5)\n    15\n    >>> sum_to_n_with_map(10)\n    55\n    >>> sum_to_n_with_map(1)\n    1\n    >>> sum_to_n_with_map(10)\n    55\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\ndef sum_to_n_with_reduce(n: int):\n    \"\"\"sum_to_n_with_reduce is a function that sums numbers from 1 to n using a reduce.\n    >>> sum_to_n_with_reduce(30)\n    465\n    >>> sum_to_n_with_reduce(100)\n    5050\n    >>> sum_to_n_with_reduce(5)\n    15\n    >>> sum_to_n_with_reduce(10)\n    55\n    >>> sum_to_n_with_reduce(1)\n    1\n    >>> sum_to_n_with_reduce(10)\n    55\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\ndef sum_to_n_with_filter(n: int):\n    \"\"\"sum_to_n_with_filter is"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n\ndef test_correct_bracketing():\n    \"\"\"\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(())\")\n    True\n    >>> correct_bracketing(\"()(\")\n    False\n    >>> correct_bracketing(\"((()))\")\n    True\n    >>> correct_bracketing(\")(\")\n    False\n    >>> correct_bracketing(\"()(\")\n    False\n    >>> correct_bracketing(\"()()\")\n    True\n    >>> correct_bracketing(\"()(())\")\n    True\n    >>> correct_bracketing(\"(())(\")\n    False\n    >>> correct_bracketing(\"()()(\")\n    False\n    >>> correct_bracketing(\"()()())\")\n    True\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing(\"()()())(\")\n    False\n    >>> correct_bracketing"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return 0\n    elif len(xs) == 2:\n        return xs[1]\n    else:\n        return xs[1] + xs[0] * x + sum(xs[2:] * (xs[1] + xs[0]))\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [15/2]\n    >>> integral([1, 2, 3])\n    [1/2]\n    \"\"\"\n    if len(xs) == 1:\n        return 0\n    elif len(xs) == 2:\n        return xs[1] * xs[0] / 2\n    else:\n        return (xs[1] * xs[0] / 2) + sum(xs[2:] * integral(xs[:-1]))\n\ndef test_integral(xs: list):\n    \"\"\"\n    >>> test_integral([1, 2, 3])\n    1.0\n    >>> test_integral([1, 2, 3, 4, 5])\n    15.0\n    >>> test_integral([3, 1, 2, 4, 5])\n    15.0\n    >>> test_integral([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    120.0\n    >>> test_integral([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    360.0\n    \"\"\"\n    assert integral(xs) == sum(integral(xs[:-1]) + xs[-1])\n\ndef test_derivative(xs: list):\n    \"\"\"\n    >>> test_derivative([1, 2, 3])\n    2.0\n    >>> test_derivative([1, 2, 3, 4, 5])\n    6.0\n    >>> test_derivative([3, 1, 2, 4, 5])\n    6.0\n    >>> test_derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    60.0\n    >>> test_derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    120.0\n    \"\"\"\n    assert derivative(xs) == sum(derivative(xs[:-1]) + xs[-1])\n\ndef test_integral_derivative(xs: list):\n    \"\"\"\n    >>> test_integral_derivative([1, 2, 3])\n    1.0\n    >>> test_integral_derivative([1, 2, 3, 4, 5])\n    15.0\n    >>> test_integr"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\n# test\nprint(fibfib(1))\nprint(fibfib(5))\nprint(fibfib(8))"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOUY\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\ndef test_vowels_count():\n    \"\"\"Test cases for vowels_count function.\"\"\"\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"a\") == 1\n    assert vowels_count(\"hello\") == 2\n    assert vowels_count(\"world\") == 1\n    assert vowels_count(\"acd\") == 1\n    assert vowels_count(\"acde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"YOU\") == 2\n    assert vowels_count(\"pypi\") == 2\n    assert vowels_count(\"PyPI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n    assert vowels_count(\"pYpI\") == 2\n    assert vowels_count(\"pYPi\") == 2\n   "}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = abs(x)\n    digits = str(x)\n    if shift > len(digits):\n        digits = digits[1:] + digits[0]\n    return digits[shift:] + digits[:shift]\n\n\ndef circular_shift_test():\n    \"\"\"Test circular_shift function\"\"\"\n    for x in range(1, 11):\n        for shift in range(1, 11):\n            result = circular_shift(x, shift)\n            assert result == str(x) + str(x)[shift:]\n\n\nif __name__ == '__main__':\n    circular_shift_test()"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isalpha():\n            continue\n        sum += ord(c)\n    return sum\n\n\ndef main():\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    s = s.lower()\n    n = int(n)\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total = apples + oranges\n    if total > n:\n        return -1\n    else:\n        return n - total\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not nodes:\n        return []\n    min_even = nodes[0]\n    index = 0\n    for i, node in enumerate(nodes):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            index = i\n    return [min_even, index]"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_val = -1\n    for val in lst:\n        if lst.count(val) >= val:\n            max_val = val\n    return max_val\n\n\n# test\nlst = [4, 1, 2, 2, 3, 1]\nprint(search(lst))\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\nprint(search(lst))\n\nlst = [5, 5, 4, 4, 4]\nprint(search(lst))"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return [lst[0]] + strange_sort_list(lst[1:])"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = round(s * (s - a) * (s - b) * (s - c), 2)\n        return area\n    else:\n        return -1\n\n\n# Test\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\n# Test the function\nprint(will_it_fly([1, 2], 5))  # False\nprint(will_it_fly([3, 2, 3], 1))  # False\nprint(will_it_fly([3, 2, 3], 9))  # True\nprint(will_it_fly([3], 5))  # True"}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    if n % 2 == 1:\n        return 0\n    else:\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                return 1 + smallest_change(arr[:i] + arr[i+1:])\n        return 0\n\narr = [1,2,3,5,4,7,9,6]\nprint(smallest_change(arr))"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return sorted(lst1, key=len)\n\n\n# Test\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 3:\n        return False\n    if a == 3:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef main():\n    for i in range(1, 101):\n        if is_multiply_prime(i):\n            print(i)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == n**int(n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    else:\n        for i in range(1,int(a**(1/3))+1):\n            if a == i*i*i:\n                return True\n        return False"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    prime_count = 0\n    for i in range(len(num)):\n        if num[i] in \"2357B\":\n            prime_count += 1\n    return prime_count\n\n\n# Test\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # check if the number is 0\n    if decimal == 0:\n        return \"db000000db\"\n\n    # convert decimal to binary\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n\n    # add extra characters\n    binary = \"db\" + binary + \"db\"\n\n    return binary\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string in binary format and your task is to convert it to\n    decimal form. The function should return an integer.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n    # check if the number is 0\n    if binary == \"db000000db\":\n        return 0\n\n    # convert binary to decimal\n    decimal = 0\n    for i in range(len(binary)-2):\n        decimal += int(binary[i:i+2]) * (2**i)\n\n    return decimal\n\n\ndef main():\n    # test decimal_to_binary function\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(32))\n\n    # test binary_to_decimal function\n    print(binary_to_decimal(\"db1111db\"))\n    print(binary_to_decimal(\"db100000db\"))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\n\n# Test cases\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\"xyy\"))  # False"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    grades = [float(grade) for grade in grades]\n    letter_grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades_list.append(letter_grades[0])\n        elif grade >= 3.7:\n            letter_grades_list.append(letter_grades[1])\n        elif grade >= 3.3:\n            letter_grades_list.append(letter_grades[2])\n        elif grade >= 3.0:\n            letter_grades_list.append(letter_grades[3])\n        elif grade >= 2.7:\n            letter_grades_list.append(letter_grades[4])\n        elif grade >= 2.3:\n            letter_grades_list.append(letter_grades[5])\n        elif grade >= 2.0:\n            letter_grades_list.append(letter_grades[6])\n        elif grade >= 1.7:\n            letter_grades_list.append(letter_grades[7])\n        elif grade >= 1.3:\n            letter_grades_list.append(letter_grades[8])\n        elif grade >= 1.0:\n            letter_grades_list.append(letter_grades[9])\n        else:\n            letter_grades_list.append(letter_grades[10])\n    return letter_grades_list\n\n\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # check if the string is empty\n    if len(string) == 0:\n        return False\n    # check if the string is a prime number\n    for i in range(2, len(string)):\n        if string[0:i] == string[i:]:\n            return False\n    return True\n\n\n# test the function\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # count the number of integers that start with 1\n    start_count = 0\n    for i in range(1, n):\n        start_count += 10**i\n\n    # count the number of integers that end with 1\n    end_count = 0\n    for i in range(1, n):\n        end_count += 10**i\n\n    return start_count + end_count - 10**n\n\n\n# Test cases\nprint(starts_one_ends(1))  # 1\nprint(starts_one_ends(2))  # 2\nprint(starts_one_ends(3))  # 3\nprint(starts_one_ends(4))  # 7\nprint(starts_one_ends(5))  # 12\nprint(starts_one_ends(6))  # 15\nprint(starts_one_ends(7))  # 21\nprint(starts_one_ends(8))  # 28\nprint(starts_one_ends(9))  # 36"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # 1. \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\n    N_binary = bin(N)[2:]\n    # 2. \u5c06N_binary\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = N_binary[::-1]\n    # 3. \u5c06N_string\u8f6c\u6362\u4e3a\u6574\u6570\n    N_int = int(N_string, 2)\n    # 4. \u5c06N_int\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = str(N_int)\n    # 5. \u5c06N_string\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\n    N_binary = bin(int(N_string, 10))[2:]\n    # 6. \u5c06N_binary\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = N_binary[::-1]\n    # 7. \u5c06N_string\u8f6c\u6362\u4e3a\u6574\u6570\n    N_int = int(N_string, 2)\n    # 8. \u5c06N_int\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = str(N_int)\n    # 9. \u5c06N_string\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\n    N_binary = bin(int(N_string, 10))[2:]\n    # 10. \u5c06N_binary\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = N_binary[::-1]\n    # 11. \u5c06N_string\u8f6c\u6362\u4e3a\u6574\u6570\n    N_int = int(N_string, 2)\n    # 12. \u5c06N_int\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = str(N_int)\n    # 13. \u5c06N_string\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\n    N_binary = bin(int(N_string, 10))[2:]\n    # 14. \u5c06N_binary\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = N_binary[::-1]\n    # 15. \u5c06N_string\u8f6c\u6362\u4e3a\u6574\u6570\n    N_int = int(N_string, 2)\n    # 16. \u5c06N_int\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = str(N_int)\n    # 17. \u5c06N_string\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\n    N_binary = bin(int(N_string, 10))[2:]\n    # 18. \u5c06N_binary\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = N_binary[::-1]\n    # 19. \u5c06N_string\u8f6c\u6362\u4e3a\u6574\u6570\n    N_int = int(N_string, 2)\n    # 20. \u5c06N_int\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = str(N_int)\n    # 21. \u5c06N_string\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\n    N_binary = bin(int(N_string, 10))[2:]\n    # 22. \u5c06N_binary\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    N_string = N_binary[::-1]\n   "}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 != 0:\n            result.append(lst[i])\n    return result\n\n\ndef main():\n    lst = [4, 2, 6, 7]\n    print(add(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n\n    # create an empty list to store the ordered words\n    ordered_words = []\n\n    # iterate over each word in the list of words\n    for word in words:\n        # create an empty string to store the ordered word\n        ordered_word = \"\"\n\n        # iterate over each character in the word\n        for char in word:\n            # append the character to the ordered word\n            ordered_word += chr(ord(char) - 1)\n\n        # append the ordered word to the ordered_words list\n        ordered_words.append(ordered_word)\n\n    # join the ordered_words list with spaces to create the final string\n    return \" \".join(ordered_words)"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row in lst:\n        if x in row:\n            result.append((row.index(x), row.count(x) - 1))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result\n\n\ndef get_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_rows([], 1) == []\n    get_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row in lst:\n        if x in row:\n            result.append((row.index(x), row.count(x) - 1))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\n# Test\narray = [2, 4, 3, 0, 1, 5, 6]\nprint(sort_array(array))"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a list of the alphabet\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    # create a list of the encrypted alphabet\n    encrypted_alphabet = []\n    # iterate through the alphabet\n    for letter in alphabet:\n        # shift the letter two multiplied to two places\n        shifted_letter = chr(ord(letter) + 2 * 2)\n        # add the shifted letter to the encrypted alphabet\n        encrypted_alphabet.append(shifted_letter)\n    # create a new string using the encrypted alphabet\n    encrypted_string = ''.join(encrypted_alphabet)\n    # return the encrypted string\n    return encrypted_string\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    # create a list of the alphabet\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    # create a list of the decrypted alphabet\n    decrypted_alphabet = []\n    # iterate through the alphabet\n    for letter in alphabet:\n        # shift the letter two multiplied to two places\n        shifted_letter = chr(ord(letter) - 2 * 2)\n        # add the shifted letter to the decrypted alphabet\n        decrypted_alphabet.append(shifted_letter)\n    # create a new string using the decrypted alphabet\n    decrypted_string = ''.join(decrypted_alphabet)\n    # return the decrypted string\n    return decrypted_string"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        return min(lst[1:])"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.split('. ')\n    # Initialize a counter for boredoms\n    boredom_count = 0\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith('I'):\n            # Increment the boredom count\n            boredom_count += 1\n    # Return the boredom count\n    return boredom_count"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z or y == x + z or z == x + y:\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 2)\n            else:\n                result += chr(ord(char) - 2)\n        else:\n            result += char\n    return result\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places before that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) - 2)\n            else:\n                result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    result = 0\n    for num in lst:\n        if is_prime(num):\n            result += sum_digits(num)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.isalpha():\n            return False\n        if key.islower() != dict[key].islower():\n            return False\n    return True\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.isalpha():\n            return False\n        if key.islower() != dict[key].islower():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n# Test the function\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    while a > 0:\n        a, remainder = divmod(a, 10)\n        while b > 0:\n            b, remainder = divmod(b, 10)\n            product = remainder * remainder\n            if product > 9:\n                product = product % 10\n            a = remainder\n            b = product\n    return product\n\n\n# Test cases\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15))"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(count_upper('aBCdEf')) # 1\nprint(count_upper('abcdefg')) # 0\nprint(count_upper('dBBE')) # 0"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    if value == \"0\":\n        return 0\n    else:\n        return round(float(value))"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n+2, n+4]\n    else:\n        return [n, n+2, n+3]\n\n\ndef main():\n    for n in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n        print(make_a_pile(n))\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string by comma or space\n    return s.split(\", \")\n\ndef words_string_2(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string by comma or space\n    return s.split(\", \")\n\ndef words_string_3(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string by comma or space\n    return s.split(\", \")\n\ndef words_string_4(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string by comma or space\n    return s.split(\", \")\n\ndef words_string_5(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string by comma or space\n    return s.split(\", \")\n\ndef words_string_6(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string by comma or space\n    return s.split(\", \")\n\ndef words_string_7(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\","}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1\n\n\n# Test the function\nprint(choose_num(12, 15))\nprint(choose_num(13, 12))"}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum/m\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    return binary\n\n\n# Test the function\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # sort the list\n    x.sort()\n\n    # create a set of digits\n    digits = set()\n\n    # iterate over the list\n    for i in x:\n        # check if the digit is even\n        if i % 2 == 0:\n            # add the digit to the set\n            digits.add(i)\n\n    # create a list of unique digits\n    unique_digits = [d for d in x if d not in digits]\n\n    # return the list\n    return unique_digits\n\n\n# test the function\nprint(unique_digits([15, 33, 1422, 1]))"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if not arr:\n        return []\n    arr = sorted(arr, key=lambda x: x if x >= 1 and x <= 9 else None)\n    arr = arr[::-1]\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][::-1]\n\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr))\n\narr = [1, -1 , 55]\nprint(by_length(arr))"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2,i+1):\n                result.append(result[j-1]*j)\n        else:\n            result.append(0)\n            for j in range(1,i+1):\n                result.append(result[j-1]+j)\n    return result\n\nprint(f(5))"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Initialize a dictionary to store the count of even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if i == str(i)[::-1]:\n            # If it is, check if it is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return a tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            count += sum(int(digit) for digit in str(num)) > 0\n        else:\n            count += sum(int(digit) for digit in str(-num)) > 0\n    return count\n\n\nif __name__ == '__main__':\n    print(count_nums([-1, 11, -11]))"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i] > arr[0]:\n            break\n    else:\n        return True\n    return False\n\n\n# Test Cases\narr1 = [3, 4, 5, 1, 2]\narr2 = [3, 5, 4, 1, 2]\narr3 = [3, 5, 4, 1, 2, 2]\narr4 = [3, 5, 4, 1, 2, 2, 2]\narr5 = [3, 5, 4, 1, 2, 2, 2, 2]\narr6 = [3, 5, 4, 1, 2, 2, 2, 2, 2]\narr7 = [3, 5, 4, 1, 2, 2, 2, 2, 2, 2]\narr8 = [3, 5, 4, 1, 2, 2, 2, 2, 2, 2, 2]\narr9 = [3, 5, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2]\narr10 = [3, 5, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # check if lst1 is empty\n    if not lst1:\n        return \"NO\"\n    # check if lst2 is empty\n    if not lst2:\n        return \"NO\"\n    # check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    # check if all elements in lst2 are even\n    if all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    # check if lst1 and lst2 have the same length\n    if len(lst1) != len(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements\n    if lst1 == lst2:\n        return \"YES\"\n    # check if lst1 and lst2 have the same elements in a different order\n    if sorted(lst1) == sorted(lst2):\n        return \"YES\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"YES\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different order and different values\n    if sorted(lst1) != sorted(lst2):\n        return \"NO\"\n    # check if lst1 and lst2 have the same elements in a different"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n    # split the string into a list of characters\n    test_list = test.split()\n    # iterate over the list of characters\n    for char in test_list:\n        # check if the character is in the dictionary\n        if char in result:\n            # if it is, increment the count\n            result[char] += 1\n        else:\n            # if it is not, add the character to the dictionary with a count of 1\n            result[char] = 1\n    # return the dictionary\n    return result\n\n# test the function\nprint(histogram('a b c'))"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    s = [x for x in s if x not in c]\n    s = ''.join(s)\n    return s,s == s[::-1]\n\ns,is_palindrome = reverse_delete(\"abcdedcba\",\"ab\")\nprint(s,is_palindrome)"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len(list(filter(lambda x: int(x) % 2 == 1, lst[i]))) } in the str{i} of the input.\" for i in range(len(lst))]\n\n\n#%%\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len(list(filter(lambda x: int(x) % 2 == 1, lst[i]))) } in the str{i} of the input.\" for i in range(len(lst))]\n\n\n#%%\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len(list(filter(lambda x: int(x) % 2 == 1, lst[i]))) } in the str{i} of the input.\" for i in range(len(lst))]\n\n\n#%%\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i])\n        if min_sum < 0:\n            min_sum = 0\n    return min_sum\n\n\nnums = [2, 3, 4, 1, 2, 4]\nprint(minSubArraySum(nums))"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    n, m = len(grid), len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                if i == 0 or grid[i-1][j] == 0 or j == 0 or grid[i][j-1] == 0:\n                    continue\n                k = min(capacity, grid[i][j] + grid[i-1][j] + grid[i][j-1])\n                res += k\n                grid[i][j] -= k\n                if grid[i][j] == 0:\n                    grid[i][j] = 1\n    return res\n\n\ndef max_fill_2(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    n, m = len(grid), len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                if i == 0 or grid[i-1][j] == 0 or j == 0 or grid[i][j-1] == 0:\n                    continue\n                k = min(capacity, grid[i][j] + grid[i-1][j] + grid[i][j-1])\n               "}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First sort by number of ones\n    arr.sort(key=lambda x: sum(int(bit) for bit in bin(x)[2:]), reverse=True)\n    # If two numbers have the same number of ones, sort by their decimal value\n    arr.sort()\n    return arr\n\n\nif __name__ == '__main__':\n    print(sort_array([1, 5, 2, 3, 4]))\n    print(sort_array([-2, -3, -4, -5, -6]))\n    print(sort_array([1, 0, 2, 3, 4]))"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n    # create an empty list to store the selected words\n    selected_words = []\n    # iterate over each word in the list of words\n    for word in words:\n        # count the number of consonants in the word\n        count = 0\n        for letter in word:\n            if letter.isalpha() and letter != 'a' and letter != 'e' and letter != 'i' and letter != 'o' and letter != 'u':\n                count += 1\n        # if the count of consonants is equal to n, add the word to the list of selected words\n        if count == n:\n            selected_words.append(word)\n    # return the list of selected words\n    return selected_words"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(word)-2):\n        if word[i] in vowels and word[i+1] in vowels:\n            result = word[i]\n            break\n        elif word[i] not in vowels and word[i+1] not in vowels:\n            if word[i+1] - word[i] == 1:\n                result = word[i]\n                break\n    return result\n\n# test\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_good(lst):\n        stack = []\n        for i, x in enumerate(lst):\n            if x == '(':\n                stack.append(i)\n            elif x == ')':\n                if not stack or stack.pop() != i:\n                    return False\n        return not stack\n\n    def concat(lst):\n        return ''.join(lst)\n\n    return 'Yes' if any(is_good(concat(x, y)) for x, y in zip(lst, lst[1:])) else 'No'\n\n\n#%%\n\ndef test_match_parens():\n    '''\n    Test the function\n    '''\n    print(match_parens(['()(', ')']))\n    print(match_parens([')', ')']))\n    print(match_parens}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    return arr[:k]\n\n# test the function\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n\n\n# test\nprint(solution([5, 8, 7, 1]))"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n\n\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = []\n        while n != 1:\n            if n % 2 == 1:\n                odd_collatz.append(n)\n                n = 3 * n + 1\n            else:\n                n = n // 2\n        return sorted(odd_collatz)\n\n\n# Test\nprint(get_odd_collatz(5))"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    date_list = date.split('-')\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if year < 1900 or year > 2100:\n        return False\n    if month in [1,3,5,7,8,10,12]:\n        if day < 32:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 31:\n            return False\n    elif month == 2:\n        if day < 29:\n            return False\n    if month == 2 and year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        if day > 29:\n            return False\n    return True\n\n\ndef main():\n    date_list = [\"03-11-2000\", \"15-01-2012\", \"04-0-2040\", \"06-04-2020\", \"06/04/2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04-2020\", \"06-04"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    words = []\n    for word in txt.split():\n        words.append(word)\n    return words\n\ndef split_on_commas(txt):\n    '''\n    Given a string of words, return a list of words split on commas ',' if no commas exists in the text you should split on\n    commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0,\n    ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_on_commas(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_on_commas(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_on_commas(\"abcdef\") == 3 \n    '''\n    words = []\n    for word in txt.split():\n        words.append(word)\n    return words\n\ndef split_on_odd_order_letters(txt):\n    '''\n    Given a string of words, return a list of words split on commas ',' if no commas exists in the text you should split on\n    commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0,\n    ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_on_odd_order_letters(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_on_odd_order_letters(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_on_odd_order_letters(\"abcdef\") == 3 \n    '''\n    words = []\n    for word in txt.split():\n        words.append(word)\n    return words\n\ndef split_on_odd_order_letters_and_commas(txt):\n    '''\n    Given a string of words, return a list of words split on commas ',' if no commas exists in the text you should split on\n    commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0,\n    ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_on_odd_order_letters_and_commas(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_on_odd_order_letters_and_commas(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_on_odd_order_letters_and_commas(\"abcdef\") == 3 \n    '''\n    words = []\n    for word in txt.split():\n        words.append(word)\n    return words\n\ndef split_on_odd_order_letters_and_commas_and_whitespace(txt):\n    '''\n    Given a string of words, return a list of words split"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\ndef is_sorted_by_sum(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order by their sum. If list has more than 1 duplicate\n    of the same number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted_by_sum([5]) \u279e True\n    is_sorted_by_sum([1, 2, 3, 4, 5]) \u279e True\n    is_sorted_by_sum([1, 3, 2, 4, 5]) \u279e False\n    is_sorted_by_sum([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted_by_sum([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted_by_sum([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted_by_sum([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted_by_sum([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] + lst[i+1] != lst[i+1] + lst[i]:\n            return False\n    return True\n\n\ndef is_sorted_by_sum_and_count(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order by their sum and count. If list has more than 1\n    duplicate of the same number, return False. Assume no negative numbers\n    and only integers.\n\n    Examples\n    is_sorted_by_sum_and_count([5]) \u279e True\n    is_sorted_by_sum_and_count([1, 2, 3, 4, 5]) \u279e True\n    is_sorted_by_sum_and_count([1, 3, 2, 4, 5]) \u279e False\n    is_sorted_by_sum_and_count([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted_by_sum_and_count([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted_by_sum_and_count([1, 3, 2, 4,"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def intersection_length(interval1, interval2):\n        start1, end1 = interval1\n        start2, end2 = interval2\n        return max(start1, start2) - min(start1, end2) + 1\n\n    interval1, interval2 = map(tuple, zip(interval1, interval2))\n    length = intersection_length(interval1, interval2)\n    if length == 0:\n        return \"NO\"\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Test cases\nprint(intersection((1, 2), (2, 3))) # NO\nprint(intersection((-1, 1), (0, 4))) # NO\nprint(intersection((-3, -1), (-5, 5))) # YES\nprint(intersection((-1, 1), (-2, 3))) # NO\nprint(intersection((-1, 1), (-2, 3))) # NO\nprint(intersection((-1, 1), (-2, 3))) # NO"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n        return sum(abs(x) * sign(x) for x, sign(x) in zip(arr, arr))\n\n\n# test\narr = [1, 2, 2, -4]\nprint(prod_signs(arr))\n\narr = [0, 1]\nprint(prod_signs(arr))\n\narr = []\nprint(prod_signs(arr))"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def dfs(grid, i, j, k, visited, result):\n        if k == 0:\n            result.append(grid[i][j])\n            return\n        visited[i][j] = True\n        for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n            x, y = i + dx, j + dy\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not visited[x][y]:\n                dfs(grid, x, y, k - 1, visited, result)\n        visited[i][j] = False\n\n    N = len(grid)\n    visited = [[False] * N for _ in range(N)]\n    result = []\n    for i in range(N):\n        for j in range(N):\n            dfs(grid, i, j, k, visited, result)\n    return result\n\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 3\nprint(minPath(grid, k))"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [1, n]\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    else:\n        dig = 0\n        while n > 0:\n            dig += n % 10\n            n //= 10\n        return dig\n\n\ndef main():\n    n = int(input(\"Enter a positive integer: \"))\n    print(digits(n))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack.pop() != '[':\n                return False\n    return len(stack) > 1\n\n# Test the function\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum = 0\n    for i in lst:\n        sum += round(i)**2\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # check if the string is empty\n    if not txt:\n        return False\n    # check if the last character is a letter\n    if txt[-1].isalpha():\n        # check if the last character is a part of a word\n        if not \" \".join(txt.split()).endswith(txt[-1]):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# test the function\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # False\nprint(check_if_last_char_is_a_letter(\"\")) # False"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\ndef can_arrange_2(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\ndef can_arrange_3(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\ndef can_arrange_4(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\ndef can_arrange_5(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\ndef can_arrange_6(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n    return a, b\n\n\n# Test the function\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_two(1, 2.5) \u279e 2.5\n    compare_two(1, \"2,3\") \u279e \"2,3\"\n    compare_two(\"5,1\", \"6\") \u279e \"6\"\n    compare_two(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None\n\n\ndef compare_three(a, b, c):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_three(1, 2.5, \"3\") \u279e 2.5\n    compare_three(1, \"2,3\", \"5\") \u279e \"5\"\n    compare_three(\"5,1\", \"6\", \"7\") \u279e \"7\"\n    compare_three(\"1\", 1, \"1\") \u279e None\n    \"\"\"\n    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int):\n        return max(a, b, c)\n    elif isinstance(a, float) and isinstance(b, float) and isinstance(c, float):\n        return max(a, b, c)\n    elif isinstance(a, str) and isinstance(b, str) and isinstance(c, str):\n        return max(a, b, c)\n    else:\n        return None\n\n\ndef compare_four(a, b, c, d):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_four(1, 2.5, \"3\", \"4\") \u279e 2.5\n    compare_four(1, \"2,3\", \"5\", \"6\") \u279e \"6\"\n    compare_four(\"5,1\", \"6\", \"7\", \"8\") \u279e \"8\"\n    compare_four(\"1\", 1, \"1\", \"1\") \u279e None\n    \"\"\"\n    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int) and isinstance(d, int):\n        return max(a, b, c, d)\n    elif isinstance(a, float) and isinstance(b, float) and isinstance("}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(2, n):\n        if i % 2 == 0:\n            if n - i == 4 * i:\n                return True\n    return False\n\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == False\n    is_equal_to_sum_odd(6) == False\n    is_equal_to_sum_odd(8) == False\n    is_equal_to_sum_odd(10) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(3, n):\n        if i % 2 == 1:\n            if n - i == 4 * i:\n                return True\n    return False\n\n\ndef is_equal_to_sum_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and 4 positive odd numbers\n    Example\n    is_equal_to_sum_even_odd(4) == False\n    is_equal_to_sum_even_odd(6) == False\n    is_equal_to_sum_even_odd(8) == False\n    is_equal_to_sum_even_odd(10) == True\n    is_equal_to_sum_even_odd(12) == True\n    is_equal_to_sum_even_odd(14) == True\n    is_equal_to_sum_even_odd(16) == True\n    is_equal_to_sum_even_odd(18) == True\n    is_equal_to_sum_even_odd(20) == True\n    is_equal_to_sum_even_odd(22) == True\n    is_equal_to_sum_even_odd(24) == True\n    is_equal_to_sum_even_odd(26) == True\n    is_equal_to_sum_even_odd(28) == True\n    is_equal_to_sum_even_odd(30) == True\n    is_equal_to_sum_even_odd(32) == True\n    is_equal_to_sum_even_odd(34) == True\n    is_equal_to_sum_even_odd(36) == True\n    is_equal_to_sum_even_odd(38) == True\n    is_equal_to_sum_even_odd(40) == True\n    is_equal_to_sum_even_odd(42) == True\n    is_equal_to_sum_even_odd(44) == True\n    is_equal_to_sum_even_odd(46) == True\n    is_equal_to_sum_even_odd(48) == True\n    is_equal_to_sum_even_odd(50) == True\n    is_equal_to_sum_even_odd(52) == True\n    is_equal_to_sum_even_odd(54) == True\n    is_equal_to_sum_even_odd(56) == True\n    is_equal_to_sum_even_odd(58) == True\n    is_equal_to_sum_even_odd(60) == True\n    is_equal_to_sum_even_odd(62) == True\n    is_equal_to_sum_even_odd(64) == True"}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # split the string into a list of words\n    words = text.split()\n    # iterate over the list of words\n    for i in range(len(words)):\n        # if the current word has more than 2 consecutive spaces\n        if words[i].count(\" \") > 2:\n            # replace all consecutive spaces with -\n            words[i] = words[i].replace(\" \", \"-\")\n        # otherwise, replace all spaces with underscores\n        else:\n            words[i] = words[i].replace(\" \", \"_\")\n    # join the list of words back into a string\n    return \"\".join(words)"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name.startswith('.'):\n        return \"No\"\n    if file_name.endswith('.txt') or file_name.endswith('.exe') or file_name.endswith('.dll'):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nfile_name = input(\"Enter the name of the file: \")\nprint(file_name_check(file_name))"}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nsentence1 = \"This is a test\"\nsentence2 = \"lets go for swimming\"\nsentence3 = \"hello world\"\nsentence4 = \"1234567890\"\nsentence5 = \"12345678901234567890\"\nsentence6 = \"123456789012345678901234567890\"\nsentence7 = \"1234567890123456789012345678901234567890\"\nsentence8 = \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    if int(x) * int(n) == int(x.replace('/', '')) * int(n.replace('/', '')):\n        return True\n    else:\n        return False\n\n\n# Test code\nprint(simplify(\"1/5\", \"5/1\"))\nprint(simplify(\"1/6\", \"2/1\"))\nprint(simplify(\"7/10\", \"10/2\"))"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    nums.sort(key=lambda x: (sum_digits(x), x))\n    return nums\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n\n\n# Test the function\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i*i-i+1 for i in range(1,n+1)]\n    count = 0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if a[i]+a[j]+a[k]%3==0:\n                    count += 1\n    return count\n\nn = int(input())\nprint(get_max_triples(n))"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        result = []\n        for i in range(index1, index2+1):\n            result.append(planets[i])\n        return sorted(result, key=lambda x: planets.index(x))\n\n\n# Testing\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\n\ndef main():\n    lst = [\"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    print(sorted_list_sum(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    elif n == 3:\n        return x\n    elif n == 5:\n        return x\n    elif n == 7:\n        return x\n    else:\n        return y\n\n\n# Testing the function\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            result += (num - 1)**2\n    return result\n\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([]))"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n\n\ndef main():\n    \"\"\"\n    This is the main function that will be called when you run the program.\n    It will take in the scores and guesses arrays and call the compare function to\n    get the result array. It will then print out the result array.\n    \"\"\"\n    scores = [1,2,3,4,5,1]\n    guesses = [1,2,3,4,2,-2]\n    result = compare(scores,guesses)\n    print(result)\n\n\nmain()"}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    extensions_dict = {}\n    for extension in extensions:\n        if extension in extensions_dict:\n            extensions_dict[extension] += 1\n        else:\n            extensions_dict[extension] = 1\n    max_strength = 0\n    strongest_extension = None\n    for extension, strength in extensions_dict.items():\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\ndef main():\n    class_name = input(\"Enter class name: \")\n    extensions = input(\"Enter extensions separated by spaces: \").split()\n    print(Strongest_Extension(class_name, extensions))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        a,b = b,a\n    a = a.lower()\n    b = b.lower()\n    a = ''.join(sorted(a))\n    b = ''.join(sorted(b))\n    if a in b or b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if a in b[i:]:\n                return True\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n\n# Test\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    result = ''\n    number = abs(number)\n    while number > 0:\n        if number >= roman_dict['M']:\n            result += roman_dict['M']\n            number -= roman_dict['M']\n        elif number >= roman_dict['D']:\n            result += roman_dict['D']\n            number -= roman_dict['D']\n        elif number >= roman_dict['C']:\n            result += roman_dict['C']\n            number -= roman_dict['C']\n        elif number >= roman_dict['L']:\n            result += roman_dict['L']\n            number -= roman_dict['L']\n        elif number >= roman_dict['X']:\n            result += roman_dict['X']\n            number -= roman_dict['X']\n        elif number >= roman_dict['V']:\n            result += roman_dict['V']\n            number -= roman_dict['V']\n        else:\n            result += roman_dict['I']\n            number -= roman_dict['I']\n    return result.lower()\n\n\nif __name__ == '__main__':\n    print(int_to_mini_roman(19))\n    print(int_to_mini_roman(152))\n    print(int_to_mini_roman(426))"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # sort the list\n    words.sort()\n    # create a dictionary to store the count of unique characters\n    char_count = {}\n    # iterate over the list\n    for word in words:\n        # create a set of unique characters\n        unique_chars = set(word)\n        # count the number of unique characters\n        count = len(unique_chars)\n        # update the dictionary with the count\n        char_count[word] = count\n    # find the word with maximum count\n    max_count = max(char_count.values())\n    max_word = [word for word, count in char_count.items() if count == max_count][0]\n    return max_word\n\n# test the function\nprint(find_max([\"name\", \"of\", \"string\", \"enam\", \"game\", \"aaaaaaa\", \"bb\", \"cc\"]))"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining == 0:\n        return [number + need, 0]\n    else:\n        return [number + min(remaining, need), remaining - min(remaining, need)]\n\n\n# test\nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\nprint(eat(1, 10, 10))\nprint(eat(2, 11, 5))"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list is equal to the length of operand list minus one.\")\n    if not operator:\n        raise ValueError(\"The operator list has at least one operator.\")\n    if not operand:\n        raise ValueError(\"The operand list has at least two operands.\")\n    if not operand[0] >= 0:\n        raise ValueError(\"The operand list has at least two non-negative integers.\")\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result = int(result / operand[i])\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n\n\ndef test_do_algebra():\n    \"\"\"\n    Test the do_algebra function.\n    \"\"\"\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['-', '*', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['*', '**', '+'], [2, 3, 4, 5]) == 115\n    assert do_algebra(['*', '**', '-'], [2, 3, 4, 5]) == 111\n    assert do_algebra(['*', '//', '**'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, 5]) == 11\n    assert do_algebra(['*', '//', '-', '+'], [2, 3, 4, "}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result[::-1]"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash string, return its string equivalent.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(md5.encode()).hexdigest()\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '4a74805bbf561691e91e111172c0200c'\n    \"\"\"\n    import hashlib\n    return hashlib.sha256(text.encode()).hexdigest()\n\ndef sha256_to_string(sha256):\n    \"\"\"\n    Given a sha256 hash string, return its string equivalent.\n    If 'sha256' is an empty string, return None.\n\n    >>> sha256_to_string('4a74805bbf561691e91e111172c0200c') == 'Hello world'\n    \"\"\"\n    import hashlib\n    return hashlib.sha256(sha256.encode()).hexdigest()\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == '67452301f50f6e5642879b1b98b959b61c4c0873d391e987982fbbd3'\n    \"\"\"\n    import hashlib\n    return hashlib.sha512(text.encode()).hexdigest()\n\ndef sha512_to_string(sha512):\n    \"\"\"\n    Given a sha512 hash string, return its string equivalent.\n    If 'sha512' is an empty string, return None.\n\n    >>> sha512_to_string('67452301f50f6e5642879b1b98b959b61c4c0873d391e987982fbbd3') == 'Hello world'\n    \"\"\"\n    import hashlib\n    return hashlib.sha512(sha512.encode()).hexdigest()\n\ndef string_to_ripemd160(text):\n    \"\"\"\n    Given a string 'text', return its ripemd160 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_ripemd160('Hello world') == 'b3be1598"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    digits = []\n    for i in range(a, b+1):\n        if i % 10 == 0:\n            digits.append(i)\n    return digits\n\n\ndef generate_even_digits(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_even_digits(2, 8) => [2, 4, 6, 8]\n    generate_even_digits(8, 2) => [2, 4, 6, 8]\n    generate_even_digits(10, 14) => []\n    \"\"\"\n    digits = []\n    for i in range(a, b+1):\n        if i % 10 == 0 and i % 2 == 0:\n            digits.append(i)\n    return digits\n\n\ndef generate_odd_digits(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the odd digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_odd_digits(2, 8) => [1, 3, 5, 7]\n    generate_odd_digits(8, 2) => [1, 3, 5, 7]\n    generate_odd_digits(10, 14) => [1, 3, 5, 7, 9, 11, 13]\n    \"\"\"\n    digits = []\n    for i in range(a, b+1):\n        if i % 10 == 0 and i % 2 != 0:\n            digits.append(i)\n    return digits\n\n\ndef generate_even_and_odd_digits(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits and odd digits\n    between a and b, in ascending order.\n\n    For example:\n    generate_even_and_odd_digits(2, 8) => [2, 4, 6, 8, 1, 3, 5, 7]\n    generate_even_and_odd_digits(8, 2) => [2, 4, 6, 8, 1, 3, 5, 7]\n    generate_even_and_odd_digits(10, 14) => [2, 4, 6, 8, 1, 3, 5, 7, 9, 11, 13]\n    \"\"\"\n    digits = []\n    for i in range(a, b+1):\n        if i % 10 == 0 and i % 2 == 0:\n            digits.append(i)\n        elif i % 10 == 0 and i % 2 != 0:\n            digits.append(i)\n    return digits"}
