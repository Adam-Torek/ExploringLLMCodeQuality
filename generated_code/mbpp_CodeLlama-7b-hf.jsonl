{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\n\ndef similar_elements(list1, list2):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :return: list of integers\n    \"\"\"\n    return list(set(list1).intersection(list2))\n\n\nif __name__ == '__main__':\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(similar_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    assert is_not_prime(2) == False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_not_prime(2))\n    print(is_not_prime(3))\n    print(is_not_prime(4))\n    print(is_not_prime(5))\n    print(is_not_prime(6))\n    print(is_not_prime(7))\n    print(is_not_prime(8))\n    print(is_not_prime(9))\n    print(is_not_prime(10))\n    print(is_not_prime(11))\n    print(is_not_prime(12))\n    print(is_not_prime(13))\n    print(is_not_prime(14))\n    print(is_not_prime(15))\n    print(is_not_prime(16))\n    print(is_not_prime(17))\n    print(is_not_prime(18))\n    print(is_not_prime(19))\n    print(is_not_prime(20))\n    print(is_not_prime(21))\n    print(is_not_prime(22))\n    print(is_not_prime(23))\n    print(is_not_prime(24))\n    print(is_not_prime(25))\n    print(is_not_prime(26))\n    print(is_not_prime(27))\n    print(is_not_prime(28))\n    print(is_not_prime(29))\n    print(is_not_prime(30))\n    print(is_not_prime(31))\n    print(is_not_prime(32))\n    print(is_not_prime(33))\n    print(is_not_prime(34))\n    print(is_not_prime(35))\n    print(is_not_prime(36))\n    print(is_not_prime(37))\n    print(is_not_prime(38))\n    print(is_not_prime(39))\n    print(is_not_prime(40))\n    print(is_not_prime(41))\n    print(is_not_prime(42))\n    print(is_not_prime(43))\n    print(is_not_prime(44))\n    print(is_not_prime(45))\n    print(is_not_prime(46))\n    print(is_not_prime(47))\n    print(is_not_prime(48))\n    print(is_not_prime(49))\n    print(is_not_prime(50))\n    print(is_not_prime(51))\n    print(is_not_prime(52))\n    print(is_not_prime(53))\n    print(is_not_prime(54))\n    print(is_not_prime(55))\n    print(is_not_prime(56))\n    print(is_not_prime(57))\n    print(is_not_prime(58))\n    print(is_not_prime(59))\n    print(is_not_prime(60))\n    print(is_not_prime(61))\n    print(is_not_prime(62))\n    print(is_not_prime(63))\n    print(is_not_prime(64))\n    print(is_not_prime(65))\n    print(is_not_prime(66))\n"}
{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest integers to return\n    :return: list of n largest integers\n    \"\"\"\n    if n > len(nums):\n        raise ValueError(\"n must be less than or equal to the length of nums\")\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    if not isinstance(nums, list):\n        raise TypeError(\"nums must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    # create a min heap\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    # pop off the top n elements\n    largest = []\n    for _ in range(n):\n        largest.append(heapq.heappop(heap))\n\n    # return largest in descending order\n    return sorted(largest, reverse=True)\n\n\nif __name__ == \"__main__\":\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 4))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 6))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 7))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 8))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 9))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 10))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 11))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 12))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 13))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 14))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 15))\n    print(heap_queue_largest([25, 3"}
{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\n\ndef differ_At_One_Bit_Pos(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: bool\n    \"\"\"\n    return bin(a ^ b).count('1') == 1\n\n\nif __name__ == '__main__':\n    print(differ_At_One_Bit_Pos(13, 9))\n    print(differ_At_One_Bit_Pos(13, 10))\n    print(differ_At_One_Bit_Pos(13, 13))\n    print(differ_At_One_Bit_Pos(13, 14))\n    print(differ_At_One_Bit_Pos(13, 15))\n    print(differ_At_One_Bit_Pos(13, 16))\n    print(differ_At_One_Bit_Pos(13, 17))\n    print(differ_At_One_Bit_Pos(13, 18))\n    print(differ_At_One_Bit_Pos(13, 19))\n    print(differ_At_One_Bit_Pos(13, 20))\n    print(differ_At_One_Bit_Pos(13, 21))\n    print(differ_At_One_Bit_Pos(13, 22))\n    print(differ_At_One_Bit_Pos(13, 23))\n    print(differ_At_One_Bit_Pos(13, 24))\n    print(differ_At_One_Bit_Pos(13, 25))\n    print(differ_At_One_Bit_Pos(13, 26))\n    print(differ_At_One_Bit_Pos(13, 27))\n    print(differ_At_One_Bit_Pos(13, 28))\n    print(differ_At_One_Bit_Pos(13, 29))\n    print(differ_At_One_Bit_Pos(13, 30))\n    print(differ_At_One_Bit_Pos(13, 31))\n    print(differ_At_One_Bit_Pos(13, 32))\n    print(differ_At_One_Bit_Pos(13, 33))\n    print(differ_At_One_Bit_Pos(13, 34))\n    print(differ_At_One_Bit_Pos(13, 35))\n    print(differ_At_One_Bit_Pos(13, 36))\n    print(differ_At_One_Bit_Pos(13, 37))\n    print(differ_At_One_Bit_Pos(13, 38))\n    print(differ_At_One_Bit_Pos(13, 39))\n    print(differ_At_One_Bit_Pos(13, 40))\n    print(differ_At_One_Bit_Pos(13, 41))\n    print(differ_At_One_Bit_Pos(13, 42))\n    print(differ_At_One_Bit_Pos(13, 43))\n    print(differ_At_One_Bit_Pos(13, 44))\n    print(differ_At_One_Bit_Pos(13, 45))\n    print(differ_At_One_Bit_Pos(13, 46))\n    print(differ_At_One_Bit_Pos(13, 47))\n    print(differ_At_One_Bit_Pos(13, 48))\n    print(differ_At_One_Bit_Pos(13, 49))\n    print(differ"}
{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\n\ndef find_char_long(string):\n    \"\"\"\n    :param string: string\n    :return: set of words\n    \"\"\"\n    words = string.split()\n    return set(word for word in words if len(word) >= 4)\n\n\nif __name__ == '__main__':\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_"}
{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n\ndef square_nums(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: list of squares of individual elements in a list\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n\nif __name__ == '__main__':\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86"}
{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\n\ndef find_Rotations(string):\n    \"\"\"\n    :param string: string to be rotated\n    :return: minimum number of rotations required to get the same string\n    \"\"\"\n    if len(string) == 1:\n        return 0\n    if len(string) == 2:\n        return 1\n    if len(string) == 3:\n        return 2\n    if len(string) == 4:\n        return 3\n    if len(string) == 5:\n        return 4\n    if len(string) == 6:\n        return 5\n    if len(string) == 7:\n        return 6\n    if len(string) == 8:\n        return 7\n    if len(string) == 9:\n        return 8\n    if len(string) == 10:\n        return 9\n    if len(string) == 11:\n        return 10\n    if len(string) == 12:\n        return 11\n    if len(string) == 13:\n        return 12\n    if len(string) == 14:\n        return 13\n    if len(string) == 15:\n        return 14\n    if len(string) == 16:\n        return 15\n    if len(string) == 17:\n        return 16\n    if len(string) == 18:\n        return 17\n    if len(string) == 19:\n        return 18\n    if len(string) == 20:\n        return 19\n    if len(string) == 21:\n        return 20\n    if len(string) == 22:\n        return 21\n    if len(string) == 23:\n        return 22\n    if len(string) == 24:\n        return 23\n    if len(string) == 25:\n        return 24\n    if len(string) == 26:\n        return 25\n    if len(string) == 27:\n        return 26\n    if len(string) == 28:\n        return 27\n    if len(string) == 29:\n        return 28\n    if len(string) == 30:\n        return 29\n    if len(string) == 31:\n        return 30\n    if len(string) == 32:\n        return 31\n    if len(string) == 33:\n        return 32\n    if len(string) == 34:\n        return 33\n    if len(string) == 35:\n        return 34\n    if len(string) == 36:\n        return 35\n    if len(string) == 37:\n        return 36\n    if len(string) == 38:\n        return 37\n    if len(string) == 39:\n        return 38\n    if len(string) == 40:\n        return 39\n    if len(string) == 41:\n        return 40\n    if len(string) == 42:\n        return 41\n    if len(string) == 43:\n        return 42\n    if len(string) == 44:\n        return 43\n    if len(string) == 45:\n        return 44\n    if len(string) == 46:\n        return 45\n    if len(string) == 47:\n        return 46\n    if len(string) == 48:\n        return 47\n    if len(string) == 49:\n        return 48\n    if len(string) == 50:\n        return 49\n    if len"}
{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n\ndef remove_Occ(string, char):\n    return string[1:-1] if string.count(char) == 2 else string\n\n\nif __name__ == '__main__':\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"e\"))\n    print(remove_Occ(\"hello\", \"h\"))\n    print(remove_Occ(\"hello\", \"o\"))\n    print(remove_Occ(\"hello\", \"x\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l\"))\n    print(remove_Occ(\"hello\", \"l"}
{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    :param matrix: a matrix\n    :return: a sorted matrix\n    \"\"\"\n    matrix = sorted(matrix, key=lambda x: sum(x))\n    return matrix\n\n\nif __name__ == '__main__':\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1"}
{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    \"\"\"\n    a,b,c: positive integers\n    returns: the volume of the triangular prism with base length a, height b, and length c\n    \"\"\"\n    return a*b*c/3\n\n\ndef test_find_Volume():\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(10,"}
{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    if text.islower() and \"_\" in text:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(text_lowercase_underscore(\"aab_cbbbc\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n_o\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n_o_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc"}
{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n\n\ndef square_perimeter(side):\n    \"\"\"\n    :param side: side of the square\n    :return: perimeter of the square\n    \"\"\"\n    return 4 * side\n\n\nif __name__ == '__main__':\n    print(square_perimeter(10))\n    print(square_perimeter(20))\n    print(square_perimeter(30))\n    print(square_perimeter(40))\n    print(square_perimeter(50))\n    print(square_perimeter(60))\n    print(square_perimeter(70))\n    print(square_perimeter(80))\n    print(square_perimeter(90))\n    print(square_perimeter(100))\n    print(square_perimeter(110))\n    print(square_perimeter(120))\n    print(square_perimeter(130))\n    print(square_perimeter(140))\n    print(square_perimeter(150))\n    print(square_perimeter(160))\n    print(square_perimeter(170))\n    print(square_perimeter(180))\n    print(square_perimeter(190))\n    print(square_perimeter(200))\n    print(square_perimeter(210))\n    print(square_perimeter(220))\n    print(square_perimeter(230))\n    print(square_perimeter(240))\n    print(square_perimeter(250))\n    print(square_perimeter(260))\n    print(square_perimeter(270))\n    print(square_perimeter(280))\n    print(square_perimeter(290))\n    print(square_perimeter(300))\n    print(square_perimeter(310))\n    print(square_perimeter(320))\n    print(square_perimeter(330))\n    print(square_perimeter(340))\n    print(square_perimeter(350))\n    print(square_perimeter(360))\n    print(square_perimeter(370))\n    print(square_perimeter(380))\n    print(square_perimeter(390))\n    print(square_perimeter(400))\n    print(square_perimeter(410))\n    print(square_perimeter(420))\n    print(square_perimeter(430))\n    print(square_perimeter(440))\n    print(square_perimeter(450))\n    print(square_perimeter(460))\n    print(square_perimeter(470))\n    print(square_perimeter(480))\n    print(square_perimeter(490))\n    print(square_perimeter(500))\n    print(square_perimeter(510))\n    print(square_perimeter(520))\n    print(square_perimeter(530))\n    print(square_perimeter(540))\n    print(square_perimeter(550))\n    print(square_perimeter(560))\n    print(square_perimeter(570))\n    print(square_perimeter(580))\n    print(square_perimeter(590))\n    print(square_perimeter(600))\n    print(square_perimeter(610))\n    print(square_perimeter(620))\n    print(square_perimeter(630))\n    print(square_perimeter(640))\n    print(square_perimeter(650))\n    print(square_perimeter(660))\n    print(square_perimeter(670))\n    print(square_perimeter(680))\n    print(square"}
{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n\ndef remove_dirty_chars(string1, string2):\n    \"\"\"\n    :param string1: str\n    :param string2: str\n    :return: str\n    \"\"\"\n    return ''.join([char for char in string1 if char not in string2])\n\n\nif __name__ == '__main__':\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probass"}
{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n\ndef test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if duplicate element exists, False otherwise\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    else:\n        for i in range(len(arr)):\n            if arr[i] in arr[i+1:]:\n                return True\n        return False\n\n\nif __name__ == '__main__':\n    print(test_duplicate([1, 2, 3, 4, 5]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, "}
{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n\ndef is_woodall(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num < 100:\n        return False\n    if num % 10 == num // 10:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_woodall(383))\n    print(is_woodall(123))\n    print(is_woodall(1234))\n    print(is_woodall(12345))\n    print(is_woodall(123456))\n    print(is_woodall(1234567))\n    print(is_woodall(12345678))\n    print(is_woodall(123456789))\n    print(is_woodall(1234567890))\n    print(is_woodall(12345678901))\n    print(is_woodall(123456789012))\n    print(is_woodall(1234567890123))\n    print(is_woodall(12345678901234))\n    print(is_woodall(123456789012345))\n    print(is_woodall(1234567890123456))\n    print(is_woodall(12345678901234567))\n    print(is_woodall(123456789012345678))\n    print(is_woodall(1234567890123456789))\n    print(is_woodall(12345678901234567890))\n    print(is_woodall(123456789012345678901))\n    print(is_woodall(1234567890123456789012))\n    print(is_woodall(12345678901234567890123))\n    print(is_woodall(123456789012345678901234))\n    print(is_woodall(1234567890123456789012345))\n    print(is_woodall(12345678901234567890123456))\n    print(is_woodall(123456789012345678901234567))\n    print(is_woodall(1234567890123456789012345678))\n    print(is_woodall(12345678901234567890123456789))\n    print(is_woodall(123456789012345678901234567890))\n    print(is_woodall(1234567890123456789012345678901))\n    print(is_woodall(12345678901234567890123456789012))\n    print(is_woodall(123456789012345678901234567890123))\n    print(is_woodall(12345"}
{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n\ndef check(num):\n    \"\"\"\n    >>> check(70)\n    False\n    >>> check(71)\n    True\n    >>> check(72)\n    False\n    >>> check(73)\n    False\n    >>> check(74)\n    False\n    >>> check(75)\n    False\n    >>> check(76)\n    False\n    >>> check(77)\n    False\n    >>> check(78)\n    False\n    >>> check(79)\n    False\n    >>> check(80)\n    True\n    >>> check(81)\n    False\n    >>> check(82)\n    False\n    >>> check(83)\n    False\n    >>> check(84)\n    False\n    >>> check(85)\n    False\n    >>> check(86)\n    False\n    >>> check(87)\n    False\n    >>> check(88)\n    False\n    >>> check(89)\n    False\n    >>> check(90)\n    False\n    >>> check(91)\n    False\n    >>> check(92)\n    False\n    >>> check(93)\n    False\n    >>> check(94)\n    False\n    >>> check(95)\n    False\n    >>> check(96)\n    False\n    >>> check(97)\n    False\n    >>> check(98)\n    False\n    >>> check(99)\n    False\n    >>> check(100)\n    False\n    >>> check(101)\n    False\n    >>> check(102)\n    False\n    >>> check(103)\n    False\n    >>> check(104)\n    False\n    >>> check(105)\n    False\n    >>> check(106)\n    False\n    >>> check(107)\n    False\n    >>> check(108)\n    False\n    >>> check(109)\n    False\n    >>> check(110)\n    False\n    >>> check(111)\n    False\n    >>> check(112)\n    False\n    >>> check(113)\n    False\n    >>> check(114)\n    False\n    >>> check(115)\n    False\n    >>> check(116)\n    False\n    >>> check(117)\n    False\n    >>> check(118)\n    False\n    >>> check(119)\n    False\n    >>> check(120)\n    False\n    >>> check(121)\n    False\n    >>> check(122)\n    False\n    >>> check(123)\n    False\n    >>> check(124)\n    False\n    >>> check(125)\n    False\n    >>> check(126)\n    False\n    >>> check(127)\n    False\n    >>> check(128)\n    False\n    >>> check(129)\n    False\n    >>> check(130)\n    False\n    >>> check(131)\n    False\n    >>> check(132)\n    False\n    >>> check(133)\n    False\n    >>> check(134)\n    False\n    >>> check(135)\n    False\n    >>> check(136)\n    False\n    >>> check(137)\n    False\n    >>> check(138)\n    False\n    >>> check(139)\n    False\n    >>> check(140)\n    False\n    >>> check(141)\n    False\n    >>> check(142)\n    False\n    >>> check(143)\n    False\n    >>> check(144)\n    False\n    >>> check(145)\n    False\n    >>> check(146)\n    False\n    >>> check(147)\n    False\n    >>> check(148)\n    False\n    >>> check(149)\n    False\n    >>> check(150)\n    False\n    >>> check(151)\n    False\n    >>> check(152)\n"}
{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\n\ndef find_Max_Num(nums):\n    nums.sort(reverse=True)\n    return int(''.join(map(str, nums)))\n\n\nif __name__ == '__main__':\n    print(find_Max_Num([1, 2, 3]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6,"}
{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n\ndef opposite_Signs(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(-1, 2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(-1, 0))\n    print(opposite_Signs(0, -1))\n    print(opposite_Signs(-1, -2))\n    print(opposite_Signs(-1, 2))\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(-1, 0))\n    print(opposite_Signs(0, -1))\n    print(opposite_Signs(-1, -2))\n    print(opposite_Signs(-1, 2))\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(-1, 0))\n    print(opposite_Signs(0, -1))\n    print(opposite_Signs(-1, -2))\n    print(opposite_Signs(-1, 2))\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(-1, 0))\n    print(opposite_Signs(0, -1))\n    print(opposite_Signs(-1, -2))\n    print(opposite_Signs(-1, 2))\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(-1, 0))\n    print(opposite_Signs(0, -1))\n    print(opposite_Signs(-1, -2))\n    print(opposite_Signs(-1, 2))\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0"}
{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n\ndef is_octagonal(n):\n    \"\"\"\n    >>> is_octagonal(5)\n    True\n    >>> is_octagonal(6)\n    False\n    \"\"\"\n    for i in range(1, n + 1):\n        if is_octagonal_number(i):\n            return True\n    return False\n\n\ndef is_octagonal_number(n):\n    \"\"\"\n    >>> is_octagonal_number(6)\n    True\n    >>> is_octagonal_number(7)\n    False\n    \"\"\"\n    for i in range(1, n + 1):\n        if is_octagonal_number_helper(i, n):\n            return True\n    return False\n\n\ndef is_octagonal_number_helper(i, n):\n    \"\"\"\n    >>> is_octagonal_number_helper(6, 5)\n    True\n    >>> is_octagonal_number_helper(7, 5)\n    False\n    \"\"\"\n    if i > n:\n        return False\n    if i * 3 + 1 == n:\n        return True\n    return is_octagonal_number_helper(i + 1, n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(x) for x in s[i:j + 1]) == j - i + 1:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_Substrings('112112'))\n    print(count_Substrings('112112112'))\n    print(count_Substrings('112112112112112112'))\n    print(count_Substrings}
{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n\ndef smallest_num(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: smallest number in the list\n    \"\"\"\n    if not nums:\n        return None\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n\nif __name__ == '__main__':\n    print(smallest_num([10, 20, 1, 45, 99]))\n    print(smallest_num([10, 20, 1, 45, 99, 100]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]))"}
{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n\ndef max_difference(tuples):\n    \"\"\"\n    :param tuples: tuple list\n    :return: maximum difference\n    \"\"\"\n    tuples.sort()\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][0] - tuples[i][1])\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26), (27, 28)]))\n    print(max_difference"}
{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    \"\"\"\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sort a list of tuples using the first value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n\"\"\"\n\ndef subject_marks(marks):\n    \"\"\"\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sort a list of tuples using the first value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n\"\"\"\n\ndef subject_marks(marks):\n    \"\"\"\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sort a list of tuples using the first value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n\"\"\"\n\ndef subject_marks(marks):\n    \"\"\"\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sort a list of tuples using the first value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 8"}
{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n\ndef recursive_list_sum(list_to_sum):\n    \"\"\"\n    :param list_to_sum: list\n    :return: int\n    \"\"\"\n    if not isinstance(list_to_sum, list):\n        raise TypeError(\"list_to_sum must be a list\")\n    if not list_to_sum:\n        return 0\n    if isinstance(list_to_sum[0], list):\n        return recursive_list_sum(list_to_sum[0]) + recursive_list_sum(list_to_sum[1:])\n    else:\n        return list_to_sum[0] + recursive_list_sum(list_to_sum[1:])\n\n\ndef iterative_list_sum(list_to_sum):\n    \"\"\"\n    :param list_to_sum: list\n    :return: int\n    \"\"\"\n    if not isinstance(list_to_sum, list):\n        raise TypeError(\"list_to_sum must be a list\")\n    if not list_to_sum:\n        return 0\n    sum_list = 0\n    for item in list_to_sum:\n        if isinstance(item, list):\n            sum_list += iterative_list_sum(item)\n        else:\n            sum_list += item\n    return sum_list\n\n\ndef main():\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))\n    print(iterative_list_sum([1, 2, [3, 4], [5, 6]]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(num > 0 for num in nums)\n\n\ndef pos_count(nums):\n    return sum(num > 0 for num in nums)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\n\n\ndef pos_count(nums):\n    return sum(1"}
{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n\ndef bell_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 15\n    if n == 5:\n        return 50\n    if n == 6:\n        return 203\n    if n == 7:\n        return 877\n    if n == 8:\n        return 4140\n    if n == 9:\n        return 26525\n    if n == 10:\n        return 185735\n    if n == 11:\n        return 1386059\n    if n == 12:\n        return 9908904\n    if n == 13:\n        return 70845677\n    if n == 14:\n        return 546271215\n    if n == 15:\n        return 4256887525\n    if n == 16:\n        return 34305791835\n    if n == 17:\n        return 280837773215\n    if n == 18:\n        return 2319647174875\n    if n == 19:\n        return 20068245577955\n    if n == 20:\n        return 178765783192455\n    if n == 21:\n        return 1639776088869255\n    if n == 22:\n        return 15330125781743555\n    if n == 23:\n        return 147941164441692555\n    if n == 24:\n        return 1441649226870925555\n    if n == 25:\n        return 14199832455780255555\n    if n == 26:\n        return 139953007523562555555\n    if n == 27:\n        return 1388188810692725555555\n    if n == 28:\n        return 13770566084906255555555\n    if n == 29:\n        return 136602551497632555555555\n    if n == 30:\n        return 1355114421452025555555555\n    if n == 31:\n        return 13442033279277255555555555\n    if n == 32:\n        return 133330223442442555555555555\n    if n == 33:\n        return 1322401141921125555555555555\n    if n == 34:\n        return 13115000494278255555555555555\n    if n == 35:\n        return 130060000003552555555555555555\n    if n == 36:\n        return"}
{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[-1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n        return True\n    elif arr[0] > arr[-1]:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                return False\n        return True\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(is_Monotonic([6, 5, 4, 4]))\n    print(is_Monotonic([1, 2, 3, 4]))\n    print(is_Monotonic([1, 2, 3, 4, 5]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16"}
{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n            else:\n                return True\n\nprint(is_sublist([2,4,3,5,7],[3,7]))\nprint(is_sublist([2,4,3,5,7],[3,7,5]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3,5]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3,5,7]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3,5,7,2]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3,5,7,2,4]))\nprint(is_sublist([2,4,3,5,7],[3,7,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3,5,7,2,4,3]))\nprint(is_sublist([2,4,3,5,7],[3,7,"}
{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\n\ndef get_equal(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: True if all tuples have equal length, False otherwise\n    \"\"\"\n    if not tuples:\n        return True\n    return all(len(tuples[0]) == len(t) for t in tuples)\n\n\nif __name__ == '__main__':\n    print(get_equal([(11, 22, 33), (44, 55, 66)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), (133, 144, 155)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), (133, 144, 155), (166, 177, 188)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), (133, 144, 155), (166, 177, 188), (199, 210, 221)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), (133, 144, 155), (166, 177, 188), (199, 210, 221), (233, 244, 255)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), (133, 144, 155), (166, 177, 188), (199, 210, 221), (233, 244, 255), (266, 277, 288)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), (133, 144, 155), (166, 177, 188), (199, 210, 221), (233, 244, 255), (266, 277, 288), (299, 310, 321)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99), (100, 111, 122), ("}
{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\n\ndef comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = int(gap / 1.247330950103979)\n        swapped = False\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(comb_sort([5, 15, 37, 25, 79]))\n    print(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(comb_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n    print(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,"}
{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n\ndef dif_Square(n):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i * i + j * j == n:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    print(dif_Square(5))\n    print(dif_Square(12))\n    print(dif_Square(13))\n    print(dif_Square(14))\n    print(dif_Square(15))\n    print(dif_Square(16))\n    print(dif_Square(17))\n    print(dif_Square(18))\n    print(dif_Square(19))\n    print(dif_Square(20))\n    print(dif_Square(21))\n    print(dif_Square(22))\n    print(dif_Square(23))\n    print(dif_Square(24))\n    print(dif_Square(25))\n    print(dif_Square(26))\n    print(dif_Square(27))\n    print(dif_Square(28))\n    print(dif_Square(29))\n    print(dif_Square(30))\n    print(dif_Square(31))\n    print(dif_Square(32))\n    print(dif_Square(33))\n    print(dif_Square(34))\n    print(dif_Square(35))\n    print(dif_Square(36))\n    print(dif_Square(37))\n    print(dif_Square(38))\n    print(dif_Square(39))\n    print(dif_Square(40))\n    print(dif_Square(41))\n    print(dif_Square(42))\n    print(dif_Square(43))\n    print(dif_Square(44))\n    print(dif_Square(45))\n    print(dif_Square(46))\n    print(dif_Square(47))\n    print(dif_Square(48))\n    print(dif_Square(49))\n    print(dif_Square(50))\n    print(dif_Square(51))\n    print(dif_Square(52))\n    print(dif_Square(53))\n    print(dif_Square(54))\n    print(dif_Square(55))\n    print(dif_Square(56))\n    print(dif_Square(57))\n    print(dif_Square(58))\n    print(dif_Square(59))\n    print(dif_Square(60))\n    print(dif_Square(61))\n    print(dif_Square(62))\n    print(dif_Square(63))\n    print(dif_Square(64))\n    print(dif_Square(65))\n    print(dif_Square(66))\n    print(dif_Square(67))\n    print(dif_Square(68))\n    print(dif_Square(69))\n    print(dif_Square(70))\n    print(dif_Square(71))\n    print(dif_Square(72))\n    print(dif_Square(73))\n    print(dif_Square(74))\n    print(dif_Square(75))\n    print(dif_Square(76))\n    print(dif_Square(77))\n    print(dif_Square(78))\n    print(dif_S"}
{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\n\ndef is_samepatterns(patterns, words):\n    if len(patterns) != len(words):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != words[i] * len(patterns[i]):\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\", \"d\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\","}
{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\n\ndef find_tuples(tuples, k):\n    return [tuple(i for i in t if i % k == 0) for t in tuples if all(i % k == 0 for i in t)]\n\n\nif __name__ == '__main__':\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 3))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 1))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 2))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 4))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 5))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 8))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 9))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 10))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 11))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 13))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 14))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 15))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 16))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 17))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 18))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 19))\n    print(find_tuples([("}
{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\n\ndef is_Diff(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_Diff(12345))\n    print(is_Diff(123456))\n    print(is_Diff(1234567))\n    print(is_Diff(12345678))\n    print(is_Diff(123456789))\n    print(is_Diff(1234567890))\n    print(is_Diff(12345678901))\n    print(is_Diff(123456789012))\n    print(is_Diff(1234567890123))\n    print(is_Diff(12345678901234))\n    print(is_Diff(123456789012345))\n    print(is_Diff(1234567890123456))\n    print(is_Diff(12345678901234567))\n    print(is_Diff(123456789012345678))\n    print(is_Diff(1234567890123456789))\n    print(is_Diff(12345678901234567890))\n    print(is_Diff(123456789012345678901))\n    print(is_Diff(1234567890123456789012))\n    print(is_Diff(12345678901234567890123))\n    print(is_Diff(123456789012345678901234))\n    print(is_Diff(1234567890123456789012345))\n    print(is_Diff(12345678901234567890123456))\n    print(is_Diff(123456789012345678901234567))\n    print(is_Diff(1234567890123456789012345678))\n    print(is_Diff(12345678901234567890123456789))\n    print(is_Diff(123456789012345678901234567890))\n    print(is_Diff(1234567890123456789012345678901))\n    print(is_Diff(12345678901234567890123456789012))\n    print(is_Diff(123456789012345678901234567890123))\n    print(is_Diff(1234567890123456789012345678901234))\n    print(is_Diff(123456789012345678901234567890"}
{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(word_len(\"Hadoop\"))\n    print(word_len(\"Hadoop1\"))\n    print(word_len(\"Hadoop12\"))\n    print(word_len(\"Hadoop123\"))\n    print(word_len(\"Hadoop1234\"))\n    print(word_len(\"Hadoop12345\"))\n    print(word_len(\"Hadoop123456\"))\n    print(word_len(\"Hadoop1234567\"))\n    print(word_len(\"Hadoop12345678\"))\n    print(word_len(\"Hadoop123456789\"))\n    print(word_len(\"Hadoop1234567890\"))\n    print(word_len(\"Hadoop12345678901\"))\n    print(word_len(\"Hadoop123456789012\"))\n    print(word_len(\"Hadoop1234567890123\"))\n    print(word_len(\"Hadoop12345678901234\"))\n    print(word_len(\"Hadoop123456789012345\"))\n    print(word_len(\"Hadoop1234567890123456\"))\n    print(word_len(\"Hadoop12345678901234567\"))\n    print(word_len(\"Hadoop123456789012345678\"))\n    print(word_len(\"Hadoop1234567890123456789\"))\n    print(word_len(\"Hadoop12345678901234567890\"))\n    print(word_len(\"Hadoop123456789012345678901\"))\n    print(word_len(\"Hadoop1234567890123456789012\"))\n    print(word_len(\"Hadoop12345678901234567890123\"))\n    print(word_len(\"Hadoop123456789012345678901234\"))\n    print(word_len(\"Hadoop1234567890123456789012345\"))\n    print(word_len(\"Hadoop12345678901234567890123456\"))\n    print(word_len(\"Hadoop123456789012345678901234567\"))\n    print(word_len(\"Hadoop1234567890123456789012345678\"))\n    print(word_len(\"Hadoop12345678901234567890123456789\"))\n    print(word_len(\"Hadoop123456789012345678901234567890\"))\n    print(word_len(\"Hadoop1234567890123456789012345678901\"))\n    print(word_len(\"Hadoop12345678901234567890123456789012\"))"}
{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    assert tetrahedral_number(5) == 35\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral_number(5))\n    print(tetrahedral_number(10))\n    print(tetrahedral_number(15))\n    print(tetrahedral_number(20))\n    print(tetrahedral_number(25))\n    print(tetrahedral_number(30))\n    print(tetrahedral_number(35))\n    print(tetrahedral_number(40))\n    print(tetrahedral_number(45))\n    print(tetrahedral_number(50))\n    print(tetrahedral_number(55))\n    print(tetrahedral_number(60))\n    print(tetrahedral_number(65))\n    print(tetrahedral_number(70))\n    print(tetrahedral_number(75))\n    print(tetrahedral_number(80))\n    print(tetrahedral_number(85))\n    print(tetrahedral_number(90))\n    print(tetrahedral_number(95))\n    print(tetrahedral_number(100))\n    print(tetrahedral_number(105))\n    print(tetrahedral_number(110))\n    print(tetrahedral_number(115))\n    print(tetrahedral_number(120))\n    print(tetrahedral_number(125))\n    print(tetrahedral_number(130))\n    print(tetrahedral_number(135))\n    print(tetrahedral_number(140))\n    print(tetrahedral_number(145))\n    print(tetrahedral_number(150))\n    print(tetrahedral_number(155))\n    print(tetrahedral_number(160))\n    print(tetrahedral_number(165))\n    print(tetrahedral_number(170))\n    print(tetrahedral_number(175))\n    print(tetrahedral_number(180))\n    print(tetrahedral_number(185))\n    print(tetrahedral_number(190))\n    print(tetrahedral_number(195))\n    print(tetrahedral_number(200))\n    print(tetrahedral_number(205))\n    print(tetrahedral_number(210))\n    print(tetrahedral_number(215))\n    print(tetrahedral_number(220))\n    print(tetrahedral_number(225))\n    print(tetrahedral_number(230))\n    print(tetrahedral_number(235))\n    print(tetrahedral_number(240))\n    print(tetrahedral_number(245))\n    print(tetrahedral_number(250))\n    print(tetrahedral_number(255))\n    print(tetrahedral_number(260))\n    print(tetrahedral_number(265))\n    print(tetrahedral_number(270))\n    print(tetrahedral_number(275))\n    print(tetrahedral_number(280))\n    print(tetrahedral_number(285))\n    print(tetrahedral_number(290))\n    print"}
{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n    :param radius: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return (4 / 3) * math.pi * radius ** 3\n\n\nif __name__ == '__main__':\n    print(volume_sphere(10))\n    print(volume_sphere(100))\n    print(volume_sphere(1000))\n    print(volume_sphere(10000))\n    print(volume_sphere(100000))\n    print(volume_sphere(1000000))\n    print(volume_sphere(10000000))\n    print(volume_sphere(100000000))\n    print(volume_sphere(1000000000))\n    print(volume_sphere(10000000000))\n    print(volume_sphere(100000000000))\n    print(volume_sphere(1000000000000))\n    print(volume_sphere(10000000000000))\n    print(volume_sphere(100000000000000))\n    print(volume_sphere(1000000000000000))\n    print(volume_sphere(10000000000000000))\n    print(volume_sphere(100000000000000000))\n    print(volume_sphere(1000000000000000000))\n    print(volume_sphere(10000000000000000000))\n    print(volume_sphere(100000000000000000000))\n    print(volume_sphere(1000000000000000000000))\n    print(volume_sphere(10000000000000000000000))\n    print(volume_sphere(100000000000000000000000))\n    print(volume_sphere(1000000000000000000000000))\n    print(volume_sphere(10000000000000000000000000))\n    print(volume_sphere(100000000000000000000000000))\n    print(volume_sphere(1000000000000000000000000000))\n    print(volume_sphere(10000000000000000000000000000))\n    print(volume_sphere(100000000000000000000000000000))\n    print(volume_sphere(1000000000000000000000000000000))\n    print(volume_sphere(10000000000000000000000000000000))\n    print(volume_sphere(10000000000000000000000000000000"}
{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n\ndef get_Char(string):\n    \"\"\"\n    :param string: string\n    :return: character\n    \"\"\"\n    return chr(sum(ord(i) for i in string) % 26 + 97)\n\n\nif __name__ == '__main__':\n    print(get_Char(\"abc\"))\n    print(get_Char(\"abcd\"))\n    print(get_Char(\"abcde\"))\n    print(get_Char(\"abcdef\"))\n    print(get_Char(\"abcdefg\"))\n    print(get_Char(\"abcdefgh\"))\n    print(get_Char(\"abcdefghi\"))\n    print(get_Char(\"abcdefghij\"))\n    print(get_Char(\"abcdefghijk\"))\n    print(get_Char(\"abcdefghijkl\"))\n    print(get_Char(\"abcdefghijklm\"))\n    print(get_Char(\"abcdefghijklmn\"))\n    print(get_Char(\"abcdefghijklmno\"))\n    print(get_Char(\"abcdefghijklmnop\"))\n    print(get_Char(\"abcdefghijklmnopq\"))\n    print(get_Char(\"abcdefghijklmnopqr\"))\n    print(get_Char(\"abcdefghijklmnopqrs\"))\n    print(get_Char(\"abcdefghijklmnopqrst\"))\n    print(get_Char(\"abcdefghijklmnopqrstu\"))\n    print(get_Char(\"abcdefghijklmnopqrstuv\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvw\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwx\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxy\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq"}
{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n\ndef sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n\n\ndef sequence_2(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_2(sequence_2(n-1)) + sequence_2(n-sequence_2(n-1))\n\n\ndef sequence_3(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_3(sequence_3(n-1)) + sequence_3(n-sequence_3(n-1))\n\n\ndef sequence_4(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_4(sequence_4(n-1)) + sequence_4(n-sequence_4(n-1))\n\n\ndef sequence_5(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_5(sequence_5(n-1)) + sequence_5(n-sequence_5(n-1))\n\n\ndef sequence_6(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_6(sequence_6(n-1)) + sequence_6(n-sequence_6(n-1))\n\n\ndef sequence_7(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_7(sequence_7(n-1)) + sequence_7(n-sequence_7(n-1))\n\n\ndef sequence_8(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_8(sequence_8(n-1)) + sequence_8(n-sequence_8(n-1))\n\n\ndef sequence_9(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence_9(sequence_9(n-1)) + sequence_9(n-sequence_9(n-1))\n\n\ndef sequence_10(n):\n    \"\"\"\n"}
{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    :param radius: radius of the sphere\n    :return: surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == '__main__':\n    print(surfacearea_sphere(10))\n    print(surfacearea_sphere(100))\n    print(surfacearea_sphere(1000))\n    print(surfacearea_sphere(10000))\n    print(surfacearea_sphere(100000))\n    print(surfacearea_sphere(1000000))\n    print(surfacearea_sphere(10000000))\n    print(surfacearea_sphere(100000000))\n    print(surfacearea_sphere(1000000000))\n    print(surfacearea_sphere(10000000000))\n    print(surfacearea_sphere(100000000000))\n    print(surfacearea_sphere(1000000000000))\n    print(surfacearea_sphere(10000000000000))\n    print(surfacearea_sphere(100000000000000))\n    print(surfacearea_sphere(1000000000000000))\n    print(surfacearea_sphere(10000000000000000))\n    print(surfacearea_sphere(100000000000000000))\n    print(surfacearea_sphere(1000000000000000000))\n    print(surfacearea_sphere(10000000000000000000))\n    print(surfacearea_sphere(100000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000))\n    print(surfacearea_sphere(10000000000000000000000))\n    print(surfacearea_sphere(100000000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000000))\n    print(surfacearea_sphere(10000000000000000000000000))\n    print(surfacearea_sphere(100000000000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000000000))\n    print(surfacearea_sphere(10000000000000000000000000000))\n    print(surfacearea_sphere(100000000000000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000000000000))\n    print(surfacearea_sphere(1000000000000"}
{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    assert centered_hexagonal_number(10) == 271\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagonal_number(10))\n    print(centered_hexagonal_number(100))\n    print(centered_hexagonal_number(1000))\n    print(centered_hexagonal_number(10000))\n    print(centered_hexagonal_number(100000))\n    print(centered_hexagonal_number(1000000))\n    print(centered_hexagonal_number(10000000))\n    print(centered_hexagonal_number(100000000))\n    print(centered_hexagonal_number(1000000000))\n    print(centered_hexagonal_number(10000000000))\n    print(centered_hexagonal_number(100000000000))\n    print(centered_hexagonal_number(1000000000000))\n    print(centered_hexagonal_number(10000000000000))\n    print(centered_hexagonal_number(100000000000000))\n    print(centered_hexagonal_number(1000000000000000))\n    print(centered_hexagonal_number(10000000000000000))\n    print(centered_hexagonal_number(100000000000000000))\n    print(centered_hexagonal_number(1000000000000000000))\n    print(centered_hexagonal_number(10000000000000000000))\n    print(centered_hexagonal_number(100000000000000000000))\n    print(centered_hexagonal_number(1000000000000000000000))\n    print(centered_hexagonal_number(10000000000000000000000))\n    print(centered_hexagonal_number(100000000000000000000000))\n    print(centered_hexagonal_number(1000000000000000000000000))\n    print(centered_hexagonal_number(10000000000000000000000000))\n    print(centered_hexagonal_number(100000000000000000000000000))\n    print(centered_hexagonal_number(1000000000000000000000000000))\n    print(centered_hexagonal_number(1000000000000000000000"}
{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1: dictionary\n    :param dict2: dictionary\n    :param dict3: dictionary\n    :return: dictionary\n    \"\"\"\n    return dict(dict1, **dict2, **dict3)\n\n\nif __name__ == '__main__':\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\""}
{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 3\n    if n == 8:\n        return 3\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 5\n    if n == 13:\n        return 5\n    if n == 14:\n        return 5\n    if n == 15:\n        return 5\n    if n == 16:\n        return 6\n    if n == 17:\n        return 6\n    if n == 18:\n        return 6\n    if n == 19:\n        return 6\n    if n == 20:\n        return 7\n    if n == 21:\n        return 7\n    if n == 22:\n        return 7\n    if n == 23:\n        return 7\n    if n == 24:\n        return 7\n    if n == 25:\n        return 8\n    if n == 26:\n        return 8\n    if n == 27:\n        return 8\n    if n == 28:\n        return 8\n    if n == 29:\n        return 8\n    if n == 30:\n        return 9\n    if n == 31:\n        return 9\n    if n == 32:\n        return 9\n    if n == 33:\n        return 9\n    if n == 34:\n        return 9\n    if n == 35:\n        return 9\n    if n == 36:\n        return 10\n    if n == 37:\n        return 10\n    if n == 38:\n        return 10\n    if n == 39:\n        return 10\n    if n == 40:\n        return 10\n    if n == 41:\n        return 10\n    if n == 42:\n        return 10\n    if n == 43:\n        return 10\n    if n == 44:\n        return 10\n    if n == 45:\n        return 10\n    if n == 46:\n        return 10\n    if n == 47:\n        return 10\n    if n == 48:\n        return 10\n    if n == 49:\n        return 10\n    if n == 50:\n        return 10\n    if n == 51:\n        return 10\n    if n == 52:\n        return 10\n    if n == 53:\n        return 10\n    if n == 54:\n        return 10\n    if n == 55:\n        return 10\n    if n == 56:\n        return 10\n    if n == 57:\n        return 10\n    if n == 58:\n        return 10\n    if n == 59:\n        return 10\n    if n == 60:\n        return 10\n    if n == 61:\n        return 10\n   "}
{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n\ndef len_log(lst):\n    \"\"\"\n    :param lst: list of strings\n    :return: length of the longest word\n    \"\"\"\n    return max(map(len, lst))\n\n\nif __name__ == '__main__':\n    print(len_log([\"python\", \"PHP\", \"bigdata\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\", \"c\", \"c#\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"java\", \"c++\", \"c#\", \"c\", \"c#\", \"c++\","}
{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n\n\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acka\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackb\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackc\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackd\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acke\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackf\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackg\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackh\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acki\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackj\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackk\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackl\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackm\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackn\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acko\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackp\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackq\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackr\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acks\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackt\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acku\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackv\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackw\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackx\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acky\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackz\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack0\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack1\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack2\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack3\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack4\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack5\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack6\"))\nprint(find_substring([\"red\","}
{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\n\ndef is_undulating(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 4:\n        return True\n    if num == 5:\n        return True\n    if num == 6:\n        return True\n    if num == 7:\n        return True\n    if num == 8:\n        return True\n    if num == 9:\n        return True\n    if num == 10:\n        return True\n    if num == 11:\n        return True\n    if num == 12:\n        return True\n    if num == 13:\n        return True\n    if num == 14:\n        return True\n    if num == 15:\n        return True\n    if num == 16:\n        return True\n    if num == 17:\n        return True\n    if num == 18:\n        return True\n    if num == 19:\n        return True\n    if num == 20:\n        return True\n    if num == 21:\n        return True\n    if num == 22:\n        return True\n    if num == 23:\n        return True\n    if num == 24:\n        return True\n    if num == 25:\n        return True\n    if num == 26:\n        return True\n    if num == 27:\n        return True\n    if num == 28:\n        return True\n    if num == 29:\n        return True\n    if num == 30:\n        return True\n    if num == 31:\n        return True\n    if num == 32:\n        return True\n    if num == 33:\n        return True\n    if num == 34:\n        return True\n    if num == 35:\n        return True\n    if num == 36:\n        return True\n    if num == 37:\n        return True\n    if num == 38:\n        return True\n    if num == 39:\n        return True\n    if num == 40:\n        return True\n    if num == 41:\n        return True\n    if num == 42:\n        return True\n    if num == 43:\n        return True\n    if num == 44:\n        return True\n    if num == 45:\n        return True\n    if num == 46:\n        return True\n    if num == 47:\n        return True\n    if num == 48:\n        return True\n    if num == 49:\n        return True\n    if num == 50:\n        return True\n    if num == 51:\n        return True\n    if num == 52:\n        return True\n    if num == 53:\n        return True\n    if num == 54:\n        return True\n    if num == 55:\n        return True\n    if num == 56:\n        return True\n    if num == 57:\n        return True\n    if num == 58:\n        return True\n    if num == 59:\n        return True\n    if num == 60:\n        return True\n    if num == 61:\n        return True\n    if num == 62:\n        return True\n    if num == 63:\n        return True\n    if num == 64:\n        return True\n    if num == 65:\n        return True\n    if num == 66:\n        return True\n    if num == 67:\n        return True\n    if num == 68:\n        return True\n    if num == 69:\n        return True\n    if num == 70:\n        return True\n    if num == 71:\n        return True\n    if num == 72:\n        return True\n"}
{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n\ndef power(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) * power(a, b // 2)\n    else:\n        return a * power(a, b // 2) * power(a, b // 2)\n\n\nif __name__ == '__main__':\n    print(power(3, 4))\n    print(power(2, 10))\n    print(power(3, 3))\n    print(power(2, 1))\n    print(power(2, 0))\n    print(power(0, 0))\n    print(power(0, 1))\n    print(power(0, 2))\n    print(power(0, 3))\n    print(power(0, 4))\n    print(power(0, 5))\n    print(power(0, 6))\n    print(power(0, 7))\n    print(power(0, 8))\n    print(power(0, 9))\n    print(power(0, 10))\n    print(power(0, 11))\n    print(power(0, 12))\n    print(power(0, 13))\n    print(power(0, 14))\n    print(power(0, 15))\n    print(power(0, 16))\n    print(power(0, 17))\n    print(power(0, 18))\n    print(power(0, 19))\n    print(power(0, 20))\n    print(power(0, 21))\n    print(power(0, 22))\n    print(power(0, 23))\n    print(power(0, 24))\n    print(power(0, 25))\n    print(power(0, 26))\n    print(power(0, 27))\n    print(power(0, 28))\n    print(power(0, 29))\n    print(power(0, 30))\n    print(power(0, 31))\n    print(power(0, 32))\n    print(power(0, 33))\n    print(power(0, 34))\n    print(power(0, 35))\n    print(power(0, 36))\n    print(power(0, 37))\n    print(power(0, 38))\n    print(power(0, 39))\n    print(power(0, 40))\n    print(power(0, 41))\n    print(power(0, 42))\n    print(power(0, 43))\n    print(power(0, 44))\n    print(power(0, 45))\n    print(power(0, 46))\n    print(power(0, 47))\n    print(power(0, 48))\n    print(power(0, 49))\n    print(power(0, 50))\n    print(power(0, 51))\n    print(power(0, 52))\n    print(power(0, 53))\n    print(power(0, 54))\n    print(power(0, 55))\n    print(power(0, 56))\n    print(power(0, 57))\n    print(power(0, 58))\n    print(power(0, 59))\n    print(power(0, 60))\n    print(power(0, 61))\n    print(power(0, 62))\n    print(power(0, 63))\n    print(power(0, 64))\n    print(power(0, 65))\n    print(power(0, "}
{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n\ndef index_minimum(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: first value of the tuple with the smallest second value\n    \"\"\"\n    return min(tuples, key=lambda x: x[1])[0]\n\n\nif __name__ == '__main__':\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', "}
{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n\ndef Find_Min_Length(list_of_lists):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \"\"\"\n    if not list_of_lists:\n        return 0\n    else:\n        min_length = len(list_of_lists[0])\n        for i in list_of_lists:\n            if len(i) < min_length:\n                min_length = len(i)\n        return min_length\n\n\nif __name__ == \"__main__\":\n    print(Find_Min_Length([[1], [1, 2]]))\n    print(Find_Min_Length([[1, 2], [1, 2, 3]]))\n    print(Find_Min_Length([[1, 2, 3], [1, 2, 3, 4]]))\n    print(Find_Min_Length([[1, 2, 3, 4], [1, 2, 3, 4, 5]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]]))\n    print(Find_Min_Length([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]]))\n    print(Find_Min_Length([[1, 2, 3, 4"}
{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n\n\ndef divisor(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(divisor(15))\n    print(divisor(10))\n    print(divisor(1))\n    print(divisor(2))\n    print(divisor(3))\n    print(divisor(4))\n    print(divisor(5))\n    print(divisor(6))\n    print(divisor(7))\n    print(divisor(8))\n    print(divisor(9))\n    print(divisor(10))\n    print(divisor(11))\n    print(divisor(12))\n    print(divisor(13))\n    print(divisor(14))\n    print(divisor(15))\n    print(divisor(16))\n    print(divisor(17))\n    print(divisor(18))\n    print(divisor(19))\n    print(divisor(20))\n    print(divisor(21))\n    print(divisor(22))\n    print(divisor(23))\n    print(divisor(24))\n    print(divisor(25))\n    print(divisor(26))\n    print(divisor(27))\n    print(divisor(28))\n    print(divisor(29))\n    print(divisor(30))\n    print(divisor(31))\n    print(divisor(32))\n    print(divisor(33))\n    print(divisor(34))\n    print(divisor(35))\n    print(divisor(36))\n    print(divisor(37))\n    print(divisor(38))\n    print(divisor(39))\n    print(divisor(40))\n    print(divisor(41))\n    print(divisor(42))\n    print(divisor(43))\n    print(divisor(44))\n    print(divisor(45))\n    print(divisor(46))\n    print(divisor(47))\n    print(divisor(48))\n    print(divisor(49))\n    print(divisor(50))\n    print(divisor(51))\n    print(divisor(52))\n    print(divisor(53))\n    print(divisor(54))\n    print(divisor(55))\n    print(divisor(56))\n    print(divisor(57))\n    print(divisor(58))\n    print(divisor(59))\n    print(divisor(60))\n    print(divisor(61))\n    print(divisor(62))\n    print(divisor(63))\n    print(divisor(64))\n    print(divisor(65))\n    print(divisor(66))\n    print(divisor(67))\n    print(divisor(68))\n    print(divisor(69))\n    print(divisor(70))\n    print(divisor(71))\n    print(divisor(72))\n    print(divisor(73))\n"}
{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n\ndef frequency_lists(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dictionary of frequency of each element in a flattened list of lists\n    \"\"\"\n    # your code here\n    return {x: lists.count(x) for x in lists}\n\n\nif __name__ == '__main__':\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1,"}
{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef multiply_num(num_list):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n    :param num_list: list of numbers\n    :return: float\n    \"\"\"\n    return sum(num_list) / len(num_list)\n\n\nif __name__ == '__main__':\n    print(multiply_num((8, 2, 3, -1, 7)))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001))\n    print(multiply_num((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(math.isclose(multiply_num((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 5.5, rel_tol=0.001))\n    print(multiply_num((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(math.isclose(multiply_num((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)), 10.5,\n                       rel_tol=0.001))\n    print(multiply_num((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n                        28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n                        78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(math.isclose(multiply_num((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n                                     25, 26, 27,"}
{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n\ndef decimal_to_binary(decimal_number):\n    \"\"\"\n    :param decimal_number: int\n    :return: str\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    binary_number = ''\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(13))\n    print(decimal_to_binary(14))\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(17))\n    print(decimal_to_binary(18))\n    print(decimal_to_binary(19))\n    print(decimal_to_binary(20))\n    print(decimal_to_binary(21))\n    print(decimal_to_binary(22))\n    print(decimal_to_binary(23))\n    print(decimal_to_binary(24))\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(26))\n    print(decimal_to_binary(27))\n    print(decimal_to_binary(28))\n    print(decimal_to_binary(29))\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(31))\n    print(decimal_to_binary(32))\n    print(decimal_to_binary(33))\n    print(decimal_to_binary(34))\n    print(decimal_to_binary(35))\n    print(decimal_to_binary(36))\n    print(decimal_to_binary(37))\n    print(decimal_to_binary(38))\n    print(decimal_to_binary(39))\n    print(decimal_to_binary(40))\n    print(decimal_to_binary(41))\n    print(decimal_to_binary(42))\n    print(decimal_to_binary(43))\n    print(decimal_to_binary(44))\n    print(decimal_to_binary(45))\n    print(decimal_to_binary(46))\n    print(decimal_to_binary(47))\n    print(decimal_to_binary(48))\n    print(decimal_to_binary(49))\n    print(decimal_to_binary(50))\n    print(decimal_to_binary(51))\n    print(decimal_to_binary(52))\n    print(decimal_to_binary(53))\n    print(decimal_to_binary(54))\n    print(decimal_to_binary(55))\n    print(decimal_to_binary(56))\n    print(decimal_to_binary(57))\n    print(decimal_to_binary(58))\n    print(decimal_to_binary(59))\n    print(decimal_to_binary(60))\n    print(decimal_to_binary(61))\n    print(decimal_to_binary(62))\n    print(decimal_to_binary(63))\n    print(decimal_to_binary(64))\n    print(decimal_to_binary(65))\n    print(decimal_to_binary(66))\n    print(decimal_to_binary(67))\n    print(decimal_to_binary("}
{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n + 1\n    if n % 10 == 0:\n        return n + 1\n    if n % 10 == 1:\n        return n + 10\n    if n % 10 == 5:\n        return n + 10\n    if n % 10 == 9:\n        return n + 10\n    if n % 10 == 4:\n        return n + 11\n    if n % 10 == 8:\n        return n + 11\n    if n % 10 == 7:\n        return n + 11\n    if n % 10 == 6:\n        return n + 11\n    if n % 10 == 3:\n        return n + 11\n    if n % 10 == 2:\n        return n + 11\n    if n % 10 == 1:\n        return n + 11\n    if n % 10 == 0:\n        return n + 11\n\n\nif __name__ == '__main__':\n    print(next_smallest_palindrome(99))\n    print(next_smallest_palindrome(100))\n    print(next_smallest_palindrome(101))\n    print(next_smallest_palindrome(102))\n    print(next_smallest_palindrome(103))\n    print(next_smallest_palindrome(104))\n    print(next_smallest_palindrome(105))\n    print(next_smallest_palindrome(106))\n    print(next_smallest_palindrome(107))\n    print(next_smallest_palindrome(108))\n    print(next_smallest_palindrome(109))\n    print(next_smallest_palindrome(110))\n    print(next_smallest_palindrome(111))\n    print(next_smallest_palindrome(112))\n    print(next_smallest_palindrome(113))\n    print(next_smallest_palindrome(114))\n    print(next_smallest_palindrome(115))\n    print(next_smallest_palindrome(116))\n    print(next_smallest_palindrome(117))\n    print(next_smallest_palindrome(118))\n    print(next_smallest_palindrome(119))\n    print(next_smallest_palindrome(120))\n    print(next_smallest_palindrome(121))\n    print(next_smallest_palindrome(122))\n    print(next_smallest_palindrome(123))\n    print(next_smallest_palindrome(124))\n    print(next_smallest_palindrome(125))\n    print(next_smallest_palindrome(126))\n    print(next_smallest_palindrome(127))\n    print(next_smallest_palindrome(128))\n    print(next_smallest_palindrome(129))\n    print(next_smallest_palindrome(130))\n    print(next_smallest_palindrome(131))\n    print(next_smallest_palindrome(132))\n    print(next_smallest_palindrome(133))\n    print(next_smallest_palindrome(134))\n    print(next_smallest_palindrome(135))\n    print(next_smallest_palindrome(136))\n    print(next_smallest_"}
{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\n\ndef kth_element(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: kth element in the list\n    \"\"\"\n    if k > len(arr):\n        return None\n    if k == 1:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    pivot = arr[len(arr) // 2]\n    if k == len(arr) // 2 + 1:\n        return pivot\n    if k < len(arr) // 2 + 1:\n        return kth_element(arr[:len(arr) // 2], k)\n    else:\n        return kth_element(arr[len(arr) // 2:], k - len(arr) // 2 - 1)\n\n\nif __name__ == '__main__':\n    print(kth_element([12, 3, 5, 7, 19], 2))\n    print(kth_element([12, 3, 5, 7, 19], 3))\n    print(kth_element([12, 3, 5, 7, 19], 4))\n    print(kth_element([12, 3, 5, 7, 19], 5))\n    print(kth_element([12, 3, 5, 7, 19], 6))\n    print(kth_element([12, 3, 5, 7, 19], 7))\n    print(kth_element([12, 3, 5, 7, 19], 8))\n    print(kth_element([12, 3, 5, 7, 19], 9))\n    print(kth_element([12, 3, 5, 7, 19], 10))\n    print(kth_element([12, 3, 5, 7, 19], 11))\n    print(kth_element([12, 3, 5, 7, 19], 12))\n    print(kth_element([12, 3, 5, 7, 19], 13))\n    print(kth_element([12, 3, 5, 7, 19], 14))\n    print(kth_element([12, 3, 5, 7, 19], 15))\n    print(kth_element([12, 3, 5, 7, 19], 16))\n    print(kth_element([12, 3, 5, 7, 19], 17))\n    print(kth_element([12, 3, 5, 7, 19], 18))\n    print(kth_element([12, 3, 5, 7, 19], 19))\n    print(kth_element([12, 3, 5, 7, 19], 20))\n    print(kth_element([12, 3, 5, 7, 19], 21))\n    print(kth_element([12, 3, 5, 7, 19], 22))\n    print(kth_element([12, 3, 5, 7, 19], 23))\n    print(kth_element([12, 3, 5, 7, 19], 24))\n    print(kth_element([12, 3, 5, 7, 19], 25))\n    print(kth_element([12, 3, 5, 7, 19], 26))\n    print(kth_element([12, 3, 5, 7, 19], 27))\n"}
{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str:\n    :return:\n    \"\"\"\n    components = snake_str.split('_')\n    # We capitalize the first letter of each component except the first one\n    # with the 'capitalize' method and join them together.\n    return components[0] + ''.join(x.capitalize() for x in components[1:])\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('python_program'))\n    print(snake_to_camel('python_program_is_fun'))\n    print(snake_to_camel('python_program_is_fun_too'))\n    print(snake_to_camel('python_program_is_fun_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too_much_too_much_too'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too_much_too_much_too_much'))\n    print(snake_to_camel('python_program_is_fun_too_much_too_much_too_much_too_much_too_much_too_much_too_"}
{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: number of vertices\n    :param m: number of edges\n    :return: Eulerian number\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 12\n    if n == 5:\n        return 24\n    if n == 6:\n        return 48\n    if n == 7:\n        return 96\n    if n == 8:\n        return 192\n    if n == 9:\n        return 384\n    if n == 10:\n        return 768\n    if n == 11:\n        return 1536\n    if n == 12:\n        return 3072\n    if n == 13:\n        return 6144\n    if n == 14:\n        return 12288\n    if n == 15:\n        return 24576\n    if n == 16:\n        return 49152\n    if n == 17:\n        return 98304\n    if n == 18:\n        return 196608\n    if n == 19:\n        return 393216\n    if n == 20:\n        return 786432\n    if n == 21:\n        return 1572864\n    if n == 22:\n        return 3145728\n    if n == 23:\n        return 6291456\n    if n == 24:\n        return 12582912\n    if n == 25:\n        return 25165824\n    if n == 26:\n        return 50331648\n    if n == 27:\n        return 100663296\n    if n == 28:\n        return 201326592\n    if n == 29:\n        return 402653184\n    if n == 30:\n        return 805306368\n    if n == 31:\n        return 1610612736\n    if n == 32:\n        return 3221225472\n    if n == 33:\n        return 6442450944\n    if n == 34:\n        return 12884901888\n    if n == 35:\n        return 25769803776\n    if n == 36:\n        return 51539607552\n    if n == 37:\n        return 103079215104\n    if n == 38:\n        return 206158430208\n    if n == 39:\n        return 412316860416\n    if n == 40:\n        return 824633720832\n    if n == 41:\n        return 1649267441664\n    if n == 42:\n        return 3298534883328\n    if n == 43:\n        return 6597069766656\n    if n == 44:\n        return 13194139533312\n    if n == 45:\n        return 263882"}
{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n\ndef sort_sublists(lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    :param lists: list of lists\n    :return: list of lists\n    \"\"\"\n    return [sorted(sublist) for sublist in lists]\n\n\nif __name__ == '__main__':\n    print(sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists(["}
{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n\ndef count(lst):\n    return sum(1 for x in lst if x)\n\n\nif __name__ == '__main__':\n    print(count([True, False, True]))\n    print(count([True, True, False, True, True, False, False, True, True, False]))\n    print(count([False, False, False, False, False, False, False, False, False, False]))\n    print(count([True, True, True, True, True, True, True, True, True, True]))\n    print(count([False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False,"}
{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n\ndef add_lists(list_to_add, tuple_to_add):\n    \"\"\"\n    Adds the list to the tuple.\n    :param list_to_add: list to add\n    :param tuple_to_add: tuple to add\n    :return: tuple with the list added\n    \"\"\"\n    return tuple_to_add + tuple(list_to_add)\n\n\nif __name__ == '__main__':\n    print(add_lists([5, 6, 7], (9, 10)))\n    print(add_lists([1, 2, 3], (4, 5, 6)))\n    print(add_lists([1, 2, 3], (4, 5)))\n    print(add_lists([1, 2, 3], (4,)))\n    print(add_lists([1, 2, 3], ()))\n    print(add_lists([1, 2, 3], (4, 5, 6, 7, 8, 9, 10)))\n    print(add_lists([1, 2, 3], (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(add_lists([1, 2, 3], (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,"}
{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param list3: list of integers\n    :return: list of integers\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        elif list3[k] < list1[i] < list2[j]:\n            result.append(list3[k])\n            k += 1\n        elif list1[i] == list2[j] == list3[k]:\n            result.append(list1[i])\n            i += 1\n            j += 1\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]))\n    print(merge_sorted_list([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(merge_sorted_list([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(merge_sorted_list([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(merge_sorted_list([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(merge_sorted_list([1, 2, 3"}
{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n\ndef odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    :param binary_string: string\n    :param rotations: int\n    :return: int\n    \"\"\"\n    if not binary_string:\n        return 0\n    if rotations == 0:\n        return 1\n    if len(binary_string) == 1:\n        return 1\n    if len(binary_string) == 2:\n        return 1 if binary_string[0] == binary_string[1] else 2\n    if len(binary_string) == 3:\n        return 1 if binary_string[0] == binary_string[2] else 2\n    if len(binary_string) == 4:\n        return 1 if binary_string[0] == binary_string[3] else 2\n    if len(binary_string) == 5:\n        return 1 if binary_string[0] == binary_string[4] else 2\n    if len(binary_string) == 6:\n        return 1 if binary_string[0] == binary_string[5] else 2\n    if len(binary_string) == 7:\n        return 1 if binary_string[0] == binary_string[6] else 2\n    if len(binary_string) == 8:\n        return 1 if binary_string[0] == binary_string[7] else 2\n    if len(binary_string) == 9:\n        return 1 if binary_string[0] == binary_string[8] else 2\n    if len(binary_string) == 10:\n        return 1 if binary_string[0] == binary_string[9] else 2\n    if len(binary_string) == 11:\n        return 1 if binary_string[0] == binary_string[10] else 2\n    if len(binary_string) == 12:\n        return 1 if binary_string[0] == binary_string[11] else 2\n    if len(binary_string) == 13:\n        return 1 if binary_string[0] == binary_string[12] else 2\n    if len(binary_string) == 14:\n        return 1 if binary_string[0] == binary_string[13] else 2\n    if len(binary_string) == 15:\n        return 1 if binary_string[0] == binary_string[14] else 2\n    if len(binary_string) == 16:\n        return 1 if binary_string[0] == binary_string[15] else 2\n    if len(binary_string) == 17:\n        return 1 if binary_string[0] == binary_string[16] else 2\n    if len(binary_string) == 18:\n        return 1 if binary_string[0] == binary_string[17] else 2\n    if len(binary_string) == 19:\n        return 1 if binary_string[0] == binary_string[18] else 2\n    if len(binary_string) == 20:\n        return 1 if binary_string[0] == binary_string[19] else 2\n    if len(binary_string) == 21:\n        return 1 if binary_string[0] == binary_string[20] else 2\n    if len(binary_string) == 22:\n        return 1 if binary_string[0] == binary_string[21] else 2\n    if"}
{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\n\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    :param nested_list: list of lists\n    :return: list of common elements\n    \"\"\"\n    common_elements = []\n    for i in range(len(nested_list)):\n        for j in range(i + 1, len(nested_list)):\n            common_elements += list(set(nested_list[i]).intersection(nested_list[j]))\n    return list(set(common_elements))\n\n\nif __name__ == '__main__':\n    print(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8],\n                                  [1, 2, 3, 9]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8],\n                                  [1, 2, 3, 9], [1, 2, 3, 10]]))\n    print(common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6"}
{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_integer(\"python\"))\n    print(check_integer(\"12345\"))\n    print(check_integer(\"12345.12345\"))\n    print(check_integer(\"12345.12345e12\"))\n    print(check_integer(\"12345e12\"))\n    print(check_integer(\"12345e-12\"))\n    print(check_integer(\"12345e+12\"))\n    print(check_integer(\"12345e\"))\n    print(check_integer(\"12345e12.12345\"))\n    print(check_integer(\"12345e12.12345e12\"))\n    print(check_integer(\"12345e12.12345e-12\"))\n    print(check_integer(\"12345e12.12345e+12\"))\n    print(check_integer(\"12345e12.12345e\"))\n    print(check_integer(\"12345e12.12345e12.12345\"))\n    print(check_integer(\"12345e12.12345e12.12345e12\"))\n    print(check_integer(\"12345e12.12345e12.12345e-12\"))\n    print(check_integer(\"12345e12.12345e12.12345e+12\"))\n    print(check_integer(\"12345e12.12345e12.12345e\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e12\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e-12\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e+12\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e12.12345\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e12.12345e12\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e12.12345e-12\"))\n    print(check_integer(\"12345e12.12345e12.12345e12.12345e12.12345e+12\"))\n    print(check"}
{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\n\ndef empty_dit(list_of_dicts):\n    for i in list_of_dicts:\n        if i:\n            return False\n    return True\n\n\nprint(empty_dit([{}, {}, {}]))\nprint(empty_dit([{}, {}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2}]))\nprint(empty_dit([{1: 2}, {1: 2}, {1: 2}, {1: 2}, {1: 2"}
{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n\ndef tuple_to_int(tup):\n    \"\"\"\n    >>> tuple_to_int((1,2,3))\n    123\n    >>> tuple_to_int((1,2,3,4,5))\n    12345\n    \"\"\"\n    return int(''.join(map(str, tup)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n# 1. \u628atuple\u8f6c\u6362\u6210list\n# 2. \u628alist\u4e2d\u7684\u5143\u7d20\u8f6c\u6362\u6210str\n# 3. \u628astr\u8f6c\u6362\u6210int\n# 4. \u628aint\u8f6c\u6362\u6210str\n# 5. \u628astr\u8f6c\u6362\u6210int\n# 6. \u628aint\u8f6c\u6362\u6210str\n# 7. \u628astr\u8f6c\u6362\u6210int\n# 8. \u628aint\u8f6c\u6362\u6210str\n# 9. \u628astr\u8f6c\u6362\u6210int\n# 10. \u628aint\u8f6c\u6362\u6210str\n# 11. \u628astr\u8f6c\u6362\u6210int\n# 12. \u628aint\u8f6c\u6362\u6210str\n# 13. \u628astr\u8f6c\u6362\u6210int\n# 14. \u628aint\u8f6c\u6362\u6210str\n# 15. \u628astr\u8f6c\u6362\u6210int\n# 16. \u628aint\u8f6c\u6362\u6210str\n# 17. \u628astr\u8f6c\u6362\u6210int\n# 18. \u628aint\u8f6c\u6362\u6210str\n# 19. \u628astr\u8f6c\u6362\u6210int\n# 20. \u628aint\u8f6c\u6362\u6210str\n# 21. \u628astr\u8f6c\u6362\u6210int\n# 22. \u628aint\u8f6c\u6362\u6210str\n# 23. \u628astr\u8f6c\u6362\u6210int\n# 24. \u628aint\u8f6c\u6362\u6210str\n# 25. \u628astr\u8f6c\u6362\u6210int\n# 26. \u628aint\u8f6c\u6362\u6210str\n# 27. \u628astr\u8f6c\u6362\u6210int\n# 28. \u628aint\u8f6c\u6362\u6210str\n# 29. \u628astr\u8f6c\u6362\u6210int\n# 30. \u628aint\u8f6c\u6362\u6210str\n# 31. \u628astr\u8f6c\u6362\u6210int\n# 32. \u628aint\u8f6c\u6362\u6210str\n# 33. \u628astr\u8f6c\u6362\u6210int\n# 34. \u628aint\u8f6c\u6362\u6210str\n# 35. \u628astr\u8f6c\u6362\u6210int\n# 36. \u628aint\u8f6c\u6362\u6210str\n# 37. \u628astr\u8f6c\u6362\u6210int\n# 38. \u628aint\u8f6c\u6362\u6210str\n# 39. \u628astr\u8f6c\u6362\u6210int\n# 40. \u628aint\u8f6c\u6362\u6210str\n# 41. \u628astr\u8f6c\u6362\u6210int\n# 42. \u628aint\u8f6c\u6362\u6210str\n# 43. \u628astr\u8f6c\u6362\u6210int\n# 44. \u628aint\u8f6c\u6362\u6210str\n# 45. \u628astr\u8f6c\u6362\u6210int\n# 46. \u628aint\u8f6c\u6362\u6210str\n# 47. \u628astr\u8f6c\u6362\u6210int\n# 48. \u628aint\u8f6c\u6362\u6210str\n# 49. \u628astr\u8f6c\u6362\u6210int\n# 50. \u628aint\u8f6c\u6362\u6210str\n# 51. \u628astr\u8f6c\u6362\u6210int\n# 52. \u628aint\u8f6c\u6362\u6210str\n# 53. \u628astr\u8f6c\u6362\u6210int\n# 54. \u628aint\u8f6c\u6362\u6210"}
{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\n\n\ndef list_to_float(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: list of tuples\n    \"\"\"\n    return [(float(x[0]), float(x[1])) for x in list_of_lists]\n\n\nif __name__ == '__main__':\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\","}
{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n\ndef string_to_list(string):\n    return string.split()\n\n\nif __name__ == '__main__':\n    print(string_to_list(\"python programming\"))\n    print(string_to_list(\"python programming is fun\"))\n    print(string_to_list(\"python programming is fun and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy\"))\n    print(string_to_list(\"python programming is fun and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and easy and"}
{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\n\ndef search(arr):\n    \"\"\"\n    :param arr: sorted array\n    :return: element that appears only once\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    if arr[0] != arr[1]:\n        return arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] != arr[i - 1]:\n            return arr[i]\n    return None\n\n\nif __name__ == '__main__':\n    print(search([1, 1, 2, 2, 3]))\n    print(search([1, 1, 2, 2, 3, 3]))\n    print(search([1, 1, 2, 2, 3, 3, 4]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]))\n    print(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,"}
{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\n\ndef max_product_tuple(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: maximum absolute product\n    \"\"\"\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            max_product = max(max_product, abs(tuples[i][0] * tuples[i][1] * tuples[j][0] * tuples[j][1]))\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(max_"}
{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n + 1):\n        if i == sum_of_divisors(i):\n            sum_ += sum_of_divisors(sum_of_divisors(i))\n    return sum_\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum_ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            sum_ += i\n    return sum_\n\n\nif __name__ == '__main__':\n    print(amicable_numbers_sum(999))\n"}
{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef angle_complex(real, imag):\n    \"\"\"\n    Get the angle of a complex number.\n    \"\"\"\n    if real == 0 and imag == 0:\n        return 0\n    if real == 0:\n        if imag > 0:\n            return math.pi / 2\n        else:\n            return -math.pi / 2\n    if imag == 0:\n        if real > 0:\n            return 0\n        else:\n            return math.pi\n    if real > 0:\n        if imag > 0:\n            return math.atan(imag / real)\n        else:\n            return math.pi + math.atan(imag / real)\n    else:\n        if imag > 0:\n            return math.pi * 2 + math.atan(imag / real)\n        else:\n            return math.pi * 2 + math.atan(imag / real)\n\n\nif __name__ == \"__main__\":\n    print(angle_complex(0, 1j))\n    print(angle_complex(0, -1j))\n    print(angle_complex(1, 0))\n    print(angle_complex(1, 1))\n    print(angle_complex(1, -1))\n    print(angle_complex(-1, 0))\n    print(angle_complex(-1, 1))\n    print(angle_complex(-1, -1))\n    print(angle_complex(1, 1j))\n    print(angle_complex(1, -1j))\n    print(angle_complex(-1, 1j))\n    print(angle_complex(-1, -1j))\n    print(angle_complex(1j, 0))\n    print(angle_complex(1j, 1))\n    print(angle_complex(1j, -1))\n    print(angle_complex(-1j, 0))\n    print(angle_complex(-1j, 1))\n    print(angle_complex(-1j, -1))\n    print(angle_complex(1j, 1j))\n    print(angle_complex(1j, -1j))\n    print(angle_complex(-1j, 1j))\n    print(angle_complex(-1j, -1j))\n    print(angle_complex(1, 1j))\n    print(angle_complex(1, -1j))\n    print(angle_complex(-1, 1j))\n    print(angle_complex(-1, -1j))\n    print(angle_complex(1j, 1))\n    print(angle_complex(1j, -1))\n    print(angle_complex(-1j, 1))\n    print(angle_complex(-1j, -1))\n    print(angle_complex(1, 1j))\n    print(angle_complex(1, -1j))\n    print(angle_complex(-1, 1j))\n    print(angle_complex(-1, -1j))\n    print(angle_complex(1j, 1))\n    print(angle_complex(1j, -1))\n    print(angle_complex(-1j, 1))\n    print(angle_complex(-1j, -1))\n    print(angle_complex(1, 1j))\n    print(angle_complex(1, -1j))\n    print(angle_complex(-1, 1j))\n    print(angle_complex(-1, -1j))\n    print(angle_complex(1j, 1))\n    print(angle_complex(1j, -1))\n    print(angle_complex(-1j, 1))\n    print(angle_complex(-1j, -1))\n    print(angle_complex(1, 1j))\n    print(angle_complex(1, -1j))\n    print(angle_complex(-1, 1j))\n    print(angle_complex(-1, -1j))\n    print(angle_complex(1j, 1))\n    print(angle_complex(1j, -1"}
{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :param binary_string: str\n    :return: int\n    \"\"\"\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for char in binary_string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        max_diff = max(max_diff, zero_count - one_count)\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(find_length(\"11000010001\"))\n    print(find_length(\"11000010000\"))\n    print(find_length(\"11000010001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"}
{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n\ndef sum(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    result = 0\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            result += i\n    return result\n\n\nif __name__ == '__main__':\n    print(sum(10, 15))\n    print(sum(10, 10))\n    print(sum(10, 5))\n    print(sum(10, 2))\n    print(sum(10, 1))\n    print(sum(10, 0))\n    print(sum(10, -1))\n    print(sum(10, -10))\n    print(sum(10, -15))\n    print(sum(10, -20))\n    print(sum(10, -25))\n    print(sum(10, -30))\n    print(sum(10, -35))\n    print(sum(10, -40))\n    print(sum(10, -45))\n    print(sum(10, -50))\n    print(sum(10, -55))\n    print(sum(10, -60))\n    print(sum(10, -65))\n    print(sum(10, -70))\n    print(sum(10, -75))\n    print(sum(10, -80))\n    print(sum(10, -85))\n    print(sum(10, -90))\n    print(sum(10, -95))\n    print(sum(10, -100))\n    print(sum(10, -105))\n    print(sum(10, -110))\n    print(sum(10, -115))\n    print(sum(10, -120))\n    print(sum(10, -125))\n    print(sum(10, -130))\n    print(sum(10, -135))\n    print(sum(10, -140))\n    print(sum(10, -145))\n    print(sum(10, -150))\n    print(sum(10, -155))\n    print(sum(10, -160))\n    print(sum(10, -165))\n    print(sum(10, -170))\n    print(sum(10, -175))\n    print(sum(10, -180))\n    print(sum(10, -185))\n    print(sum(10, -190))\n    print(sum(10, -195))\n    print(sum(10, -200))\n    print(sum(10, -205))\n    print(sum(10, -210))\n    print(sum(10, -215))\n    print(sum(10, -220))\n    print(sum(10, -225))\n    print(sum(10, -230))\n    print(sum(10, -235))\n    print(sum(10, -240))\n    print(sum(10, -245))\n    print(sum(10, -250))\n    print(sum(10, -255))\n    print(sum(10, -260))\n    print(sum(10, -265))\n    print(sum(10, -270))\n    print(sum(10, -275))\n    print(sum(10, -280))\n    print(sum(10, -2"}
{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\n\ndef multiply_int(a, b):\n    \"\"\"\n    Multiply two integers\n    :param a: first integer\n    :param b: second integer\n    :return: a*b\n    \"\"\"\n    return a * b\n\n\nif __name__ == '__main__':\n    print(multiply_int(10, 20))\n    print(multiply_int(10, 20) == 200)\n    print(multiply_int(10, 20) == 2000)\n    print(multiply_int(10, 20) == 20000)\n    print(multiply_int(10, 20) == 200000)\n    print(multiply_int(10, 20) == 2000000)\n    print(multiply_int(10, 20) == 20000000)\n    print(multiply_int(10, 20) == 200000000)\n    print(multiply_int(10, 20) == 2000000000)\n    print(multiply_int(10, 20) == 20000000000)\n    print(multiply_int(10, 20) == 200000000000)\n    print(multiply_int(10, 20) == 2000000000000)\n    print(multiply_int(10, 20) == 20000000000000)\n    print(multiply_int(10, 20) == 200000000000000)\n    print(multiply_int(10, 20) == 2000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000)\n    print(multiply_int(10, 20) == 2000000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000000)\n    print(multiply_int(10, 20) == 2000000000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000000000)\n    print(multiply_int(10, 20) == 2000000000000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000000000000)\n    print(multiply_int(10, 20) == 20000000"}
{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n\ndef long_words(n, words):\n    \"\"\"\n    :param n: int\n    :param words: str\n    :return: list\n    \"\"\"\n    return [word for word in words.split() if len(word) > n]\n\n\nif __name__ == '__main__':\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n   "}
{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    \"\"\"\n    :param matrix: a matrix\n    :return: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    # Your code here\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) == 0:\n        return False\n    if len(matrix) == 1:\n        return True\n    if len(matrix) == 2:\n        return False\n    if len(matrix) == 3:\n        return False\n    if len(matrix) == 4:\n        return False\n    if len(matrix) == 5:\n        return False\n    if len(matrix) == 6:\n        return False\n    if len(matrix) == 7:\n        return False\n    if len(matrix) == 8:\n        return False\n    if len(matrix) == 9:\n        return False\n    if len(matrix) == 10:\n        return False\n    if len(matrix) == 11:\n        return False\n    if len(matrix) == 12:\n        return False\n    if len(matrix) == 13:\n        return False\n    if len(matrix) == 14:\n        return False\n    if len(matrix) == 15:\n        return False\n    if len(matrix) == 16:\n        return False\n    if len(matrix) == 17:\n        return False\n    if len(matrix) == 18:\n        return False\n    if len(matrix) == 19:\n        return False\n    if len(matrix) == 20:\n        return False\n    if len(matrix) == 21:\n        return False\n    if len(matrix) == 22:\n        return False\n    if len(matrix) == 23:\n        return False\n    if len(matrix) == 24:\n        return False\n    if len(matrix) == 25:\n        return False\n    if len(matrix) == 26:\n        return False\n    if len(matrix) == 27:\n        return False\n    if len(matrix) == 28:\n        return False\n    if len(matrix) == 29:\n        return False\n    if len(matrix) == 30:\n        return False\n    if len(matrix) == 31:\n        return False\n    if len(matrix) == 32:\n        return False\n    if len(matrix) == 33:\n        return False\n    if len(matrix) == 34:\n        return False\n    if len(matrix) == 35:\n        return False\n    if len(matrix) == 36:\n        return False\n    if len(matrix) == 37:\n        return False\n    if len(matrix) == 38:\n        return False\n    if len(matrix) == 39:\n        return False\n    if len(matrix) == 40:\n        return False\n    if len(matrix) == 41:\n        return False\n    if len(matrix) == 42:\n        return False\n    if len(matrix) == 43:\n        return False\n    if len(matrix) == 44:\n        return False\n    if len(matrix) == 45:\n        return False\n    if len(matrix) == 46:\n        return False\n    if len(matrix) == 47:\n        return False\n    if len(matrix) == 48:\n        return False\n    if len(matrix) == 49:\n        return False\n    if len(matrix) == 50:\n        return False\n    if len(matrix) == 51:\n        return False\n    if len(matrix) == 52:\n        return False\n    if len(matrix) == 53:\n        return False\n    if len(matrix) == 54:\n        return False\n    if len"}
{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\n\ndef max_occurrences(lst):\n    \"\"\"\n    :param lst: list\n    :return: item with maximum frequency\n    \"\"\"\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n\n\nif __name__ == '__main__':\n    print(max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6,"}
{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n\ndef reverse_vowels(string):\n    vowels = \"aeiouy\"\n    vowel_indexes = []\n    for i, char in enumerate(string):\n        if char in vowels:\n            vowel_indexes.append(i)\n    vowel_indexes.reverse()\n    for i, vowel_index in enumerate(vowel_indexes):\n        string = string[:vowel_index] + string[vowel_index].upper() + string[vowel_index + 1:]\n    return string\n\n\nif __name__ == \"__main__\":\n    print(reverse_vowels(\"Python\"))\n    print(reverse_vowels(\"Hello World\"))\n    print(reverse_vowels(\"A man, a plan, a canal: Panama\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere I saw Elba\"))\n    print(reverse_vowels(\"Able was I, ere"}
{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n\ndef tup_string(tup):\n    \"\"\"\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    'exercises'\n    \"\"\"\n    return ''.join(tup)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n\ndef sum_negativenum(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: sum of the negative numbers\n    \"\"\"\n    return sum(x for x in nums if x < 0)\n\n\nif __name__ == '__main__':\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17]))\n    print(sum_negativenum([2, 4, 6, 9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, 6, 9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, 9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19, -21]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19, -21, -23]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19, -21, -23, -25]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19, -21, -23, -25, -27]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19, -21, -23, -25, -27, -29]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17, -19, -21, -23, -25, -27, -29, -31]))\n    print(sum_negativenum([-"}
{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n\ndef hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    assert hexagonal_num(10) == 190\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_num(10))\n"}
{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: ratio of zeroes to non-zeroes\n    \"\"\"\n    zeroes = 0\n    non_zeroes = 0\n    for i in arr:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n\n\nif __name__ == '__main__':\n    print(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    print(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}
{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_Sum_Of_Powers_Of_Two(10))\n    print(is_Sum_Of_Powers_Of_Two(11))\n    print(is_Sum_Of_Powers_Of_Two(12))\n    print(is_Sum_Of_Powers_Of_Two(13))\n    print(is_Sum_Of_Powers_Of_Two(14))\n    print(is_Sum_Of_Powers_Of_Two(15))\n    print(is_Sum_Of_Powers_Of_Two(16))\n    print(is_Sum_Of_Powers_Of_Two(17))\n    print(is_Sum_Of_Powers_Of_Two(18))\n    print(is_Sum_Of_Powers_Of_Two(19))\n    print(is_Sum_Of_Powers_Of_Two(20))\n    print(is_Sum_Of_Powers_Of_Two(21))\n    print(is_Sum_Of_Powers_Of_Two(22))\n    print(is_Sum_Of_Powers_Of_Two(23))\n    print(is_Sum_Of_Powers_Of_Two(24))\n    print(is_Sum_Of_Powers_Of_Two(25))\n    print(is_Sum_Of_Powers_Of_Two(26))\n    print(is_Sum_Of_Powers_Of_Two(27))\n    print(is_Sum_Of_Powers_Of_Two(28))\n    print(is_Sum_Of_Powers_Of_Two(29))\n    print(is_Sum_Of_Powers_Of_Two(30))\n    print(is_Sum_Of_Powers_Of_Two(31))\n    print(is_Sum_Of_Powers_Of_Two(32))\n    print(is_Sum_Of_Powers_Of_Two(33))\n    print(is_Sum_Of_Powers_Of_Two(34))\n    print(is_Sum_Of_Powers_Of_Two(35))\n    print(is_Sum_Of_Powers_Of_Two(36))\n    print(is_Sum_Of_Powers_Of_Two(37))\n    print(is_Sum_Of_Powers_Of_Two(38))\n    print(is_Sum_Of_Powers_Of_Two(39))\n    print(is_Sum_Of_Powers_Of_Two(40))\n    print(is_Sum_Of_Powers_Of_Two(41))\n    print(is_Sum_Of_Powers_Of_Two(42))\n    print(is_Sum_Of_Powers_Of_Two(43))\n    print(is_Sum_Of_Powers_Of_Two(44))\n    print(is_Sum_Of_Powers_Of_Two(45))\n    print(is_Sum_Of_Powers_Of_Two(46))\n    print(is_Sum_Of_Powers_Of_Two(47))\n    print(is_Sum_Of_Powers_Of_Two(48))\n    print(is_Sum_Of_Powers_Of_Two(49))\n    print(is_"}
{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n    :param radius: radius of the circle\n    :return: circumference of the circle\n    \"\"\"\n    return 2 * math.pi * radius\n\n\nif __name__ == '__main__':\n    print(circle_circumference(10))\n    print(circle_circumference(100))\n    print(circle_circumference(1000))\n    print(circle_circumference(10000))\n    print(circle_circumference(100000))\n    print(circle_circumference(1000000))\n    print(circle_circumference(10000000))\n    print(circle_circumference(100000000))\n    print(circle_circumference(1000000000))\n    print(circle_circumference(10000000000))\n    print(circle_circumference(100000000000))\n    print(circle_circumference(1000000000000))\n    print(circle_circumference(10000000000000))\n    print(circle_circumference(100000000000000))\n    print(circle_circumference(1000000000000000))\n    print(circle_circumference(10000000000000000))\n    print(circle_circumference(100000000000000000))\n    print(circle_circumference(1000000000000000000))\n    print(circle_circumference(10000000000000000000))\n    print(circle_circumference(100000000000000000000))\n    print(circle_circumference(1000000000000000000000))\n    print(circle_circumference(10000000000000000000000))\n    print(circle_circumference(100000000000000000000000))\n    print(circle_circumference(1000000000000000000000000))\n    print(circle_circumference(10000000000000000000000000))\n    print(circle_circumference(100000000000000000000000000))\n    print(circle_circumference(1000000000000000000000000000))\n    print(circle_circumference(10000000000000000000000000000))\n    print(circle_circumference(100000000000000000000000000000))\n    print(circle_circumference(1000000000000000000000000000000))\n    print(circle_circumference(10000000000000000000000000000000))\n    print(circle"}
{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\n\ndef extract_singly(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: set of numbers\n    \"\"\"\n    return set(sum(lists, ()))\n\n\nif __name__ == '__main__':\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly"}
{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts the list in ascending order\n    :param arr: list of elements\n    :return: sorted list\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        max_index = arr.index(max(arr[:i + 1]))\n        if max_index != i:\n            arr[i], arr[max_index] = arr[max_index], arr[i]\n            arr[0:max_index + 1] = arr[0:max_index + 1][::-1]\n    return arr\n\n\nif __name__ == '__main__':\n    print(pancake_sort([15, 79, 25, 38, 69]))\n    print(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(pancake_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n    print(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(pancake_sort([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54,"}
{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n\n\n\"\"\"\nWrite a function to count number of items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n\n\n\"\"\"\nWrite a function to count number of items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n\n\n\"\"\"\nWrite a function to count number of items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n\n\n\"\"\"\nWrite a function to count number of items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,"}
{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n\ndef find_lists(tup):\n    \"\"\"\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n    2\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]))\n    3\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]))\n    4\n    \"\"\"\n    return len([x for x in tup if isinstance(x, list)])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\n\ndef max_Abs_Diff(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: maximum difference between any two elements in the array\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(max_Abs_Diff((2, 1, 5, 3)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3"}
{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\n\ndef find_solution(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple\n    \"\"\"\n    if a == 0:\n        return None\n    x = n // b\n    y = n - a * x\n    return x, y\n\n\nif __name__ == '__main__':\n    print(find_solution(2, 3, 7))\n    print(find_solution(2, 3, 8))\n    print(find_solution(2, 3, 9))\n    print(find_solution(2, 3, 10))\n    print(find_solution(2, 3, 11))\n    print(find_solution(2, 3, 12))\n    print(find_solution(2, 3, 13))\n    print(find_solution(2, 3, 14))\n    print(find_solution(2, 3, 15))\n    print(find_solution(2, 3, 16))\n    print(find_solution(2, 3, 17))\n    print(find_solution(2, 3, 18))\n    print(find_solution(2, 3, 19))\n    print(find_solution(2, 3, 20))\n    print(find_solution(2, 3, 21))\n    print(find_solution(2, 3, 22))\n    print(find_solution(2, 3, 23))\n    print(find_solution(2, 3, 24))\n    print(find_solution(2, 3, 25))\n    print(find_solution(2, 3, 26))\n    print(find_solution(2, 3, 27))\n    print(find_solution(2, 3, 28))\n    print(find_solution(2, 3, 29))\n    print(find_solution(2, 3, 30))\n    print(find_solution(2, 3, 31))\n    print(find_solution(2, 3, 32))\n    print(find_solution(2, 3, 33))\n    print(find_solution(2, 3, 34))\n    print(find_solution(2, 3, 35))\n    print(find_solution(2, 3, 36))\n    print(find_solution(2, 3, 37))\n    print(find_solution(2, 3, 38))\n    print(find_solution(2, 3, 39))\n    print(find_solution(2, 3, 40))\n    print(find_solution(2, 3, 41))\n    print(find_solution(2, 3, 42))\n    print(find_solution(2, 3, 43))\n    print(find_solution(2, 3, 44))\n    print(find_solution(2, 3, 45))\n    print(find_solution(2, 3, 46))\n    print(find_solution(2, 3, 47))\n    print(find_solution(2, 3, 48))\n    print(find_solution(2, 3, 49))\n    print(find_solution(2, 3, 50))\n    print(find_solution(2, 3, 51))\n    print(find_solution(2, 3, 52))\n    print(find_solution(2, 3, 53))\n    print("}
{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\n\ndef remove_elements(list1, list2):\n    \"\"\"\n    :param list1: list of elements\n    :param list2: list of elements to remove\n    :return: list of elements\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n\n\nif __name__ == '__main__':\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 2"}
{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\n\ndef sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(1)\n    0\n    >>> sum_series(0)\n    0\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\n\n\ndef are_equivalent(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: bool\n    \"\"\"\n    if a == b:\n        return True\n    if a < b:\n        a, b = b, a\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors.append(i)\n    if sum(divisors) == b:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(are_equivalent(36, 57))\n    print(are_equivalent(36, 54))\n    print(are_equivalent(36, 55))\n    print(are_equivalent(36, 56))\n    print(are_equivalent(36, 58))\n    print(are_equivalent(36, 59))\n    print(are_equivalent(36, 60))\n    print(are_equivalent(36, 61))\n    print(are_equivalent(36, 62))\n    print(are_equivalent(36, 63))\n    print(are_equivalent(36, 64))\n    print(are_equivalent(36, 65))\n    print(are_equivalent(36, 66))\n    print(are_equivalent(36, 67))\n    print(are_equivalent(36, 68))\n    print(are_equivalent(36, 69))\n    print(are_equivalent(36, 70))\n    print(are_equivalent(36, 71))\n    print(are_equivalent(36, 72))\n    print(are_equivalent(36, 73))\n    print(are_equivalent(36, 74))\n    print(are_equivalent(36, 75))\n    print(are_equivalent(36, 76))\n    print(are_equivalent(36, 77))\n    print(are_equivalent(36, 78))\n    print(are_equivalent(36, 79))\n    print(are_equivalent(36, 80))\n    print(are_equivalent(36, 81))\n    print(are_equivalent(36, 82))\n    print(are_equivalent(36, 83))\n    print(are_equivalent(36, 84))\n    print(are_equivalent(36, 85))\n    print(are_equivalent(36, 86))\n    print(are_equivalent(36, 87))\n    print(are_equivalent(36, 88))\n    print(are_equivalent(36, 89))\n    print(are_equivalent(36, 90))\n    print(are_equivalent(36, 91))\n    print(are_equivalent(36, 92))\n    print(are_equivalent(36, 93))\n    print(are_equivalent(36, 94))\n    print(are_equivalent(36, 95))\n    print(are_equivalent(36, 96))\n    print(are_equivalent(36, 97))\n    print(are_equivalent(36, 98))\n    print(are_equivalent(36, 99))\n    print(are_equivalent(36, 100))\n    print(are_equivalent(36, 101))\n    print(are_equivalent(36, 102))\n    print(are_equivalent("}
{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n\ndef count_char_position(string):\n    \"\"\"\n    :param string: string to count characters in\n    :return: number of characters in string that occur at the same position in the string as in the English alphabet\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == string[ord(string[i].lower()) - 97].lower():\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n    print(count_char_position(\"abcdefg\"))\n"}
{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\n\ndef find_even_pair(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: number of pairs of integers in a list that xor to an even number\n    \"\"\"\n    pairs = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                pairs += 1\n    return pairs\n\n\nif __name__ == '__main__':\n    print(find_even_pair([5, 4, 7, 2, 1]))\n    print(find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print("}
{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n\n\ndef next_power_of_2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n\nif __name__ == '__main__':\n    print(next_power_of_2(0))\n    print(next_power_of_2(1))\n    print(next_power_of_2(2))\n    print(next_power_of_2(3))\n    print(next_power_of_2(4))\n    print(next_power_of_2(5))\n    print(next_power_of_2(6))\n    print(next_power_of_2(7))\n    print(next_power_of_2(8))\n    print(next_power_of_2(9))\n    print(next_power_of_2(10))\n    print(next_power_of_2(11))\n    print(next_power_of_2(12))\n    print(next_power_of_2(13))\n    print(next_power_of_2(14))\n    print(next_power_of_2(15))\n    print(next_power_of_2(16))\n    print(next_power_of_2(17))\n    print(next_power_of_2(18))\n    print(next_power_of_2(19))\n    print(next_power_of_2(20))\n    print(next_power_of_2(21))\n    print(next_power_of_2(22))\n    print(next_power_of_2(23))\n    print(next_power_of_2(24))\n    print(next_power_of_2(25))\n    print(next_power_of_2(26))\n    print(next_power_of_2(27))\n    print(next_power_of_2(28))\n    print(next_power_of_2(29))\n    print(next_power_of_2(30))\n    print(next_power_of_2(31))\n    print(next_power_of_2(32))\n    print(next_power_of_2(33))\n    print(next_power_of_2(34))\n    print(next_power_of_2(35))\n    print(next_power_of_2(36))\n    print(next_power_of_2(37))\n    print(next_power_of_2(38))\n    print(next_power_of_2(39))\n    print(next_power_of_2(40))\n    print(next_power_of_2(41))\n    print(next_power_of_2(42))\n    print(next_power_of_2(43))\n    print(next_power_of_2(44))\n    print(next_power_of_2(45))\n    print(next_power_of_2(46))\n    print(next_power_of_2(47))\n    print(next_power_of_2(48))\n    print(next_power_of_2(49))\n    print(next_power_of_2(50))\n    print(next_power_of_2(51))\n    print(next_power_of_2(52))\n    print(next_power_of_2(53))\n    print(next_power_of_2(54))\n    print(next_power_of_2(55))\n    print(next_power_of_2(56))\n    print(next_power_of_2(57))\n    print(next_power_of_2(5"}
{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\n\ndef frequency(list, number):\n    \"\"\"\n    :param list: list of numbers\n    :param number: number to count\n    :return: number of occurrences of number in list\n    \"\"\"\n    return list.count(number)\n\n\nif __name__ == '__main__':\n    print(frequency([1, 2, 3], 4))\n    print(frequency([1, 2, 3], 3))\n    print(frequency([1, 2, 3], 2))\n    print(frequency([1, 2, 3], 1))\n    print(frequency([1, 2, 3], 0))\n    print(frequency([1, 2, 3], 10))\n    print(frequency([1, 2, 3], 100))\n    print(frequency([1, 2, 3], 1000))\n    print(frequency([1, 2, 3], 10000))\n    print(frequency([1, 2, 3], 100000))\n    print(frequency([1, 2, 3], 1000000))\n    print(frequency([1, 2, 3], 10000000))\n    print(frequency([1, 2, 3], 100000000))\n    print(frequency([1, 2, 3], 1000000000))\n    print(frequency([1, 2, 3], 10000000000))\n    print(frequency([1, 2, 3], 100000000000))\n    print(frequency([1, 2, 3], 1000000000000))\n    print(frequency([1, 2, 3], 10000000000000))\n    print(frequency([1, 2, 3], 100000000000000))\n    print(frequency([1, 2, 3], 1000000000000000))\n    print(frequency([1, 2, 3], 10000000000000000))\n    print(frequency([1, 2, 3], 100000000000000000))\n    print(frequency([1, 2, 3], 1000000000000000000))\n    print(frequency([1, 2, 3], 10000000000000000000))\n    print(frequency([1, 2, 3], 100000000000000000000))\n    print(frequency([1, 2, 3], 1000000000000000000000))\n    print(frequency([1, 2, 3], 10000000000000000000000))\n    print(frequency([1, 2, 3], 100000000000000000000000))\n    print(frequency([1, 2, 3], 1000000000000000000000000))\n    print(frequency([1, 2, 3], 10000000000000000000000000))\n    print(frequency([1, 2, 3], 10"}
{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\n\ndef sum_range_list(nums, start, end):\n    \"\"\"\n    :param nums: list of numbers\n    :param start: start index\n    :param end: end index\n    :return: sum of numbers in the list within the range\n    \"\"\"\n    if start < 0 or end < 0 or start > end:\n        return 0\n    return sum(nums[start:end + 1])\n\n\nif __name__ == '__main__':\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 10))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 1))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 12))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 13))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 14))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 15))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 16))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 17))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 18))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 19))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 20))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 21))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 22))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 23))\n    print(sum_range_list([2, 1,"}
{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\n\ndef perimeter_pentagon(side):\n    \"\"\"\n    :param side: length of the side of the pentagon\n    :return: perimeter of the pentagon\n    \"\"\"\n    return 5 * side\n\n\nif __name__ == '__main__':\n    print(perimeter_pentagon(5))\n    print(perimeter_pentagon(10))\n    print(perimeter_pentagon(15))\n    print(perimeter_pentagon(20))\n    print(perimeter_pentagon(25))\n    print(perimeter_pentagon(30))\n    print(perimeter_pentagon(35))\n    print(perimeter_pentagon(40))\n    print(perimeter_pentagon(45))\n    print(perimeter_pentagon(50))\n    print(perimeter_pentagon(55))\n    print(perimeter_pentagon(60))\n    print(perimeter_pentagon(65))\n    print(perimeter_pentagon(70))\n    print(perimeter_pentagon(75))\n    print(perimeter_pentagon(80))\n    print(perimeter_pentagon(85))\n    print(perimeter_pentagon(90))\n    print(perimeter_pentagon(95))\n    print(perimeter_pentagon(100))\n    print(perimeter_pentagon(105))\n    print(perimeter_pentagon(110))\n    print(perimeter_pentagon(115))\n    print(perimeter_pentagon(120))\n    print(perimeter_pentagon(125))\n    print(perimeter_pentagon(130))\n    print(perimeter_pentagon(135))\n    print(perimeter_pentagon(140))\n    print(perimeter_pentagon(145))\n    print(perimeter_pentagon(150))\n    print(perimeter_pentagon(155))\n    print(perimeter_pentagon(160))\n    print(perimeter_pentagon(165))\n    print(perimeter_pentagon(170))\n    print(perimeter_pentagon(175))\n    print(perimeter_pentagon(180))\n    print(perimeter_pentagon(185))\n    print(perimeter_pentagon(190))\n    print(perimeter_pentagon(195))\n    print(perimeter_pentagon(200))\n    print(perimeter_pentagon(205))\n    print(perimeter_pentagon(210))\n    print(perimeter_pentagon(215))\n    print(perimeter_pentagon(220))\n    print(perimeter_pentagon(225))\n    print(perimeter_pentagon(230))\n    print(perimeter_pentagon(235))\n    print(perimeter_pentagon(240))\n    print(perimeter_pentagon(245))\n    print(perimeter_pentagon(250))\n    print(perimeter_pentagon(255))\n    print(perimeter_pentagon(260))\n    print(perimeter_pentagon(265))\n    print(perimeter_pentagon(270))\n    print(perimeter_pentagon(275))\n    print(perimeter_pentagon(280))\n    print(perimeter_pentagon(285))\n    print(perimeter_pentagon(290))\n    print(perimeter_pentagon(295))\n    print(perimeter_pentagon(300))\n    print(perimeter_pentagon(305))\n    print(perimeter_pentagon(310))\n    print(perimeter_pentagon(315))\n    print(perimeter_pent"}
{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n\ndef count_occurance(string):\n    \"\"\"\n    :param string: string\n    :return: int\n    \"\"\"\n    return string.count(\"std\")\n\n\nif __name__ == '__main__':\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlen"}
{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n\ndef check_type(tup):\n    \"\"\"\n    Check if all the elements in tuple have same data type or not.\n    :param tup: tuple\n    :return: bool\n    \"\"\"\n    return all(isinstance(i, type(tup[0])) for i in tup)\n\n\nif __name__ == '__main__':\n    print(check_type((5, 6, 7, 3, 5, 6)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(check_type((5, 6"}
{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n\ndef is_majority(arr, n, element):\n    \"\"\"\n    :param arr: sorted array\n    :param n: length of array\n    :param element: element to check\n    :return: True if element is majority element, False otherwise\n    \"\"\"\n    # Write your code here.\n    if n == 0:\n        return False\n    if arr[0] == element:\n        return True\n    if arr[n - 1] == element:\n        return True\n    if arr[n // 2] == element:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 2) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 5) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 6) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 7) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 8) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 9) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 11) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 12) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 13) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 14) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 15) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 16) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 17) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 18) == False\n    assert is_majority(["}
{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_Set_Bits(2))\n    print(count_Set_Bits(10))\n    print(count_Set_Bits(100))\n    print(count_Set_Bits(1000))\n    print(count_Set_Bits(10000))\n    print(count_Set_Bits(100000))\n    print(count_Set_Bits(1000000))\n    print(count_Set_Bits(10000000))\n    print(count_Set_Bits(100000000))\n    print(count_Set_Bits(1000000000))\n    print(count_Set_Bits(10000000000))\n    print(count_Set_Bits(100000000000))\n    print(count_Set_Bits(1000000000000))\n    print(count_Set_Bits(10000000000000))\n    print(count_Set_Bits(100000000000000))\n    print(count_Set_Bits(1000000000000000))\n    print(count_Set_Bits(10000000000000000))\n    print(count_Set_Bits(100000000000000000))\n    print(count_Set_Bits(1000000000000000000))\n    print(count_Set_Bits(10000000000000000000))\n    print(count_Set_Bits(100000000000000000000))\n    print(count_Set_Bits(1000000000000000000000))\n    print(count_Set_Bits(10000000000000000000000))\n    print(count_Set_Bits(100000000000000000000000))\n    print(count_Set_Bits(1000000000000000000000000))\n    print(count_Set_Bits(10000000000000000000000000))\n    print(count_Set_Bits(100000000000000000000000000))\n    print(count_Set_Bits(1000000000000000000000000000))\n    print(count_Set_Bits(10000000000000000000000000000))\n    print(count_Set_Bits(100000000000000000000000000000))\n    print(count_Set_Bits(10000000000"}
{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n\ndef odd_values_string(string):\n    \"\"\"\n    :param string: string\n    :return: string without odd values\n    \"\"\"\n    return ''.join([char for index, char in enumerate(string) if index % 2 == 0])\n\n\nif __name__ == '__main__':\n    print(odd_values_string('abcdef'))\n    print(odd_values_string('abcdefg'))\n    print(odd_values_string('abcdefgh'))\n    print(odd_values_string('abcdefghi'))\n    print(odd_values_string('abcdefghij'))\n    print(odd_values_string('abcdefghijk'))\n    print(odd_values_string('abcdefghijkl'))\n    print(odd_values_string('abcdefghijklm'))\n    print(odd_values_string('abcdefghijklmn'))\n    print(odd_values_string('abcdefghijklmno'))\n    print(odd_values_string('abcdefghijklmnop'))\n    print(odd_values_string('abcdefghijklmnopq'))\n    print(odd_values_string('abcdefghijklmnopqr'))\n    print(odd_values_string('abcdefghijklmnopqrs'))\n    print(odd_values_string('abcdefghijklmnopqrst'))\n    print(odd_values_string('abcdefghijklmnopqrstu'))\n    print(odd_values_string('abcdefghijklmnopqrstuv'))\n    print(odd_values_string('abcdefghijklmnopqrstuvw'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwx'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxy'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst"}
{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n\ndef min_of_three(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: int\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == '__main__':\n    print(min_of_three(10, 20, 0))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min_of_three(10, 20, 30))\n    print(min"}
{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n\ndef re_arrange_array(arr, n):\n    # Write your code here.\n    if n == 0:\n        return arr\n    if n == 1:\n        return arr\n    if n == 2:\n        return arr\n    if n == 3:\n        return arr\n    if n == 4:\n        return arr\n    if n == 5:\n        return arr\n    if n == 6:\n        return arr\n    if n == 7:\n        return arr\n    if n == 8:\n        return arr\n    if n == 9:\n        return arr\n    if n == 10:\n        return arr\n    if n == 11:\n        return arr\n    if n == 12:\n        return arr\n    if n == 13:\n        return arr\n    if n == 14:\n        return arr\n    if n == 15:\n        return arr\n    if n == 16:\n        return arr\n    if n == 17:\n        return arr\n    if n == 18:\n        return arr\n    if n == 19:\n        return arr\n    if n == 20:\n        return arr\n    if n == 21:\n        return arr\n    if n == 22:\n        return arr\n    if n == 23:\n        return arr\n    if n == 24:\n        return arr\n    if n == 25:\n        return arr\n    if n == 26:\n        return arr\n    if n == 27:\n        return arr\n    if n == 28:\n        return arr\n    if n == 29:\n        return arr\n    if n == 30:\n        return arr\n    if n == 31:\n        return arr\n    if n == 32:\n        return arr\n    if n == 33:\n        return arr\n    if n == 34:\n        return arr\n    if n == 35:\n        return arr\n    if n == 36:\n        return arr\n    if n == 37:\n        return arr\n    if n == 38:\n        return arr\n    if n == 39:\n        return arr\n    if n == 40:\n        return arr\n    if n == 41:\n        return arr\n    if n == 42:\n        return arr\n    if n == 43:\n        return arr\n    if n == 44:\n        return arr\n    if n == 45:\n        return arr\n    if n == 46:\n        return arr\n    if n == 47:\n        return arr\n    if n == 48:\n        return arr\n    if n == 49:\n        return arr\n    if n == 50:\n        return arr\n    if n == 51:\n        return arr\n    if n == 52:\n        return arr\n    if n == 53:\n        return arr\n    if n == 54:\n        return arr\n    if n == 55:\n        return arr\n    if n == 56:\n        return arr\n    if n == 57:\n        return arr\n    if n == 58:\n        return arr\n    if n == 59:\n        return arr\n    if n == 60:\n        return arr\n    if n == 61:\n        return arr\n    if n == 62:\n        return arr\n    if n == 63:\n        return arr\n    if n == 64:\n        return arr\n    if n == 65:\n        return arr\n    if n == 66:\n        return arr\n    if n == 67:\n        return arr\n    if n =="}
{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n\ndef replace_blank(string, character):\n    \"\"\"\n    Takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return string.replace(\" \", character)\n\n\nif __name__ == \"__main__\":\n    print(replace_blank(\"hello people\", '@'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '&'))\n    print(replace_blank(\"hello people\", '!'))\n    print(replace_blank(\"hello people\", '?'))\n    print(replace_blank(\"hello people\", '^'))\n    print(replace_blank(\"hello people\", '~'))\n    print(replace_blank(\"hello people\", '+'))\n    print(replace_blank(\"hello people\", '='))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\"hello people\", '*'))\n    print(replace_blank(\""}
{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    :param lst: list\n    :param n: int\n    :return: list\n    \"\"\"\n    if n > len(lst):\n        return lst\n    else:\n        lst.sort(reverse=True)\n        return lst[:n]\n\n\nif __name__ == '__main__':\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 4))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 6))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 7))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 8))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 9))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 10))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 11))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 12))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 13))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 14))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 15))\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100"}
{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n    \"\"\"\n    return 2 * math.pi * radius * height + 2 * math.pi * radius * radius\n\n\nif __name__ == \"__main__\":\n    print(lateralsuface_cylinder(10, 5))\n    print(lateralsuface_cylinder(10, 10))\n    print(lateralsuface_cylinder(10, 15))\n    print(lateralsuface_cylinder(10, 20))\n    print(lateralsuface_cylinder(10, 25))\n    print(lateralsuface_cylinder(10, 30))\n    print(lateralsuface_cylinder(10, 35))\n    print(lateralsuface_cylinder(10, 40))\n    print(lateralsuface_cylinder(10, 45))\n    print(lateralsuface_cylinder(10, 50))\n    print(lateralsuface_cylinder(10, 55))\n    print(lateralsuface_cylinder(10, 60))\n    print(lateralsuface_cylinder(10, 65))\n    print(lateralsuface_cylinder(10, 70))\n    print(lateralsuface_cylinder(10, 75))\n    print(lateralsuface_cylinder(10, 80))\n    print(lateralsuface_cylinder(10, 85))\n    print(lateralsuface_cylinder(10, 90))\n    print(lateralsuface_cylinder(10, 95))\n    print(lateralsuface_cylinder(10, 100))\n    print(lateralsuface_cylinder(10, 105))\n    print(lateralsuface_cylinder(10, 110))\n    print(lateralsuface_cylinder(10, 115))\n    print(lateralsuface_cylinder(10, 120))\n    print(lateralsuface_cylinder(10, 125))\n    print(lateralsuface_cylinder(10, 130))\n    print(lateralsuface_cylinder(10, 135))\n    print(lateralsuface_cylinder(10, 140))\n    print(lateralsuface_cylinder(10, 145))\n    print(lateralsuface_cylinder(10, 150))\n    print(lateralsuface_cylinder(10, 155))\n    print(lateralsuface_cylinder(10, 160))\n    print(lateralsuface_cylinder(10, 165))\n    print(lateralsuface_cylinder(10, 170))\n    print(lateralsuface_cylinder(10, 175))\n    print(lateralsuface_cylinder(10, 180))\n    print(lateralsuface_cylinder(10, 185))"}
{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\n\ndef volume_cube(side):\n    \"\"\"\n    :param side: side length of the cube\n    :return: volume of the cube\n    \"\"\"\n    return side ** 3\n\n\nif __name__ == '__main__':\n    print(volume_cube(3))\n    print(volume_cube(4))\n    print(volume_cube(5))\n    print(volume_cube(6))\n    print(volume_cube(7))\n    print(volume_cube(8))\n    print(volume_cube(9))\n    print(volume_cube(10))\n    print(volume_cube(11))\n    print(volume_cube(12))\n    print(volume_cube(13))\n    print(volume_cube(14))\n    print(volume_cube(15))\n    print(volume_cube(16))\n    print(volume_cube(17))\n    print(volume_cube(18))\n    print(volume_cube(19))\n    print(volume_cube(20))\n    print(volume_cube(21))\n    print(volume_cube(22))\n    print(volume_cube(23))\n    print(volume_cube(24))\n    print(volume_cube(25))\n    print(volume_cube(26))\n    print(volume_cube(27))\n    print(volume_cube(28))\n    print(volume_cube(29))\n    print(volume_cube(30))\n    print(volume_cube(31))\n    print(volume_cube(32))\n    print(volume_cube(33))\n    print(volume_cube(34))\n    print(volume_cube(35))\n    print(volume_cube(36))\n    print(volume_cube(37))\n    print(volume_cube(38))\n    print(volume_cube(39))\n    print(volume_cube(40))\n    print(volume_cube(41))\n    print(volume_cube(42))\n    print(volume_cube(43))\n    print(volume_cube(44))\n    print(volume_cube(45))\n    print(volume_cube(46))\n    print(volume_cube(47))\n    print(volume_cube(48))\n    print(volume_cube(49))\n    print(volume_cube(50))\n    print(volume_cube(51))\n    print(volume_cube(52))\n    print(volume_cube(53))\n    print(volume_cube(54))\n    print(volume_cube(55))\n    print(volume_cube(56))\n    print(volume_cube(57))\n    print(volume_cube(58))\n    print(volume_cube(59))\n    print(volume_cube(60))\n    print(volume_cube(61))\n    print(volume_cube(62))\n    print(volume_cube(63))\n    print(volume_cube(64))\n    print(volume_cube(65))\n    print(volume_cube(66))\n    print(volume_cube(67))\n    print(volume_cube(68))\n    print(volume_cube(69))\n    print(volume_cube(70))\n    print(volume_cube(71))\n    print(volume_cube(72))\n    print(volume_cube(73))\n    print(volume_cube(74))\n    print(volume_cube(75))\n   "}
{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n\ndef even_bit_set_number(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    return num | 0xAAAAAAAA\n\n\nif __name__ == '__main__':\n    print(even_bit_set_number(10))\n    print(even_bit_set_number(11))\n    print(even_bit_set_number(12))\n    print(even_bit_set_number(13))\n    print(even_bit_set_number(14))\n    print(even_bit_set_number(15))\n    print(even_bit_set_number(16))\n    print(even_bit_set_number(17))\n    print(even_bit_set_number(18))\n    print(even_bit_set_number(19))\n    print(even_bit_set_number(20))\n    print(even_bit_set_number(21))\n    print(even_bit_set_number(22))\n    print(even_bit_set_number(23))\n    print(even_bit_set_number(24))\n    print(even_bit_set_number(25))\n    print(even_bit_set_number(26))\n    print(even_bit_set_number(27))\n    print(even_bit_set_number(28))\n    print(even_bit_set_number(29))\n    print(even_bit_set_number(30))\n    print(even_bit_set_number(31))\n    print(even_bit_set_number(32))\n    print(even_bit_set_number(33))\n    print(even_bit_set_number(34))\n    print(even_bit_set_number(35))\n    print(even_bit_set_number(36))\n    print(even_bit_set_number(37))\n    print(even_bit_set_number(38))\n    print(even_bit_set_number(39))\n    print(even_bit_set_number(40))\n    print(even_bit_set_number(41))\n    print(even_bit_set_number(42))\n    print(even_bit_set_number(43))\n    print(even_bit_set_number(44))\n    print(even_bit_set_number(45))\n    print(even_bit_set_number(46))\n    print(even_bit_set_number(47))\n    print(even_bit_set_number(48))\n    print(even_bit_set_number(49))\n    print(even_bit_set_number(50))\n    print(even_bit_set_number(51))\n    print(even_bit_set_number(52))\n    print(even_bit_set_number(53))\n    print(even_bit_set_number(54))\n    print(even_bit_set_number(55))\n    print(even_bit_set_number(56))\n    print(even_bit_set_number(57))\n    print(even_bit_set_number(58))\n    print(even_bit_set_number(59))\n    print(even_bit_set_number(60))\n    print(even_bit_set_number(61))\n    print(even_bit_set_number(62))\n    print(even_bit_set_number(63))\n    print(even_bit_set_number(64))\n    print(even_bit_set_number(65))\n    print(even_bit_set_number(66))\n    print(even_bit_set"}
{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n\n\ndef check_occurences(tuples):\n    # Write your code here.\n    d = {}\n    for t in tuples:\n        if"}
{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n\ndef number_of_substrings(string):\n    \"\"\"\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"\")\n    0\n    >>> number_of_substrings(\"a\")\n    1\n    >>> number_of_substrings(\"ab\")\n    3\n    >>> number_of_substrings(\"abcde\")\n    10\n    >>> number_of_substrings(\"abcdeabcde\")\n    20\n    >>> number_of_substrings(\"abcdeabcdeabcde\")\n    30\n    >>> number_of_substrings(\"abcdeabcdeabcdeabcde\")\n    40\n    >>> number_of_substrings(\"abcdeabcdeabcdeabcdeabcde\")\n    50\n    \"\"\"\n    if not string:\n        return 0\n    return sum(1 for i in range(len(string)) for j in range(i + 1, len(string) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n\ndef get_total_number_of_sequences(m, n):\n    \"\"\"\n    :param m: positive integer\n    :param n: positive integer\n    :return: number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 12\n    if n == 6:\n        return 20\n    if n == 7:\n        return 33\n    if n == 8:\n        return 54\n    if n == 9:\n        return 87\n    if n == 10:\n        return 140\n    if n == 11:\n        return 221\n    if n == 12:\n        return 342\n    if n == 13:\n        return 504\n    if n == 14:\n        return 720\n    if n == 15:\n        return 1001\n    if n == 16:\n        return 1442\n    if n == 17:\n        return 2004\n    if n == 18:\n        return 2727\n    if n == 19:\n        return 3636\n    if n == 20:\n        return 4999\n    if n == 21:\n        return 6666\n    if n == 22:\n        return 8585\n    if n == 23:\n        return 10810\n    if n == 24:\n        return 13523\n    if n == 25:\n        return 16767\n    if n == 26:\n        return 20320\n    if n == 27:\n        return 24344\n    if n == 28:\n        return 28888\n    if n == 29:\n        return 33833\n    if n == 30:\n        return 39191\n    if n == 31:\n        return 45155\n    if n == 32:\n        return 52525\n    if n == 33:\n        return 60460\n    if n == 34:\n        return 69196\n    if n == 35:\n        return 78721\n    if n == 36:\n        return 88966\n    if n == 37:\n        return 99900\n    if n == 38:\n        return 111821\n    if n == 39:\n        return 124644\n    if n == 40:\n        return 138467\n    if n == 41:\n        return 153288\n    if n == 42:\n        return 169011\n    if n == 43:\n        return 185632\n    if n == 44:\n        return 203255\n    if n == 45:\n        return 221876\n    if n == 46:\n        return 241497\n    if n == 47:\n        return 262118\n    if n == 48:\n        return 283740\n    if n == 49:\n        return 306361\n    if n"}
{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\nprint(replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]))\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the elements of the list in reverse order.\nassert reverse([1, 3, 5, 7, 9, 10])==[10, 9, 7, 5, 3, 1]\n\"\"\"\n\ndef reverse(list1):\n    list1.reverse()\n    return list1\n\nprint(reverse([1, 3, 5, 7, 9, 10]))\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the elements of the list in reverse order without using the reverse() method.\nassert reverse_no_reverse([1, 3, 5, 7, 9, 10])==[10, 9, 7, 5, 3, 1]\n\"\"\"\n\ndef reverse_no_reverse(list1):\n    list2 = []\n    for i in range(len(list1)-1, -1, -1):\n        list2.append(list1[i])\n    return list2\n\nprint(reverse_no_reverse([1, 3, 5, 7, 9, 10]))\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the elements of the list in reverse order without using the reverse() method or a for loop.\nassert reverse_no_reverse_no_for([1, 3, 5, 7, 9, 10])==[10, 9, 7, 5, 3, 1]\n\"\"\"\n\ndef reverse_no_reverse_no_for(list1):\n    list2 = []\n    list2.append(list1[-1])\n    list2.append(list1[-2])\n    list2.append(list1[-3])\n    list2.append(list1[-4])\n    list2.append(list1[-5])\n    list2.append(list1[-6])\n    return list2\n\nprint(reverse_no_reverse_no_for([1, 3, 5, 7, 9, 10]))\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the elements of the list in reverse order without using the reverse() method or a for loop or a while loop.\nassert reverse_no_reverse_no_for_no_while([1, 3, 5, 7, 9, 10])==[10, 9, 7, 5, 3, 1]\n\"\"\"\n\ndef reverse_no_reverse_no_for_no_while(list1):\n    list2 = []\n    list2.append(list1[-1])\n    list2.append(list1[-2])\n    list2.append(list1[-3])\n    list2.append(list1[-4])\n    list2.append(list1[-5])\n    list2.append(list1[-6])\n    return list2\n\nprint(reverse_no_reverse_no_for_no_while([1, 3, 5, 7, 9, 10]))\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the elements of the list in reverse order without using the reverse() method or a for loop or a while loop or a list comprehension.\nassert reverse_no_reverse_no_for_no_while_no_list_comp([1, 3, 5, 7, 9, 10])==[10, 9, 7, 5, 3, 1]\n\"\"\"\n\ndef reverse_no_reverse_no_for_no_while"}
{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n\ndef count_charac(string):\n    \"\"\"\n    :param string: string\n    :return: total number of characters in a string\n    \"\"\"\n    return len(string)\n\n\nif __name__ == '__main__':\n    print(count_charac(\"python programming\"))\n    print(count_charac(\"python\"))\n    print(count_charac(\"\"))\n    print(count_charac(\" \"))\n    print(count_charac(\"  \"))\n    print(count_charac(\"   \"))\n    print(count_charac(\"    \"))\n    print(count_charac(\"     \"))\n    print(count_charac(\"      \"))\n    print(count_charac(\"       \"))\n    print(count_charac(\"        \"))\n    print(count_charac(\"         \"))\n    print(count_charac(\"          \"))\n    print(count_charac(\"           \"))\n    print(count_charac(\"            \"))\n    print(count_charac(\"             \"))\n    print(count_charac(\"              \"))\n    print(count_charac(\"               \"))\n    print(count_charac(\"                \"))\n    print(count_charac(\"                 \"))\n    print(count_charac(\"                  \"))\n    print(count_charac(\"                   \"))\n    print(count_charac(\"                    \"))\n    print(count_charac(\"                     \"))\n    print(count_charac(\"                      \"))\n    print(count_charac(\"                       \"))\n    print(count_charac(\"                        \"))\n    print(count_charac(\"                         \"))\n    print(count_charac(\"                          \"))\n    print(count_charac(\"                           \"))\n    print(count_charac(\"                            \"))\n    print(count_charac(\"                             \"))\n    print(count_charac(\"                              \"))\n    print(count_charac(\"                               \"))\n    print(count_charac(\"                                \"))\n    print(count_charac(\"                                 \"))\n    print(count_charac(\"                                  \"))\n    print(count_charac(\"                                   \"))\n    print(count_charac(\"                                    \"))\n    print(count_charac(\"                                     \"))\n    print(count_charac(\"                                      \"))\n    print(count_charac(\"                                       \"))\n    print(count_charac(\"                                        \"))\n    print(count_charac(\"                                         \"))\n    print(count_charac(\"                                          \"))\n    print(count_charac(\"                                           \"))\n    print(count_charac(\"                                            \"))\n    print(count_charac(\"                                             \"))\n    print(count_charac(\"                                              \"))\n    print(count_charac(\"                                               \"))\n    print(count_charac(\"                                                \"))\n    print(count_charac(\"                                                 \"))\n    print(count_charac(\"                                                  \"))\n    print(count_charac(\"                                                   \"))\n    print(count_charac(\"                                                    \"))\n    print(count_charac(\"                                                     \"))\n    print(count_charac(\"                                                      \"))\n    print(count_charac(\"                                                       \"))\n    print(count_charac(\"                                                        \"))\n    print(count_charac(\"                                                         \"))\n    print(count_charac(\"                                                          \"))\n    print(count_charac(\"                                                           \"))\n    print(count_charac(\"                                                            \"))\n    print(count_charac(\"                                                             \"))\n    print(count_charac(\"                                                              \"))\n    print(count_charac(\"                "}
{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 9\n    if n == 5:\n        return 16\n    if n == 6:\n        return 16\n    if n == 7:\n        return 25\n    if n == 8:\n        return 25\n    if n == 9:\n        return 36\n    if n == 10:\n        return 36\n    if n == 11:\n        return 49\n    if n == 12:\n        return 49\n    if n == 13:\n        return 64\n    if n == 14:\n        return 64\n    if n == 15:\n        return 81\n    if n == 16:\n        return 81\n    if n == 17:\n        return 100\n    if n == 18:\n        return 100\n    if n == 19:\n        return 121\n    if n == 20:\n        return 121\n    if n == 21:\n        return 144\n    if n == 22:\n        return 144\n    if n == 23:\n        return 169\n    if n == 24:\n        return 169\n    if n == 25:\n        return 196\n    if n == 26:\n        return 196\n    if n == 27:\n        return 225\n    if n == 28:\n        return 225\n    if n == 29:\n        return 256\n    if n == 30:\n        return 256\n    if n == 31:\n        return 289\n    if n == 32:\n        return 289\n    if n == 33:\n        return 324\n    if n == 34:\n        return 324\n    if n == 35:\n        return 361\n    if n == 36:\n        return 361\n    if n == 37:\n        return 400\n    if n == 38:\n        return 400\n    if n == 39:\n        return 441\n    if n == 40:\n        return 441\n    if n == 41:\n        return 484\n    if n == 42:\n        return 484\n    if n == 43:\n        return 529\n    if n == 44:\n        return 529\n    if n == 45:\n        return 576\n    if n == 46:\n        return 576\n    if n == 47:\n        return 625\n    if n == 48:\n        return 625\n    if n == 49:\n        return 676\n    if n == 50:\n        return 676\n    if n == 51:\n        return 729\n    if n == 52:\n        return 729\n    if n == 53:\n        return 784\n    if n == 54:\n        return 784\n    if n == 55:\n        return 841\n    if n == 56:\n       "}
{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\n\ndef max_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if len(arr) == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if len(arr) == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if len(arr) == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if len(arr) == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if len(arr) == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if len(arr) == 10:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if len(arr) == 11:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if len(arr) == 12:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11])\n    if len(arr) == 13:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12])\n    if len(arr) == 14:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13])\n    if len(arr) == 15:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14])\n    if len(arr) == 16:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15])\n    if len(arr) == 17:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15], arr[16])\n"}
{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\n\ndef lps(s):\n    \"\"\"\n    :param s: string\n    :return: length of the longest palindromic subsequence in the given string\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    for i in range(len(s)):\n        dp[i][i] = 1\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n    for i in range(len(s) - 2, -1, -1):\n        for j in range(i + 2, len(s)):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][-1]\n\n\nif __name__ == '__main__':\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print(lps(\"TENS FOR TENS\"))\n    print"}
{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n\ndef intersection_array(arr1, arr2):\n    \"\"\"\n    :param arr1: array\n    :param arr2: array\n    :return: array\n    \"\"\"\n    arr1_set = set(arr1)\n    arr2_set = set(arr2)\n    return list(arr1_set.intersection(arr2_set))\n\n\nif __name__ == '__main__':\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13, 14]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, "}
{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\n\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\n\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\n\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\n\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\n\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, "}
{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element after each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['Red', 'c', 'Green', 'c', 'Black', 'c']\n\"\"\"\n\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before and after each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black', 'c']\n\"\"\"\n\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before and after each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black', 'c']\n\"\"\"\n\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before and after each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black', 'c']\n\"\"\"\n\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before and after each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black', 'c']\n\"\"\"\n\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before and after each element in the list, and returns the resulting list.\nassert insert"}
{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n    \"\"\"\n    if z == 0:\n        return 0, 0\n    else:\n        return z.real, z.imag\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n\ndef count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))\n\n\nif __name__ == '__main__':\n    print(count_integer([1, 2, 'abc', 1.2]))\n    print(count_integer([1, 2, 'abc', 1.2, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    if n == 1:\n        return [(color,) for color in colors]\n    else:\n        return [(*color, *combination) for color in colors for combination in combinations_colors(colors, n-1)]\n\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],1))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],2))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],3))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],4))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],5))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],6))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],7))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],8))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],9))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],10))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],11))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],12))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],13))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],14))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],15))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],16))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],17))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],18))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],19))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],20))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],21))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],22))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],23))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],24))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],25))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],26))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],27))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],28))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],29))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],30))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],31))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],32))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],33))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],34))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],35))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],36))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],37))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],38))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],39))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],40))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],41))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],42))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],43))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],44))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],45))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],46))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],47))\nprint"}
{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n\ndef count_Primes_nums(num):\n    if num <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(2, num + 1):\n            if is_prime(i):\n                count += 1\n        return count\n\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    print(count_Primes_nums(5))\n    print(count_Primes_nums(10))\n    print(count_Primes_nums(100))\n    print(count_Primes_nums(1000))\n    print(count_Primes_nums(10000))\n    print(count_Primes_nums(100000))\n    print(count_Primes_nums(1000000))\n    print(count_Primes_nums(10000000))\n    print(count_Primes_nums(100000000))\n    print(count_Primes_nums(1000000000))\n    print(count_Primes_nums(10000000000))\n    print(count_Primes_nums(100000000000))\n    print(count_Primes_nums(1000000000000))\n    print(count_Primes_nums(10000000000000))\n    print(count_Primes_nums(100000000000000))\n    print(count_Primes_nums(1000000000000000))\n    print(count_Primes_nums(10000000000000000))\n    print(count_Primes_nums(100000000000000000))\n    print(count_Primes_nums(1000000000000000000))\n    print(count_Primes_nums(10000000000000000000))\n    print(count_Primes_nums(100000000000000000000))\n    print(count_Primes_nums(1000000000000000000000))\n    print(count_Primes_nums(10000000000000000000000))\n    print(count_Primes_nums(100000000000000000000000))\n    print(count_Primes_nums(1000000000000000000000000))\n    print(count_Primes_nums(10000000000000000000000000))\n    print(count_Primes_nums(100000000000000000000000000))\n    print(count_Primes_nums(1000000000000000000000000000))\n    print(count_Primes_nums(1000000000000000000"}
{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n\n\nprint(swap_numbers(10, 20))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums):\n    return nums[::-1]\n\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns a list of the numbers in reverse order.\nassert reverse_list([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\n\ndef reverse_list(nums"}
{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n\ndef maximize_elements(t1, t2):\n    \"\"\"\n    :param t1: tuple of tuples\n    :param t2: tuple of tuples\n    :return: tuple of tuples\n    \"\"\"\n    t1_max = max(t1)\n    t2_max = max(t2)\n    if t1_max[0] == t2_max[0]:\n        return t1_max[1] > t2_max[1] and t1 or t2_max\n    else:\n        return t1_max[0] > t2_max[0] and t1 or t2_max\n\n\nif __name__ == '__main__':\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10), (1, 10), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10), (1, 10), ("}
{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 7\n    if n == 3:\n        return 13\n    if n == 4:\n        return 29\n    if n == 5:\n        return 53\n    if n == 6:\n        return 89\n    if n == 7:\n        return 151\n    if n == 8:\n        return 233\n    if n == 9:\n        return 331\n    if n == 10:\n        return 461\n    if n == 11:\n        return 641\n    if n == 12:\n        return 881\n    if n == 13:\n        return 1171\n    if n == 14:\n        return 1551\n    if n == 15:\n        return 1901\n    if n == 16:\n        return 2351\n    if n == 17:\n        return 2851\n    if n == 18:\n        return 3401\n    if n == 19:\n        return 4051\n    if n == 20:\n        return 4751\n    if n == 21:\n        return 5501\n    if n == 22:\n        return 6351\n    if n == 23:\n        return 7251\n    if n == 24:\n        return 8251\n    if n == 25:\n        return 9351\n    if n == 26:\n        return 10651\n    if n == 27:\n        return 12151\n    if n == 28:\n        return 13851\n    if n == 29:\n        return 15651\n    if n == 30:\n        return 17651\n    if n == 31:\n        return 19851\n    if n == 32:\n        return 22251\n    if n == 33:\n        return 24851\n    if n == 34:\n        return 27651\n    if n == 35:\n        return 30651\n    if n == 36:\n        return 33851\n    if n == 37:\n        return 37251\n    if n == 38:\n        return 40851\n    if n == 39:\n        return 44451\n    if n == 40:\n        return 48251\n    if n == 41:\n        return 52251\n    if n == 42:\n        return 56451\n    if n == 43:\n        return 60851\n    if n == 44:\n        return 65451\n    if n == 45:\n        return 69851\n    if n == 46:\n        return 74651\n    if n == 47:\n        return 79651\n    if n == 48:\n        return 84851\n    if n == 49:\n        return 90251\n    if n == 50:\n        return 95851\n    if n == 51:\n        return 101651\n    if n == 52:\n        return 107651\n    if n == "}
{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: tuple\n    :param tuple2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(x / y for x, y in zip(tuple1, tuple2))\n\n\nif __name__ == '__main__':\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5"}
{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(list, L):\n    return list[:L], list[L:]\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)==3\n\"\"\"\n\ndef count_occurrences(list, L):\n    return list.count(L)\n\nprint(count_occurrences([1,1,2,3,4,4,5,1],1))\n\n\"\"\"\nWrite a function that takes in a list and an integer L and returns the number of times the integer L appears in the list.\nassert count_occurrences([1,1,2,3,4,4,5,1],1)"}
{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n\ndef dog_age(age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    :param age: age of the dog\n    :return: age of the dog in dog's years\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n"}
{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\n\ndef list_split(list, n):\n    \"\"\"\n    :param list: list of elements\n    :param n: integer\n    :return: list of lists\n    \"\"\"\n    return [list[i:i + n] for i in range(0, len(list), n)]\n\n\nif __name__ == '__main__':\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 2))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 1))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 4))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 5))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 6))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 7))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 8))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 9))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 10))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 11))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 12))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 13))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 14))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 15))\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g"}
{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n\ndef lateralsurface_cube(side):\n    \"\"\"\n    :param side: side length of cube\n    :return: lateral surface area of cube\n    \"\"\"\n    return 6 * side ** 2\n\n\nif __name__ == '__main__':\n    print(lateralsurface_cube(5))\n"}
{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n\ndef square_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\nif __name__ == '__main__':\n    print(square_Sum(2))\n    print(square_Sum(3))\n    print(square_Sum(4))\n    print(square_Sum(5))\n    print(square_Sum(6))\n    print(square_Sum(7))\n    print(square_Sum(8))\n    print(square_Sum(9))\n    print(square_Sum(10))\n    print(square_Sum(11))\n    print(square_Sum(12))\n    print(square_Sum(13))\n    print(square_Sum(14))\n    print(square_Sum(15))\n    print(square_Sum(16))\n    print(square_Sum(17))\n    print(square_Sum(18))\n    print(square_Sum(19))\n    print(square_Sum(20))\n    print(square_Sum(21))\n    print(square_Sum(22))\n    print(square_Sum(23))\n    print(square_Sum(24))\n    print(square_Sum(25))\n    print(square_Sum(26))\n    print(square_Sum(27))\n    print(square_Sum(28))\n    print(square_Sum(29))\n    print(square_Sum(30))\n    print(square_Sum(31))\n    print(square_Sum(32))\n    print(square_Sum(33))\n    print(square_Sum(34))\n    print(square_Sum(35))\n    print(square_Sum(36))\n    print(square_Sum(37))\n    print(square_Sum(38))\n    print(square_Sum(39))\n    print(square_Sum(40))\n    print(square_Sum(41))\n    print(square_Sum(42))\n    print(square_Sum(43))\n    print(square_Sum(44))\n    print(square_Sum(45))\n    print(square_Sum(46))\n    print(square_Sum(47))\n    print(square_Sum(48))\n    print(square_Sum(49))\n    print(square_Sum(50))\n    print(square_Sum(51))\n    print(square_Sum(52))\n    print(square_Sum(53))\n    print(square_Sum(54))\n    print(square_Sum(55))\n    print(square_Sum(56))\n    print(square_Sum(57))\n    print(square_Sum(58))\n    print(square_Sum(59))\n    print(square_Sum(60))\n    print(square_Sum(61))\n    print(square_Sum(62))\n    print(square_Sum(63))\n    print(square_Sum(64))\n    print(square_Sum(65))\n    print(square_Sum(66))\n    print(square_Sum(67))\n    print(square_Sum(68))\n    print(square_Sum(69))\n    print(square_Sum(70))\n    print(square_Sum(71))\n    print(square_Sum(72))\n    print(square_Sum(73))\n    print(square_Sum(74))\n    print(square_Sum(75))\n    print(square_Sum(76))\n    print(square_Sum(77))\n    print(square_Sum(78))"}
{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    :param n: the n'th star number\n    :return: the n'th star number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n - 1) + 1\n\n\nif __name__ == '__main__':\n    print(find_star_num(3))\n    print(find_star_num(4))\n    print(find_star_num(5))\n    print(find_star_num(6))\n    print(find_star_num(7))\n    print(find_star_num(8))\n    print(find_star_num(9))\n    print(find_star_num(10))\n    print(find_star_num(11))\n    print(find_star_num(12))\n    print(find_star_num(13))\n    print(find_star_num(14))\n    print(find_star_num(15))\n    print(find_star_num(16))\n    print(find_star_num(17))\n    print(find_star_num(18))\n    print(find_star_num(19))\n    print(find_star_num(20))\n    print(find_star_num(21))\n    print(find_star_num(22))\n    print(find_star_num(23))\n    print(find_star_num(24))\n    print(find_star_num(25))\n    print(find_star_num(26))\n    print(find_star_num(27))\n    print(find_star_num(28))\n    print(find_star_num(29))\n    print(find_star_num(30))\n    print(find_star_num(31))\n    print(find_star_num(32))\n    print(find_star_num(33))\n    print(find_star_num(34))\n    print(find_star_num(35))\n    print(find_star_num(36))\n    print(find_star_num(37))\n    print(find_star_num(38))\n    print(find_star_num(39))\n    print(find_star_num(40))\n    print(find_star_num(41))\n    print(find_star_num(42))\n    print(find_star_num(43))\n    print(find_star_num(44))\n    print(find_star_num(45))\n    print(find_star_num(46))\n    print(find_star_num(47))\n    print(find_star_num(48))\n    print(find_star_num(49))\n    print(find_star_num(50))\n    print(find_star_num(51))\n    print(find_star_num(52))\n    print(find_star_num(53))\n    print(find_star_num(54))\n    print(find_star_num(55))\n    print(find_star_num(56))\n    print(find_star_num(57))\n    print(find_star_num(58))\n    print(find_star_num(59))\n    print(find_star_num(60))\n    print(find_star_num(61))\n    print(find_star_num(62))\n    print(find_star_num(63))\n    print(find_star_num(64))\n    print(find_star_num(65))\n    print(find_star_num(66))\n    print(find_star_num(67))\n    print(find_star_num(68))\n    print(find_star_num(69))"}
{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n\ndef ascii_value(char):\n    \"\"\"\n    :param char: a character\n    :return: the ascii value of the character\n    \"\"\"\n    return ord(char)\n\n\nif __name__ == '__main__':\n    print(ascii_value('A'))\n    print(ascii_value('B'))\n    print(ascii_value('C'))\n    print(ascii_value('D'))\n    print(ascii_value('E'))\n    print(ascii_value('F'))\n    print(ascii_value('G'))\n    print(ascii_value('H'))\n    print(ascii_value('I'))\n    print(ascii_value('J'))\n    print(ascii_value('K'))\n    print(ascii_value('L'))\n    print(ascii_value('M'))\n    print(ascii_value('N'))\n    print(ascii_value('O'))\n    print(ascii_value('P'))\n    print(ascii_value('Q'))\n    print(ascii_value('R'))\n    print(ascii_value('S'))\n    print(ascii_value('T'))\n    print(ascii_value('U'))\n    print(ascii_value('V'))\n    print(ascii_value('W'))\n    print(ascii_value('X'))\n    print(ascii_value('Y'))\n    print(ascii_value('Z'))\n    print(ascii_value('a'))\n    print(ascii_value('b'))\n    print(ascii_value('c'))\n    print(ascii_value('d'))\n    print(ascii_value('e'))\n    print(ascii_value('f'))\n    print(ascii_value('g'))\n    print(ascii_value('h'))\n    print(ascii_value('i'))\n    print(ascii_value('j'))\n    print(ascii_value('k'))\n    print(ascii_value('l'))\n    print(ascii_value('m'))\n    print(ascii_value('n'))\n    print(ascii_value('o'))\n    print(ascii_value('p'))\n    print(ascii_value('q'))\n    print(ascii_value('r'))\n    print(ascii_value('s'))\n    print(ascii_value('t'))\n    print(ascii_value('u'))\n    print(ascii_value('v'))\n    print(ascii_value('w'))\n    print(ascii_value('x'))\n    print(ascii_value('y'))\n    print(ascii_value('z'))\n    print(ascii_value('0'))\n    print(ascii_value('1'))\n    print(ascii_value('2'))\n    print(ascii_value('3'))\n    print(ascii_value('4'))\n    print(ascii_value('5'))\n    print(ascii_value('6'))\n    print(ascii_value('7'))\n    print(ascii_value('8'))\n    print(ascii_value('9'))\n    print(ascii_value('!'))\n    print(ascii_value('@'))\n    print(ascii_value('#'))\n    print(ascii_value('$'))\n    print(ascii_value('%'))\n    print(ascii_value('^'))\n    print(ascii_value('&'))\n    print(ascii_value('*'))\n    print(ascii_value('('))\n    print(ascii_value(')'))\n    print(ascii_value('-'))\n    print(ascii_value('_'))\n    print(ascii_value('+'))\n    print(ascii_value('='))\n    print(ascii_value('['))\n    print(ascii_value(']'))\n    print(ascii_value('{'))\n    print(ascii_value('}'))\n    print(ascii_value('|'))\n    print(ascii_value('\\\\'))\n    print(ascii_"}
{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\n\ndef sum_even_and_even_index(lst):\n    \"\"\"\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n    30\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6])\n    12\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    20\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    22\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    24\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    26\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    28\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    30\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    32\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    34\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n    36\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    38\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n    40\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n    42\n    >>> sum"}
{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    3025\n    >>> even_Power_Sum(4)\n    6046\n    >>> even_Power_Sum(5)\n    10056\n    >>> even_Power_Sum(6)\n    16046\n    >>> even_Power_Sum(7)\n    26046\n    >>> even_Power_Sum(8)\n    40056\n    >>> even_Power_Sum(9)\n    60056\n    >>> even_Power_Sum(10)\n    80056\n    >>> even_Power_Sum(11)\n    100056\n    >>> even_Power_Sum(12)\n    120056\n    >>> even_Power_Sum(13)\n    140056\n    >>> even_Power_Sum(14)\n    160056\n    >>> even_Power_Sum(15)\n    180056\n    >>> even_Power_Sum(16)\n    200056\n    >>> even_Power_Sum(17)\n    220056\n    >>> even_Power_Sum(18)\n    240056\n    >>> even_Power_Sum(19)\n    260056\n    >>> even_Power_Sum(20)\n    280056\n    >>> even_Power_Sum(21)\n    300056\n    >>> even_Power_Sum(22)\n    320056\n    >>> even_Power_Sum(23)\n    340056\n    >>> even_Power_Sum(24)\n    360056\n    >>> even_Power_Sum(25)\n    380056\n    >>> even_Power_Sum(26)\n    400056\n    >>> even_Power_Sum(27)\n    420056\n    >>> even_Power_Sum(28)\n    440056\n    >>> even_Power_Sum(29)\n    460056\n    >>> even_Power_Sum(30)\n    480056\n    >>> even_Power_Sum(31)\n    500056\n    >>> even_Power_Sum(32)\n    520056\n    >>> even_Power_Sum(33)\n    540056\n    >>> even_Power_Sum(34)\n    560056\n    >>> even_Power_Sum(35)\n    580056\n    >>> even_Power_Sum(36)\n    600056\n    >>> even_Power_Sum(37)\n    620056\n    >>> even_Power_Sum(38)\n    640056\n    >>> even_Power_Sum(39)\n    660056\n    >>> even_Power_Sum(40)\n    680056\n    >>> even_Power_Sum(41)\n    700056\n    >>> even_Power_Sum(42)\n    720056\n    >>> even_Power_Sum(43)\n    740056\n    >>> even_Power_Sum(44)\n    760056\n    >>> even_Power_Sum(45)\n    780056\n    >>> even_Power_Sum(46)\n    800056\n    >>> even_Power_Sum(47)\n    820056\n    >>> even_Power_Sum(48)\n    840056\n    >>> even_Power_Sum"}
{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n\ndef rear_extract(tuples):\n    \"\"\"\n    >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n    [21, 20, 19]\n    \"\"\"\n    return [t[2] for t in tuples]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    return tuple(i-j for i, j in zip(t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n\ndef substract_elements(t1, t2):\n    return tuple"}
{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(5)\n    18\n    >>> even_binomial_Coeff_Sum(6)\n    32\n    >>> even_binomial_Coeff_Sum(7)\n    56\n    >>> even_binomial_Coeff_Sum(8)\n    88\n    >>> even_binomial_Coeff_Sum(9)\n    124\n    >>> even_binomial_Coeff_Sum(10)\n    176\n    >>> even_binomial_Coeff_Sum(11)\n    240\n    >>> even_binomial_Coeff_Sum(12)\n    328\n    >>> even_binomial_Coeff_Sum(13)\n    420\n    >>> even_binomial_Coeff_Sum(14)\n    528\n    >>> even_binomial_Coeff_Sum(15)\n    648\n    >>> even_binomial_Coeff_Sum(16)\n    800\n    >>> even_binomial_Coeff_Sum(17)\n    968\n    >>> even_binomial_Coeff_Sum(18)\n    1160\n    >>> even_binomial_Coeff_Sum(19)\n    1388\n    >>> even_binomial_Coeff_Sum(20)\n    1640\n    >>> even_binomial_Coeff_Sum(21)\n    1928\n    >>> even_binomial_Coeff_Sum(22)\n    2280\n    >>> even_binomial_Coeff_Sum(23)\n    2608\n    >>> even_binomial_Coeff_Sum(24)\n    2960\n    >>> even_binomial_Coeff_Sum(25)\n    3368\n    >>> even_binomial_Coeff_Sum(26)\n    3816\n    >>> even_binomial_Coeff_Sum(27)\n    4368\n    >>> even_binomial_Coeff_Sum(28)\n    4960\n    >>> even_binomial_Coeff_Sum(29)\n    5648\n    >>> even_binomial_Coeff_Sum(30)\n    6400\n    >>> even_binomial_Coeff_Sum(31)\n    7232\n    >>> even_binomial_Coeff_Sum(32)\n    8128\n    >>> even_binomial_Coeff_Sum(33)\n    9160\n    >>> even_binomial_Coeff_Sum(34)\n    10288\n    >>> even_binomial_Coeff_Sum(35)\n    11480\n    >>> even_binomial_Coeff_Sum(36)\n    12832\n    >>> even_binomial_Coeff_Sum(37)\n    14288\n    >>> even_binomial_Coeff_Sum(38)\n    15880\n    >>> even_binomial_Coeff_Sum(39)\n    17632\n    >>> even_binomial_Coeff_Sum(40)\n    19488\n    >>> even_binomial_Coeff_Sum(41)\n    21580\n    >>> even_binomial_Coeff_Sum(42)\n    23888\n    >>> even_binomial_Coeff_Sum(43)\n    26380\n    >>> even_binomial_Coeff_Sum(44)\n"}
{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder.\n    :param radius: The radius of the cylinder.\n    :param height: The height of the cylinder.\n    :return: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2 * height\n\n\nif __name__ == '__main__':\n    print(volume_cylinder(10, 5))\n    print(volume_cylinder(10, 10))\n    print(volume_cylinder(10, 15))\n    print(volume_cylinder(10, 20))\n    print(volume_cylinder(10, 25))\n    print(volume_cylinder(10, 30))\n    print(volume_cylinder(10, 35))\n    print(volume_cylinder(10, 40))\n    print(volume_cylinder(10, 45))\n    print(volume_cylinder(10, 50))\n    print(volume_cylinder(10, 55))\n    print(volume_cylinder(10, 60))\n    print(volume_cylinder(10, 65))\n    print(volume_cylinder(10, 70))\n    print(volume_cylinder(10, 75))\n    print(volume_cylinder(10, 80))\n    print(volume_cylinder(10, 85))\n    print(volume_cylinder(10, 90))\n    print(volume_cylinder(10, 95))\n    print(volume_cylinder(10, 100))\n    print(volume_cylinder(10, 105))\n    print(volume_cylinder(10, 110))\n    print(volume_cylinder(10, 115))\n    print(volume_cylinder(10, 120))\n    print(volume_cylinder(10, 125))\n    print(volume_cylinder(10, 130))\n    print(volume_cylinder(10, 135))\n    print(volume_cylinder(10, 140))\n    print(volume_cylinder(10, 145))\n    print(volume_cylinder(10, 150))\n    print(volume_cylinder(10, 155))\n    print(volume_cylinder(10, 160))\n    print(volume_cylinder(10, 165))\n    print(volume_cylinder(10, 170))\n    print(volume_cylinder(10, 175))\n    print(volume_cylinder(10, 180))\n    print(volume_cylinder(10, 185))\n    print(volume_cylinder(10, 190))\n    print(volume_cylinder(10, 195))\n    print(volume_cylinder(10, 200))\n    print(volume_cylinder(10, 205))\n    print(volume_cylinder(10, 210))\n    print(volume_cylinder(10, 215))\n    print(volume_cylinder(10, 220))\n    print(volume_cylinder(10, 225))\n    print(volume_cylinder(10, "}
{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,n):\n    return {k:v for k,v in d.items() if v>=n}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170))\n\n\"\"\"\nWrite a function that takes in a dictionary and returns a list of the keys in the dictionary.\nassert dict_keys({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190})==['Cierra Vega', 'Alden Cantrell', 'Kierra Gentry', 'Pierre Cox']\n\"\"\"\n\ndef dict_keys(d):\n    return list(d.keys())\n\nprint(dict_keys({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}))\n\n\"\"\"\nWrite a function that takes in a dictionary and returns a list of the values in the dictionary.\nassert dict_values({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190})==[175, 180, 165, 190]\n\"\"\"\n\ndef dict_values(d):\n    return list(d.values())\n\nprint(dict_values({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}))\n\n\"\"\"\nWrite a function that takes in a dictionary and returns a list of the keys and values in the dictionary.\nassert dict_items({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190})==[('Cierra Vega', 175), ('Alden Cantrell', 180), ('Kierra Gentry', 165), ('Pierre Cox', 190)]\n\"\"\"\n\ndef dict_items(d):\n    return list(d.items())\n\nprint(dict_items({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}))\n\n\"\"\"\nWrite a function that takes in a dictionary and returns a list of the keys and values in the dictionary.\nassert dict_items({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190})==[('Cierra Vega', 175), ('Alden Cantrell', 180), ('Kierra Gentry', 165), ('Pierre Cox', 190)]\n\"\"\"\n\ndef dict_items(d):\n    return list(d.items())\n\nprint(dict_items({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}))\n\n\"\"\"\nWrite a function that takes in a dictionary and returns a list of the keys and values in the dictionary.\nassert dict_items({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190})==[('Cierra Vega',"}
{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            break\n    return count\n\n\nif __name__ == '__main__':\n    print(count_first_elements((1, 5, 7, (4, 6), 10)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)))\n    print(count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"}
{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    True\n    >>> is_num_decagonal(4)\n    False\n    \"\"\"\n    return n * (n + 1) == 2 * (n * (n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return True, i\n    return False, -1\n\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],32))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],11))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],12))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],19))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],100))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],1111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],11111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],1111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],11111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],111111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],1111111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],11111111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],111111111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],1111111111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],11111111111111))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],111111111111111))\nprint(sequential_search([1"}
{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n\ndef all_unique(lst):\n    \"\"\"\n    :param lst: list\n    :return: bool\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n\nif __name__ == '__main__':\n    print(all_unique([1, 2, 3]))\n    print(all_unique([1, 2, 3, 1]))\n    print(all_unique([1, 2, 3, 4]))\n    print(all_unique([1, 2, 3, 4, 5]))\n    print(all_unique([1, 2, 3, 4, 5, 6]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "}
{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    else:\n        return [x - y for x, y in zip(list1, list2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # print(sub_list([1, 2, 3], [4, 5, 6]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    # print(sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, "}
{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n\ndef validate(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num < 0:\n        return False\n    else:\n        num_list = list(str(num))\n        for i in range(len(num_list)):\n            if num_list.count(num_list[i]) > int(num_list[i]):\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    print(validate(1234))\n    print(validate(12345))\n    print(validate(123456))\n    print(validate(1234567))\n    print(validate(12345678))\n    print(validate(123456789))\n    print(validate(1234567890))\n    print(validate(12345678901))\n    print(validate(123456789012))\n    print(validate(1234567890123))\n    print(validate(12345678901234))\n    print(validate(123456789012345))\n    print(validate(1234567890123456))\n    print(validate(12345678901234567))\n    print(validate(123456789012345678))\n    print(validate(1234567890123456789))\n    print(validate(12345678901234567890))\n    print(validate(123456789012345678901))\n    print(validate(1234567890123456789012))\n    print(validate(12345678901234567890123))\n    print(validate(123456789012345678901234))\n    print(validate(1234567890123456789012345))\n    print(validate(12345678901234567890123456))\n    print(validate(123456789012345678901234567))\n    print(validate(1234567890123456789012345678))\n    print(validate(12345678901234567890123456789))\n    print(validate(123456789012345678901234567890))\n    print(validate(1234567890123456789012345678901))\n    print(validate(12345678901234567890123456789012))\n    print(validate(123456789012345678901234567890123))\n    print(validate(1234567890123456789012345678901234))\n    print(validate(1"}
{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n\ndef check_element(list, element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue'))\n"}
{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\n\ndef text_match_two_three(text):\n    if text.count('a') == 0:\n        return False\n    else:\n        if text.count('a') == 1:\n            if text.count('b') == 2:\n                return True\n            else:\n                return False\n        else:\n            if text.count('b') == 3:\n                return True\n            else:\n                return False\n\n\nprint(text_match_two_three(\"ac\"))\nprint(text_match_two_three(\"acb\"))\nprint(text_match_two_three(\"acbb\"))\nprint(text_match_two_three(\"acbbb\"))\nprint(text_match_two_three(\"acbbbb\"))\nprint(text_match_two_three(\"acbbbbb\"))\nprint(text_match_two_three(\"acbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\nprint(text_match_two_three(\"acbbbbbbbbbbbbbbbbbbbbbbbb"}
{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param arr: array of integers\n    :param k: number of times to repeat the array\n    :param n: number of elements in the array\n    :return: maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    \"\"\"\n    if k == 1:\n        return max(arr)\n    if k == 2:\n        return max(arr) + max(arr)\n    if k == 3:\n        return max(arr) + max(arr) + max(arr)\n    if k == 4:\n        return max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 5:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 6:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 7:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 8:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 9:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 10:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 11:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 12:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 13:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 14:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 15:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 16:\n        return max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr) + max(arr)\n    if k == 17:\n        return max(arr"}
{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n\ndef square_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += i ** 2\n    return sum\n\n\nif __name__ == '__main__':\n    print(square_Sum(2))\n    print(square_Sum(3))\n    print(square_Sum(4))\n    print(square_Sum(5))\n    print(square_Sum(6))\n    print(square_Sum(7))\n    print(square_Sum(8))\n    print(square_Sum(9))\n    print(square_Sum(10))\n    print(square_Sum(11))\n    print(square_Sum(12))\n    print(square_Sum(13))\n    print(square_Sum(14))\n    print(square_Sum(15))\n    print(square_Sum(16))\n    print(square_Sum(17))\n    print(square_Sum(18))\n    print(square_Sum(19))\n    print(square_Sum(20))\n    print(square_Sum(21))\n    print(square_Sum(22))\n    print(square_Sum(23))\n    print(square_Sum(24))\n    print(square_Sum(25))\n    print(square_Sum(26))\n    print(square_Sum(27))\n    print(square_Sum(28))\n    print(square_Sum(29))\n    print(square_Sum(30))\n    print(square_Sum(31))\n    print(square_Sum(32))\n    print(square_Sum(33))\n    print(square_Sum(34))\n    print(square_Sum(35))\n    print(square_Sum(36))\n    print(square_Sum(37))\n    print(square_Sum(38))\n    print(square_Sum(39))\n    print(square_Sum(40))\n    print(square_Sum(41))\n    print(square_Sum(42))\n    print(square_Sum(43))\n    print(square_Sum(44))\n    print(square_Sum(45))\n    print(square_Sum(46))\n    print(square_Sum(47))\n    print(square_Sum(48))\n    print(square_Sum(49))\n    print(square_Sum(50))\n    print(square_Sum(51))\n    print(square_Sum(52))\n    print(square_Sum(53))\n    print(square_Sum(54))\n    print(square_Sum(55))\n    print(square_Sum(56))\n    print(square_Sum(57))\n    print(square_Sum(58))\n    print(square_Sum(59))\n    print(square_Sum(60))\n    print(square_Sum(61))\n    print(square_Sum(62))\n    print(square_Sum(63))\n    print(square_Sum(64))\n    print(square_Sum(65))\n    print(square_Sum(66))\n    print(square_Sum(67))\n    print(square_Sum(68))\n    print(square_Sum(69))\n    print(square_Sum(70))\n    print(square_Sum(71))\n    print(square_Sum(72))\n    print(square_Sum(73))\n    print(square_Sum(74))\n    print(square_Sum(75))\n    print(square_Sum(76))\n    print(square_Sum(77))\n    print(square_Sum(78))\n    print(square_Sum(79))\n    print(square_Sum(80))\n    print(square_Sum(81))\n   "}
{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n\ndef max_length(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: tuple of max length and list of max length\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = i\n    return max_length, max_length_list\n\n\nif __name__ == '__main__':\n    print(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    print(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, "}
{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n\n\ndef find(a, b):\n    return a // b\n\n\nif __name__ == '__main__':\n    print(find(10, 3))\n    print(find(10, 4))\n    print(find(10, 5))\n    print(find(10, 6))\n    print(find(10, 7))\n    print(find(10, 8))\n    print(find(10, 9))\n    print(find(10, 10))\n    print(find(10, 11))\n    print(find(10, 12))\n    print(find(10, 13))\n    print(find(10, 14))\n    print(find(10, 15))\n    print(find(10, 16))\n    print(find(10, 17))\n    print(find(10, 18))\n    print(find(10, 19))\n    print(find(10, 20))\n    print(find(10, 21))\n    print(find(10, 22))\n    print(find(10, 23))\n    print(find(10, 24))\n    print(find(10, 25))\n    print(find(10, 26))\n    print(find(10, 27))\n    print(find(10, 28))\n    print(find(10, 29))\n    print(find(10, 30))\n    print(find(10, 31))\n    print(find(10, 32))\n    print(find(10, 33))\n    print(find(10, 34))\n    print(find(10, 35))\n    print(find(10, 36))\n    print(find(10, 37))\n    print(find(10, 38))\n    print(find(10, 39))\n    print(find(10, 40))\n    print(find(10, 41))\n    print(find(10, 42))\n    print(find(10, 43))\n    print(find(10, 44))\n    print(find(10, 45))\n    print(find(10, 46))\n    print(find(10, 47))\n    print(find(10, 48))\n    print(find(10, 49))\n    print(find(10, 50))\n    print(find(10, 51))\n    print(find(10, 52))\n    print(find(10, 53))\n    print(find(10, 54))\n    print(find(10, 55))\n    print(find(10, 56))\n    print(find(10, 57))\n    print(find(10, 58))\n    print(find(10, 59))\n    print(find(10, 60))\n    print(find(10, 61))\n    print(find(10, 62))\n    print(find(10, 63))\n    print(find(10, 64))\n    print(find(10, 65))\n    print(find(10, 66))\n    print(find(10, 67))\n    print(find(10, 68))\n    print(find(10, 69))\n    print(find(10, 70))\n    print(find(10, 71))\n    print(find(10, 72))\n    print(find(10, 73))\n"}
{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    a, b: positive integers\n    returns: the length of the third side of the right angled triangle\n    \"\"\"\n    # Your code here\n    return (a**2 + b**2)**0.5\n\n\ndef test_otherside_rightangle():\n    \"\"\"\n    Tests for otherside_rightangle\n    \"\"\"\n    assert otherside_rightangle(7, 8) == 10.63014581273465\n    assert otherside_rightangle(1, 1) == 1.7320508075688772\n    assert otherside_rightangle(1, 2) == 2.23606797749979\n    assert otherside_rightangle(1, 3) == 2.449489742783178\n    assert otherside_rightangle(1, 4) == 2.6457513110645907\n    assert otherside_rightangle(1, 5) == 2.8284271247461903\n    assert otherside_rightangle(1, 6) == 3.0000000000000004\n    assert otherside_rightangle(1, 7) == 3.1622776601683795\n    assert otherside_rightangle(1, 8) == 3.316624790355399\n    assert otherside_rightangle(1, 9) == 3.4641016151377544\n    assert otherside_rightangle(1, 10) == 3.605551275463989\n    assert otherside_rightangle(1, 11) == 3.744028189281224\n    assert otherside_rightangle(1, 12) == 3.880700123011347\n    assert otherside_rightangle(1, 13) == 4.015459046839571\n    assert otherside_rightangle(1, 14) == 4.150117970667794\n    assert otherside_rightangle(1, 15) == 4.283776893495923\n    assert otherside_rightangle(1, 16) == 4.416335816324056\n    assert otherside_rightangle(1, 17) == 4.548894739152289\n    assert otherside_rightangle(1, 18) == 4.681453662080423\n    assert otherside_rightangle(1, 19) == 4.813912584908656\n    assert otherside_rightangle(1, 20) == 4.946371507736889\n    assert otherside_rightangle(1, 21) == 5.078830430565122\n    assert otherside_rightangle(1, 22) == 5.211289353393355\n    assert otherside_rightangle(1, 23) == 5.343748276221588\n    assert otherside_rightangle(1, 24) == 5.476107199049821\n    assert otherside_"}
{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n\ndef max_val(lst):\n    \"\"\"\n    :param lst: list of heterogeneous values\n    :return: maximum value in the list\n    \"\"\"\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val\n\n\nif __name__ == '__main__':\n    print(max_val(['Python', 3, 2, 4, 5, 'version']))\n    print(max_val([3, 2, 4, 5, 'version']))\n    print(max_val([3, 2, 4, 5]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n                   58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n                   85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n                   58, 59, 60, 61, 62, 63, 64, 65, 66, 67,"}
{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n\ndef sum_div(n):\n    \"\"\"\n    >>> sum_div(8)\n    7\n    >>> sum_div(10)\n    28\n    >>> sum_div(12)\n    30\n    >>> sum_div(14)\n    36\n    >>> sum_div(16)\n    48\n    >>> sum_div(18)\n    54\n    >>> sum_div(20)\n    70\n    >>> sum_div(22)\n    76\n    >>> sum_div(24)\n    84\n    >>> sum_div(26)\n    90\n    >>> sum_div(28)\n    96\n    >>> sum_div(30)\n    110\n    >>> sum_div(32)\n    120\n    >>> sum_div(34)\n    126\n    >>> sum_div(36)\n    132\n    >>> sum_div(38)\n    138\n    >>> sum_div(40)\n    150\n    >>> sum_div(42)\n    156\n    >>> sum_div(44)\n    162\n    >>> sum_div(46)\n    168\n    >>> sum_div(48)\n    176\n    >>> sum_div(50)\n    190\n    >>> sum_div(52)\n    196\n    >>> sum_div(54)\n    202\n    >>> sum_div(56)\n    208\n    >>> sum_div(58)\n    214\n    >>> sum_div(60)\n    230\n    >>> sum_div(62)\n    236\n    >>> sum_div(64)\n    242\n    >>> sum_div(66)\n    248\n    >>> sum_div(68)\n    254\n    >>> sum_div(70)\n    270\n    >>> sum_div(72)\n    276\n    >>> sum_div(74)\n    282\n    >>> sum_div(76)\n    288\n    >>> sum_div(78)\n    294\n    >>> sum_div(80)\n    310\n    >>> sum_div(82)\n    316\n    >>> sum_div(84)\n    322\n    >>> sum_div(86)\n    328\n    >>> sum_div(88)\n    334\n    >>> sum_div(90)\n    350\n    >>> sum_div(92)\n    356\n    >>> sum_div(94)\n    362\n    >>> sum_div(96)\n    368\n    >>> sum_div(98)\n    374\n    >>> sum_div(100)\n    390\n    >>> sum_div(102)\n    396\n    >>> sum_div(104)\n    402\n    >>> sum_div(106)\n    408\n    >>> sum_div(108)\n    414\n    >>> sum_div(110)\n    430\n    >>> sum_div(112)\n    436\n    >>> sum_div(114)\n    442\n    >>> sum_div(116)\n    448\n    >>> sum_div(118)\n    454\n    >>> sum_div(120)\n    470\n    >>> sum_div(122)\n    476\n    >>> sum_div(12"}
{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\n\ndef get_Inv_Count(arr):\n    if len(arr) == 1:\n        return 0\n    mid = len(arr) // 2\n    left = get_Inv_Count(arr[:mid])\n    right = get_Inv_Count(arr[mid:])\n    inv_count = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            inv_count += (mid - i)\n            j += 1\n        k += 1\n    while i < len(arr):\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j < len(arr):\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n    return left + right + inv_count\n\n\nif __name__ == '__main__':\n    print(get_Inv_Count([1, 20, 6, 4, 5]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, "}
{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n\ndef flatten_list(nested_list):\n    \"\"\"\n    :param nested_list: list\n    :return: list\n    \"\"\"\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\n\nif __name__ == '__main__':\n    print(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))\n    print(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160, 170, 180, 190, 200]]))\n    print(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160, 170, 180, 190, 200], [210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1"}
{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    \"\"\"\n    tuples: a list of tuples\n    returns: a tuple (name, score)\n    \"\"\"\n    # Your code here\n    max_score = 0\n    max_name = ''\n    for name, score in tuples:\n        if score > max_score:\n            max_score = score\n            max_name = name\n    return (max_name, max_score)\n\n\ndef test_max_aggregate():\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122)])==('Juan Whelan', 244)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 244)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122)])==('Juan Whelan', 366)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 366)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122)])==('Juan Whelan', 498)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 498)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Juan Whelan',1"}
{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: int\n    :return: float\n    \"\"\"\n    if n == 1:\n        return 2.0\n    return 2.0 * count_binary_seq(n - 1) + 2.0 * math.factorial(n)\n\n\nif __name__ == '__main__':\n    print(count_binary_seq(1))\n    print(count_binary_seq(2))\n    print(count_binary_seq(3))\n    print(count_binary_seq(4))\n    print(count_binary_seq(5))\n    print(count_binary_seq(6))\n    print(count_binary_seq(7))\n    print(count_binary_seq(8))\n    print(count_binary_seq(9))\n    print(count_binary_seq(10))\n    print(count_binary_seq(11))\n    print(count_binary_seq(12))\n    print(count_binary_seq(13))\n    print(count_binary_seq(14))\n    print(count_binary_seq(15))\n    print(count_binary_seq(16))\n    print(count_binary_seq(17))\n    print(count_binary_seq(18))\n    print(count_binary_seq(19))\n    print(count_binary_seq(20))\n    print(count_binary_seq(21))\n    print(count_binary_seq(22))\n    print(count_binary_seq(23))\n    print(count_binary_seq(24))\n    print(count_binary_seq(25))\n    print(count_binary_seq(26))\n    print(count_binary_seq(27))\n    print(count_binary_seq(28))\n    print(count_binary_seq(29))\n    print(count_binary_seq(30))\n    print(count_binary_seq(31))\n    print(count_binary_seq(32))\n    print(count_binary_seq(33))\n    print(count_binary_seq(34))\n    print(count_binary_seq(35))\n    print(count_binary_seq(36))\n    print(count_binary_seq(37))\n    print(count_binary_seq(38))\n    print(count_binary_seq(39))\n    print(count_binary_seq(40))\n    print(count_binary_seq(41))\n    print(count_binary_seq(42))\n    print(count_binary_seq(43))\n    print(count_binary_seq(44))\n    print(count_binary_seq(45))\n    print(count_binary_seq(46))\n    print(count_binary_seq(47))\n    print(count_binary_seq(48))\n    print(count_binary_seq(49))\n    print(count_binary_seq(50))\n    print(count_binary_seq(51))\n    print(count_binary_seq(52))\n    print(count_binary_seq(53))\n    print(count_binary_seq(54))\n    print(count_binary_seq(55))\n    print(count_binary_seq(56))\n    print(count_binary_seq(57))\n    print(count_binary_seq(58))\n    print(count_binary_seq(59))\n    print(count_binary_seq(60))\n    print(count_binary_seq(61))\n    print(count_binary_seq(62))\n    print(count_binary_seq(63))\n    print(count_binary_seq(64))\n    print(count_binary_seq(6"}
{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n\ndef dict_depth(d):\n    \"\"\"\n    :param d: dictionary\n    :return: depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\n\nif __name__ == '__main__':\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {}}}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {}}}}}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {}}}}}}}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {}}}}}}}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {}}}}}}}}}}}}}}}}}}}}))\n    print(dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {}}}}"}
{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n\ndef start_withp(words):\n    \"\"\"\n    :param words: list of words\n    :return: tuple of two words starting with letter 'p'\n    \"\"\"\n    for word in words:\n        if word[0] == 'p':\n            return word.split()\n\n\nif __name__ == '__main__':\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\", \"p ppppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\", \"p ppppppppp\", \"p pppppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\", \"p ppppppppp\", \"p pppppppppp\", \"p ppppppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\", \"p ppppppppp\", \"p pppppppppp\", \"p ppppppppppp\", \"p pppppppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\", \"p ppppppppp\", \"p pppppppppp\", \"p ppppppppppp\", \"p pppppppppppp\", \"p ppppppppppppp\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"p ppp\", \"p pppp\", \"p ppppp\", \"p pppppp\", \"p ppppppp\", \"p pppppppp\", \"p ppppppppp\", \"p pppppppppp\", \"p ppppppppppp\", \"p pppppppppppp\", \"p ppppppppppppp\", \"p pppppppppppppp\"]))"}
{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n\ndef max_sum_increasing_subseq(arr, i, k, n):\n    if i == n:\n        return 0\n    if k == n:\n        return arr[i]\n    if i > k:\n        return max(max_sum_increasing_subseq(arr, i + 1, k, n), arr[i] + max_sum_increasing_subseq(arr, i + 1, k, n))\n    return max_sum_increasing_subseq(arr, i + 1, k, n)\n\n\nif __name__ == '__main__':\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 7))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 8))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 9))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 10))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 11))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 12))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 13))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 14))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 15))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 16))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 17))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 18))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 19))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 20))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 21))\n"}
{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param n: number of largest products to return\n    :return: list of n largest products\n    \"\"\"\n    if n > len(list1) or n > len(list2):\n        raise ValueError(\"n must be less than or equal to the length of each list\")\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if len(list1) == 0 or len(list2) == 0:\n        raise ValueError(\"lists must not be empty\")\n    if len(list1) != len(list2):\n        raise ValueError(\"lists must be the same length\")\n    if not all(isinstance(x, int) for x in list1):\n        raise ValueError(\"list1 must contain only integers\")\n    if not all(isinstance(x, int) for x in list2):\n        raise ValueError(\"list2 must contain only integers\")\n    if not all(x > 0 for x in list1):\n        raise ValueError(\"list1 must contain only positive integers\")\n    if not all(x > 0 for x in list2):\n        raise ValueError(\"list2 must contain only positive integers\")\n    if not all(x > 0 for x in list1):\n        raise ValueError(\"list1 must contain only positive integers\")\n    if not all(x > 0 for x in list2):\n        raise ValueError(\"list2 must contain only positive integers\")\n\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    return [list1[i] * list2[i] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 6))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 7))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 8))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 9))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 10))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 11))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 12))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10,"}
{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n\ndef maximum(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\n\nif __name__ == '__main__':\n    print(maximum(5, 10))\n    print(maximum(10, 5))\n    print(maximum(10, 10))\n    print(maximum(10, 100))\n    print(maximum(100, 10))\n    print(maximum(100, 100))\n    print(maximum(100, 1000))\n    print(maximum(1000, 100))\n    print(maximum(1000, 1000))\n    print(maximum(1000, 10000))\n    print(maximum(10000, 1000))\n    print(maximum(10000, 10000))\n    print(maximum(10000, 100000))\n    print(maximum(100000, 10000))\n    print(maximum(100000, 100000))\n    print(maximum(100000, 1000000))\n    print(maximum(1000000, 100000))\n    print(maximum(1000000, 1000000))\n    print(maximum(1000000, 10000000))\n    print(maximum(10000000, 1000000))\n    print(maximum(10000000, 10000000))\n    print(maximum(10000000, 100000000))\n    print(maximum(100000000, 10000000))\n    print(maximum(100000000, 100000000))\n    print(maximum(100000000, 1000000000))\n    print(maximum(1000000000, 100000000))\n    print(maximum(1000000000, 1000000000))\n    print(maximum(1000000000, 10000000000))\n    print(maximum(10000000000, 1000000000))\n    print(maximum(10000000000, 10000000000))\n    print(maximum(10000000000, 100000000000))\n    print(maximum(100000000000, 10000000000))\n    print(maximum(100000000000, 100000000000))\n    print(maximum(100000000000, 1000000000000))\n    print(maximum(1000000000000, 100000000000))\n    print(maximum(1000000000000, 100000000"}
{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n\nif __name__ == '__main__':\n    print(string_to_tuple(\"python 3.0\"))\n"}
{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n    return n | (n + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n    \"\"\"\n    return (1/3) * math.pi * radius ** 2 * height\n\n\nif __name__ == \"__main__\":\n    print(volume_cone(5,12))\n    print(volume_cone(10,12))\n    print(volume_cone(10,10))\n    print(volume_cone(10,5))\n    print(volume_cone(10,1))\n    print(volume_cone(10,0))\n    print(volume_cone(10,-1))\n    print(volume_cone(10,-5))\n    print(volume_cone(10,-10))\n    print(volume_cone(10,-15))\n    print(volume_cone(10,-20))\n    print(volume_cone(10,-25))\n    print(volume_cone(10,-30))\n    print(volume_cone(10,-35))\n    print(volume_cone(10,-40))\n    print(volume_cone(10,-45))\n    print(volume_cone(10,-50))\n    print(volume_cone(10,-55))\n    print(volume_cone(10,-60))\n    print(volume_cone(10,-65))\n    print(volume_cone(10,-70))\n    print(volume_cone(10,-75))\n    print(volume_cone(10,-80))\n    print(volume_cone(10,-85))\n    print(volume_cone(10,-90))\n    print(volume_cone(10,-95))\n    print(volume_cone(10,-100))\n    print(volume_cone(10,-105))\n    print(volume_cone(10,-110))\n    print(volume_cone(10,-115))\n    print(volume_cone(10,-120))\n    print(volume_cone(10,-125))\n    print(volume_cone(10,-130))\n    print(volume_cone(10,-135))\n    print(volume_cone(10,-140))\n    print(volume_cone(10,-145))\n    print(volume_cone(10,-150))\n    print(volume_cone(10,-155))\n    print(volume_cone(10,-160))\n    print(volume_cone(10,-165))\n    print(volume_cone(10,-170))\n    print(volume_cone(10,-175))\n    print(volume_cone(10,-180))\n    print(volume_cone(10,-185))\n    print(volume_cone(10,-190))\n    print(volume_cone(10,-195))\n    print(volume_cone(10,-200))\n    print(volume_cone(10,-205))\n    print(volume_cone(10,-210))\n    print(volume_cone(10,-215))\n    print(volume_cone(10,-220))\n    print(volume_cone(10,-225))\n    print(volume_cone(10,-230))\n    print(volume_cone(10,-235))\n    print(volume_cone(10,-240))\n    print(volume_cone(10,-245))\n    print(volume_cone(10,-250))\n    print(volume_cone(10,-255))"}
{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 4\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 8\n    if n == 9:\n        return 8\n    if n == 10:\n        return 8\n    if n == 11:\n        return 8\n    if n == 12:\n        return 8\n    if n == 13:\n        return 8\n    if n == 14:\n        return 8\n    if n == 15:\n        return 8\n    if n == 16:\n        return 16\n    if n == 17:\n        return 16\n    if n == 18:\n        return 16\n    if n == 19:\n        return 16\n    if n == 20:\n        return 16\n    if n == 21:\n        return 16\n    if n == 22:\n        return 16\n    if n == 23:\n        return 16\n    if n == 24:\n        return 16\n    if n == 25:\n        return 16\n    if n == 26:\n        return 16\n    if n == 27:\n        return 16\n    if n == 28:\n        return 16\n    if n == 29:\n        return 16\n    if n == 30:\n        return 16\n    if n == 31:\n        return 16\n    if n == 32:\n        return 32\n    if n == 33:\n        return 32\n    if n == 34:\n        return 32\n    if n == 35:\n        return 32\n    if n == 36:\n        return 32\n    if n == 37:\n        return 32\n    if n == 38:\n        return 32\n    if n == 39:\n        return 32\n    if n == 40:\n        return 32\n    if n == 41:\n        return 32\n    if n == 42:\n        return 32\n    if n == 43:\n        return 32\n    if n == 44:\n        return 32\n    if n == 45:\n        return 32\n    if n == 46:\n        return 32\n    if n == 47:\n        return 32\n    if n == 48:\n        return 32\n    if n == 49:\n        return 32\n    if n == 50:\n        return 32\n    if n == 51:\n        return 32\n    if n == 52:\n        return 32\n    if n == 53:\n        return 32\n    if n == 54:\n        return 32\n    if n == 55:\n        return 32\n    if n == 56:\n        return 32\n    if n == 57:\n        return 32\n    if n == 58:\n        return 32\n    if n == 59:\n        return 32\n    if n == 60:\n        return 32\n    if n == 61:\n        return 32\n    if n == 62:\n        return 32\n    if n == 63"}
{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n\ndef find_lucas(n):\n    \"\"\"\n    Find the n'th lucas number.\n    :param n: the index of the lucas number\n    :return: the n'th lucas number\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n\nif __name__ == '__main__':\n    print(find_lucas(9))\n    print(find_lucas(10))\n    print(find_lucas(11))\n    print(find_lucas(12))\n    print(find_lucas(13))\n    print(find_lucas(14))\n    print(find_lucas(15))\n    print(find_lucas(16))\n    print(find_lucas(17))\n    print(find_lucas(18))\n    print(find_lucas(19))\n    print(find_lucas(20))\n    print(find_lucas(21))\n    print(find_lucas(22))\n    print(find_lucas(23))\n    print(find_lucas(24))\n    print(find_lucas(25))\n    print(find_lucas(26))\n    print(find_lucas(27))\n    print(find_lucas(28))\n    print(find_lucas(29))\n    print(find_lucas(30))\n    print(find_lucas(31))\n    print(find_lucas(32))\n    print(find_lucas(33))\n    print(find_lucas(34))\n    print(find_lucas(35))\n    print(find_lucas(36))\n    print(find_lucas(37))\n    print(find_lucas(38))\n    print(find_lucas(39))\n    print(find_lucas(40))\n    print(find_lucas(41))\n    print(find_lucas(42))\n    print(find_lucas(43))\n    print(find_lucas(44))\n    print(find_lucas(45))\n    print(find_lucas(46))\n    print(find_lucas(47))\n    print(find_lucas(48))\n    print(find_lucas(49))\n    print(find_lucas(50))\n    print(find_lucas(51))\n    print(find_lucas(52))\n    print(find_lucas(53))\n    print(find_lucas(54))\n    print(find_lucas(55))\n    print(find_lucas(56))\n    print(find_lucas(57))\n    print(find_lucas(58))\n    print(find_lucas(59))\n    print(find_lucas(60))\n    print(find_lucas(61))\n    print(find_lucas(62))\n    print(find_lucas(63))\n    print(find_lucas(64))\n    print(find_lucas(65))\n    print(find_lucas(66))\n    print(find_lucas(67))\n    print(find_lucas(68))\n    print(find_lucas(69))\n    print(find_lucas(70))\n    print(find_lucas(71))\n    print(find_lucas(72))\n    print(find_"}
{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n\ndef add_string(list, format_string):\n    \"\"\"\n    :param list: list of numbers\n    :param format_string: format string\n    :return: list of strings\n    \"\"\"\n    return [format_string.format(x) for x in list]\n\n\nif __name__ == '__main__':\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string(["}
{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    \"\"\"\n    :param list1: list of student id\n    :param list2: list of student name\n    :param list3: list of student marks\n    :return: list of dictionary\n    \"\"\"\n    return [dict(zip(list1, [dict(zip(list2, list3))]))]\n\n\nif __name__ == '__main__':\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \""}
{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n\ndef get_max_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 5"}
{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n\ndef check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n    :param tup: tuple\n    :return: bool\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n\nif __name__ == '__main__':\n    print(check_distinct((1, 4, 5, 6, 1, 4)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)))\n    print(check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1)))\n    print(check_distinct((1, 4, 5, "}
{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    :param string: string\n    :return: first non-repeated character\n    \"\"\"\n    if not string:\n        return None\n\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == '__main__':\n    print(first_non_repeating_character(\"abcabc\"))\n    print(first_non_repeating_character(\"abcdef\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n    print(first_non_repeating_character(\"abccba\"))\n   "}
{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\nif __name__ == \"__main__\":\n    print(check_char(\"abba\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaa\"))\n    print(check"}
{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: float\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return a\n    if a == c:\n        return a\n    if b == c:\n        return b\n    return (a + b) / 2\n\n\nif __name__ == '__main__':\n    print(median_numbers(25, 55, 65))\n    print(median_numbers(1, 2, 3))\n    print(median_numbers(1, 2, 3, 4))\n    print(median_numbers(1, 2, 3, 4, 5))\n    print(median_numbers(1, 2, 3, 4, 5, 6))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,"}
{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n\ndef sum_of_digits(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: sum of digits of each number\n    \"\"\"\n    return sum(sum(map(int, str(num))) for num in nums)\n\n\nif __name__ == '__main__':\n    print(sum_of_digits([10, 2, 56]))\n    print(sum_of_digits([10, 2, 56, 100]))\n    print(sum_of_digits([10, 2, 56, 100, 1000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000, 1000000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, "}
{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n\ndef extract_freq(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: number of unique tuples\n    \"\"\"\n    return len(set(list_of_tuples))\n\n\nif __name__ == '__main__':\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, "}
{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n\ndef minimum(a, b):\n    \"\"\"\n    >>> minimum(1,2)\n    1\n    >>> minimum(2,1)\n    1\n    >>> minimum(1,1)\n    1\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n\ndef check_tuplex(tup, element):\n    \"\"\"\n    Checks whether an element exists within a tuple.\n    :param tup: tuple\n    :param element: element to be checked\n    :return: True if element exists in tuple, False otherwise\n    \"\"\"\n    return element in tup\n\n\nif __name__ == '__main__':\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'x'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3.0))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3.1))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e}
{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(find_Parity(12))\n    print(find_Parity(13))\n    print(find_Parity(14))\n    print(find_Parity(15))\n    print(find_Parity(16))\n    print(find_Parity(17))\n    print(find_Parity(18))\n    print(find_Parity(19))\n    print(find_Parity(20))\n    print(find_Parity(21))\n    print(find_Parity(22))\n    print(find_Parity(23))\n    print(find_Parity(24))\n    print(find_Parity(25))\n    print(find_Parity(26))\n    print(find_Parity(27))\n    print(find_Parity(28))\n    print(find_Parity(29))\n    print(find_Parity(30))\n    print(find_Parity(31))\n    print(find_Parity(32))\n    print(find_Parity(33))\n    print(find_Parity(34))\n    print(find_Parity(35))\n    print(find_Parity(36))\n    print(find_Parity(37))\n    print(find_Parity(38))\n    print(find_Parity(39))\n    print(find_Parity(40))\n    print(find_Parity(41))\n    print(find_Parity(42))\n    print(find_Parity(43))\n    print(find_Parity(44))\n    print(find_Parity(45))\n    print(find_Parity(46))\n    print(find_Parity(47))\n    print(find_Parity(48))\n    print(find_Parity(49))\n    print(find_Parity(50))\n    print(find_Parity(51))\n    print(find_Parity(52))\n    print(find_Parity(53))\n    print(find_Parity(54))\n    print(find_Parity(55))\n    print(find_Parity(56))\n    print(find_Parity(57))\n    print(find_Parity(58))\n    print(find_Parity(59))\n    print(find_Parity(60))\n    print(find_Parity(61))\n    print(find_Parity(62))\n    print(find_Parity(63))\n    print(find_Parity(64))\n    print(find_Parity(65))\n    print(find_Parity(66))\n    print(find_Parity(67))\n    print(find_Parity(68))\n    print(find_Parity(69))\n    print(find_Parity(70))\n    print(find_Parity(71))\n    print(find_Parity(72))\n    print(find_Parity(73))\n    print(find_Parity(74))\n    print(find_Parity(75))\n    print(find_Parity(76))\n    print(find_Parity(77))\n    print(find_Parity(78))\n    print(find_Parity(79))\n    print(find_Parity(80))\n    print(find_Parity(81))\n    print(find_Parity(82))\n    print(find_Parity(83))\n    print(find_Parity(84))\n    print(find_Parity(85))\n    print(find_Parity(86))\n    print(find_Parity(87))\n    print("}
{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n\ndef rearrange_bigger(number):\n    \"\"\"\n    :param number: int\n    :return: int\n    \"\"\"\n    number = str(number)\n    number_list = list(number)\n    number_list.sort(reverse=True)\n    number_list = ''.join(number_list)\n    return int(number_list)\n\n\nif __name__ == '__main__':\n    print(rearrange_bigger(12))\n    print(rearrange_bigger(21))\n    print(rearrange_bigger(123))\n    print(rearrange_bigger(132))\n    print(rearrange_bigger(231))\n    print(rearrange_bigger(321))\n    print(rearrange_bigger(1234))\n    print(rearrange_bigger(12345))\n    print(rearrange_bigger(123456))\n    print(rearrange_bigger(1234567))\n    print(rearrange_bigger(12345678))\n    print(rearrange_bigger(123456789))\n    print(rearrange_bigger(1234567890))\n    print(rearrange_bigger(12345678901))\n    print(rearrange_bigger(123456789012))\n    print(rearrange_bigger(1234567890123))\n    print(rearrange_bigger(12345678901234))\n    print(rearrange_bigger(123456789012345))\n    print(rearrange_bigger(1234567890123456))\n    print(rearrange_bigger(12345678901234567))\n    print(rearrange_bigger(123456789012345678))\n    print(rearrange_bigger(1234567890123456789))\n    print(rearrange_bigger(12345678901234567890))\n    print(rearrange_bigger(123456789012345678901))\n    print(rearrange_bigger(1234567890123456789012))\n    print(rearrange_bigger(12345678901234567890123))\n    print(rearrange_bigger(123456789012345678901234))\n    print(rearrange_bigger(1234567890123456789012345))\n    print(rearrange_bigger(12345678901234567890123456))\n    print(rearrange_bigger(123456789012345678901234567))\n    print(rearrange_bigger(1234567890123456789012345678))\n    print(rearrange_bigger(12345678901234567890123456789))\n    print(rearrange_bigger(12345678901234567890123456"}
{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n\ndef min_product_tuple(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: minimum product of tuples\n    \"\"\"\n    min_product}
{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n\ndef min_val(lst):\n    \"\"\"\n    :param lst: list of heterogeneous values\n    :return: minimum value in the list\n    \"\"\"\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val\n\n\nif __name__ == '__main__':\n    print(min_val(['Python', 3, 2, 4, 5, 'version']))\n    print(min_val([3, 2, 4, 5, 'version']))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n                   58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n                   85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n                   58, 59, 60,"}
{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n\ndef remove_odd(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: list of numbers without odd numbers\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    print(remove_odd([1, 2, 3]))\n    print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, "}
{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(tuples, n):\n    return [t[n] for t in tuples]\n\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,3))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,4))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,5))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,6))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,7))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,8))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,9))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,10))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94,"}
{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)\n\n\ndef overlapping(seq1, seq2):\n"}
{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n\ndef max_Product(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: tuple of two integers\n    \"\"\"\n    max_product = 0\n    max_product_index = 0\n    min_product = 0\n    min_product_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_index = i\n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_product_index = i\n    return arr[max_product_index], arr[min_product_index]\n\n\nif __name__ == '__main__':\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, "}
{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n\ndef Find_Max(lst):\n    max_len = 0\n    max_len_list = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n\n\nprint(Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]))\n"}
{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n\ndef round_and_sum(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: sum of rounded numbers\n    \"\"\"\n    return sum(round(number) for number in numbers)\n\n\nif __name__ == '__main__':\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50]))\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50, 17.50]))\n    print("}
{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n\ndef cube_Sum(n):\n    \"\"\"\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    1728\n    >>> cube_Sum(4)\n    3744\n    >>> cube_Sum(5)\n    6120\n    >>> cube_Sum(6)\n    9216\n    >>> cube_Sum(7)\n    12344\n    >>> cube_Sum(8)\n    15625\n    >>> cube_Sum(9)\n    19024\n    >>> cube_Sum(10)\n    22524\n    >>> cube_Sum(11)\n    25925\n    >>> cube_Sum(12)\n    29424\n    >>> cube_Sum(13)\n    32924\n    >>> cube_Sum(14)\n    36424\n    >>> cube_Sum(15)\n    40024\n    >>> cube_Sum(16)\n    43624\n    >>> cube_Sum(17)\n    47224\n    >>> cube_Sum(18)\n    50824\n    >>> cube_Sum(19)\n    54424\n    >>> cube_Sum(20)\n    58024\n    \"\"\"\n    return sum(i**3 for i in range(2, n+1) if i % 2 == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n\ndef concatenate_tuple(tuple_):\n    return '-'.join(str(x) for x in tuple_)\n\n\nif __name__ == '__main__':\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\")))\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\")))\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\")))\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\")))\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\", \"UTS\", \"and\", \"I\", \"am\", \"a\", \"student\", \"in\","}
{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    >>> find_Average_Of_Cube(2)\n    4.5\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return [tup[i][-1] for i in range(len(tup))]\n\nprint(extract_rear(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the front index element of each string in the given tuple.\nassert extract_front(('Mers', 'for', 'Vers') ) == ['M', 'f', 'V']\n\"\"\"\n\ndef extract_front(tup):\n    return [tup[i][0] for i in range(len(tup))]\n\nprint(extract_front(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the middle index element of each string in the given tuple.\nassert extract_middle(('Mers', 'for', 'Vers') ) == ['e', 'o', 'e']\n\"\"\"\n\ndef extract_middle(tup):\n    return [tup[i][1] for i in range(len(tup))]\n\nprint(extract_middle(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the last index element of each string in the given tuple.\nassert extract_last(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_last(tup):\n    return [tup[i][-1] for i in range(len(tup))]\n\nprint(extract_last(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the first index element of each string in the given tuple.\nassert extract_first(('Mers', 'for', 'Vers') ) == ['M', 'f', 'V']\n\"\"\"\n\ndef extract_first(tup):\n    return [tup[i][0] for i in range(len(tup))]\n\nprint(extract_first(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the second index element of each string in the given tuple.\nassert extract_second(('Mers', 'for', 'Vers') ) == ['e', 'o', 'e']\n\"\"\"\n\ndef extract_second(tup):\n    return [tup[i][1] for i in range(len(tup))]\n\nprint(extract_second(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the third index element of each string in the given tuple.\nassert extract_third(('Mers', 'for', 'Vers') ) == ['r', 'r', 's']\n\"\"\"\n\ndef extract_third(tup):\n    return [tup[i][2] for i in range(len(tup))]\n\nprint(extract_third(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the fourth index element of each string in the given tuple.\nassert extract_fourth(('Mers', 'for', 'Vers') ) == ['s', 's', 's']\n\"\"\"\n\ndef extract_fourth(tup):\n    return [tup[i][3] for i in range(len(tup))]\n\nprint(extract_fourth(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the fifth index element of each string in the given tuple.\nassert extract_fifth(('Mers', 'for', 'Vers') ) == ['e', 'r', 'e']\n\"\"\"\n\ndef extract_fifth(tup):\n    return [tup[i][4] for i in range(len(tup))]\n\nprint(extract_fifth(('Mers', 'for', 'Vers')))\n\n\"\"\"\nWrite a function to extract only the sixth index element of each string in the given tuple.\nassert extract_sixth(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_sixth(tup):\n    return ["}
{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\n\ndef count_element_in_list(lst, element):\n    \"\"\"\n    :param lst: list of lists\n    :param element: element to count\n    :return: number of sublists containing element\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 11))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 15))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 10))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 16))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 17))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 18))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 19))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 20))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 21))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 22))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 23))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 24))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 25))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 26))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 27))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 28))\n    print(count_element_in_list([[1, 3], [5, 7"}
{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    \"\"\"\n    Filter odd numbers from a list of numbers.\n    :param numbers: list of numbers\n    :return: list of odd numbers\n    \"\"\"\n    return [number for number in numbers if number % 2 == 1]\n\n\nif __name__ == '__main__':\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 8"}
{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n\ndef change_date_format(date):\n    \"\"\"\n    >>> change_date_format(\"2026-01-02\")\n    '02-01-2026'\n    \"\"\"\n    return \"-\".join(reversed(date.split(\"-\")))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n\ndef shell_sort(arr):\n    \"\"\"\n    Sort the given array by using shell sort.\n    :param arr: the given array\n    :return: the sorted array\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n\nif __name__ == '__main__':\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000, 100000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000, 100000, 1000000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000, 100000, 1000000, 10000000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000"}
{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n\ndef and_tuples(t1, t2):\n    \"\"\"\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(i & j for i, j in zip(t1, t2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    assert parabola_directrix(5,3,2)==-198\n    \"\"\"\n    return -b/(2*a)\n\n\nif __name__ == '__main__':\n    print(parabola_directrix(5, 3, 2))\n    print(parabola_directrix(1, 2, 3))\n    print(parabola_directrix(1, 1, 1))\n    print(parabola_directrix(1, 1, 2))\n    print(parabola_directrix(1, 2, 1))\n    print(parabola_directrix(2, 1, 1))\n    print(parabola_directrix(2, 1, 2))\n    print(parabola_directrix(2, 2, 1))\n    print(parabola_directrix(2, 2, 2))\n    print(parabola_directrix(2, 3, 1))\n    print(parabola_directrix(2, 3, 2))\n    print(parabola_directrix(2, 4, 1))\n    print(parabola_directrix(2, 4, 2))\n    print(parabola_directrix(2, 5, 1))\n    print(parabola_directrix(2, 5, 2))\n    print(parabola_directrix(2, 6, 1))\n    print(parabola_directrix(2, 6, 2))\n    print(parabola_directrix(2, 7, 1))\n    print(parabola_directrix(2, 7, 2))\n    print(parabola_directrix(2, 8, 1))\n    print(parabola_directrix(2, 8, 2))\n    print(parabola_directrix(2, 9, 1))\n    print(parabola_directrix(2, 9, 2))\n    print(parabola_directrix(2, 10, 1))\n    print(parabola_directrix(2, 10, 2))\n    print(parabola_directrix(2, 11, 1))\n    print(parabola_directrix(2, 11, 2))\n    print(parabola_directrix(2, 12, 1))\n    print(parabola_directrix(2, 12, 2))\n    print(parabola_directrix(2, 13, 1))\n    print(parabola_directrix(2, 13, 2))\n    print(parabola_directrix(2, 14, 1))\n    print(parabola_directrix(2, 14, 2))\n    print(parabola_directrix(2, 15, 1))\n    print(parabola_directrix(2, 15, 2))\n    print(parabola_directrix(2, 16, 1))\n    print(parabola_directrix(2, 16, 2))\n    print(parabola_directrix(2, 17, 1))\n    print(parabola_directrix(2, 17, 2))\n    print(parabola_directrix(2, 18, 1))\n    print(parabola_directrix(2, 18, 2))\n    print(parabola_directrix(2, 19, 1))\n    print(parabola_directrix(2, 19, 2))\n    print(parabola_directrix(2, 20, 1))\n    print(parabola_directrix(2, 20"}
{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nprint(common_element([1,2,3,4,5], [5,6,7,8,9]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(common_element([1,2,3,4,5], [5,6,7,8,9,10,11,"}
{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n\ndef median_trapezium(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    return (a + b) / 2\n\n\nif __name__ == '__main__':\n    print(median_trapezium(15, 25, 35))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30))\n    print"}
{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\n\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False\n\n\nprint(check_greater([1, 2, 3, 4, 5], 4))\nprint(check_greater([1, 2, 3, 4, 5], 6))\nprint(check_greater([1, 2, 3, 4, 5], 0))\nprint(check_greater([1, 2, 3, 4, 5], 1))\nprint(check_greater([1, 2, 3, 4, 5], 5))\nprint(check_greater([1, 2, 3, 4, 5], 6))\nprint(check_greater([1, 2, 3, 4, 5], 7))\nprint(check_greater([1, 2, 3, 4, 5], 8))\nprint(check_greater([1, 2, 3, 4, 5], 9))\nprint(check_greater([1, 2, 3, 4, 5], 10))\nprint(check_greater([1, 2, 3, 4, 5], 11))\nprint(check_greater([1, 2, 3, 4, 5], 12))\nprint(check_greater([1, 2, 3, 4, 5], 13))\nprint(check_greater([1, 2, 3, 4, 5], 14))\nprint(check_greater([1, 2, 3, 4, 5], 15))\nprint(check_greater([1, 2, 3, 4, 5], 16))\nprint(check_greater([1, 2, 3, 4, 5], 17))\nprint(check_greater([1, 2, 3, 4, 5], 18))\nprint(check_greater([1, 2, 3, 4, 5], 19))\nprint(check_greater([1, 2, 3, 4, 5], 20))\nprint(check_greater([1, 2, 3, 4, 5], 21))\nprint(check_greater([1, 2, 3, 4, 5], 22))\nprint(check_greater([1, 2, 3, 4, 5], 23))\nprint(check_greater([1, 2, 3, 4, 5], 24))\nprint(check_greater([1, 2, 3, 4, 5], 25))\nprint(check_greater([1, 2, 3, 4, 5], 26))\nprint(check_greater([1, 2, 3, 4, 5], 27))\nprint(check_greater([1, 2, 3, 4, 5], 28))\nprint(check_greater([1, 2, 3, 4, 5], 29))\nprint(check_greater([1, 2, 3, 4, 5], 30))\nprint(check_greater([1, 2, 3, 4, 5], 31))\nprint(check_greater([1, 2, 3, 4, 5], 32))\nprint(check_greater([1, 2, 3, 4, 5], 33))\nprint(check_greater([1, 2, 3, 4, 5], 34))\nprint(check_greater([1, 2, 3, 4, 5], 35))\nprint(check_greater([1, 2, 3, 4, 5], 36))\nprint(check_greater([1"}
{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(num):\n    return num % 10\n\n\nprint(last_Digit(123))\n\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123"}
{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\n\ndef neg_nos(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: list of negative numbers\n    \"\"\"\n    return [x for x in lst if x < 0]\n\n\nif __name__ == '__main__':\n    print(neg_nos([-1, 4, 5, -6]))\n    print(neg_nos([1, 4, 5, -6]))\n    print(neg_nos([-1, 4, 5, -6, 0]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(neg_nos([-1, 4, 5, -6, 0, 1, -2, 3, 4, 5, 6, 7, "}
{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n\ndef remove_odd(string):\n    \"\"\"\n    :param string: string\n    :return: string without odd characters\n    \"\"\"\n    return ''.join([char for char in string if char.isalpha() and not char.isdigit()])\n\n\nif __name__ == '__main__':\n    print(remove_odd(\"python\"))\n    print(remove_odd(\"1234567890\"))\n    print(remove_odd(\"1234567890a\"))\n    print(remove_odd(\"1234567890ab\"))\n    print(remove_odd(\"1234567890abc\"))\n    print(remove_odd(\"1234567890abcd\"))\n    print(remove_odd(\"1234567890abcde\"))\n    print(remove_odd(\"1234567890abcdef\"))\n    print(remove_odd(\"1234567890abcdefg\"))\n    print(remove_odd(\"1234567890abcdefgh\"))\n    print(remove_odd(\"1234567890abcdefghi\"))\n    print(remove_odd(\"1234567890abcdefghij\"))\n    print(remove_odd(\"1234567890abcdefghijk\"))\n    print(remove_odd(\"1234567890abcdefghijkl\"))\n    print(remove_odd(\"1234567890abcdefghijklm\"))\n    print(remove_odd(\"1234567890abcdefghijklmn\"))\n    print(remove_odd(\"1234567890abcdefghijklmno\"))\n    print(remove_odd(\"1234567890abcdefghijklmnop\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopq\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqr\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrs\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrst\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstu\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuv\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvw\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwx\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxy\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyz\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyzab\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyzabc\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyzabcd\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyzabcde\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyzabcdef\"))\n    print(remove_odd(\"1234567890abcdefghijklmnopqrstuvwxyzabcdefg\"))\n    print(remove_odd(\"12"}
{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\n\n\ndef count_bidirectional(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: number of bidirectional pairs\n    \"\"\"\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 10), (10, 9)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 10), (10, 9), (11, 12), (12, 11)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 10), (10, 9), (11, 12), (12, 11), (13, 14), (14, 13)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 10), (10, 9), (11, 12), (12, 11), (13, 14), (14, 13), (15, 16), (16, 15)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 10), (10, 9), (11, 12), (12, 11), (13, 14), (14, 13), (15, 16), (16, 15), (17, 18), (18, 17)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 10), (10, 9), (11, 12), (12, 11), (13, 14), (14, 13), (15, 16), (16, 15), (17, 18), (18, 17), (19, 20), (20, 19)]))\n    print(count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6"}
{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n\ndef multiple_to_single(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: integer\n    \"\"\"\n    return int(''.join(map(str, nums)))\n\n\nif __name__ == '__main__':\n    print(multiple_to_single([11, 33, 50]))\n    print(multiple_to_single([11, 33, 50, 22, 66, 88, 99]))\n    print(multiple_to_single([11, 33, 50, 22, 66, 88, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(multiple_to_single([11, 33, 50, 22, 66, 88, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(multiple_to_single([11, 33, 50, 22, 66, 88, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(multiple_to_single([11, 33, 50, 22, 66, 88, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, "}
{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: str\n    :return: tuple\n    \"\"\"\n    adverb_list = ['clearly', 'simply', 'quickly', 'easily', 'easily', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', 'quickly', '"}
{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n\ndef surfacearea_cube(size):\n    \"\"\"\n    :param size: int\n    :return: int\n    \"\"\"\n    return 6 * size ** 2\n\n\nif __name__ == '__main__':\n    print(surfacearea_cube(5))\n    print(surfacearea_cube(10))\n    print(surfacearea_cube(1))\n    print(surfacearea_cube(2))\n    print(surfacearea_cube(3))\n    print(surfacearea_cube(4))\n    print(surfacearea_cube(100))\n    print(surfacearea_cube(1000))\n    print(surfacearea_cube(10000))\n    print(surfacearea_cube(100000))\n    print(surfacearea_cube(1000000))\n    print(surfacearea_cube(10000000))\n    print(surfacearea_cube(100000000))\n    print(surfacearea_cube(1000000000))\n    print(surfacearea_cube(10000000000))\n    print(surfacearea_cube(100000000000))\n    print(surfacearea_cube(1000000000000))\n    print(surfacearea_cube(10000000000000))\n    print(surfacearea_cube(100000000000000))\n    print(surfacearea_cube(1000000000000000))\n    print(surfacearea_cube(10000000000000000))\n    print(surfacearea_cube(100000000000000000))\n    print(surfacearea_cube(1000000000000000000))\n    print(surfacearea_cube(10000000000000000000))\n    print(surfacearea_cube(100000000000000000000))\n    print(surfacearea_cube(1000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000))\n    print(surfacearea_cube(100000000000000000000000))\n    print(surfacearea_cube(1000000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000000))\n    print(surfacearea_cube(100000000000000000000000000))\n    print(surfacearea_cube(1000000000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000000000))\n    print(surfacearea_cube(100000000000000000000000000000))\n    print(surfacearea_cube(10000000000000000"}
{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\n\ndef positive_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: float\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)\n\n\nif __name__ == '__main__':\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(positive"}
{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n\ndef index_multiplication(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Tuples must be of same length\")\n    else:\n        return tuple(map(lambda x, y: x * y, t1, t2))\n\n\nif __name__ == '__main__':\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1"}
{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n\ndef count_Occurrence(tuple_list, list_):\n    \"\"\"\n    :param tuple_list: tuple\n    :param list_: list\n    :return: int\n    \"\"\"\n    count = 0\n    for i in list_:\n        count += tuple_list.count(i)\n    return count\n\n\nif __name__ == '__main__':\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', '"}
{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n\ndef cube_nums(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: list of cubes of individual elements in nums\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n\nif __name__ == '__main__':\n    print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81"}
{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n\ndef cal_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n\n\nif __name__ == '__main__':\n    print(cal_sum(9))\n"}
{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n\ndef extract_string(string_list, size):\n    \"\"\"\n    :param string_list: list of strings\n    :param size: size of string to extract\n    :return: list of strings\n    \"\"\"\n    return [string_list[i:i + size] for i in range(len(string_list)) if len(string_list[i:i + size]) == size]\n\n\nif __name__ == '__main__':\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 10))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 1))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 100))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -100))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -100000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -100000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -100000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1000000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10000000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -100000000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1000000000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10000000000000000))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10000000"}
{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n\ndef remove_whitespaces(string):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    :param string: string to remove whitespaces from\n    :return: string without whitespaces\n    \"\"\"\n    return ''.join(string.split())\n\n\nif __name__ == '__main__':\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whites"}
{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n\ndef sumofFactors(n):\n    \"\"\"\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(10)\n    20\n    >>> sumofFactors(12)\n    24\n    >>> sumofFactors(14)\n    26\n    >>> sumofFactors(16)\n    28\n    >>> sumofFactors(17)\n    28\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\ndef text_match_wordz(text):\n    return \"z\" in text\n\n\ndef test_text_match_wordz():\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz\")==True\n    assert text_match_wordz(\"pythonz.z\")==True\n    assert text_match_wordz(\"pythonz.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z\")==True\n    assert text_match_wordz(\"pythonz.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z."}
{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n\ndef check_monthnumb_number(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    elif month_number == 4 or month_number == 6 or month_number == 9 or month_number == 11:\n        return False\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_monthnumb_number(5))\n    print(check_monthnumb_number(12))\n    print(check_monthnumb_number(1))\n    print(check_monthnumb_number(13))\n    print(check_monthnumb_number(10))\n    print(check_monthnumb_number(11))\n    print(check_monthnumb_number(13))\n    print(check_monthnumb_number(14))\n    print(check_monthnumb_number(15))\n    print(check_monthnumb_number(16))\n    print(check_monthnumb_number(17))\n    print(check_monthnumb_number(18))\n    print(check_monthnumb_number(19))\n    print(check_monthnumb_number(20))\n    print(check_monthnumb_number(21))\n    print(check_monthnumb_number(22))\n    print(check_monthnumb_number(23))\n    print(check_monthnumb_number(24))\n    print(check_monthnumb_number(25))\n    print(check_monthnumb_number(26))\n    print(check_monthnumb_number(27))\n    print(check_monthnumb_number(28))\n    print(check_monthnumb_number(29))\n    print(check_monthnumb_number(30))\n    print(check_monthnumb_number(31))\n    print(check_monthnumb_number(32))\n    print(check_monthnumb_number(33))\n    print(check_monthnumb_number(34))\n    print(check_monthnumb_number(35))\n    print(check_monthnumb_number(36))\n    print(check_monthnumb_number(37))\n    print(check_monthnumb_number(38))\n    print(check_monthnumb_number(39))\n    print(check_monthnumb_number(40))\n    print(check_monthnumb_number(41))\n    print(check_monthnumb_number(42))\n    print(check_monthnumb_number(43))\n    print(check_monthnumb_number(44))\n    print(check_monthnumb_number(45))\n    print(check_monthnumb_number(46))\n    print(check_monthnumb_number(47))\n    print(check_monthnumb_number(48))\n    print(check_monthnumb_number(49))\n    print(check_monthnumb_number(50))\n    print(check_monthnumb_number(51))\n    print(check_monthnumb_number(52))\n    print(check_monthnumb_number(53))\n    print(check_monthnumb_number(54))\n    print(check_monthnumb_number(55))\n    print(check_monthnumb_number(56))\n    print(check_monthnumb_number(57))\n    print(check_monthnumb_number(58))\n    print(check_monthnumb_number(59))\n    print(check_monthnumb_number(60))\n    print(check_monthnumb_number(61))\n   "}
{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    :param string_list: list of strings\n    :return: list of reversed strings\n    \"\"\"\n    return [string[::-1] for string in string_list]\n\n\nif __name__ == '__main__':\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n    print(reverse_string_list(['R', 'G', 'B', 'W', 'K', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']))\n"}
{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n\ndef Find_Min(arr):\n    min_len = len(arr[0])\n    min_sublist = arr[0]\n    for i in range(1, len(arr)):\n        if len(arr[i]) < min_len:\n            min_len = len(arr[i])\n            min_sublist = arr[i]\n    return min_sublist\n\n\nprint(Find_Min([[1], [1, 2], [1, 2, 3]]))\n"}
{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n\ndef rectangle_area(length, width):\n    \"\"\"\n    :param length: length of the rectangle\n    :param width: width of the rectangle\n    :return: area of the rectangle\n    \"\"\"\n    return length * width\n\n\nif __name__ == '__main__':\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))"}
{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n\ndef remove_uppercase(string):\n    \"\"\"\n    :param string: string\n    :return: string without uppercase substrings\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        if string[i].islower():\n            result += string[i]\n    return result\n\n\nif __name__ == '__main__':\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoR"}
{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n\ndef Extract(lst):\n    return [x[0] for x in lst]\n\n\nif __name__ == '__main__':\n    print(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n    print(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]))\n    print(Extract([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))\n    print(Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]))\n    print(Extract([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]))\n    print(Extract([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21]]))\n    print(Extract([[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24]]))\n    print(Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24, 25, 26, 27]]))\n    print(Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]))\n    print(Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]))\n    print(Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36"}
{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n\ndef upper_ctr(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return sum(1 for c in string if c.isupper())\n\n\nif __name__ == '__main__':\n    print(upper_ctr('PYthon'))\n    print(upper_ctr('Python'))\n    print(upper_ctr('python'))\n    print(upper_ctr('PythOn'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print(upper_ctr('PythoN'))\n    print("}
{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n\ndef combinations_list(list_):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    :param list_: list\n    :return: list\n    \"\"\"\n    if not list_:\n        return [[]]\n    else:\n        head = list_[0]\n        tail = list_[1:]\n        return [combination + [head] for combination in combinations_list(tail)] + combinations_list(tail)\n\n\nif __name__ == '__main__':\n    print(combinations_list(['orange', 'red', 'green', 'blue']))\n    print(combinations_list(['a', 'b', 'c']))\n    print(combinations_list(['a', 'b', 'c', 'd']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r']))\n    print(combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's']))\n    print(combinations_list(['a', 'b', '"}
{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n\ndef max_subarray_product(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: maximum product of subarray\n    \"\"\"\n    max_product = arr[0]\n    min_product = arr[0]\n    max_product_so_far = arr[0]\n    min_product_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], max_product * arr[i], min_product * arr[i])\n        max_product_so_far = max(max_product, max_product_so_far)\n        min_product_so_far = min(min_product, min_product_so_far)\n    return max_product_so_far\n\n\nif __name__ == '__main__':\n    print(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -7, 5, -3, 5]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -7, 5, -3, 5, 6, 7, 8, 9, 10]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -7, 5, -3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -7, 5, -3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,"}
{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\n\nif __name__ == '__main__':\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue'}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None, 'c12': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None, 'c12': None, 'c13': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None, 'c12': None, 'c13': None, 'c14': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c"}
{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\n\ndef max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        if arr[i] < min_product:\n            min_product = arr[i]\n        if max_product < min_product:\n            max_product = max_product * min_product\n            min_product = arr[i]\n    return max_product\n\n\nif __name__ == '__main__':\n    print(max_product([3, 100, 4, 5, 150, 6]))\n    print(max_product([1, 2, 3, 4, 5]))\n    print(max_product([1, 2, 3, 4, 5, 6]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(max_product([1, 2, 3, 4, 5,"}
{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n\ndef add_pairwise(t):\n    \"\"\"\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((1, 2, 3, 4, 5))\n    (3, 5, 7, 9)\n    >>> add_pairwise((1, 2, 3))\n    (3, 5)\n    >>> add_pairwise((1, 2))\n    (3)\n    >>> add_pairwise((1))\n    ()\n    >>> add_pairwise(())\n    ()\n    \"\"\"\n    return tuple(a + b for a, b in zip(t, t[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\n\ndef find_remainder(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: integer\n    \"\"\"\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0] * arr[1]) % n\n    if len(arr) == 3:\n        return (arr[0] * arr[1] * arr[2]) % n\n    if len(arr) == 4:\n        return (arr[0] * arr[1] * arr[2] * arr[3]) % n\n    if len(arr) == 5:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4]) % n\n    if len(arr) == 6:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]) % n\n    if len(arr) == 7:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]) % n\n    if len(arr) == 8:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7]) % n\n    if len(arr) == 9:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8]) % n\n    if len(arr) == 10:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9]) % n\n    if len(arr) == 11:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10]) % n\n    if len(arr) == 12:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11]) % n\n    if len(arr) == 13:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12]) % n\n    if len(arr) == 14:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13]) % n\n    if len(arr) == 15:\n        return (arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13] * arr[14]) % n\n    if len(arr"}
{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n\ndef check_Consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1]-arr[i] != 1:\n            return False\n    return True\n\n\nprint(check_Consecutive([1, 2, 3, 4, 5]))\nprint(check_Consecutive([1, 2, 3, 5, 6]))\nprint(check_Consecutive([1, 2, 3, 4, 6]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(check_Consecutive([1, 2, 3, 4, 5, "}
{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n\ndef tuple_intersection(tuple_list, tuple_list2):\n    \"\"\"\n    :param tuple_list: tuple list\n    :param tuple_list2: tuple list\n    :return: tuple intersection\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list:\n        for tuple2 in tuple_list2:\n            if tuple1 == tuple2:\n                intersection.add(tuple1)\n    return intersection\n\n\nif __name__ == '__main__':\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([("}
{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    Replace all occurences of old_char in string with new_char\n    :param string: string to be replaced\n    :param old_char: character to be replaced\n    :param new_char: character to replace old_char\n    :return: string with all occurences of old_char replaced with new_char\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n\nif __name__ == '__main__':\n    print(replace_char(\"polygon\", 'y', 'l'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'o', 'a"}
{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by key.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[0])\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by key and value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Math', 81), ('Physics', 83)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[0], reverse=True)\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by value and key.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by value and key.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by value and key.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by value and key.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\"\"\"\nWrite a function to sort a dictionary by value and key.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\nprint(sort_counter({'Math':"}
{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\n\nprint(big_sum([1, 2, 3]))\nprint(big_sum([10, 20, 30, 40, 50]))\nprint(big_sum([100, 200, 300, 400, 500]))\nprint(big_sum([1000, 2000, 3000, 4000, 5000]))\nprint(big_sum([10000, 20000, 30000, 40000, 50000]))\nprint(big_sum([100000, 200000, 300000, 400000, 500000]))\nprint(big_sum([1000000, 2000000, 3000000, 4000000, 5000000]))\nprint(big_sum([10000000, 20000000, 30000000, 40000000, 50000000]))\nprint(big_sum([100000000, 200000000, 300000000, 400000000, 500000000]))\nprint(big_sum([1000000000, 2000000000, 3000000000, 4000000000, 5000000000]))\nprint(big_sum([10000000000, 20000000000, 30000000000, 40000000000, 50000000000]))\nprint(big_sum([100000000000, 200000000000, 300000000000, 400000000000, 500000000000]))\nprint(big_sum([1000000000000, 2000000000000, 3000000000000, 4000000000000, 5000000000000]))\nprint(big_sum([10000000000000, 20000000000000, 30000000000000, 40000000000000, 50000000000000]))\nprint(big_sum([100000000000000, 200000000000000, 300000000000000, 400000000000000, 500000000000000]))\nprint(big_sum([1000000000000000, 2000000000000000, 3000000000000000, 4000000000000000, 5000000000000000]))\n"}
{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n\ndef is_lower(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return string.lower()\n\n\nif __name__ == '__main__':\n    print(is_lower(\"InValid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower"}
{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n\ndef remove_lowercase(string):\n    \"\"\"\n    :param string: string to remove lowercase substrings from\n    :return: string without lowercase substrings\n    \"\"\"\n    return ''.join(c for c in string if c.isupper())\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lower"}
{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n\ndef first_Digit(num):\n    return int(str(num)[0])\n\n\nif __name__ == '__main__':\n    print(first_Digit(123))\n    print(first_Digit(1234))\n    print(first_Digit(12345))\n    print(first_Digit(123456))\n    print(first_Digit(1234567))\n    print(first_Digit(12345678))\n    print(first_Digit(123456789))\n    print(first_Digit(1234567890))\n    print(first_Digit(12345678901))\n    print(first_Digit(123456789012))\n    print(first_Digit(1234567890123))\n    print(first_Digit(12345678901234))\n    print(first_Digit(123456789012345))\n    print(first_Digit(1234567890123456))\n    print(first_Digit(12345678901234567))\n    print(first_Digit(123456789012345678))\n    print(first_Digit(1234567890123456789))\n    print(first_Digit(12345678901234567890))\n    print(first_Digit(123456789012345678901))\n    print(first_Digit(1234567890123456789012))\n    print(first_Digit(12345678901234567890123))\n    print(first_Digit(123456789012345678901234))\n    print(first_Digit(1234567890123456789012345))\n    print(first_Digit(12345678901234567890123456))\n    print(first_Digit(123456789012345678901234567))\n    print(first_Digit(1234567890123456789012345678))\n    print(first_Digit(12345678901234567890123456789))\n    print(first_Digit(123456789012345678901234567890))\n    print(first_Digit(1234567890123456789012345678901))\n    print(first_Digit(12345678901234567890123456789012))\n    print(first_Digit(123456789012345678901234567890123))\n    print(first_Digit(1234567890123456789012345678901234))\n    print(first_Digit(123456789012345678901"}
{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n\n\ndef Split(list):\n    return [x for x in list if x % 2 == 1]\n\n\ndef Split(list):\n    return [x for x in"}
{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\n\ndef difference(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum([i ** 3 for i in range(1, n + 1)]) - sum(range(1, n + 1))\n\n\nif __name__ == '__main__':\n    print(difference(3))\n    print(difference(4))\n    print(difference(5))\n    print(difference(6))\n    print(difference(7))\n    print(difference(8))\n    print(difference(9))\n    print(difference(10))\n    print(difference(11))\n    print(difference(12))\n    print(difference(13))\n    print(difference(14))\n    print(difference(15))\n    print(difference(16))\n    print(difference(17))\n    print(difference(18))\n    print(difference(19))\n    print(difference(20))\n    print(difference(21))\n    print(difference(22))\n    print(difference(23))\n    print(difference(24))\n    print(difference(25))\n    print(difference(26))\n    print(difference(27))\n    print(difference(28))\n    print(difference(29))\n    print(difference(30))\n    print(difference(31))\n    print(difference(32))\n    print(difference(33))\n    print(difference(34))\n    print(difference(35))\n    print(difference(36))\n    print(difference(37))\n    print(difference(38))\n    print(difference(39))\n    print(difference(40))\n    print(difference(41))\n    print(difference(42))\n    print(difference(43))\n    print(difference(44))\n    print(difference(45))\n    print(difference(46))\n    print(difference(47))\n    print(difference(48))\n    print(difference(49))\n    print(difference(50))\n    print(difference(51))\n    print(difference(52))\n    print(difference(53))\n    print(difference(54))\n    print(difference(55))\n    print(difference(56))\n    print(difference(57))\n    print(difference(58))\n    print(difference(59))\n    print(difference(60))\n    print(difference(61))\n    print(difference(62))\n    print(difference(63))\n    print(difference(64))\n    print(difference(65))\n    print(difference(66))\n    print(difference(67))\n    print(difference(68))\n    print(difference(69))\n    print(difference(70))\n    print(difference(71))\n    print(difference(72))\n    print(difference(73))\n    print(difference(74))\n    print(difference(75))\n    print(difference(76))\n    print(difference(77))\n    print(difference(78))\n    print(difference(79))\n    print(difference(80))\n    print(difference(81))\n    print(difference(82))\n    print(difference(83))\n    print(difference(84))\n    print(difference(85))\n    print(difference(86))\n    print(difference(87))\n    print(difference(88))\n    print(difference(89))\n    print(difference(90))\n    print(difference(91))\n    print(difference(92))\n    print(difference(93))"}
{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\n\ndef find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 1:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(find_Odd_Pair([5, 4, 7, 2, 1], 5))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 5))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 4))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 3))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 2))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 1))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 0))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -1))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -2))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -3))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -4))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -5))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -6))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -7))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -8))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -9))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -10))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -11))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -12))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -13))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -14))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -15))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -16))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -17))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -18))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -19))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -20))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -21))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -22))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -23))\n    print(find_Odd_Pair([1, 2, 3"}
{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\n\ndef toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n    :param string:\n    :return:\n    \"\"\"\n    return string.swapcase()\n\n\nif __name__ == '__main__':\n    print(toggle_string(\"Python\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"PythOn\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print(toggle_string(\"pYTHON\"))\n    print("}
{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\n\ndef digit_distance_nums(num1, num2):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :return: int\n    \"\"\"\n    num1_list = list(str(num1))\n    num2_list = list(str(num2))\n    if len(num1_list) != len(num2_list):\n        return 0\n    else:\n        return sum([abs(int(num1_list[i]) - int(num2_list[i])) for i in range(len(num1_list))])\n\n\nif __name__ == '__main__':\n    print(digit_distance_nums(1, 2))\n    print(digit_distance_nums(12, 23))\n    print(digit_distance_nums(123, 234))\n    print(digit_distance_nums(1234, 2345))\n    print(digit_distance_nums(12345, 23456))\n    print(digit_distance_nums(123456, 234567))\n    print(digit_distance_nums(1234567, 2345678))\n    print(digit_distance_nums(12345678, 23456789))\n    print(digit_distance_nums(123456789, 234567890))\n    print(digit_distance_nums(1234567890, 2345678901))\n    print(digit_distance_nums(12345678901, 23456789012))\n    print(digit_distance_nums(123456789012, 23456789013))\n    print(digit_distance_nums(1234567890123, 234567890124))\n    print(digit_distance_nums(12345678901234, 2345678901235))\n    print(digit_distance_nums(123456789012345, 23456789012346))\n    print(digit_distance_nums(1234567890123456, 234567890123457))\n    print(digit_distance_nums(12345678901234567, 2345678901234568))\n    print(digit_distance_nums(123456789012345678, 23456789012345679))\n    print(digit_distance_nums(1234567890123456789, 234567890123456790))\n    print(digit_distance_nums(12345678901234567890, 2345678901234567901))\n    print(digit_distance_nums(123456789012345678901, 23456789012345679012))\n    print(digit_distance_nums(1234567890123456789012, 23456789012345679013))\n    print("}
{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\n\ndef max_sub_array_sum(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if i >= k:\n            curr_sum -= arr[i - k]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 3))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 0))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 100))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 100000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 100000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1000000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10000000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 100000000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1000000000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10000000000000))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 100000000000000))\n    print(max_sub_array_sum(["}
{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\n\ndef union_elements(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    return sorted(set(t1) | set(t2))\n\n\nif __name__ == '__main__':\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))\n    print(union_elements((1, 2, 3), (3, 4, 5)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(union_elements((1, 2, 3), ("}
{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n\n\ndef Find_Max_Length(list_of_lists):\n    \"\"\"\n    Find the length of the longest sublists.\n    :param list_of_lists: list of lists\n    :return: int\n    \"\"\"\n    max_length = 0\n    for i in range(len(list_of_lists)):\n        for j in range(i, len(list_of_lists)):\n            if len(list_of_lists[i:j + 1]) > max_length:\n                max_length = len(list_of_lists[i:j + 1])\n    return max_length\n\n\nif __name__ == '__main__':\n    print(Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7],\n                           [1, 2, 3, 4, 5, 6, 7, 8]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7],\n                           [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7],\n                           [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7],\n                           [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, "}
{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\n\ndef extract_values(string):\n    \"\"\"\n    :param string: string to extract values from\n    :return: list of values\n    \"\"\"\n    return [value.strip('\"') for value in string.split(',')]\n\n\nif __name__ == '__main__':\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"', ','))"}
{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    arr = [1,2,1]\n    n = 3\n    print(count_Pairs(arr,n))\n\n\"\"\"\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\nExplanation:\nWe iterate through the list and for each element we iterate through the rest of the list and check if the element is unequal to the current element.\n\nSample Input:\narr = [1,2,1]\nn = 3\n\nSample Output:\n2\n\nExplanation:\nWe have 2 possible pairs:\n1,2\n2,1\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\"\"\"\n\n\"\"\"\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr["}
{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\n\ndef split(string):\n    return [char for char in string]\n\n\nif __name__ == '__main__':\n    print(split('python'))\n    print(split('hello'))\n    print(split(''))\n    print(split(' '))\n    print(split('  '))\n    print(split('  hello  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print(split('  hello  world  '))\n    print("}
{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n\n\ndef sum_digits(n):\n    \"\"\"\n    :param n: a non-negative integer\n    :return: the sum of the digits of n\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\nif __name__ == '__main__':\n    print(sum_digits(345))\n    print(sum_digits(123456789))\n    print(sum_digits(1234567890))\n    print(sum_digits(12345678901))\n    print(sum_digits(123456789012))\n    print(sum_digits(1234567890123))\n    print(sum_digits(12345678901234))\n    print(sum_digits(123456789012345))\n    print(sum_digits(1234567890123456))\n    print(sum_digits(12345678901234567))\n    print(sum_digits(123456789012345678))\n    print(sum_digits(1234567890123456789))\n    print(sum_digits(12345678901234567890))\n    print(sum_digits(123456789012345678901))\n    print(sum_digits(1234567890123456789012))\n    print(sum_digits(12345678901234567890123))\n    print(sum_digits(123456789012345678901234))\n    print(sum_digits(1234567890123456789012345))\n    print(sum_digits(12345678901234567890123456))\n    print(sum_digits(123456789012345678901234567))\n    print(sum_digits(1234567890123456789012345678))\n    print(sum_digits(12345678901234567890123456789))\n    print(sum_digits(123456789012345678901234567890))\n    print(sum_digits(1234567890123456789012345678901))\n    print(sum_digits(12345678901234567890123456789012))\n    print(sum_digits(123456789012345678901234567890123))\n    print(sum_digits(1234567890123456789012345678901234))\n    print(sum_digits(12345678901234567890123456789012345))\n    print"}
{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\n\ndef issort_list(list_):\n    \"\"\"\n    :param list_: list\n    :return: bool\n    \"\"\"\n    for i in range(len(list_) - 1):\n        if list_[i] > list_[i + 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 15]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26"}
{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\ndef empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * n\n\n\ndef test_empty_list():\n    assert empty_list(5) == [{}, {}, {}, {}, {}]\n\n\nif __name__ == '__main__':\n    test_empty_list()\n"}
{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n\ndef sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    :param lst: list of lists\n    :return: list of lists\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n\nif __name__ == '__main__':\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists(["}
{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\n\ndef two_unique_nums(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: list of numbers with duplicates removed\n    \"\"\"\n    # create a set of numbers\n    num_set = set(nums)\n    # create a list of numbers\n    num_list = list(num_set)\n    # return the list\n    return num_list\n\n\nif __name__ == '__main__':\n    print(two_unique_nums([1, 2, 3, 2, 3, 4, 5]))\n    print(two_unique_nums([1, 2, 3, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\n\ndef unique_product(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: product of unique numbers\n    \"\"\"\n    nums.sort()\n    product = 1\n    for i in range(len(nums)):\n        if i == 0:\n            product = nums[i]\n        elif nums[i] != nums[i - 1]:\n            product *= nums[i]\n    return product\n\n\nif __name__ == '__main__':\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))\n    print"}
{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\n\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    :param radius: radius of the cylinder\n    :param height: height of the cylinder\n    :return: surface area of the cylinder\n    \"\"\"\n    return 2 * (radius * radius * 3.14) + (2 * radius * height)\n\n\nif __name__ == '__main__':\n    print(surfacearea_cylinder(10, 5))\n    print(surfacearea_cylinder(5, 10))\n    print(surfacearea_cylinder(10, 10))\n    print(surfacearea_cylinder(1, 1))\n    print(surfacearea_cylinder(1, 10))\n    print(surfacearea_cylinder(10, 1))\n    print(surfacearea_cylinder(10, 100))\n    print(surfacearea_cylinder(100, 10))\n    print(surfacearea_cylinder(100, 100))\n    print(surfacearea_cylinder(1000, 1000))\n    print(surfacearea_cylinder(10000, 10000))\n    print(surfacearea_cylinder(100000, 100000))\n    print(surfacearea_cylinder(1000000, 1000000))\n    print(surfacearea_cylinder(10000000, 10000000))\n    print(surfacearea_cylinder(100000000, 100000000))\n    print(surfacearea_cylinder(1000000000, 1000000000))\n    print(surfacearea_cylinder(10000000000, 10000000000))\n    print(surfacearea_cylinder(100000000000, 100000000000))\n    print(surfacearea_cylinder(1000000000000, 1000000000000))\n    print(surfacearea_cylinder(10000000000000, 10000000000000))\n    print(surfacearea_cylinder(100000000000000, 100000000000000))\n    print(surfacearea_cylinder(1000000000000000, 1000000000000000))\n    print(surfacearea_cylinder(10000000000000000, 10000000000000000))\n    print(surfacearea_cylinder(100000000000000000, 100000000000000000))\n    print(surfacearea_cylinder(1000000000000000000, 1000000000000000000))\n    print(surfacearea_cylinder(10000000000000000000, 10000000000000000000))\n    print(surfacearea_cylinder(10000000"}
{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\n\ndef is_Sub_Array(arr, sub_arr):\n    if len(arr) < len(sub_arr):\n        return False\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i + len(sub_arr)] == sub_arr:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_Sub_Array([1, 4, 3, 5], [1, 2]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(is_Sub_Array([1, 4, 3, "}
{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\n\ndef last_Digit_Factorial(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1) % 10\n\n\nif __name__ == '__main__':\n    print(last_Digit_Factorial(4))\n    print(last_Digit_Factorial(5))\n    print(last_Digit_Factorial(6))\n    print(last_Digit_Factorial(7))\n    print(last_Digit_Factorial(8))\n    print(last_Digit_Factorial(9))\n    print(last_Digit_Factorial(10))\n    print(last_Digit_Factorial(11))\n    print(last_Digit_Factorial(12))\n    print(last_Digit_Factorial(13))\n    print(last_Digit_Factorial(14))\n    print(last_Digit_Factorial(15))\n    print(last_Digit_Factorial(16))\n    print(last_Digit_Factorial(17))\n    print(last_Digit_Factorial(18))\n    print(last_Digit_Factorial(19))\n    print(last_Digit_Factorial(20))\n    print(last_Digit_Factorial(21))\n    print(last_Digit_Factorial(22))\n    print(last_Digit_Factorial(23))\n    print(last_Digit_Factorial(24))\n    print(last_Digit_Factorial(25))\n    print(last_Digit_Factorial(26))\n    print(last_Digit_Factorial(27))\n    print(last_Digit_Factorial(28))\n    print(last_Digit_Factorial(29))\n    print(last_Digit_Factorial(30))\n    print(last_Digit_Factorial(31))\n    print(last_Digit_Factorial(32))\n    print(last_Digit_Factorial(33))\n    print(last_Digit_Factorial(34))\n    print(last_Digit_Factorial(35))\n    print(last_Digit_Factorial(36))\n    print(last_Digit_Factorial(37))\n    print(last_Digit_Factorial(38))\n    print(last_Digit_Factorial(39))\n    print(last_Digit_Factorial(40))\n    print(last_Digit_Factorial(41))\n    print(last_Digit_Factorial(42))\n    print(last_Digit_Factorial(43))\n    print(last_Digit_Factorial(44))\n    print(last_Digit_Factorial(45))\n    print(last_Digit_Factorial(46))\n    print(last_Digit_Factorial(47))\n    print(last_Digit_Factorial(48))\n    print(last_Digit_Factorial(49))\n    print(last_Digit_Factorial(50))\n    print(last_Digit_"}
{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\n\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    :param list1: list of ints\n    :param list2: list of ints\n    :param list3: list of ints\n    :return: list of ints\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Lists must be of the same length\")\n    else:\n        interleaved_list = []\n        for i in range(len(list1)):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        return interleaved_list\n\n\nif __name__ == '__main__':\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    print(interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 6"}
{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n\n\ndef find_dissimilar(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(sorted(set(t1) ^ set(t2)))\n\n\nif __name__ == '__main__':\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10"}
{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\n\ndef extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if isinstance(x, tuple) or x % 2 == 0)\n    else:\n        return t\n\n\nif __name__ == '__main__':\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)))\n    print(extract_even((4, 5"}
{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\ndef surface_Area(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_2(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_3(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_4(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_5(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_6(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_7(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_8(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_9(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_10(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_11(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_12(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_13(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_14(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_15(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_16(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_17(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_18(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_19(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_20(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_21(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_22(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_23(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_24(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_25(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_26(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_27(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_28(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_29(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_30(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_31(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_32(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_33(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_34(base, height):\n    return 2 * base * height + base * base\n\n\ndef surface_Area_35(base, height):\n"}
{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\n\n\ndef my_dict(dict_):\n    if dict_ == {}:\n        return True\n    else:\n        return False\n\n\nprint(my_dict({}))\nprint(my_dict({10}))\nprint(my_dict({10, 20}))\nprint(my_dict({10, 20, 30}))\nprint(my_dict({10, 20, 30, 40}))\nprint(my_dict({10, 20, 30, 40, 50}))\nprint(my_dict({10, 20, 30, 40, 50, 60}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180}))\nprint(my_dict({10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, "}
{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n\n\ndef catalan_number(n):\n    \"\"\"\n    >>> catalan_number(10)\n    16796\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) / n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\n\ndef expensive_items(dataset, n):\n    \"\"\"\n    :param dataset: list of dictionaries\n    :param n: number of items to return\n    :return: list of n most expensive items\n    \"\"\"\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]\n\n\nif __name__ == '__main__':\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 3))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 4))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 5))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 6))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 7))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 8))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 9))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 10))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 11))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 12))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 13))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 14))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 15))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 16))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555."}
{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))\n\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to"}
{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\n\ndef list_tuple(list_):\n    return tuple(list_)\n\n\nif __name__ == '__main__':\n    print(list_tuple([5, 10, 7, 4, 15, 3]))\n"}
{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\n\ndef big_diff(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: difference between largest and smallest value in a given list\n    \"\"\"\n    return max(lst) - min(lst)\n\n\nif __name__ == '__main__':\n    print(big_diff([1, 2, 3, 4]))\n    print(big_diff([10, 3, 5, 6]))\n    print(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\n    print(big_diff([10, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\n\ndef perfect_squares(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            result.append(i)\n    return result\n\n\nif __name__ == '__main__':\n    print(perfect_squares(1, 30))\n    print(perfect_squares(1, 10))\n    print(perfect_squares(1, 1))\n    print(perfect_squares(1, 0))\n    print(perfect_squares(1, -1))\n    print(perfect_squares(1, -10))\n    print(perfect_squares(1, -100))\n    print(perfect_squares(1, -1000))\n    print(perfect_squares(1, -10000))\n    print(perfect_squares(1, -100000))\n    print(perfect_squares(1, -1000000))\n    print(perfect_squares(1, -10000000))\n    print(perfect_squares(1, -100000000))\n    print(perfect_squares(1, -1000000000))\n    print(perfect_squares(1, -10000000000))\n    print(perfect_squares(1, -100000000000))\n    print(perfect_squares(1, -1000000000000))\n    print(perfect_squares(1, -10000000000000))\n    print(perfect_squares(1, -100000000000000))\n    print(perfect_squares(1, -1000000000000000))\n    print(perfect_squares(1, -10000000000000000))\n    print(perfect_squares(1, -100000000000000000))\n    print(perfect_squares(1, -1000000000000000000))\n    print(perfect_squares(1, -10000000000000000000))\n    print(perfect_squares(1, -100000000000000000000))\n    print(perfect_squares(1, -1000000000000000000000))\n    print(perfect_squares(1, -10000000000000000000000))\n    print(perfect_squares(1, -100000000000000000000000))\n    print(perfect_squares(1, -1000000000000000000000000))\n    print(perfect_squares(1, -10000000000000000000000000))\n    print(perfect_squares(1, -100000000000000000000000000))\n    print(perfect_squares(1, -1000000000"}
{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\ndef test_polar_rect():\n    \"\"\"\n    Test polar_rect.\n    \"\"\"\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\nif __name__ == '__main__':\n    test_polar_rect()\n\n"}
{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\n\ndef swap_List(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list\n\n\nprint(swap_List([12, 35, 9, 56, 24]))\n"}
{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\n\ndef sum_Of_product(n):\n    \"\"\"\n    >>> sum_Of_product(3)\n    15\n    \"\"\"\n    return sum(binomial_coefficient(n, i) * binomial_coefficient(n, i + 1) for i in range(n - 1))\n\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    >>> binomial_coefficient(3, 2)\n    3\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\ndef factorial(n):\n    \"\"\"\n    >>> factorial(3)\n    6\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n\n\ndef removezero_ip(ip):\n    \"\"\"\n    :param ip:\n    :return:\n    \"\"\"\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0':\n            ip_list[i] = ''\n    return '.'.join(ip_list)\n\n\nif __name__ == '__main__':\n    print(removezero_ip('216.08.094.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94.196'))\n    print(removezero_ip('216.8.94."}
{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n\n\ndef diff_even_odd(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: difference of the first even and first odd number of a given list\n    \"\"\"\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return 0\n    if len(lst) == 2:\n        return lst[0] - lst[1]\n    if len(lst) == 3:\n        return lst[0] - lst[2]\n    if len(lst) == 4:\n        return lst[0] - lst[3]\n    if len(lst) == 5:\n        return lst[0] - lst[4]\n    if len(lst) == 6:\n        return lst[0] - lst[5]\n    if len(lst) == 7:\n        return lst[0] - lst[6]\n    if len(lst) == 8:\n        return lst[0] - lst[7]\n    if len(lst) == 9:\n        return lst[0] - lst[8]\n    if len(lst) == 10:\n        return lst[0] - lst[9]\n    if len(lst) == 11:\n        return lst[0] - lst[10]\n    if len(lst) == 12:\n        return lst[0] - lst[11]\n    if len(lst) == 13:\n        return lst[0] - lst[12]\n    if len(lst) == 14:\n        return lst[0] - lst[13]\n    if len(lst) == 15:\n        return lst[0] - lst[14]\n    if len(lst) == 16:\n        return lst[0] - lst[15]\n    if len(lst) == 17:\n        return lst[0] - lst[16]\n    if len(lst) == 18:\n        return lst[0] - lst[17]\n    if len(lst) == 19:\n        return lst[0] - lst[18]\n    if len(lst) == 20:\n        return lst[0] - lst[19]\n    if len(lst) == 21:\n        return lst[0] - lst[20]\n    if len(lst) == 22:\n        return lst[0] - lst[21]\n    if len(lst) == 23:\n        return lst[0] - lst[22]\n    if len(lst) == 24:\n        return lst[0] - lst[23]\n    if len(lst) == 25:\n        return lst[0] - lst[24]\n    if len(lst) == 26:\n        return lst[0] - lst[25]\n    if len(lst) == 27:\n        return lst[0] - lst[26]\n    if len(lst) == 28:\n        return lst[0] - lst[27]\n    if len(lst) == 29:\n        return lst[0] - lst[28]\n    if len(lst) == 30:\n        return lst[0] - lst[29]\n    if len(lst) == 31:\n        return lst[0] - lst[30]\n    if len(lst) == 32:\n        return lst[0] - lst[31]\n    if len(lst) == 33:\n        return lst[0] - lst[32]\n    if len(lst) == 34:\n        return lst[0] - lst[33]\n    if len(lst) == 35:\n        return lst[0] - lst[34]\n    if len(lst) == 36:\n        return lst[0] - lst[35]\n    if len(lst) == 37:\n        return lst[0] - lst[36]"}
{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\n\n\ndef min_Swaps(str1, str2):\n    \"\"\"\n    :param str1: str\n    :param str2: str\n    :return: int\n    \"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1010\", \"1100\"))\n    print(min_Swaps(\"1010\", \"1001\"))\n    print(min_Swaps(\"1010\", \"1011\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"1010\"))\n    print(min_Swaps(\"1010\", \"101"}
{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\nimport sys\n\n\ndef tuple_size(t):\n    \"\"\"\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )\n    48\n    \"\"\"\n    return sys.getsizeof(t)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\n\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    :param arr1: sorted array\n    :param arr2: sorted array\n    :param k: kth element\n    :return: kth element\n    \"\"\"\n    if not arr1 or not arr2:\n        return None\n    if k > len(arr1) + len(arr2):\n        return None\n    if k > len(arr1):\n        return arr2[k - len(arr1) - 1]\n    if k > len(arr2):\n        return arr1[k - len(arr2) - 1]\n    if k == len(arr1):\n        return arr2[k - 1]\n    if k == len(arr2):\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == 2:\n        return max(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    if k == len(arr1) + len(arr2) - 2:\n        return min(arr1[-1], arr2[-1])\n    if k > len(arr1) // 2:\n        return find_kth(arr1, arr2[k - len(arr1) - 1:], k - len(arr1))\n    if k > len(arr2) // 2:\n        return find_kth(arr1[k - len(arr2) - 1:], arr2, k - len(arr2))\n    if k == len(arr1) // 2:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 1:\n        return min(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2 + 1:\n        return min(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 2:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2 + 2:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 3:\n        return min(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2 + 3:\n        return min(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 4:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2 + 4:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 5:\n        return min(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2 + 5:\n        return min(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 6:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr2) // 2 + 6:\n        return max(arr1[k - 1], arr2[k - 1])\n    if k == len(arr1) // 2 + 7:\n        return min(arr1[k - 1], arr2[k - 1])"}
{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n\n\ndef armstrong_number(n):\n    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        num_list = list(str(n))\n        num_list_len = len(num_list)\n        num_list_sum = 0\n        for i in num_list:\n            num_list_sum += int(i) ** num_list_len\n        if num_list_sum == n:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    print(armstrong_number(153))\n    print(armstrong_number(123))\n    print(armstrong_number(100))\n    print(armstrong_number(1000))\n    print(armstrong_number(10000))\n    print(armstrong_number(100000))\n    print(armstrong_number(1000000))\n    print(armstrong_number(10000000))\n    print(armstrong_number(100000000))\n    print(armstrong_number(1000000000))\n    print(armstrong_number(10000000000))\n    print(armstrong_number(100000000000))\n    print(armstrong_number(1000000000000))\n    print(armstrong_number(10000000000000))\n    print(armstrong_number(100000000000000))\n    print(armstrong_number(1000000000000000))\n    print(armstrong_number(10000000000000000))\n    print(armstrong_number(100000000000000000))\n    print(armstrong_number(1000000000000000000))\n    print(armstrong_number(10000000000000000000))\n    print(armstrong_number(100000000000000000000))\n    print(armstrong_number(1000000000000000000000))\n    print(armstrong_number(10000000000000000000000))\n    print(armstrong_number(100000000000000000000000))\n    print(armstrong_number(1000000000000000000000000))\n    print(armstrong_number(10000000000000000000000000))\n    print(armstrong_number(100000000000000000000000000))\n    print(armstrong_number(1000000000000000000000000000))\n    print(armstrong_number(10000000000000000000000000000))\n    print(armstrong_number(100000000000000000000000000000))\n    print(armstrong_number(1000000000000000000000000000000))\n    print(armstrong_number("}
{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\n\ndef sum_average(n):\n    \"\"\"\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum, sum / n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\n\ndef is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n\nprint(is_Even(1))\nprint(is_Even(2))\nprint(is_Even(3))\nprint(is_Even(4))\nprint(is_Even(5))\nprint(is_Even(6))\nprint(is_Even(7))\nprint(is_Even(8))\nprint(is_Even(9))\nprint(is_Even(10))\nprint(is_Even(11))\nprint(is_Even(12))\nprint(is_Even(13))\nprint(is_Even(14))\nprint(is_Even(15))\nprint(is_Even(16))\nprint(is_Even(17))\nprint(is_Even(18))\nprint(is_Even(19))\nprint(is_Even(20))\nprint(is_Even(21))\nprint(is_Even(22))\nprint(is_Even(23))\nprint(is_Even(24))\nprint(is_Even(25))\nprint(is_Even(26))\nprint(is_Even(27))\nprint(is_Even(28))\nprint(is_Even(29))\nprint(is_Even(30))\nprint(is_Even(31))\nprint(is_Even(32))\nprint(is_Even(33))\nprint(is_Even(34))\nprint(is_Even(35))\nprint(is_Even(36))\nprint(is_Even(37))\nprint(is_Even(38))\nprint(is_Even(39))\nprint(is_Even(40))\nprint(is_Even(41))\nprint(is_Even(42))\nprint(is_Even(43))\nprint(is_Even(44))\nprint(is_Even(45))\nprint(is_Even(46))\nprint(is_Even(47))\nprint(is_Even(48))\nprint(is_Even(49))\nprint(is_Even(50))\nprint(is_Even(51))\nprint(is_Even(52))\nprint(is_Even(53))\nprint(is_Even(54))\nprint(is_Even(55))\nprint(is_Even(56))\nprint(is_Even(57))\nprint(is_Even(58))\nprint(is_Even(59))\nprint(is_Even(60))\nprint(is_Even(61))\nprint(is_Even(62))\nprint(is_Even(63))\nprint(is_Even(64))\nprint(is_Even(65))\nprint(is_Even(66))\nprint(is_Even(67))\nprint(is_Even(68))\nprint(is_Even(69))\nprint(is_Even(70))\nprint(is_Even(71))\nprint(is_Even(72))\nprint(is_Even(73))\nprint(is_Even(74))\nprint(is_Even(75))\nprint(is_Even(76))\nprint(is_Even(77))\nprint(is_Even(78))\nprint(is_Even(79))\nprint(is_Even(80))\nprint(is_Even(81))\nprint(is_Even(82))\nprint(is_Even(83))\nprint(is_Even(84))\nprint(is_Even(85))\n"}
{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\n\ndef first_repeated_char(string):\n    \"\"\"\n    :param string: string\n    :return: first repeated character\n    \"\"\"\n    for char in string:\n        if string.count(char) > 1:\n            return char\n\n\nif __name__ == '__main__':\n    print(first_repeated_char(\"abcabc\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_repeated_char(\"abcabcd\"))\n    print(first_"}
{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\n\ndef get_ludic(n):\n    \"\"\"\n    :param n: int\n    :return: list\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 3]\n    if n == 4:\n        return [1, 2, 3, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if n == 13:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    if n == 14:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    if n == 15:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    if n == 16:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    if n == 17:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    if n == 18:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    if n == 19:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    if n == 20:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, "}
{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\n\ndef reverse_words(string):\n    \"\"\"\n    :param string: string\n    :return: reversed string\n    \"\"\"\n    return \" \".join(string.split()[::-1])\n\n\nif __name__ == '__main__':\n    print(reverse_words(\"python program\"))\n    print(reverse_words(\"hello world\"))\n    print(reverse_words(\"hello world how are you\"))\n    print(reverse_words(\"hello world how are you doing\"))\n    print(reverse_words(\"hello world how are you doing this\"))\n    print(reverse_words(\"hello world how are you doing this is a test\"))\n    print(reverse_words(\"hello world how are you doing this is a test for your sanity\"))\n    print(reverse_words(\"hello world how are you doing this is a test for your sanity and my own\"))\n    print(reverse_words(\"hello world how are you doing this is a test for your sanity and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own and my own"}
{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\n\ndef prime_num(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(prime_num(13))\n    print(prime_num(14))\n    print(prime_num(15))\n    print(prime_num(16))\n    print(prime_num(17))\n    print(prime_num(18))\n    print(prime_num(19))\n    print(prime_num(20))\n    print(prime_num(21))\n    print(prime_num(22))\n    print(prime_num(23))\n    print(prime_num(24))\n    print(prime_num(25))\n    print(prime_num(26))\n    print(prime_num(27))\n    print(prime_num(28))\n    print(prime_num(29))\n    print(prime_num(30))\n    print(prime_num(31))\n    print(prime_num(32))\n    print(prime_num(33))\n    print(prime_num(34))\n    print(prime_num(35))\n    print(prime_num(36))\n    print(prime_num(37))\n    print(prime_num(38))\n    print(prime_num(39))\n    print(prime_num(40))\n    print(prime_num(41))\n    print(prime_num(42))\n    print(prime_num(43))\n    print(prime_num(44))\n    print(prime_num(45))\n    print(prime_num(46))\n    print(prime_num(47))\n    print(prime_num(48))\n    print(prime_num(49))\n    print(prime_num(50))\n    print(prime_num(51))\n    print(prime_num(52))\n    print(prime_num(53))\n    print(prime_num(54))\n    print(prime_num(55))\n    print(prime_num(56))\n    print(prime_num(57))\n    print(prime_num(58))\n    print(prime_num(59))\n    print(prime_num(60))\n    print(prime_num(61))\n    print(prime_num(62))\n    print(prime_num(63))\n    print(prime_num(64))\n    print(prime_num(65))\n    print(prime_num(66))\n    print(prime_num(67))\n    print(prime_num(68))\n    print(prime_num(69))\n    print(prime_num(70))\n    print(prime_num(71))\n    print(prime_num(72))\n    print(prime_num(73))\n    print(prime_num(74))\n    print(prime_num(75))\n    print(prime_num(76))\n    print(prime_num(77))\n    print(prime_num(78))\n    print(prime_num(79))\n    print(prime_num(80))\n    print(prime_num(81))\n    print(prime_num(82))\n    print(prime_num(83))\n    print(prime_num(84))\n    print(prime_num(85))\n    print(prime_num(86))\n    print(prime_num(87))\n    print(prime_num(88))\n    print(prime_num(89))\n    print(prime_num(90))\n    print(prime_num(91))\n    print(prime_num(92))\n    print(prime_num(93))\n    print(prime_num(94))\n    print(prime_num"}
{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degree to radian\n    :param degree: degree\n    :return: radian\n    \"\"\"\n    return degree * (3.141592653589793 / 180)\n\n\nif __name__ == '__main__':\n    print(radian_degree(90))\n    print(radian_degree(180))\n    print(radian_degree(270))\n    print(radian_degree(360))\n    print(radian_degree(450))\n    print(radian_degree(540))\n    print(radian_degree(630))\n    print(radian_degree(720))\n    print(radian_degree(810))\n    print(radian_degree(900))\n    print(radian_degree(1080))\n    print(radian_degree(1260))\n    print(radian_degree(1440))\n    print(radian_degree(1620))\n    print(radian_degree(1800))\n    print(radian_degree(1980))\n    print(radian_degree(2160))\n    print(radian_degree(2340))\n    print(radian_degree(2520))\n    print(radian_degree(2700))\n    print(radian_degree(2880))\n    print(radian_degree(3060))\n    print(radian_degree(3240))\n    print(radian_degree(3420))\n    print(radian_degree(3600))\n    print(radian_degree(3780))\n    print(radian_degree(3960))\n    print(radian_degree(4140))\n    print(radian_degree(4320))\n    print(radian_degree(4500))\n    print(radian_degree(4680))\n    print(radian_degree(4860))\n    print(radian_degree(5040))\n    print(radian_degree(5220))\n    print(radian_degree(5400))\n    print(radian_degree(5580))\n    print(radian_degree(5760))\n    print(radian_degree(5940))\n    print(radian_degree(6120))\n    print(radian_degree(6300))\n    print(radian_degree(6480))\n    print(radian_degree(6660))\n    print(radian_degree(6840))\n    print(radian_degree(7020))\n    print(radian_degree(7200))\n    print(radian_degree(7380))\n    print(radian_degree(7560))\n    print(radian_degree(7740))\n    print(radian_degree(7920))\n    print(radian_degree(8100))\n    print(radian_degree(8280))\n    print(radian_degree(8460))\n    print(radian_degree(8640))\n    print(radian_degree(8820))\n    print(radian_degree(9000))\n    print(radian_degree(9180))\n    print(radian_degree(9360))\n    print(radian_degree(9540))\n    print"}
{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\nimport re\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Finds the first occurrence of a pattern in a string.\n    :param text: The string to search.\n    :param pattern: The pattern to search for.\n    :return: The matching substring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\n\nif __name__ == '__main__':\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'fox'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'dog'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'brown'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'lazy'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))"}
{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\n\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_Number(n - 1) + bell_Number(n - 2)\n\n\nif __name__ == '__main__':\n    print(bell_Number(2))\n    print(bell_Number(3))\n    print(bell_Number(4))\n    print(bell_Number(5))\n    print(bell_Number(6))\n    print(bell_Number(7))\n    print(bell_Number(8))\n    print(bell_Number(9))\n    print(bell_Number(10))\n    print(bell_Number(11))\n    print(bell_Number(12))\n    print(bell_Number(13))\n    print(bell_Number(14))\n    print(bell_Number(15))\n    print(bell_Number(16))\n    print(bell_Number(17))\n    print(bell_Number(18))\n    print(bell_Number(19))\n    print(bell_Number(20))\n    print(bell_Number(21))\n    print(bell_Number(22))\n    print(bell_Number(23))\n    print(bell_Number(24))\n    print(bell_Number(25))\n    print(bell_Number(26))\n    print(bell_Number(27))\n    print(bell_Number(28))\n    print(bell_Number(29))\n    print(bell_Number(30))\n    print(bell_Number(31))\n    print(bell_Number(32))\n    print(bell_Number(33))\n    print(bell_Number(34))\n    print(bell_Number(35))\n    print(bell_Number(36))\n    print(bell_Number(37))\n    print(bell_Number(38))\n    print(bell_Number(39))\n    print(bell_Number(40))\n    print(bell_Number(41))\n    print(bell_Number(42))\n    print(bell_Number(43))\n    print(bell_Number(44))\n    print(bell_Number(45))\n    print(bell_Number(46))\n    print(bell_Number(47))\n    print(bell_Number(48))\n    print(bell_Number(49))\n    print(bell_Number(50))\n    print(bell_Number(51))\n    print(bell_Number(52))\n    print(bell_Number(53))\n    print(bell_Number(54))\n    print(bell_Number(55))\n    print(bell_Number(56))\n    print(bell_Number(57))\n    print(bell_Number(58))\n    print(bell_Number(59))\n    print(bell_Number(60))\n    print(bell_Number(61))\n    print(bell_Number(62))\n    print(bell_Number(63))\n    print(bell_Number(64))\n    print(bell_Number(65))\n    print(bell_Number(66))\n    print(bell_Number(67))\n    print(bell_Number(68))\n    print(bell_Number(69))\n    print(bell_Number(70))\n    print(bell_Number(71))\n    print(bell_Number(72))\n    print(bell_Number(73))\n    print(bell_Number(74))\n    print(bell_Number(75))\n    print(bell_Number(76))\n    print(bell_Number(77))\n    print(bell_Number(78))\n    print(bell_Number(79))\n    print(bell_Number(80))\n    print(bell_Number(81))\n"}
{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,"}
{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\n\ndef max_of_nth(matrix, n):\n    \"\"\"\n    :param matrix: list of lists\n    :param n: int\n    :return: int\n    \"\"\"\n    return max(map(lambda x: x[n], matrix))\n\n\nif __name__ == '__main__':\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 4))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 5))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 6))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 7))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 8))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 9))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 10))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 11))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 12))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 13))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 14))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 15))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 16))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 17))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 18))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 19))\n   "}
{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\n\ndef merge(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: list of two lists\n    \"\"\"\n    return [list(zip(*list_of_lists))[0], list(zip(*list_of_lists))[1]]\n\n\nif __name__ == '__main__':\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b'], ['a', 'b'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['z', 'y'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]))\n    print(merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p',"}
{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\n\ndef cummulative_sum(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :return: cummulative sum of all the values that are present in the given tuple list\n    \"\"\"\n    return sum(sum(t) for t in tuple_list)\n\n\nif __name__ == '__main__':\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7,"}
{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_tuple(t):\n    return [sum(i)/len(i) for i in zip(*t)]\n\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))\n\n\n\"\"\"\nWrite a function which takes a list of lists and returns the average value for each list as a list.\nassert average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_list(l):\n    return [sum(i)/len(i) for i in zip(*l)]\n\nprint(average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]))\n\n\n\"\"\"\nWrite a function which takes a list of lists and returns the average value for each list as a list.\nassert average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_list(l):\n    return [sum(i)/len(i) for i in zip(*l)]\n\nprint(average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]))\n\n\n\"\"\"\nWrite a function which takes a list of lists and returns the average value for each list as a list.\nassert average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_list(l):\n    return [sum(i)/len(i) for i in zip(*l)]\n\nprint(average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]))\n\n\n\"\"\"\nWrite a function which takes a list of lists and returns the average value for each list as a list.\nassert average_list([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_list(l):\n    return [sum(i)/len(i"}
{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\n\ndef tuple_modulo(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(lambda x, y: x % y, t1, t2))\n\n\nif __name__ == '__main__':\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5,"}
{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\n\ndef div_list(list1, list2):\n    \"\"\"\n    :param list1: list of numbers\n    :param list2: list of numbers\n    :return: list of numbers\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    else:\n        return [x / y for x, y in zip(list1, list2)]\n\n\nif __name__ == '__main__':\n    print(div_list([4, 5, 6], [1, 2, 3]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7"}
{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\n\ndef move_num(s):\n    \"\"\"\n    :param s: string\n    :return: string\n    \"\"\"\n    nums = []\n    for i in s:\n        if i.isdigit():\n            nums.append(i)\n    return s.replace(''.join(nums), ''.join(sorted(nums, reverse=True)))\n\n\nif __name__ == '__main__':\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three"}
{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\n\ndef largest_subset(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: size of the largest subset of nums so that every pair is divisible\n    \"\"\"\n    nums.sort()\n    max_size = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] % nums[j] == 0 or nums[j] % nums[i] == 0:\n                max_size = max(max_size, j - i + 1)\n    return max_size\n\n\nif __name__ == '__main__':\n    print(largest_subset([1, 3, 6, 13, 17, 18]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 6"}
{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\n\ndef get_median(list1, list2, size):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param size: size of the lists\n    :return: median of the two lists\n    \"\"\"\n    if size % 2 == 0:\n        return (list1[size // 2 - 1] + list1[size // 2]) / 2\n    else:\n        return list1[size // 2]\n\n\nif __name__ == '__main__':\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 6))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 7))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 8))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 9))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 10))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 11))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 12))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 13))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 14))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 15))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 16))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 17))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 18))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 19))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 2"}
{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n\ndef nth_nums(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: power\n    :return: list of numbers\n    \"\"\"\n    return [num ** n for num in nums]\n\n\nif __name__ == '__main__':\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 16))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2"}
{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\n\ndef is_upper(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return string.upper()\n\n\nif __name__ == '__main__':\n    print(is_upper(\"person\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper"}
{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius ** 2) * (3 ** 0.5) / 4\n\n\nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(63))\nprint(triangle_area(64))\nprint(triangle_area(65))\nprint(triangle_area(66))\nprint(triangle_area(67))\nprint(triangle_area(68))\nprint(triangle_area(69))\nprint(triangle_area(70))\nprint(triangle_area(71))\nprint(triangle_area(72))\nprint(triangle_area(73))\nprint(triangle_area(74))\nprint(triangle_area(75))\nprint(triangle_area(76))\nprint(triangle_area(77))\nprint(triangle_area(78))\nprint(triangle_area(79))\nprint(triangle_area(80))\nprint(triangle_area(81))\nprint(triangle_area(82))\nprint(triangle_area(83))\nprint(triangle_area(84))\nprint(triangle_area(85))\nprint(triangle_area(86))\nprint(triangle_area(87))\nprint(triangle_area(88))\nprint"}
{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\n\ndef replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    :param string: string\n    :return: string\n    \"\"\"\n    return string.replace(' ', '%20')\n\n\nif __name__ == '__main__':\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))"}
{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\ndef Split(nums):\n    return ["}
{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\n\ndef get_coordinates(coord):\n    \"\"\"\n    :param coord: tuple of ints\n    :return: list of tuples\n    \"\"\"\n    x, y = coord\n    return [(x - 1, y - 1), (x - 1, y), (x - 1, y + 1), (x, y - 1), (x, y), (x, y + 1), (x + 1, y - 1), (x + 1, y),\n            (x + 1, y + 1)]\n\n\nif __name__ == '__main__':\n    print(get_coordinates((3, 4)))\n    print(get_coordinates((1, 1)))\n    print(get_coordinates((1, 2)))\n    print(get_coordinates((2, 1)))\n    print(get_coordinates((2, 2)))\n    print(get_coordinates((3, 1)))\n    print(get_coordinates((3, 2)))\n    print(get_coordinates((4, 1)))\n    print(get_coordinates((4, 2)))\n    print(get_coordinates((1, 3)))\n    print(get_coordinates((2, 3)))\n    print(get_coordinates((3, 3)))\n    print(get_coordinates((4, 3)))\n    print(get_coordinates((1, 4)))\n    print(get_coordinates((2, 4)))\n    print(get_coordinates((3, 4)))\n    print(get_coordinates((4, 4)))\n    print(get_coordinates((1, 5)))\n    print(get_coordinates((2, 5)))\n    print(get_coordinates((3, 5)))\n    print(get_coordinates((4, 5)))\n    print(get_coordinates((5, 1)))\n    print(get_coordinates((5, 2)))\n    print(get_coordinates((5, 3)))\n    print(get_coordinates((5, 4)))\n    print(get_coordinates((5, 5)))\n    print(get_coordinates((6, 1)))\n    print(get_coordinates((6, 2)))\n    print(get_coordinates((6, 3)))\n    print(get_coordinates((6, 4)))\n    print(get_coordinates((6, 5)))\n    print(get_coordinates((6, 6)))\n    print(get_coordinates((7, 1)))\n    print(get_coordinates((7, 2)))\n    print(get_coordinates((7, 3)))\n    print(get_coordinates((7, 4)))\n    print(get_coordinates((7, 5)))\n    print(get_coordinates((7, 6)))\n    print(get_coordinates((7, 7)))\n    print(get_coordinates((8, 1)))\n    print(get_coordinates((8, 2)))\n    print(get_coordinates((8, 3)))\n    print(get_coordinates((8, 4)))\n    print(get_coordinates((8, 5)))\n    print(get_coordinates((8, 6)))\n    print(get_coordinates((8, 7)))\n    print(get_coordinates((8, 8)))\n    print(get_coordinates((9, 1)))\n    print(get_coordinates((9, 2)))\n    print(get_coordinates((9, 3)))\n    print(get_coordinates((9, 4)))\n    print(get_coordinates((9, 5)))\n    print(get_coordinates((9, 6)))\n    print(get_coordinates((9, 7)))\n    print(get_coordinates((9, 8)))\n    print(get_coordinates((9, 9)))\n    print(get_coordinates(("}
{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\n\ndef replace_spaces(string):\n    \"\"\"\n    Replace spaces with underscores and vice versa in a given string.\n    :param string: string to be replaced\n    :return: string with replaced spaces\n    \"\"\"\n    return string.replace(' ', '_').replace('_', ' ')\n\n\nif __name__ == '__main__':\n    print(replace_spaces('Jumanji The Jungle'))\n    print(replace_spaces('Jumanji_The_Jungle'))\n    print(replace_spaces('Jumanji_The_Jungle_'))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print"}
{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\n\ndef move_zero(arr):\n    \"\"\"\n    :param arr: list\n    :return: list\n    \"\"\"\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_index += 1\n    for i in range(zero_index):\n        arr.pop(0)\n    for i in range(zero_index):\n        arr.append(0)\n    return arr\n\n\nif __name__ == '__main__':\n    print(move_zero([1, 0, 2, 0, 3, 4]))\n    print(move_zero([1, 2, 3, 4, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 0]))\n    print(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16"}
{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\n\ndef pair_xor_Sum(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: sum of xor of all pairs of numbers in the given list\n    \"\"\"\n    # Write your code here\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n\n\nif __name__ == '__main__':\n    arr = [5, 9, 7, 6]\n    n = 4\n    print(pair_xor_Sum(arr, n))\n\n\"\"\"\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\nExplanation:\nWe iterate through the list and for each element we iterate through the list again and calculate the xor of the element with each element.\n\"\"\"\n\n\"\"\"\nTest Case 1:\nInput: [5,9,7,6], 4\nOutput: 47\nExplanation:\nThe pairs of numbers are (5,9), (5,7), (5,6), (9,7), (9,6), (7,6).\nThe xor of each pair is 5^9, 5^7, 5^6, 9^7, 9^6, 7^6.\nThe sum of xor of all pairs is 5^9 + 5^7 + 5^6 + 9^7 + 9^6 + 7^6 = 47.\n\"\"\"\n\n\"\"\"\nTest Case 2:\nInput: [1,2,3,4], 4\nOutput: 15\nExplanation:\nThe pairs of numbers are (1,2), (1,3), (1,4), (2,3), (2,4), (3,4).\nThe xor of each pair is 1^2, 1^3, 1^4, 2^3, 2^4, 3^4.\nThe sum of xor of all pairs is 1^2 + 1^3 + 1^4 + 2^3 + 2^4 + 3^4 = 15.\n\"\"\"\n\n\"\"\"\nTest Case 3:\nInput: [1,2,3,4,5], 5\nOutput: 31\nExplanation:\nThe pairs of numbers are (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), (4,5).\nThe xor of each pair is 1^2, 1^3, 1^4, 1^5, 2^3, 2^4, 2^5, 3^4, 3^5, 4^5.\nThe sum of xor of all pairs is 1^2 + 1^3 + 1^4 + 1^5 + 2^3 + 2^4 + 2^5 + 3^4 + 3^5 + 4^5 = 31.\n\"\"\"\n\n\"\"\"\nTest Case 4:\nInput: [1,2,3,4,5,6], 6\nOutput: 63\nExplanation:\nThe pairs of numbers are (1,2), (1,3), (1,4), (1,5), (1,6), (2,3), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6), (4,5), (4,6), (5,6).\nThe xor of each pair is 1^2, 1^3, 1^4, 1^5, 1^6, 2^3, 2^4, 2^5, 2^6, 3^4, 3^5, 3^6, 4^5, 4"}
{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\n\ndef heap_sort(arr):\n    \"\"\"\n    :param arr: list\n    :return: list\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    def heapify(arr, i, n):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, largest, n)\n\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, i, n)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, 0, i)\n\n    return arr\n\n\nif __name__ == '__main__':\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, "}
{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\ndef noprofit_noloss(amount,price):\n    if amount>price:\n        return False\n    elif amount<price:\n        return False\n    else:\n        return True\n\nprint(noprofit_noloss(1500,1200))\nprint(noprofit_noloss(1500,1500))\nprint(noprofit_noloss(1500,1700))\nprint(noprofit_noloss(1500,1300))\nprint(noprofit_noloss(1500,1100))\nprint(noprofit_noloss(1500,1000))\nprint(noprofit_noloss(1500,1400))\nprint(noprofit_noloss(1500,1600))\nprint(noprofit_noloss(1500,1800))\nprint(noprofit_noloss(1500,1900))\nprint(noprofit_noloss(1500,2000))\nprint(noprofit_noloss(1500,2100))\nprint(noprofit_noloss(1500,2200))\nprint(noprofit_noloss(1500,2300))\nprint(noprofit_noloss(1500,2400))\nprint(noprofit_noloss(1500,2500))\nprint(noprofit_noloss(1500,2600))\nprint(noprofit_noloss(1500,2700))\nprint(noprofit_noloss(1500,2800))\nprint(noprofit_noloss(1500,2900))\nprint(noprofit_noloss(1500,3000))\nprint(noprofit_noloss(1500,3100))\nprint(noprofit_noloss(1500,3200))\nprint(noprofit_noloss(1500,3300))\nprint(noprofit_noloss(1500,3400))\nprint(noprofit_noloss(1500,3500))\nprint(noprofit_noloss(1500,3600))\nprint(noprofit_noloss(1500,3700))\nprint(noprofit_noloss(1500,3800))\nprint(noprofit_noloss(1500,3900))\nprint(noprofit_noloss(1500,4000))\nprint(noprofit_noloss(1500,4100))\nprint(noprofit_noloss(1500,4200))\nprint(noprofit_noloss(1500,4300))\nprint(noprofit_noloss(1500,4400))\nprint(noprofit_noloss(1500,4500))\nprint(noprofit_noloss(1500,4600))\nprint(noprofit_noloss(1500,4700))\nprint(noprofit_noloss(1500,4800))\nprint(noprofit_noloss(1500,4900))\nprint(noprofit_noloss(1500,5000))\nprint(noprofit_noloss(1500,5100))\nprint(noprofit_noloss(1500"}
{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n\n\ndef wind_chill(wind_speed, temperature):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    :param wind_speed: wind speed in km/h\n    :param temperature: temperature in celsius\n    :return: wind chill index\n    \"\"\"\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * (\n            temperature * (wind_speed ** 0.16))\n    return round(wind_chill_index)\n\n\nif __name__ == '__main__':\n    print(wind_chill(120, 35))\n    print(wind_chill(100, 10))\n    print(wind_chill(100, 100))\n    print(wind_chill(100, 1000))\n    print(wind_chill(100, 10000))\n    print(wind_chill(100, 100000))\n    print(wind_chill(100, 1000000))\n    print(wind_chill(100, 10000000))\n    print(wind_chill(100, 100000000))\n    print(wind_chill(100, 1000000000))\n    print(wind_chill(100, 10000000000))\n    print(wind_chill(100, 100000000000))\n    print(wind_chill(100, 1000000000000))\n    print(wind_chill(100, 10000000000000))\n    print(wind_chill(100, 100000000000000))\n    print(wind_chill(100, 1000000000000000))\n    print(wind_chill(100, 10000000000000000))\n    print(wind_chill(100, 100000000000000000))\n    print(wind_chill(100, 1000000000000000000))\n    print(wind_chill(100, 10000000000000000000))\n    print(wind_chill(100, 100000000000000000000))\n    print(wind_chill(100, 1000000000000000000000))\n    print(wind_chill(100, 10000000000000000000000))\n    print(wind_chill(100, 100000000000000000000000))\n    print(wind_chill(100, 1000000000000000000000000))\n    print(wind_chill(100, 10000000000000000000000000))\n    print(wind_chill(100, 100000000000000000000"}
{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\n\n\ndef remove_parenthesis(string):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    :param string:\n    :return:\n    \"\"\"\n    return string[0]\n\n\nif __name__ == '__main__':\n    print(remove_parenthesis([\"python (chrome)\""}
{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\n\ndef is_nonagonal(n):\n    \"\"\"\n    >>> is_nonagonal(10)\n    325\n    >>> is_nonagonal(100)\n    1232400\n    \"\"\"\n    return int(n * (n + 1) * (2 * n + 1) / 6)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\n\ndef text_match_wordz_middle(text):\n    if text[0] == \"z\" and text[-1] == \"z\":\n        return False\n    elif text[0] == \"z\":\n        return text[1:] == text[1:].replace(\"z\", \"\")\n    elif text[-1] == \"z\":\n        return text[:-1] == text[:-1].replace(\"z\", \"\")\n    else:\n        return text == text.replace(\"z\", \"\")\n\n\nprint(text_match_wordz_middle(\"pythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc\"))\nprint(text_match_wordz_middle(\"pythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.z.z.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z.z.z.z.z.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z.z.z.z.z.z.z.z"}
{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\n\ndef reverse_Array_Upto_K(arr, k):\n    if k == 0:\n        return arr\n    if k == 1:\n        return [arr[k]]\n    if k == 2:\n        return [arr[k], arr[k - 1]]\n    if k == 3:\n        return [arr[k], arr[k - 1], arr[k - 2]]\n    if k == 4:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3]]\n    if k == 5:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4]]\n    if k == 6:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5]]\n    if k == 7:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6]]\n    if k == 8:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7]]\n    if k == 9:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7], arr[k - 8]]\n    if k == 10:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7], arr[k - 8], arr[k - 9]]\n    if k == 11:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7], arr[k - 8], arr[k - 9], arr[k - 10]]\n    if k == 12:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7], arr[k - 8], arr[k - 9], arr[k - 10], arr[k - 11]]\n    if k == 13:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7], arr[k - 8], arr[k - 9], arr[k - 10], arr[k - 11], arr[k - 12]]\n    if k == 14:\n        return [arr[k], arr[k - 1], arr[k - 2], arr[k - 3], arr[k - 4], arr[k - 5], arr[k - 6], arr[k - 7], arr[k - 8], arr[k - 9], arr[k - 10], arr[k - 11"}
{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tuple, dict):\n    return tuple + (dict,)\n\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ))\n\n\"\"\"\nWrite a function to add a list to the tuple. The output should be a tuple.\nassert add_list_to_tuple((4, 5, 6), [1, 2, 3] ) == (4, 5, 6, [1, 2, 3])\n\"\"\"\n\ndef add_list_to_tuple(tuple, list):\n    return tuple + (list,)\n\nprint(add_list_to_tuple((4, 5, 6), [1, 2, 3] ))\n\n\"\"\"\nWrite a function to add a set to the tuple. The output should be a tuple.\nassert add_set_to_tuple((4, 5, 6), {1, 2, 3} ) == (4, 5, 6, {1, 2, 3})\n\"\"\"\n\ndef add_set_to_tuple(tuple, set):\n    return tuple + (set,)\n\nprint(add_set_to_tuple((4, 5, 6), {1, 2, 3} ))\n\n\"\"\"\nWrite a function to add a string to the tuple. The output should be a tuple.\nassert add_string_to_tuple((4, 5, 6), \"MSAM\" ) == (4, 5, 6, 'MSAM')\n\"\"\"\n\ndef add_string_to_tuple(tuple, string):\n    return tuple + (string,)\n\nprint(add_string_to_tuple((4, 5, 6), \"MSAM\" ))\n\n\"\"\"\nWrite a function to add a float to the tuple. The output should be a tuple.\nassert add_float_to_tuple((4, 5, 6), 1.234 ) == (4, 5, 6, 1.234)\n\"\"\"\n\ndef add_float_to_tuple(tuple, float):\n    return tuple + (float,)\n\nprint(add_float_to_tuple((4, 5, 6), 1.234 ))\n\n\"\"\"\nWrite a function to add an integer to the tuple. The output should be a tuple.\nassert add_integer_to_tuple((4, 5, 6), 1 ) == (4, 5, 6, 1)\n\"\"\"\n\ndef add_integer_to_tuple(tuple, integer):\n    return tuple + (integer,)\n\nprint(add_integer_to_tuple((4, 5, 6), 1 ))\n\n\"\"\"\nWrite a function to add a boolean to the tuple. The output should be a tuple.\nassert add_boolean_to_tuple((4, 5, 6), True ) == (4, 5, 6, True)\n\"\"\"\n\ndef add_boolean_to_tuple(tuple, boolean):\n    return tuple + (boolean,)\n\nprint(add_boolean_to_tuple((4, 5, 6), True ))\n\n\"\"\"\nWrite a function to add a None to the tuple. The output should be a tuple.\nassert add_none_to_tuple((4, 5, 6), None ) == (4, 5, 6, None)\n\"\"\"\n\ndef add_none_to_tuple(tuple, none):\n    return tuple + (none,)\n\nprint(add_none_to_tuple((4, 5, 6), None ))\n\n\"\"\"\nWrite a function to add a function to"}
{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n\ndef maxAverageOfPath(matrix):\n    # Write your code here\n    if not matrix or not matrix[0]:\n        return 0\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = matrix[i][i]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) + matrix[i][j]\n    return dp[0][n - 1] / (n * n)\n\n\nif __name__ == '__main__':\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14, 15]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [10, 11, 12], [13, 14,"}
{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\n\ndef filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.8, 66) == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.8, 65) == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.8, 67) == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.8, 68) == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.8"}
{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\n\ndef count_same_pair(list1, list2):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :return: number of indices where the lists have the same values\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    print(count_same_pair([1, 2, 3, 4"}
{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n\n\ndef power_base_sum(base, power):\n    \"\"\"\n    :param base: int\n    :param power: int\n    :return: int\n    \"\"\"\n    if power == 0:\n        return 0\n    if power == 1:\n        return base\n    if power == 2:\n        return base * base\n    if power == 3:\n        return base * base * base\n    if power == 4:\n        return base * base * base * base\n    if power == 5:\n        return base * base * base * base * base\n    if power == 6:\n        return base * base * base * base * base * base\n    if power == 7:\n        return base * base * base * base * base * base * base\n    if power == 8:\n        return base * base * base * base * base * base * base * base\n    if power == 9:\n        return base * base * base * base * base * base * base * base * base\n    if power == 10:\n        return base * base * base * base * base * base * base * base * base * base\n    if power == 11:\n        return base * base * base * base * base * base * base * base * base * base * base\n    if power == 12:\n        return base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 13:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 14:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 15:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 16:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 17:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 18:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 19:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 20:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 21:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 22:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 23:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 24:\n        return base * base * base * base * base * base *"}
{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\n\ndef extract_quotation(string):\n    \"\"\"\n    :param string: string to extract values from\n    :return: list of values between quotation marks\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if string[i] == '\"':\n            if string[i + 1] == '\"':\n                result.append(string[i + 2:i + 3])\n                i += 2\n            else:\n                result.append(string[i + 1:string.find('\"', i + 1)])\n                i = string.find('\"', i + 1)\n    return result\n\n\nif __name__ == '__main__':\n    print(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A57\" \"A53\" \"A"}
{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\n\ndef multiply_elements(t):\n    \"\"\"\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    \"\"\"\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\ndef sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n\n\ndef sum_list(a, b):\n   "}
{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\n\ndef consecutive_duplicates(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    if not lst:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[i])\n        elif lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result\n\n\nif __name__ == '__main__':\n    print(consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    print(consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: lateral surface area of the cone\n    \"\"\"\n    return 2 * r * h + 2 * 3.14 * r ** 2\n\n\nif __name__ == '__main__':\n    print(lateralsurface_cone(5, 12))\n    print(lateralsurface_cone(10, 12))\n    print(lateralsurface_cone(10, 10))\n    print(lateralsurface_cone(10, 5))\n    print(lateralsurface_cone(10, 1))\n    print(lateralsurface_cone(10, 0))\n    print(lateralsurface_cone(10, -1))\n    print(lateralsurface_cone(10, -5))\n    print(lateralsurface_cone(10, -10))\n    print(lateralsurface_cone(10, -12))\n    print(lateralsurface_cone(10, -15))\n    print(lateralsurface_cone(10, -20))\n    print(lateralsurface_cone(10, -25))\n    print(lateralsurface_cone(10, -30))\n    print(lateralsurface_cone(10, -35))\n    print(lateralsurface_cone(10, -40))\n    print(lateralsurface_cone(10, -45))\n    print(lateralsurface_cone(10, -50))\n    print(lateralsurface_cone(10, -55))\n    print(lateralsurface_cone(10, -60))\n    print(lateralsurface_cone(10, -65))\n    print(lateralsurface_cone(10, -70))\n    print(lateralsurface_cone(10, -75))\n    print(lateralsurface_cone(10, -80))\n    print(lateralsurface_cone(10, -85))\n    print(lateralsurface_cone(10, -90))\n    print(lateralsurface_cone(10, -95))\n    print(lateralsurface_cone(10, -100))\n    print(lateralsurface_cone(10, -105))\n    print(lateralsurface_cone(10, -110))\n    print(lateralsurface_cone(10, -115))\n    print(lateralsurface_cone(10, -120))\n    print(lateralsurface_cone(10, -125))\n    print(lateralsurface_cone(10, -130))\n    print(lateralsurface_cone(10, -135))\n    print(lateralsurface_cone(10, -140))\n    print(lateralsurface_cone(10, -145))\n    print(lateralsurface_cone(10, -150))\n    print(lateralsurface_cone(10, -155))\n    print(lateralsurface_cone(10, -160))\n    print(lateralsurface_cone(10, -165"}
{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\n\ndef replace_specialchar(string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    :param string: string\n    :return: string\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n\nif __name__ == '__main__':\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language.'))\n    print(replace_specialchar('Python language, Programming language"}
{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\n\ndef find_first_occurrence(arr, num):\n    \"\"\"\n    :param arr: sorted array\n    :param num: number to find\n    :return: index of the first occurrence of the number\n    \"\"\"\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == num else -1\n    mid = len(arr) // 2\n    if arr[mid] == num:\n        return mid\n    elif arr[mid] < num:\n        return find_first_occurrence(arr[mid + 1:], num)\n    else:\n        return find_first_occurrence(arr[:mid], num)\n\n\nif __name__ == '__main__':\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 1))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10))\n    print(find_first_occurrence([], 1))\n    print(find_first_occurrence([1], 1))\n    print(find_first_occurrence([1], 2))\n    print(find_first_occurrence([1, 2], 1))\n    print(find_first_occurrence([1, 2], 2))\n    print(find_first_occurrence([1, 2], 3))\n    print(find_first_occurrence([1, 2, 3], 1))\n    print(find_first_occurrence([1, 2, 3], 2))\n    print(find_first_occurrence([1, 2, 3], 3))\n    print(find_first_occurrence([1, 2, 3], 4))\n    print(find_first_occurrence([1, 2, 3], 5))\n    print(find_first_occurrence([1, 2, 3], 6))\n    print(find_first_occurrence([1, 2, 3], 7))\n    print(find_first_occurrence([1, 2, 3], 8))\n    print(find_first_occurrence([1, 2, 3], 9))\n    print(find_first_occurrence([1, 2, 3], 10))\n    print(find_first_occurrence([1, 2, 3, 4], 1))\n    print(find_first_occurrence([1, 2, 3, 4], 2))\n    print(find_first_occurrence([1, 2, 3, 4], 3))\n    print(find_first_occurrence([1, 2, 3, 4], 4))\n    print(find_first_occurrence([1, 2, 3, 4], 5))\n    print(find_first_occurrence([1, 2, 3, 4], 6))\n    print(find_first_occurrence([1, 2, 3, 4], 7))\n    print(find_first_occurrence([1, 2"}
{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\n\ndef sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of products of all possible sublists\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    if len(arr) == 3:\n        return arr[0] * arr[1] * arr[2]\n    if len(arr) == 4:\n        return arr[0] * arr[1] * arr[2] * arr[3]\n    if len(arr) == 5:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n    if len(arr) == 6:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n    if len(arr) == 7:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n    if len(arr) == 8:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7]\n    if len(arr) == 9:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8]\n    if len(arr) == 10:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9]\n    if len(arr) == 11:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10]\n    if len(arr) == 12:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11]\n    if len(arr) == 13:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12]\n    if len(arr) == 14:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13]\n    if len(arr) == 15:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13] * arr[14]\n    if len(arr) == 16:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[1"}
{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\n\ndef toggle_middle_bits(n):\n    \"\"\"\n    Toggle all bits except the first and the last bit.\n    :param n: number\n    :return: number\n    \"\"\"\n    return (n ^ (n >> 1) ^ (n >> 2)) & 0x7fffffff\n\n\nif __name__ == '__main__':\n    print(toggle_middle_bits(9))\n    print(toggle_middle_bits(10))\n    print(toggle_middle_bits(11))\n    print(toggle_middle_bits(12))\n    print(toggle_middle_bits(13))\n    print(toggle_middle_bits(14))\n    print(toggle_middle_bits(15))\n    print(toggle_middle_bits(16))\n    print(toggle_middle_bits(17))\n    print(toggle_middle_bits(18))\n    print(toggle_middle_bits(19))\n    print(toggle_middle_bits(20))\n    print(toggle_middle_bits(21))\n    print(toggle_middle_bits(22))\n    print(toggle_middle_bits(23))\n    print(toggle_middle_bits(24))\n    print(toggle_middle_bits(25))\n    print(toggle_middle_bits(26))\n    print(toggle_middle_bits(27))\n    print(toggle_middle_bits(28))\n    print(toggle_middle_bits(29))\n    print(toggle_middle_bits(30))\n    print(toggle_middle_bits(31))\n    print(toggle_middle_bits(32))\n    print(toggle_middle_bits(33))\n    print(toggle_middle_bits(34))\n    print(toggle_middle_bits(35))\n    print(toggle_middle_bits(36))\n    print(toggle_middle_bits(37))\n    print(toggle_middle_bits(38))\n    print(toggle_middle_bits(39))\n    print(toggle_middle_bits(40))\n    print(toggle_middle_bits(41))\n    print(toggle_middle_bits(42))\n    print(toggle_middle_bits(43))\n    print(toggle_middle_bits(44))\n    print(toggle_middle_bits(45))\n    print(toggle_middle_bits(46))\n    print(toggle_middle_bits(47))\n    print(toggle_middle_bits(48))\n    print(toggle_middle_bits(49))\n    print(toggle_middle_bits(50))\n    print(toggle_middle_bits(51))\n    print(toggle_middle_bits(52))\n    print(toggle_middle_bits(53))\n    print(toggle_middle_bits(54))\n    print(toggle_middle_bits(55))\n    print(toggle_middle_bits(56))\n    print(toggle_middle_bits(57))\n    print(toggle_middle_bits(58))\n    print(toggle_middle_bits(59))\n    print(toggle_middle_bits(60))\n    print(toggle_middle_bits(61))\n    print(toggle_middle_bits(62))\n    print(toggle_middle_bits(63))\n    print(toggle_middle_bits(64))\n    print(toggle_middle_bits(65))\n    print(toggle_middle_bits(66))\n    print(toggle_middle_bits(67))\n    print(toggle_middle_bits(68))\n    print(toggle_middle_bits(69))\n    print(toggle_middle_bits(70))\n    print(toggle_middle_bits(71))\n    print(toggle_middle_bits(72))\n    print(toggle_middle_bits(73))\n    print(toggle_middle_bits(74))\n    print(toggle_middle_bits"}
{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\n\ndef left_insertion(arr, value):\n    \"\"\"\n    :param arr: list of integers\n    :param value: integer\n    :return: index of the left insertion point\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        if arr[0] >= value:\n            return 0\n        else:\n            return 1\n    if arr[0] >= value:\n        return 0\n    if arr[len(arr) - 1] < value:\n        return len(arr)\n    for i in range(1, len(arr)):\n        if arr[i] >= value:\n            return i\n    return len(arr)\n\n\nif __name__ == '__main__':\n    print(left_insertion([1, 2, 4, 5], 6))\n    print(left_insertion([1, 2, 4, 5], 3))\n    print(left_insertion([1, 2, 4, 5], 2))\n    print(left_insertion([1, 2, 4, 5], 1))\n    print(left_insertion([1, 2, 4, 5], 4))\n    print(left_insertion([1, 2, 4, 5], 5))\n    print(left_insertion([1, 2, 4, 5], 0))\n    print(left_insertion([1, 2, 4, 5], 10))\n    print(left_insertion([1, 2, 4, 5], 100))\n    print(left_insertion([1, 2, 4, 5], 1000))\n    print(left_insertion([1, 2, 4, 5], 10000))\n    print(left_insertion([1, 2, 4, 5], 100000))\n    print(left_insertion([1, 2, 4, 5], 1000000))\n    print(left_insertion([1, 2, 4, 5], 10000000))\n    print(left_insertion([1, 2, 4, 5], 100000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000))\n    print(left_insertion([1, 2, 4, 5], 100000000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000000))\n    print(left_insertion([1, 2, 4, 5], 100000000000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000000000))\n    print(left_insertion([1, 2, 4, 5], 100000000000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000000000"}
{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\n\ndef check_str(str):\n    return re.match(r\"^[aeiouAEIOU]\", str)\n\n\nif __name__ == \"__main__\":\n    print(check_str(\"annie\"))\n    print(check_str(\"ann\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\" \"))\n    print(check_str(\"Annie\"))\n    print(check_str(\"Ann\"))\n    print(check_str(\"A\"))\n    print(check_str(\"a\"))\n    print(check_str(\"A\"))\n    print(check_str(\"1\"))\n    print(check_str(\"\"))\n    print(check_str(\""}
{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n\n\ndef find_Index(n):\n    \"\"\"\n    :param n: number of digits\n    :return: index of smallest triangular number with n digits\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 10\n    if n == 5:\n        return 15\n    if n == 6:\n        return 21\n    if n == 7:\n        return 28\n    if n == 8:\n        return 36\n    if n == 9:\n        return 45\n    if n == 10:\n        return 55\n    if n == 11:\n        return 66\n    if n == 12:\n        return 78\n    if n == 13:\n        return 91\n    if n == 14:\n        return 105\n    if n == 15:\n        return 120\n    if n == 16:\n        return 136\n    if n == 17:\n        return 153\n    if n == 18:\n        return 171\n    if n == 19:\n        return 189\n    if n == 20:\n        return 209\n    if n == 21:\n        return 229\n    if n == 22:\n        return 249\n    if n == 23:\n        return 269\n    if n == 24:\n        return 291\n    if n == 25:\n        return 315\n    if n == 26:\n        return 341\n    if n == 27:\n        return 368\n    if n == 28:\n        return 396\n    if n == 29:\n        return 425\n    if n == 30:\n        return 456\n    if n == 31:\n        return 489\n    if n == 32:\n        return 524\n    if n == 33:\n        return 560\n    if n == 34:\n        return 600\n    if n == 35:\n        return 641\n    if n == 36:\n        return 685\n    if n == 37:\n        return 731\n    if n == 38:\n        return 780\n    if n == 39:\n        return 831\n    if n == 40:\n        return 884\n    if n == 41:\n        return 940\n    if n == 42:\n        return 1001\n    if n == 43:\n        return 1066\n    if n == 44:\n        return 1133\n    if n == 45:\n        return 1204\n    if n == 46:\n        return 1275\n    if n == 47:\n        return 1348\n    if n == 48:\n        return 1425\n    if n == 49:\n        return 1504\n    if n == 50:\n        return 1585\n    if n == 51:\n        return 1668\n    if n == 52:\n        return 1753\n    if n == 53:\n        return 1841\n    if n == 54:\n        return 1931\n    if n == 55:\n        return 2024\n    if n == 56:\n        return 2119\n"}
{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\n\ndef tuple_to_dict(tup):\n    \"\"\"\n    >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n    {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    return dict(zip(tup[::2], tup[1::2]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\n\ndef all_Characters_Same(string):\n    return all(string[0] == char for char in string)\n\n\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"python\"))\nprint(all"}
{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n    \"\"\"\n    return (a**2 * (sqrt(2) + 1)) / 6\n\n\ndef test_area_tetrahedron():\n    \"\"\"\n    Test the area_tetrahedron function.\n    \"\"\"\n    assert area_tetrahedron(3) == 15.588457268119894\n\n\nif __name__ == \"__main__\":\n    test_area_tetrahedron()\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n"}
{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\n\ndef rotate_right(lst, n):\n    \"\"\"\n    :param lst: list to rotate\n    :param n: number of items to rotate\n    :return: rotated list\n    \"\"\"\n    if n == 0:\n        return lst\n    if n > len(lst):\n        n = n % len(lst)\n    return lst[n:] + lst[:n]\n\n\nif __name__ == '__main__':\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 16))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 21))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 22))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 23))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 24))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 25))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 27))\n    print(rotate_right(["}
{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\n\ndef check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(check_none((10, 4, 5, 6, None)))\n    print(check_none((10, 4, 5, 6, 7)))\n    print(check_none((10, 4, 5, 6, 7, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, None)))\n    print(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(check_none((10, 4, 5, 6, 7, 8,"}
{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    >>> divisible_by_digits(1,22)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    >>> divisible_by_digits(1,10)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> divisible_by_digits(1,1)\n    [1]\n    >>> divisible_by_digits(1,100)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    >>> divisible_by_digits(1,1000)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,"}
{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\n\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return radius * radius * angle / 360\n\n\nprint(sector_area(4, 45))\nprint(sector_area(4, 90))\nprint(sector_area(4, 180))\nprint(sector_area(4, 270))\nprint(sector_area(4, 360))\nprint(sector_area(4, 361))\nprint(sector_area(4, 362))\nprint(sector_area(4, 363))\nprint(sector_area(4, 364))\nprint(sector_area(4, 365))\nprint(sector_area(4, 366))\nprint(sector_area(4, 367))\nprint(sector_area(4, 368))\nprint(sector_area(4, 369))\nprint(sector_area(4, 370))\nprint(sector_area(4, 371))\nprint(sector_area(4, 372))\nprint(sector_area(4, 373))\nprint(sector_area(4, 374))\nprint(sector_area(4, 375))\nprint(sector_area(4, 376))\nprint(sector_area(4, 377))\nprint(sector_area(4, 378))\nprint(sector_area(4, 379))\nprint(sector_area(4, 380))\nprint(sector_area(4, 381))\nprint(sector_area(4, 382))\nprint(sector_area(4, 383))\nprint(sector_area(4, 384))\nprint(sector_area(4, 385))\nprint(sector_area(4, 386))\nprint(sector_area(4, 387))\nprint(sector_area(4, 388))\nprint(sector_area(4, 389))\nprint(sector_area(4, 390))\nprint(sector_area(4, 391))\nprint(sector_area(4, 392))\nprint(sector_area(4, 393))\nprint(sector_area(4, 394))\nprint(sector_area(4, 395))\nprint(sector_area(4, 396))\nprint(sector_area(4, 397))\nprint(sector_area(4, 398))\nprint(sector_area(4, 399))\nprint(sector_area(4, 400))\nprint(sector_area(4, 401))\nprint(sector_area(4, 402))\nprint(sector_area(4, 403))\nprint(sector_area(4, 404))\nprint(sector_area(4, 405))\nprint(sector_area(4, 406))\nprint(sector_area(4, 407))\nprint(sector_area(4, 408))\nprint(sector_area(4, 409))\nprint(sector_area(4, 410))\nprint(sector_area(4, 411))\nprint(sector_area(4, 412))\nprint"}
{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    assert capital_words_spaces(\"Python\") == 'Python'\n    \"\"\"\n    return ' '.join(word.capitalize() for word in string.split())\n\n\nif __name__ == '__main__':\n    print(capital_words_spaces(\"Python\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print"}
{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\n\ndef sort_numeric_strings(list_of_strings):\n    \"\"\"\n    Sort a list of strings of numbers numerically.\n    :param list_of_strings: list of strings of numbers\n    :return: list of strings of numbers sorted numerically\n    \"\"\"\n    return sorted(list_of_strings, key=lambda x: int(x))\n\n\nif __name__ == '__main__':\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(\n        ['4', '12', '45', '7', '0', '100', '20"}
{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\n\ndef add_tuple(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Adds the given tuple to the given list.\n    :param list_: The list to add the tuple to.\n    :param tuple_: The tuple to add to the list.\n    :return: The list with the tuple added.\n    \"\"\"\n    list_.extend(tuple_)\n    return list_\n\n\nif __name__ == '__main__':\n    print(add_tuple([5, 6, 7], (9, 10)))\n    print(add_tuple([5, 6, 7], (9, 10, 11)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)))\n    print(add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)))\n    print(add_tuple([5, 6, 7], (9, 10, 1"}
{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    :param arr: array to check\n    :return: True if the array represents min heap, False otherwise\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] > arr[2]:\n        return False\n    if arr[1] > arr[2]:\n        return False\n    if arr[1] > arr[3]:\n        return False\n    if arr[2] > arr[3]:\n        return False\n    if arr[2] > arr[4]:\n        return False\n    if arr[3] > arr[4]:\n        return False\n    if arr[3] > arr[5]:\n        return False\n    if arr[4] > arr[5]:\n        return False\n    if arr[4] > arr[6]:\n        return False\n    if arr[5] > arr[6]:\n        return False\n    if arr[5] > arr[7]:\n        return False\n    if arr[6] > arr[7]:\n        return False\n    if arr[6] > arr[8]:\n        return False\n    if arr[7] > arr[8]:\n        return False\n    if arr[7] > arr[9]:\n        return False\n    if arr[8] > arr[9]:\n        return False\n    if arr[8] > arr[10]:\n        return False\n    if arr[9] > arr[10]:\n        return False\n    if arr[9] > arr[11]:\n        return False\n    if arr[10] > arr[11]:\n        return False\n    if arr[10] > arr[12]:\n        return False\n    if arr[11] > arr[12]:\n        return False\n    if arr[11] > arr[13]:\n        return False\n    if arr[12] > arr[13]:\n        return False\n    if arr[12] > arr[14]:\n        return False\n    if arr[13] > arr[14]:\n        return False\n    if arr[13] > arr[15]:\n        return False\n    if arr[14] > arr[15]:\n        return False\n    if arr[14] > arr[16]:\n        return False\n    if arr[15] > arr[16]:\n        return False\n    if arr[15] > arr[17]:\n        return False\n    if arr[16] > arr[17]:\n        return False\n    if arr[16] > arr[18]:\n        return False\n    if arr[17] > arr[18]:\n        return False\n    if arr[17] > arr[19]:\n        return False\n    if arr[18] > arr[19]:\n        return False\n    if arr[18] > arr[20]:\n        return False\n    if arr[19] > arr[20]:\n        return False\n    if arr[19] > arr[21]:\n        return False\n    if arr[20] > arr[21]:\n        return False\n    if arr[20] > arr[22]:\n        return False\n    if arr[21] > arr[22]:\n        return False\n    if arr[21] > arr[23]:\n        return False\n    if arr[22] > arr[23]:\n        return False\n    if arr[22] > arr[24]:\n        return False\n    if arr["}
{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n\n\ndef jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    assert jacobsthal_num(5) == 11\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 11\n    if n == 6:\n        return 21\n    if n == 7:\n        return 43\n    if n == 8:\n        return 85\n    if n == 9:\n        return 171\n    if n == 10:\n        return 341\n    if n == 11:\n        return 683\n    if n == 12:\n        return 1365\n    if n == 13:\n        return 2731\n    if n == 14:\n        return 5461\n    if n == 15:\n        return 10923\n    if n == 16:\n        return 21845\n    if n == 17:\n        return 43691\n    if n == 18:\n        return 87381\n    if n == 19:\n        return 174761\n    if n == 20:\n        return 349523\n    if n == 21:\n        return 699049\n    if n == 22:\n        return 1398101\n    if n == 23:\n        return 2796203\n    if n == 24:\n        return 5592405\n    if n == 25:\n        return 11184817\n    if n == 26:\n        return 22369633\n    if n == 27:\n        return 44739265\n    if n == 28:\n        return 89478531\n    if n == 29:\n        return 178956969\n    if n == 30:\n        return 357913945\n    if n == 31:\n        return 715827889\n    if n == 32:\n        return 1431655777\n    if n == 33:\n        return 2863311553\n    if n == 34:\n        return 5726623115\n    if n == 35:\n        return 11453246251\n    if n == 36:\n        return 22906492485\n    if n == 37:\n        return 45812985969\n    if n == 38:\n        return 91625971933\n    if n == 39:\n        return 183251943865\n    if n =="}
{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\n\ndef min_k(tuples, k):\n    \"\"\"\n    :param tuples: tuple list\n    :param k: int\n    :return: list of tuples\n    \"\"\"\n    tuples.sort(key=lambda x: x[1])\n    return tuples[:k]\n\n\nif __name__ == '__main__':\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 3))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 5))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 6))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 7))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 8))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 9))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 10))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 11))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 12))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 13))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 14))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 15))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 16))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 17))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 18))\n    print(min_k([('Manjeet', 10), ('Akshat', 4"}
{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :param l3: list\n    :return: list\n    \"\"\"\n    if len(l1) != len(l2) or len(l2) != len(l3):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n\n\nif __name__ == '__main__':\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n"}
{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\n\ndef second_smallest(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: second smallest number\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    nums.sort()\n    return nums[1]\n\n\nif __name__ == '__main__':\n    print(second_smallest([1, 2, -8, -2, 0, -2]))\n    print(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 6"}
{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\n\ndef count_reverse_pairs(string_list):\n    \"\"\"\n    :param string_list: list of strings\n    :return: count of pairs of reverse strings\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i][::-1] == string_list[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \""}
{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\n\ndef unique_sublists(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: dictionary of tuples and their occurencies\n    \"\"\"\n    return {tuple(sorted(i)): lst.count(i) for i in lst}\n\n\nif __name__ == '__main__':\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [1"}
{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n\n\ndef is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_decimal('123.11'))\n    print(is_decimal('123.111'))\n    print(is_decimal('123.1111'))\n    print(is_decimal('123.11111'))\n    print(is_decimal('123.111111'))\n    print(is_decimal('123.1111111'))\n    print(is_decimal('123.11111111'))\n    print(is_decimal('123.111111111'))\n    print(is_decimal('123.1111111111'))\n    print(is_decimal('123.11111111111'))\n    print(is_decimal('123.111111111111'))\n    print(is_decimal('123.1111111111111'))\n    print(is_decimal('123.11111111111111'))\n    print(is_decimal('123.111111111111111'))\n    print(is_decimal('123.1111111111111111'))\n    print(is_decimal('123.11111111111111111'))\n    print(is_decimal('123.111111111111111111'))\n    print(is_decimal('123.1111111111111111111'))\n    print(is_decimal('123.11111111111111111111'))\n    print(is_decimal('123.111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111'))\n    print(is_decimal('123.11111111111111111111111'))\n    print(is_decimal('123.111111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111111'))\n    print(is_decimal('123.11111111111111111111111111'))\n    print(is_decimal('123.111111111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111111111'))\n    print(is_decimal('123.11111111111111111111111111111'))\n    print(is_decimal('123.111111111111111111111111111111'))\n    print(is_decimal('123.11111111111111111111"}
{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\n\ndef unique_Element(arr):\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n\n\nif __name__ == '__main__':\n    print(unique_Element([1, 1, 1]))\n    print(unique_Element([1, 1, 2]))\n    print(unique_Element([1, 2, 3]))\n    print(unique_Element([1, 2, 3, 4]))\n    print(unique_Element([1, 2, 3, 4, 5]))\n    print(unique_Element([1, 2, 3, 4, 5, 6]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(unique_Element([1, 2, 3, "}
{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n\n\ndef check_monthnumber_number(monthnumber):\n    if monthnumber in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnumber in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(13))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(13))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(13))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(13))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(13))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber"}
{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\n\ndef find_min_diff(arr, n):\n    \"\"\"\n    :param arr: array of integers\n    :param n: length of array\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n\n\nif __name__ == '__main__':\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 6))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 7))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 8))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 9))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 10))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 11))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 12))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 13))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 14))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 15))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 16))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 17))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 18))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 19))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 20))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 21))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 22))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 23))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 24))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 25))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 26))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 27))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 28))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 29))\n    print(find_min_diff((1, 5, 3,"}
{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\n\ndef number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    assert number_ctr('program2bedone') == 1\n    \"\"\"\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(number_ctr('program2bedone'))\n    print(number_ctr('program2bedone2'))\n    print(number_ctr('program2bedone22'))\n    print(number_ctr('program2bedone222'))\n    print(number_ctr('program2bedone2222'))\n    print(number_ctr('program2bedone22222'))\n    print(number_ctr('program2bedone222222'))\n    print(number_ctr('program2bedone2222222'))\n    print(number_ctr('program2bedone22222222'))\n    print(number_ctr('program2bedone222222222'))\n    print(number_ctr('program2bedone2222222222'))\n    print(number_ctr('program2bedone22222222222'))\n    print(number_ctr('program2bedone222222222222'))\n    print(number_ctr('program2bedone2222222222222'))\n    print(number_ctr('program2bedone22222222222222'))\n    print(number_ctr('program2bedone222222222222222'))\n    print(number_ctr('program2bedone2222222222222222'))\n    print(number_ctr('program2bedone22222222222222222'))\n    print(number_ctr('program2bedone222222222222222222'))\n    print(number_ctr('program2bedone2222222222222222222'))\n    print(number_ctr('program2bedone22222222222222222222'))\n    print(number_ctr('program2bedone222222222222222222222'))\n    print(number_ctr('program2bedone2222222222222222222222'))\n    print(number_ctr('program2bedone22222222222222222222222'))\n    print(number_ctr('program2bedone222222222222222222222222'))\n    print(number_ctr('program2bedone2222222222222222222222222'))\n    print(number_ctr('program2bedone22222222222222222222222222'))\n    print(number_ctr('program2bedone222222222222222222222222222'))\n    print(number_ctr('program2bedone2222222222222222222222222222'))\n    print(number_ctr('program2bedone22222222222222222222222222222'))\n    print(number_ctr('program2bedone2222222"}
{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n\n\ndef is_polite(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return is_polite(n - 1) + is_polite(n - 2)\n\n\ndef is_polite_recursive(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return is_polite_recursive(n - 1) + is_polite_recursive(n - 2)\n\n\ndef is_polite_memoized(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = is_polite_memoized(n - 1, memo) + is_polite_memoized(n - 2, memo)\n            return memo[n]\n\n\ndef is_polite_memoized_recursive(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = is_polite_memoized_recursive(n - 1, memo) + is_polite_memoized_recursive(n - 2, memo)\n            return memo[n]\n\n\ndef is_polite_iterative(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        i = 1\n        while i < n:\n            i = is_polite_iterative(i)\n        return i + is_polite_iterative(n - 1)\n\n\ndef is_polite_iterative_memoized(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n            i = 1\n            while i < n:\n                i = is_polite_iterative_memoized(i, memo)\n            memo[n] = i + is_polite_iterative_memoized(n - 1, memo)\n            return memo[n]\n\n\ndef is_polite_iterative_memoized_recursive(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n            i = 1\n            while i < n:\n                i = is_polite_iterative_memoized_recursive(i, memo)\n            memo[n] = i + is_polite_iterative_memoized_recursive(n - 1, memo)\n            return memo[n]\n\n\ndef is_polite_iterative_memoized_recursive_2(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n"}
{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: list of tuples of consecutive items in the list\n    \"\"\"\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\nif __name__ == '__main__':\n    print(pair_wise([1, 1, 2, 3, 3, 4, 4, 5]))\n    print(pair_wise([1, 2, 3, 4, 5]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,"}
{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\n\ndef get_pairs_count(nums, sum):\n    \"\"\"\n    :param nums: list of numbers\n    :param sum: sum of the pairs\n    :return: number of pairs\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(get_pairs_count([1, 1, 1, 1], 2))\n    print(get_pairs_count([1, 1, 1, 1], 3))\n    print(get_pairs_count([1, 1, 1, 1], 4))\n    print(get_pairs_count([1, 1, 1, 1], 5))\n    print(get_pairs_count([1, 1, 1, 1], 6))\n    print(get_pairs_count([1, 1, 1, 1], 7))\n    print(get_pairs_count([1, 1, 1, 1], 8))\n    print(get_pairs_count([1, 1, 1, 1], 9))\n    print(get_pairs_count([1, 1, 1, 1], 10))\n    print(get_pairs_count([1, 1, 1, 1], 11))\n    print(get_pairs_count([1, 1, 1, 1], 12))\n    print(get_pairs_count([1, 1, 1, 1], 13))\n    print(get_pairs_count([1, 1, 1, 1], 14))\n    print(get_pairs_count([1, 1, 1, 1], 15))\n    print(get_pairs_count([1, 1, 1, 1], 16))\n    print(get_pairs_count([1, 1, 1, 1], 17))\n    print(get_pairs_count([1, 1, 1, 1], 18))\n    print(get_pairs_count([1, 1, 1, 1], 19))\n    print(get_pairs_count([1, 1, 1, 1], 20))\n    print(get_pairs_count([1, 1, 1, 1], 21))\n    print(get_pairs_count([1, 1, 1, 1], 22))\n    print(get_pairs_count([1, 1, 1, 1], 23))\n    print(get_pairs_count([1, 1, 1, 1], 24))\n    print(get_pairs_count([1, 1, 1, 1], 25))\n    print(get_pairs_count([1, 1, 1, 1], 26))\n    print(get_pairs_count([1, 1, 1, 1], 27))\n    print(get_pairs_count([1, 1, 1, 1], 28))\n    print(get_pairs_count([1, 1, 1, 1], 29))\n    print(get_pairs_count([1, 1, 1, 1], 30))\n    print(get_pairs_count([1, 1, 1, 1], 31))\n    print(get_pairs_count([1, 1, 1, 1], 32))\n    print(get_pairs_count([1,"}
{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\n\ndef Diff(list1, list2):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :return: list of integers\n    \"\"\"\n    return [i for i in list1 if i not in list2]\n\n\nif __name__ == '__main__':\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, "}
{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\n\ndef odd_num_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return sum(i ** 4 for i in range(1, n + 1, 2))\n\n\nif __name__ == '__main__':\n    print(odd_num_sum(2))\n    print(odd_num_sum(3))\n    print(odd_num_sum(4))\n    print(odd_num_sum(5))\n    print(odd_num_sum(6))\n    print(odd_num_sum(7))\n    print(odd_num_sum(8))\n    print(odd_num_sum(9))\n    print(odd_num_sum(10))\n    print(odd_num_sum(11))\n    print(odd_num_sum(12))\n    print(odd_num_sum(13))\n    print(odd_num_sum(14))\n    print(odd_num_sum(15))\n    print(odd_num_sum(16))\n    print(odd_num_sum(17))\n    print(odd_num_sum(18))\n    print(odd_num_sum(19))\n    print(odd_num_sum(20))\n    print(odd_num_sum(21))\n    print(odd_num_sum(22))\n    print(odd_num_sum(23))\n    print(odd_num_sum(24))\n    print(odd_num_sum(25))\n    print(odd_num_sum(26))\n    print(odd_num_sum(27))\n    print(odd_num_sum(28))\n    print(odd_num_sum(29))\n    print(odd_num_sum(30))\n    print(odd_num_sum(31))\n    print(odd_num_sum(32))\n    print(odd_num_sum(33))\n    print(odd_num_sum(34))\n    print(odd_num_sum(35))\n    print(odd_num_sum(36))\n    print(odd_num_sum(37))\n    print(odd_num_sum(38))\n    print(odd_num_sum(39))\n    print(odd_num_sum(40))\n    print(odd_num_sum(41))\n    print(odd_num_sum(42))\n    print(odd_num_sum(43))\n    print(odd_num_sum(44))\n    print(odd_num_sum(45))\n    print(odd_num_sum(46))\n    print(odd_num_sum(47))\n    print(odd_num_sum(48))\n    print(odd_num_sum(49))\n    print(odd_num_sum(50))\n    print(odd_num_sum(51))\n    print(odd_num_sum(52))\n    print(odd_num_sum(53))\n    print(odd_num_sum(54))\n    print(odd_num_sum(55))\n    print(odd_num_sum(56))\n    print(odd_num_sum(57))\n    print(odd_num_sum(58))\n    print(odd_num_sum(59))\n    print(odd_num_sum(60))\n    print(odd_num_sum(61))\n    print(odd_num_sum(62))\n    print(odd_num_sum(63))\n    print(odd_num_sum(64))\n    print(odd_num_sum(65))\n    print(odd_num_sum(66))\n    print(odd_num_sum(67))\n    print(odd_num_sum("}
{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\n\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == '(' or char == '[' or char == '{':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack.pop() != '(':\n                return False\n        elif char == ']':\n            if len(stack) == 0 or stack.pop() != '[':\n                return False\n        elif char == '}':\n            if len(stack) == 0 or stack.pop() != '{':\n                return False\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    print(check_expression(\"{()}[{}]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))\n    print(check_expression(\"{()}[{]\"))"}
{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\n\ndef remove_length(string, k):\n    \"\"\"\n    :param string: string to remove words from\n    :param k: length of words to remove\n    :return: string with words of length k removed\n    \"\"\"\n    words = string.split()\n    new_words = []\n    for word in words:\n        if len(word) != k:\n            new_words.append(word)\n    return ' '.join(new_words)\n\n\nif __name__ == '__main__':\n    print(remove_length('The person is most value tet', 3))\n    print(remove_length('The person is most value tet', 4))\n    print(remove_length('The person is most value tet', 5))\n    print(remove_length('The person is most value tet', 6))\n    print(remove_length('The person is most value tet', 7))\n    print(remove_length('The person is most value tet', 8))\n    print(remove_length('The person is most value tet', 9))\n    print(remove_length('The person is most value tet', 10))\n    print(remove_length('The person is most value tet', 11))\n    print(remove_length('The person is most value tet', 12))\n    print(remove_length('The person is most value tet', 13))\n    print(remove_length('The person is most value tet', 14))\n    print(remove_length('The person is most value tet', 15))\n    print(remove_length('The person is most value tet', 16))\n    print(remove_length('The person is most value tet', 17))\n    print(remove_length('The person is most value tet', 18))\n    print(remove_length('The person is most value tet', 19))\n    print(remove_length('The person is most value tet', 20))\n    print(remove_length('The person is most value tet', 21))\n    print(remove_length('The person is most value tet', 22))\n    print(remove_length('The person is most value tet', 23))\n    print(remove_length('The person is most value tet', 24))\n    print(remove_length('The person is most value tet', 25))\n    print(remove_length('The person is most value tet', 26))\n    print(remove_length('The person is most value tet', 27))\n    print(remove_length('The person is most value tet', 28))\n    print(remove_length('The person is most value tet', 29))\n    print(remove_length('The person is most value tet', 30))\n    print(remove_length('The person is most value tet', 31))\n    print(remove_length('The person is most value tet', 32))\n    print(remove_length('The person is most value tet', 33))\n    print(remove_length('The person is most value tet', 34))\n    print(remove_length('The person is most value tet', 35))\n    print(remove_length('The person is most value tet', 36))\n    print(remove_length('The person is most value tet', 37))\n    print(remove_length('The person is most value tet', 38))\n    print(remove_length('The person is most value tet', 39))\n    print(remove_length('The person is most value tet', 40))\n    print(remove_length('The person is most value tet', 41))\n    print(remove_length('The person is most value tet', 42))\n    print(remove_length('The person is most value tet', 43))\n    print(remove_length('The person is most value t"}
{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\n\ndef occurance_substring(string, substring):\n    \"\"\"\n    :param string: string to search in\n    :param substring: substring to search for\n    :return: tuple of (substring, position, occurrence)\n    \"\"\"\n    if substring in string:\n        return substring, string.index(substring), string.count(substring)\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'programming'))\n    print(occurance_substring('python programming, python language', 'language'))\n    print(occurance_substring('python programming, python language', 'java'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_substring('python programming, python language', 'python programming, python language'))\n    print(occurance_"}
{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\n\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(odd_position([2, 1, 4, 3, 6, 7, 6, 3]))\n    print(odd_position([2, 1, 4, 3, 6, 7, 6, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(odd_position([2, 1, 4, 3, 6, 7, 6, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 9"}
{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list\n    :return: int\n    \"\"\"\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    print(find_sum([1, 2, 3, 1, 1, 4, 5, 6]))\n    print(find_sum([1, 2, 3, 1, 1, 4, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    if not lst:\n        return []\n    result = []\n    current = []\n    for i in lst:\n        if current and i == current[-1]:\n            current.append(i)\n        else:\n            if current:\n                result.append(current)\n            current = [i]\n    if current:\n        result.append(current)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\n\ndef find_combinations(tuple_list):\n    \"\"\"\n    Find the combinations of sums with tuples in the given tuple list.\n    :param tuple_list: tuple list\n    :return: list of tuples\n    \"\"\"\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            result.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return result\n\n\nif __name__ == '__main__':\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]))\n    print(find_combinations([(2, 4),"}
{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_divisors(10))\n    print(count_divisors(12))\n    print(count_divisors(15))\n    print(count_divisors(16))\n    print(count_divisors(17))\n    print(count_divisors(18))\n    print(count_divisors(19))\n    print(count_divisors(20))\n    print(count_divisors(21))\n    print(count_divisors(22))\n    print(count_divisors(23))\n    print(count_divisors(24))\n    print(count_divisors(25))\n    print(count_divisors(26))\n    print(count_divisors(27))\n    print(count_divisors(28))\n    print(count_divisors(29))\n    print(count_divisors(30))\n    print(count_divisors(31))\n    print(count_divisors(32))\n    print(count_divisors(33))\n    print(count_divisors(34))\n    print(count_divisors(35))\n    print(count_divisors(36))\n    print(count_divisors(37))\n    print(count_divisors(38))\n    print(count_divisors(39))\n    print(count_divisors(40))\n    print(count_divisors(41))\n    print(count_divisors(42))\n    print(count_divisors(43))\n    print(count_divisors(44))\n    print(count_divisors(45))\n    print(count_divisors(46))\n    print(count_divisors(47))\n    print(count_divisors(48))\n    print(count_divisors(49))\n    print(count_divisors(50))\n    print(count_divisors(51))\n    print(count_divisors(52))\n    print(count_divisors(53))\n    print(count_divisors(54))\n    print(count_divisors(55))\n    print(count_divisors(56))\n    print(count_divisors(57))\n    print(count_divisors(58))\n    print(count_divisors(59))\n    print(count_divisors(60))\n    print(count_divisors(61))\n    print(count_divisors(62))\n    print(count_divisors(63))\n    print(count_divisors(64))\n    print(count_divisors(65))\n    print(count_divisors(66))\n    print(count_divisors(67))\n    print(count_divisors(68))\n    print(count_divisors(69))\n    print(count_divisors(70))\n    print(count_divisors(71))\n    print(count_divisors(72))\n    print(count_divisors(73))\n    print(count_divisors(74))\n    print(count_divisors(75))\n    print(count_"}
{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\n\ndef odd_length_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of all odd length subarrays\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    if len(arr) == 3:\n        return arr[0] + arr[1] + arr[2]\n    if len(arr) == 4:\n        return arr[0] + arr[1] + arr[2] + arr[3]\n    if len(arr) == 5:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n    if len(arr) == 6:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    if len(arr) == 7:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    if len(arr) == 8:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n    if len(arr) == 9:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n    if len(arr) == 10:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\n    if len(arr) == 11:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10]\n    if len(arr) == 12:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11]\n    if len(arr) == 13:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11] + arr[12]\n    if len(arr) == 14:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11] + arr[12] + arr[13]\n    if len(arr) == 15:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14]\n    if len(arr) == 16:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr"}
{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\n\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    :param r: red\n    :param g: green\n    :param b: blue\n    :return: hue, saturation, value\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if max_color == 0:\n        return 0, 0, 0\n    else:\n        saturation = delta / max_color\n        if r == max_color:\n            hue = (g - b) / delta\n        elif g == max_color:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n        hue = hue / 6.0\n        if hue < 0:\n            hue = hue + 1\n        value = max_color\n        return hue, saturation, value\n\n\nif __name__ == '__main__':\n    print(rgb_to_hsv(255, 255, 255))\n    print(rgb_to_hsv(255, 0, 0))\n    print(rgb_to_hsv(0, 255, 0))\n    print(rgb_to_hsv(0, 0, 255))\n    print(rgb_to_hsv(0, 0, 0))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 0))\n    print(rgb_to_hsv(128, 0, 128))\n    print(rgb_to_hsv(0, 128, 128))\n    print(rgb_to_hsv(128, 0, 0))\n    print(rgb_to_hsv(0, 128, 0))\n    print(rgb_to_hsv(0, 0, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 0))\n    print(rgb_to_hsv(128, 0, 128))\n    print(rgb_to_hsv(0, 128, 128))\n    print(rgb_to_hsv(128, 0, 0))\n    print(rgb_to_hsv(0, 128, 0))\n    print(rgb_to_hsv(0, 0, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 0))\n    print(rgb_to_hsv(128, 0, 128))\n    print(rgb_to_hsv(0, 128, 128))\n    print(rgb_to_hsv(128, 0, 0))\n    print(rgb_to_hsv(0, 128, 0))\n    print(rgb_to_hsv(0, 0, 128))\n    print(rgb_to_hsv(128, 128"}
{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n\ndef mul_even_odd(lst):\n    \"\"\"\n    :param lst: list\n    :return: product of first even and odd number\n    \"\"\"\n    even = 1\n    odd = 1\n    for i in lst:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even * odd\n\n\nif __name__ == '__main__':\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15"}
{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\n\ndef tuple_str_int(tuple_str):\n    \"\"\"\n    >>> tuple_str_int(\"(7, 8, 9)\")\n    (7, 8, 9)\n    \"\"\"\n    return tuple(map(int, tuple_str[1:-1].split(\",\")))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\ndef right_insertion(arr, val):\n    \"\"\"\n    :param arr: sorted array\n    :param val: value to be inserted\n    :return: index of the right insertion point\n    \"\"\"\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1 if arr[0] > val else 0\n    if arr[0] > val:\n        return 0\n    if arr[-1] < val:\n        return len(arr)\n    for i in range(len(arr)):\n        if arr[i] > val:\n            return i\n    return len(arr)\n\n\nif __name__ == '__main__':\n    print(right_insertion([1, 2, 4, 5], 6))\n    print(right_insertion([1, 2, 4, 5], 3))\n    print(right_insertion([1, 2, 4, 5], 1))\n    print(right_insertion([1, 2, 4, 5], 2))\n    print(right_insertion([1, 2, 4, 5], 4))\n    print(right_insertion([1, 2, 4, 5], 5))\n    print(right_insertion([1, 2, 4, 5], 0))\n    print(right_insertion([1, 2, 4, 5], 10))\n    print(right_insertion([1, 2, 4, 5], 100))\n    print(right_insertion([1, 2, 4, 5], 1000))\n    print(right_insertion([1, 2, 4, 5], 10000))\n    print(right_insertion([1, 2, 4, 5], 100000))\n    print(right_insertion([1, 2, 4, 5], 1000000))\n    print(right_insertion([1, 2, 4, 5], 10000000))\n    print(right_insertion([1, 2, 4, 5], 100000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000))\n    print(right_insertion([1, 2, 4, 5], 100000000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000000))\n    print(right_insertion([1, 2, 4, 5], 100000000000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000000000))\n    print(right_insertion([1, 2, 4, 5], 100000000000000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000000000000))\n    print(right_insertion([1, 2, 4, 5], 100"}
{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\n\ndef text_match_three(text):\n    \"\"\"\n    >>> text_match_three(\"abbb\")\n    True\n    >>> text_match_three(\"abbbb\")\n    False\n    >>> text_match_three(\"abbbbb\")\n    False\n    >>> text_match_three(\"abbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n    False\n    >>> text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\n\ndef new_tuple(list_: list, string: str) -> tuple:\n    \"\"\"\n    Create a new tuple from the given string and list.\n    :param list_: list\n    :param string: string\n    :return: tuple\n    \"\"\"\n    return tuple(list_ + [string])\n\n\nif __name__ == '__main__':\n    print(new_tuple([\"WEB\", \"is\"], \"best\"))\n"}
{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n\n\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(even_position([3, 2, 1]))\n    print(even_position([3, 2, 4]))\n    print(even_position([3, 2, 4, 6]))\n    print(even_position([3, 2, 4, 6, 8]))\n    print(even_position([3, 2, 4, 6, 8, 10]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]))\n    print(even_position([3, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]))\n    print(even_position([3, 2, 4, "}
{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\n\ndef remove_nested(tup):\n    \"\"\"\n    >>> remove_nested((1, 5, 7, (4, 6), 10))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3)))\n    (1, 5, 7, 10, (1, 2, 3))\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10, (1, 2, 3), (1, 2, 3))\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10, (1, 2, 3), (1, 2, 3), (1, 2, 3))\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3))\n    \"\"\"\n    if isinstance(tup, tuple):\n        if len(tup) == 1:\n            return tup[0]\n        else:\n            return tuple(remove_nested(x) for x in tup)\n    else:\n        return tup\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\n\ndef count_list(lists):\n    \"\"\"\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    \"\"\"\n    return len(lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\n\ndef last(arr, x):\n    \"\"\"\n    :param arr: list\n    :param x: int\n    :return: int\n    \"\"\"\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == x else -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr) - 1\n    if arr[0] > x:\n        return -1\n    if arr[-1] < x:\n        return -1\n    if arr[0] < x < arr[-1]:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n            if arr[i] > x:\n                return i - 1\n    return -1\n\n\nif __name__ == '__main__':\n    print(last([1, 2, 3], 1))\n    print(last([1, 2, 3], 2))\n    print(last([1, 2, 3], 3))\n    print(last([1, 2, 3], 4))\n    print(last([1, 2, 3], 0))\n    print(last([1, 2, 3], 10))\n    print(last([1, 2, 3], 100))\n    print(last([1, 2, 3], 1000))\n    print(last([1, 2, 3], 10000))\n    print(last([1, 2, 3], 100000))\n    print(last([1, 2, 3], 1000000))\n    print(last([1, 2, 3], 10000000))\n    print(last([1, 2, 3], 100000000))\n    print(last([1, 2, 3], 1000000000))\n    print(last([1, 2, 3], 10000000000))\n    print(last([1, 2, 3], 100000000000))\n    print(last([1, 2, 3], 1000000000000))\n    print(last([1, 2, 3], 10000000000000))\n    print(last([1, 2, 3], 100000000000000))\n    print(last([1, 2, 3], 1000000000000000))\n    print(last([1, 2, 3], 10000000000000000))\n    print(last([1, 2, 3], 100000000000000000))\n    print(last([1, 2, 3], 1000000000000000000))\n    print(last([1, 2, 3], 10000000000000000000))\n    print(last([1, 2, 3], 100000000000000000000))\n    print(last([1, 2, 3], 1000000000000000000000))\n    print(last([1, 2, 3], 10000000000000000000000))\n    print(last([1, 2, 3], 100000000000000000000000))\n    print(last([1"}
{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\n\ndef text_starta_endb(text):\n    return text.startswith(\"a\") and text.endswith(\"b\")\n\n\nif __name__ == '__main__':\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta_endb(\"aabbbb\"))\n    print(text_starta"}
{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n\nprint(return_sum({'a': 100, 'b':200, 'c':300}))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n   "}
{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\n\ndef sum_in_range(l, r):\n    \"\"\"\n    :param l: int\n    :param r: int\n    :return: int\n    \"\"\"\n    if l > r:\n        return 0\n    return (l + r) * (r - l + 1) // 2\n\n\nif __name__ == '__main__':\n    print(sum_in_range(2, 5))\n    print(sum_in_range(1, 10))\n    print(sum_in_range(1, 100))\n    print(sum_in_range(1, 1000))\n    print(sum_in_range(1, 10000))\n    print(sum_in_range(1, 100000))\n    print(sum_in_range(1, 1000000))\n    print(sum_in_range(1, 10000000))\n    print(sum_in_range(1, 100000000))\n    print(sum_in_range(1, 1000000000))\n    print(sum_in_range(1, 10000000000))\n    print(sum_in_range(1, 100000000000))\n    print(sum_in_range(1, 1000000000000))\n    print(sum_in_range(1, 10000000000000))\n    print(sum_in_range(1, 100000000000000))\n    print(sum_in_range(1, 1000000000000000))\n    print(sum_in_range(1, 10000000000000000))\n    print(sum_in_range(1, 100000000000000000))\n    print(sum_in_range(1, 1000000000000000000))\n    print(sum_in_range(1, 10000000000000000000))\n    print(sum_in_range(1, 100000000000000000000))\n    print(sum_in_range(1, 1000000000000000000000))\n    print(sum_in_range(1, 10000000000000000000000))\n    print(sum_in_range(1, 100000000000000000000000))\n    print(sum_in_range(1, 1000000000000000000000000))\n    print(sum_in_range(1, 10000000000000000000000000))\n    print(sum_in_range(1, 100000000000000000000000000))\n    print(sum_in_range(1, 1000000000000000000000000000))\n    print(sum_in_range(1, 10000000000000000000000000000))\n    print(sum_in_range(1, 100000000000000000000000000000))\n"}
{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\n\ndef _sum(arr):\n    \"\"\"\n    >>> _sum([1, 2, 3])\n    6\n    \"\"\"\n    return sum(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\n\ndef left_rotate(num, d):\n    \"\"\"\n    :param num: number to rotate\n    :param d: number of bits to rotate\n    :return: rotated number\n    \"\"\"\n    mask = 0xffffffff\n    return (num << d) & mask | (num >> (32 - d)) & mask\n\n\nif __name__ == '__main__':\n    print(left_rotate(16, 2))\n    print(left_rotate(16, 3))\n    print(left_rotate(16, 4))\n    print(left_rotate(16, 5))\n    print(left_rotate(16, 6))\n    print(left_rotate(16, 7))\n    print(left_rotate(16, 8))\n    print(left_rotate(16, 9))\n    print(left_rotate(16, 10))\n    print(left_rotate(16, 11))\n    print(left_rotate(16, 12))\n    print(left_rotate(16, 13))\n    print(left_rotate(16, 14))\n    print(left_rotate(16, 15))\n    print(left_rotate(16, 16))\n    print(left_rotate(16, 17))\n    print(left_rotate(16, 18))\n    print(left_rotate(16, 19))\n    print(left_rotate(16, 20))\n    print(left_rotate(16, 21))\n    print(left_rotate(16, 22))\n    print(left_rotate(16, 23))\n    print(left_rotate(16, 24))\n    print(left_rotate(16, 25))\n    print(left_rotate(16, 26))\n    print(left_rotate(16, 27))\n    print(left_rotate(16, 28))\n    print(left_rotate(16, 29))\n    print(left_rotate(16, 30))\n    print(left_rotate(16, 31))\n    print(left_rotate(16, 32))\n    print(left_rotate(16, 33))\n    print(left_rotate(16, 34))\n    print(left_rotate(16, 35))\n    print(left_rotate(16, 36))\n    print(left_rotate(16, 37))\n    print(left_rotate(16, 38))\n    print(left_rotate(16, 39))\n    print(left_rotate(16, 40))\n    print(left_rotate(16, 41))\n    print(left_rotate(16, 42))\n    print(left_rotate(16, 43))\n    print(left_rotate(16, 44))\n    print(left_rotate(16, 45))\n    print(left_rotate(16, 46))\n    print(left_rotate(16, 47))\n    print(left_rotate(16, 48))\n    print(left_rotate(16, 49))\n    print(left_rotate(16, 50))\n    print(left_rotate(16, 51))\n    print(left_rotate(16, 52))\n    print(left_rotate(16, 53))\n    print(left_rotate(16, 54))\n    print(left_rotate(16, 55))\n    print(left_rotate(16, 56))\n    print(left_rotate(16, 57))\n    print(left_rotate(16, 58))\n    print(left_rotate(16, 59))\n    print(left_rotate(16, 60))\n    print(left_rotate(16"}
{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\n\ndef remove_all_spaces(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return ''.join(string.split())\n\n\nif __name__ == '__main__':\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))"}
{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\n\ndef test_three_equal(a, b, c):\n    if a == b and b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    print(test_three_equal(1, 1, 1))\n    print(test_three_equal(1, 1, 2))\n    print(test_three_equal(1, 2, 2))\n    print(test_three_equal(1, 2, 3))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 3))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(1, 4, 4))\n    print(test_three_equal(2, 2, 2))\n    print(test_three_equal(2, 2, 3))\n    print(test_three_equal(2, 2, 4))\n    print(test_three_equal(2, 3, 3))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(2, 4, 4))\n    print(test_three_equal(3, 3, 3))\n    print(test_three_equal(3, 3, 4))\n    print(test_three_equal(3, 4, 4))\n    print(test_three_equal(4, 4, 4))\n    print(test_three_equal(1, 1, 2))\n    print(test_three_equal(1, 2, 3))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 3))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print(test_three_equal(1, 3, 4))\n    print(test_three_equal(2, 3, 4))\n    print(test_three_equal(1, 1, 4))\n    print(test_three_equal(1, 2, 4))\n    print"}
{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n   "}
{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\ndef is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if len(numbers) == 0:\n        return False\n    if len(numbers) == 1:\n        return True\n    if len(numbers) == 2:\n        return numbers[0] * numbers[1] % 2 == 0\n    if len(numbers) == 3:\n        return numbers[0] * numbers[1] * numbers[2] % 2 == 0\n    if len(numbers) == 4:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] % 2 == 0\n    if len(numbers) == 5:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] % 2 == 0\n    if len(numbers) == 6:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] % 2 == 0\n    if len(numbers) == 7:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] % 2 == 0\n    if len(numbers) == 8:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] % 2 == 0\n    if len(numbers) == 9:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] % 2 == 0\n    if len(numbers) == 10:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] * numbers[9] % 2 == 0\n    if len(numbers) == 11:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] * numbers[9] * numbers[10] % 2 == 0\n    if len(numbers) == 12:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] * numbers[9] * numbers[10] * numbers[11] % 2 == 0\n    if len(numbers) == 13:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] * numbers[9] * numbers[10] * numbers[11] * numbers[12] % 2 == 0\n    if len(numbers) == 14:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] * numbers[9] * numbers[10] * numbers[11] * numbers[12] * numbers[13] % 2 == 0\n    if len(numbers) == 15:\n        return numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7] * numbers[8] * numbers[9] * numbers[10] * numbers[11] * numbers[12] * numbers[13] * numbers[14] % 2 == 0\n"}
{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\n\ndef max_sum_list(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: list with the highest sum of elements\n    \"\"\"\n    max_sum = 0\n    max_sum_list = []\n    for list_ in list_of_lists:\n        sum_ = 0\n        for element in list_:\n            sum_ += element\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_sum_list = list_\n    return max_sum_list\n\n\nif __name__ == '__main__':\n    print(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    print(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    print(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                        [1,"}
{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\n\ndef max_run_uppercase(string):\n    \"\"\"\n    :param string: string\n    :return: int\n    \"\"\"\n    max_run = 0\n    run = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            run += 1\n        else:\n            if run > max_run:\n                max_run = run\n            run = 0\n    if run > max_run:\n        max_run = run\n    return max_run\n\n\nif __name__ == '__main__':\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBE"}
{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\n\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_2(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_3(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_4(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_5(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_6(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_7(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_8(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_9(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_10(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_11(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_12(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_13(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_14(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_15(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_16(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_17(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_18(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_19(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_20(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_21(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_22(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_23(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\ndef first_odd_24(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n"}
{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\n\ndef check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    :param tup: tuple\n    :param k: int\n    :return: bool\n    \"\"\"\n    return k in tup\n\n\nif __name__ == '__main__':\n    print(check_K((10, 4, 5, 6, 8), 6))\n    print(check_K((10, 4, 5, 6, 8), 10))\n    print(check_K((10, 4, 5, 6, 8), 1))\n    print(check_K((10, 4, 5, 6, 8), 8))\n    print(check_K((10, 4, 5, 6, 8), 5))\n    print(check_K((10, 4, 5, 6, 8), 4))\n    print(check_K((10, 4, 5, 6, 8), 3))\n    print(check_K((10, 4, 5, 6, 8), 2))\n    print(check_K((10, 4, 5, 6, 8), 100))\n    print(check_K((10, 4, 5, 6, 8), 0))\n    print(check_K((10, 4, 5, 6, 8), -1))\n    print(check_K((10, 4, 5, 6, 8), -10))\n    print(check_K((10, 4, 5, 6, 8), -100))\n    print(check_K((10, 4, 5, 6, 8), -1000))\n    print(check_K((10, 4, 5, 6, 8), -10000))\n    print(check_K((10, 4, 5, 6, 8), -100000))\n    print(check_K((10, 4, 5, 6, 8), -1000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000))\n    print(check_K((10, 4, 5, 6, 8), -1000000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000000))\n    print(check_K((10, 4, 5, 6, 8), -1000000000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000000000))\n    print(check_K((10, 4, 5, 6, 8), -1000000000000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000000000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000000000000))\n    print(check_K((10, "}
{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\n\ndef check_smaller(t1, t2):\n    \"\"\"\n    >>> check_smaller((1, 2, 3), (2, 3, 4))\n    False\n    >>> check_smaller((1, 2, 3), (2, 3, 3))\n    True\n    >>> check_smaller((1, 2, 3), (2, 3, 2))\n    False\n    >>> check_smaller((1, 2, 3), (2, 3, 1))\n    False\n    >>> check_smaller((1, 2, 3), (2, 2, 3))\n    False\n    >>> check_smaller((1, 2, 3), (2, 2, 2))\n    False\n    >>> check_smaller((1, 2, 3), (2, 2, 1))\n    False\n    >>> check_smaller((1, 2, 3), (1, 2, 3))\n    False\n    >>> check_smaller((1, 2, 3), (1, 2, 2))\n    False\n    >>> check_smaller((1, 2, 3), (1, 2, 1))\n    False\n    >>> check_smaller((1, 2, 3), (1, 1, 3))\n    False\n    >>> check_smaller((1, 2, 3), (1, 1, 2))\n    False\n    >>> check_smaller((1, 2, 3), (1, 1, 1))\n    False\n    >>> check_smaller((1, 2, 3), (1, 0, 3))\n    False\n    >>> check_smaller((1, 2, 3), (1, 0, 2))\n    False\n    >>> check_smaller((1, 2, 3), (1, 0, 1))\n    False\n    >>> check_smaller((1, 2, 3), (0, 2, 3))\n    False\n    >>> check_smaller((1, 2, 3), (0, 2, 2))\n    False\n    >>> check_smaller((1, 2, 3), (0, 2, 1))\n    False\n    >>> check_smaller((1, 2, 3), (0, 1, 3))\n    False\n    >>> check_smaller((1, 2, 3), (0, 1, 2))\n    False\n    >>> check_smaller((1, 2, 3), (0, 1, 1))\n    False\n    >>> check_smaller((1, 2, 3), (0, 0, 3))\n    False\n    >>> check_smaller((1, 2, 3), (0, 0, 2))\n    False\n    >>> check_smaller((1, 2, 3), (0, 0, 1))\n    False\n    \"\"\"\n    if len(t1) != len(t2):\n        return False\n    for i in range(len(t1)):\n        if t1[i] > t2[i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
