{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\ndef similar_elements(list1, list2):\n    \"\"\"\n    :param list1: first list\n    :param list2: second list\n    :return: set of shared elements\n    \"\"\"\n    # create a set of first list\n    set1 = set(list1)\n    # create a set of second list\n    set2 = set(list2)\n    # find intersection of two sets\n    intersection = set1 & set2\n    # return intersection\n    return intersection\n\n# test the function\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as an input and returns True if the number is not a prime number and False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\ndef heap_queue_largest(lst, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for num in lst[n:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap\n\n\nif __name__ == \"__main__\":\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3))"}
{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\ndef differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    This function checks whether two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert the two numbers to binary\n    num1_bin = bin(num1)[2:]\n    num2_bin = bin(num2)[2:]\n\n    # Find the index of the first 1 in num1_bin\n    first_1_index = num1_bin.find('1')\n\n    # Find the index of the first 1 in num2_bin\n    second_1_index = num2_bin.find('1')\n\n    # Check if the two numbers differ at one bit position only\n    if first_1_index != second_1_index:\n        return True\n    else:\n        return False\n\n# Test the function\nassert differ_At_One_Bit_Pos(13,9) == True"}
{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\ndef find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # split the string into a list of words\n    words = string.split()\n    # create an empty set to store the words\n    result = set()\n    # iterate over the words\n    for word in words:\n        # check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # add the word to the set\n            result.add(word)\n    # return the set of words\n    return result"}
{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\ndef square_nums(lst):\n    \"\"\"\n    This function takes a list as an input and returns a new list with the squares of each element in the original list.\n    \"\"\"\n    result = []\n    for num in lst:\n        result.append(num**2)\n    return result\n\n# test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\ndef find_Rotations(s):\n    if len(s) == 1:\n        return 0\n    else:\n        for i in range(1,len(s)):\n            if s[0] == s[i]:\n                return i\n            else:\n                break\n        return -1\n\n# test\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"aab\") == 2\nassert find_Rotations(\"abc\") == -1"}
{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    \"\"\"\n    Function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    string = string.replace(char, '', 1)\n    string = string.replace(char, '', 1)\n    return string\n\n# Testing code\nstring = \"hello\"\nchar = \"l\"\nassert remove_Occ(string, char) == \"heo\""}
{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    matrix.sort(key=lambda x: sum(x), reverse=True)\n    return matrix\n\n# test\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nassert sort_matrix(matrix) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(l, w, h):\n    \"\"\"\n    :param l: length of the base of the triangle\n    :param w: width of the base of the triangle\n    :param h: height of the prism\n    :return: volume of the triangular prism\n    \"\"\"\n    volume = l * w * h\n    return volume\n\n#assert find_Volume(10,8,6) == 240"}
{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    :param text: string\n    :return: True if the input string contains sequences of lowercase letters joined with an underscore and false otherwise\n    \"\"\"\n    if \"a-zA-Z_\" in text:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * side_length\n    return perimeter\n\n# Test the function\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    \"\"\"\n    :param string1:\n    :param string2:\n    :return:\n    \"\"\"\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result\n\n\n# assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n# assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    \"\"\"\n    Test function to check whether the array contains any duplicate element\n    \"\"\"\n    if len(set(arr)) != len(arr):\n        return True\n    else:\n        return False\n\n\ndef find_duplicate(arr):\n    \"\"\"\n    Function to find whether a given array of integers contains any duplicate element\n    \"\"\"\n    if test_duplicate(arr):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    if int(num_str_rev) * 2 == num - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\ndef find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits as an input and returns the largest number that can be formed using those digits.\n    \"\"\"\n    digits = sorted(digits, reverse=True)\n    num = 0\n    for digit in digits:\n        num = num*10 + digit\n    return num\n\n# Test the function\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,7,8,9]) == 987654321\nassert find_Max_Num([0,0,0,0,0,0]) == 0\nassert find_Max_Num([9,8,7,6,5,4,3,2,1]) == 987654321"}
{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a*b < 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    if n % 8 != 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n    return True\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Find the nth octagonal number\n    \"\"\"\n    if n % 8 != 0:\n        return None\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    if n % 4 == 0:\n        return 0\n    if n % 6 == 0:\n        return 0\n    if n % 10 == 0:\n        return 0\n    if n % 12 == 0:\n        return 0\n    if n % 14 == 0:\n        return 0\n    if n % 16 == 0:\n        return 0\n    if n % 18 == 0:\n        return 0\n    if n % 20 == 0:\n        return 0\n    if n % 22 == 0:\n        return 0\n    if n % 24 == 0:\n        return 0\n    if n % 26 == 0:\n        return 0\n    if n % 28 == 0:\n        return 0\n    if n % 30 == 0:\n        return 0\n    if n % 32 == 0:\n        return 0\n    if n % 34 == 0:\n        return 0\n    if n % 36 == 0:\n        return 0\n    if n % 38 == 0:\n        return 0\n    if n % 40 == 0:\n        return 0\n    if n % 42 == 0:\n        return 0\n    if n % 44 == 0:\n        return 0\n    if n % 46 == 0:\n        return 0\n    if n % 48 == 0:\n        return 0\n    if n % 50 == 0:\n        return 0\n    if n % 52 == 0:\n        return 0\n    if n % 54 == 0:\n        return 0\n    if n % 56 == 0:\n        return 0\n    if n % 58 == 0:\n        return 0\n    if n % 60 == 0:\n        return 0\n    if n % 62 == 0:\n        return 0\n    if n % 64 == 0:\n        return 0\n    if n % 66 == 0:\n        return 0\n    if n % 68 == 0:\n        return 0\n    if n % 70 == 0:\n        return 0\n    if n % 72 == 0:\n        return 0\n    if n % 74 == 0:\n        return 0\n    if n % 76 == 0:\n        return 0\n    if n % 78 == 0:\n        return 0\n    if n % 80 == 0:\n        return 0\n    if n % 82 == 0:\n        return 0\n    if n % 84 == 0:\n        return 0\n    if n % 86 == 0:\n        return 0\n    if n % 88 == 0:\n        return 0\n    if n % 90 == 0:\n        return 0\n    if n % 92 == 0:\n        return 0\n    if n % 94 == 0:\n        return 0\n    if n % 96 == 0:\n        return 0\n    if n % 98 == 0:\n        return 0\n    if n % 100 == 0:\n        return 0\n    if n % 102 == 0:\n        return 0\n    if"}
{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n\n\n# assert count_Substrings('112112') == 6\nprint(count_Substrings('112112'))"}
{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the smallest number in the list.\n    \"\"\"\n    # check if the list is empty\n    if not lst:\n        return None\n    # sort the list in ascending order\n    lst.sort()\n    # return the smallest number\n    return lst[0]\n\n# test the function\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(lst):\n    max_diff = 0\n    for i in range(len(lst)-1):\n        diff = lst[i][1] - lst[i+1][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))"}
{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\n# assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))"}
{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    \"\"\"\n    Recursively sums all the elements in a list.\n    :param lst: list\n    :return: sum of all elements in the list\n    \"\"\"\n    if isinstance(lst, list):\n        return sum(recursive_list_sum(sublist) for subset in lst)\n    else:\n        return lst\n\n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]) == 21)"}
{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n\n# assert pos_count([1,-2,3,-4]) == 2\n# assert pos_count([-1,0,1,2,-3]) == 3\n# assert pos_count([-1,0,1,2,-3,4,5]) == 4"}
{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    Bell numbers are defined as the sum of the reciprocals of the factorials of the positive integers.\n    The first few Bell numbers are: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 89544878739, 144967470209, 241578171428, 390881695120, 632459867215, 1023341557864, 16558014109375, 26791429615280, 433494437170944, 7014087331622776, 11349031701650110, 183631190325846976, 2971215073319555840, 4807526976272888960, 7778742049250313951, 12586269025358421109, 203650110742467460752, 32951280099584624477520, 53316291173438743368730, 8954487873921508621915264000, 144967470209227898880089898000, 2415781714281716400000000000, 39088169512098504000000000000, 632459867215504531250000000000, 10233415578640000000000000000"}
{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(lst, sublist):\n    \"\"\"\n    :param lst: list\n    :param sublist: sublist\n    :return: True if sublist is present in lst else False\n    \"\"\"\n    if len(sublist) == 0:\n        return True\n    for i in range(len(lst)-len(sublist)+1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\ndef get_equal(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: True if all tuples have same length, False otherwise\n    \"\"\"\n    if len(tuples) == 0:\n        return True\n    else:\n        for i in range(len(tuples)):\n            if len(tuples[i]) != len(tuples[0]):\n                return False\n        return True"}
{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    \"\"\"\n    This function sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(lst)\n    if n <= 1:\n        return lst\n\n    # Divide the list into two halves\n    mid = n // 2\n    left = lst[:mid]\n    right = lst[mid:]\n\n    # Recursively sort the two halves\n    left = comb_sort(left)\n    right = comb_sort(right)\n\n    # Combine the two sorted halves\n    return combine(left, right)\n\n\ndef combine(left, right):\n    \"\"\"\n    This function combines two sorted lists into one sorted list.\n    \"\"\"\n    result = []\n    i = j = 0\n\n    # Compare and combine elements from the two lists\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    # Add any remaining elements from the left list\n    result.extend(left[i:])\n\n    # Add any remaining elements from the right list\n    result.extend(right[j:])\n\n    return result"}
{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if n == i**2 - j**2:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\ndef is_samepatterns(patterns, sequences):\n    \"\"\"\n    :param patterns: list of strings\n    :param sequences: list of strings\n    :return: True if the sequences follow the patterns, False otherwise\n    \"\"\"\n    for i in range(len(patterns)):\n        if sequences[i] != patterns[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\"\n    :param tuples: list of tuples\n    :param k: integer\n    :return: list of tuples\n    \"\"\"\n    result = []\n    for tuple in tuples:\n        if all(x % k == 0 for x in tuple):\n            result.append(tuple)\n    return result"}
{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_divisible_by_11(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num % 11 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n += 1\n    return n*(n-1)/2 + 1\n\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\nfrom math import pi\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere.\n    :param r: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return (4/3) * pi * (r**3)"}
{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s: str) -> str:\n    result = \"\"\n    for i in range(len(s)):\n        result += chr((ord(s[i]) - 97 + 26) % 26 + 97)\n    return result"}
{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nassert sequence(10) == 6"}
{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\nfrom math import pi\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n    return 4 * pi * r**2"}
{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n += 1\n    return n*(n**2 + 1)/2\n\n\nif __name__ == '__main__':\n    assert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and dict1[key] != dict2[key]:\n            merged_dict[key] = dict1[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]))"}
{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    closest = n - 1\n    while closest > n - 1:\n        closest -= 1\n    return closest\n\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(lst):\n    \"\"\"\n    Function to find the length of the longest word in a list\n    :param lst: list of words\n    :return: int\n    \"\"\"\n    max_len = 0\n    for word in lst:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(lst, sub):\n    for i in lst:\n        if sub in i:\n            return True\n    return False\n\n# assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n# assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"blue\")==False"}
{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\ndef is_undulating(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    while i < len(n) - 1:\n        if n[i] == n[i + 1]:\n            i += 1\n        else:\n            return True\n    return False"}
{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'\n    \"\"\"\n    result = a\n    for i in range(1, b):\n        result *= a\n    return result\n\n# assert power(3,4) == 81\n# assert power(2,5) == 32\n# assert power(1,6) == 1\n# assert power(0,7) == 0\n# assert power(-1,7) == -127\n# assert power(-2,7) == -256\n# assert power(-3,7) == -387\n# assert power(-4,7) == -518\n# assert power(-5,7) == -650\n# assert power(-6,7) == -782\n# assert power(-7,7) == -914\n# assert power(-8,7) == -1046\n# assert power(-9,7) == -1178\n# assert power(-10,7) == -1310\n# assert power(-11,7) == -1442\n# assert power(-12,7) == -1574\n# assert power(-13,7) == -1706\n# assert power(-14,7) == -1838\n# assert power(-15,7) == -2070\n# assert power(-16,7) == -2302\n# assert power(-17,7) == -2534\n# assert power(-18,7) == -2766\n# assert power(-19,7) == -3000\n# assert power(-20,7) == -3234\n# assert power(-21,7) == -3468\n# assert power(-22,7) == -3702\n# assert power(-23,7) == -3936\n# assert power(-24,7) == -4170\n# assert power(-25,7) == -4394\n# assert power(-26,7) == -4618\n# assert power(-27,7) == -4842\n# assert power(-28,7) == -5066\n# assert power(-29,7) == -5290\n# assert power(-30,7) == -5514\n# assert power(-31,7) == -5738\n# assert power(-32,7) == -6062\n# assert power(-33,7) == -6386\n# assert power(-34,7) == -6710\n# assert power(-35,7) == -7034\n# assert power(-36,7) == -7358\n# assert power(-37,7) == -7682\n# assert power(-38,7) == -8006\n# assert power(-39,7) == -8330\n# assert power(-40,7) == -8654\n# assert power(-41,7) == -9078\n# assert power(-42,7) == -9502\n# assert power(-43,7) == -10026\n# assert power(-44,7) == -10550\n# assert power(-45,7) == -11074\n# assert power(-46,7) == -11608\n# assert power(-47,7) == -12142\n# assert power(-48,7) == -12676\n# assert power(-49,7) == -13210\n# assert power(-50,7) == -13744\n# assert power(-51,7) == -14278\n# assert power(-52,7) == -14812\n# assert power(-53,7) == -15346\n# assert power(-54,7) == -15880\n# assert power(-55,7) == -16414\n# assert power(-5"}
{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(lst):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return lst[lst.index(min(lst, key=lambda x: x[1]))][0]\n\n\n# assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))"}
{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as an input and returns the length of the smallest list in the list.\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return min(len(x) for x in lst)"}
{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\ndef divisor(n):\n    \"\"\"\n    This function takes an integer n as an argument and returns the number of divisors of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        count = 1\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n        return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    \"\"\"\n    Takes in a list of lists and returns a dictionary with the frequency of each element in the flattened list.\n    \"\"\"\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\n# assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\ndef multiply_num(lst):\n    \"\"\"\n    multiply all the numbers in a list and divide with the length of the list\n    :param lst: list of numbers\n    :return: float\n    \"\"\"\n    result = 1\n    for num in lst:\n        result *= num\n    return result / len(lst)\n\n\n# test\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary[::-1]\n\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    # Find the length of the string\n    length = len(s)\n    # Find the next smallest palindrome\n    next_palindrome = \"\"\n    for i in range(length):\n        # If the length is 1, add a 0 to the end\n        if length == 1:\n            next_palindrome = \"0\" + s\n        # If the length is greater than 1, add a 0 to the end and reverse the string\n        else:\n            next_palindrome = \"0\" + s[::-1]\n        # Check if the next palindrome is smaller than the current palindrome\n        if int(next_palindrome) < int(s):\n            return int(next_palindrome)\n    # If no smaller palindrome is found, return the original integer\n    return n"}
{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    \"\"\"\n    :param arr: array\n    :param k: kth element\n    :return: kth element\n    \"\"\"\n    if k < 1 or len(arr) < k:\n        return None\n    else:\n        return arr[k - 1]\n\n# test\narr = [12,3,5,7,19]\nk = 2\nprint(kth_element(arr, k))"}
{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    # split the string by underscore\n    words = s.split('_')\n    # capitalize the first word\n    first_word = words[0].capitalize()\n    # join the rest of the words with uppercase\n    rest_of_words = '_'.join(words[1:]).upper()\n    # join the first word and rest of the words\n    return first_word + rest_of_words\n\n# test the function\nassert snake_to_camel('python_program')=='PythonProgram'"}
{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return sum(eulerian_num(n - i, m - 1) for i in range(1, n + 1))"}
{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist in place.\n    It returns the original list.\n    \"\"\"\n    for sublist in lst:\n        sublist.sort()\n    return lst"}
{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# assert count([True,False,True]) == 2\nprint(count_true([True,False,True]))"}
{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(lst, tuples):\n    \"\"\"\n    This function takes two arguments, a list and a tuple, and returns a tuple with the list appended to it.\n    \"\"\"\n    new_tuple = tuple(lst + tuple)\n    return new_tuple\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists and returns a single sorted list.\n    \"\"\"\n    # Combine the three lists\n    combined_list = list1 + list2 + list3\n\n    # Sort the combined list\n    combined_list.sort()\n\n    # Return the sorted list\n    return combined_list\n\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,r):\n    \"\"\"\n    :param s: string\n    :param r: int\n    :return: int\n    \"\"\"\n    if r == 0:\n        return 0\n    else:\n        return sum(1 for i in range(len(s)) if int(s[i:i+r],2)%2 != 0)\n\n\n#assert odd_Equivalent(\"011001\",6) == 3\n#print(odd_Equivalent(\"011001\",6))"}
{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\ndef common_in_nested_lists(lst):\n    \"\"\"\n    This function takes a list of nested lists as input and returns a set of common elements in all the nested lists.\n    \"\"\"\n    common = set()\n    for sublist in lst:\n        for item in sublist:\n            if item in common:\n                common.add(item)\n            else:\n                common.add(item)\n    return common\n\n\n# Test the function\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))"}
{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except:\n        return False\n\nassert check_integer(\"python\")==False\nassert check_integer(\"123\")==True\nassert check_integer(\"123a\")==False"}
{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dict(lst):\n    for i in lst:\n        if i:\n            return False\n    return True\n\n# assert empty_dict([{},{},{}])==True\n# assert empty_dict([{'a':1},{'b':2}])==False"}
{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple):\n    return sum(tuple)\n\nassert tuple_to_int((1,2,3))==123"}
{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\n\ndef list_to_float(lst):\n    \"\"\"\n    Converts all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    return [(float(x), float(y)) for x, y in lst]\n\n# assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n# assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"1.0\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0), (1.0, 1.0)]"}
{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\ndef search(arr):\n    \"\"\"\n    :param arr: sorted array\n    :return: element that appears only once\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return None\n    return arr[0]\n\n\n# test\narr = [1, 1, 2, 2, 3]\nassert search(arr) == 3"}
{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_abs_product = 0\n    for tuple1 in lst:\n        for tuple2 in lst:\n            if tuple1 != tuple2:\n                product = abs(tuple1[0]*tuple2[1])\n                if product > max_abs_product:\n                    max_abs_product = product\n    return max_abs_product\n\n# assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])==36\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))"}
{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(n):\n    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef angle_complex(z):\n    \"\"\"\n    Returns the angle of a complex number z in radians.\n    \"\"\"\n    return math.phase(z)"}
{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\ndef find_length(s):\n    max_diff = 0\n    for i in range(len(s)):\n        count_zero = 0\n        count_one = 0\n        for j in range(i, len(s)):\n            if s[j] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            diff = abs(count_zero - count_one)\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n# test\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the greatest common divisor of two numbers\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    # Finding the sum of common divisors\n    result = 0\n    for i in range(1, gcd(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            result += i\n    return result\n\n# Testing the function\nassert sum_of_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\n# assert multiply_int(10,20)==200\n# print(multiply_int(10,20))"}
{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    \"\"\"\n    This function takes in a list of words and an integer n and returns a list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word)>n:\n            result.append(word)\n    return result\n\n# Test the function\nprint(long_words(3,\"python is a programming language\"))"}
{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    n = len(matrix)\n    total = (n*(n**2+1))//2\n    sum = 0\n    for row in matrix:\n        sum += sum(row)\n    return sum == total\n\nmatrix = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\nprint(magic_square_test(matrix))"}
{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\ndef max_occurrences(lst):\n    # create a dictionary to store the frequency of each item in the list\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_item = [item for item, freq in freq.items() if freq == max_freq]\n\n    # return the item with maximum frequency\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            reversed_vowels += s[i]\n        else:\n            reversed_vowels += s[i]\n    return reversed_vowels\n\n# Test\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tuple_):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    string_ = tuple_\n    for i in range(len(tuple_)):\n        string_ = string_[:i] + \",\" + string_[i:]\n    return string_\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")"}
{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: sum of negative numbers\n    \"\"\"\n    sum_neg = 0\n    for number in numbers:\n        if number < 0:\n            sum_neg += number\n    return sum_neg\n\n#assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n#print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))"}
{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n += 1\n    return n*(n**2-1)/2\n\n\nif __name__ == '__main__':\n    assert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\ndef zero_count(arr):\n    \"\"\"\n    Count the number of zeroes in an array of integers.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n    return count\n\ndef non_zero_count(arr):\n    \"\"\"\n    Count the number of non-zeroes in an array of integers.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            count += 1\n    return count\n\ndef ratio(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    return zero_count(arr) / non_zero_count(arr)\n\nif __name__ == '__main__':\n    import math\n    assert math.isclose(ratio([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            return True\n        i += 1\n    return False"}
{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\ndef extract_singly(lst):\n    \"\"\"\n    Flatten a list of lists into a single set of numbers.\n    \"\"\"\n    flat_lst = []\n    for sublist in lst:\n        flat_lst += sublist\n    return flat_lst"}
{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    \"\"\"\n    This function takes a list of elements and sorts them in ascending order.\n    \"\"\"\n    # First, we find the maximum element in the list\n    max_elem = max(lst)\n\n    # Then, we iterate over the list and swap each element with the maximum element\n    for i in range(len(lst)):\n        lst[i], max_elem = max_elem, lst[i]\n\n    return lst\n\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_list):\n    count = 0\n    for i in tuple_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n# Test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test the function\narr = (2,1,5,3)\nprint(max_Abs_Diff(arr))"}
{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\ndef find_solution(a, b, n):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type n: int\n    :rtype: Tuple[int, int]\n    \"\"\"\n    if a == 0:\n        return None\n    x = n / b\n    y = n % b\n    if y == 0:\n        return (x, 0)\n    while y != 0:\n        x = x - y // b\n        y = y % b\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(lst1, lst2):\n    \"\"\"\n    This function removes all elements present in lst2 from lst1\n    \"\"\"\n    for i in lst2:\n        if i in lst1:\n            lst1.remove(i)\n    return lst1\n\n# Testing the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\ndef sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2\n    \"\"\"\n    assert n % 2 == 0, \"n must be even\"\n    return sum(range(n, 0, -2))\n\n\nif __name__ == '__main__':\n    print(sum_series(6))"}
{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\n\ndef are_equivalent(num1, num2):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = sum(range(1, num1+1))\n    div2 = sum(range(1, num2+1))\n    return div1 == div2\n\nassert are_equivalent(36, 57) == False"}
{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == alphabet[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\ndef find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n\ndef next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while True:\n        n += 1\n        if n % 2 == 0:\n            return n\n\n\nif __name__ == \"__main__\":\n    assert next_power_of_2(0) == 1\n    assert next_power_of_2(1) == 2\n    assert next_power_of_2(2) == 4\n    assert next_power_of_2(3) == 8\n    assert next_power_of_2(4) == 16\n    assert next_power_of_2(5) == 32\n    assert next_power_of_2(6) == 64\n    assert next_power_of_2(7) == 128\n    assert next_power_of_2(8) == 256\n    assert next_power_of_2(9) == 512\n    assert next_power_of_2(10) == 1024\n    assert next_power_of_2(11) == 2048\n    assert next_power_of_2(12) == 4096\n    assert next_power_of_2(13) == 8192\n    assert next_power_of_2(14) == 16384\n    assert next_power_of_2(15) == 32768\n    assert next_power_of_2(16) == 65536\n    assert next_power_of_2(17) == 131072\n    assert next_power_of_2(18) == 262144\n    assert next_power_of_2(19) == 524288\n    assert next_power_of_2(20) == 1048576\n    assert next_power_of_2(21) == 2097152\n    assert next_power_of_2(22) == 4194304\n    assert next_power_of_2(23) == 8388608\n    assert next_power_of_2(24) == 16777216\n    assert next_power_of_2(25) == 33544032\n    assert next_power_of_2(26) == 67108872\n    assert next_power_of_2(27) == 134217728\n    assert next_power_of_2(28) == 268435456\n    assert next_power_of_2(29) == 536870912\n    assert next_power_of_2(30) == 1073741824\n    assert next_power_of_2(31) == 2147483648\n    assert next_power_of_2(32) == 4294967296\n    assert next_power_of_2(33) == 8589934592\n    assert next_power_of_2(34) == 17179969152\n    assert next_power_of_2(35) == 34359837170\n    assert next_power_of_2(36) == 68719871702\n    assert next_power_of_2(37) == 137439717010\n    assert next_power_of_2(38) == 274879408736\n    assert next_power_of_2(39) == 549758716402\n    assert next_power_of_2(40) == 1099511622"}
{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\ndef frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count\n\n# assert frequency([1,2,3], 4) == 0\n# assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1\n# assert frequency([1,2,3,4,5,6,7,8,9,10], 10) == 1\n# assert frequency([1,2,3,4,5,6,7,8,9,10], 11) == 0"}
{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\ndef sum_range_list(lst, start, end):\n    \"\"\"\n    This function takes in a list and two indices and returns the sum of the numbers in the list\n    between the start and end indices.\n    \"\"\"\n    if start > end:\n        return \"Invalid indices\"\n    else:\n        sum = 0\n        for i in range(start, end+1):\n            sum += lst[i]\n        return sum\n\n# test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\nfrom math import sin, cos, pi\n\ndef perimeter_pentagon(sides):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n    \"\"\"\n    angle = 2 * pi / sides\n    perimeter = 0\n    for i in range(sides):\n        perimeter += sides * cos(angle)\n        angle += pi / sides\n    return perimeter\n\n\nif __name__ == '__main__':\n    assert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == 'std':\n            count += 1\n    return count\n\n# test\nstring = \"letstdlenstdporstd\"\nassert count_occurance(string) == 3"}
{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_data):\n    \"\"\"\n    :param tuple_data: tuple\n    :return: True if all the elements in tuple have same data type or False\n    \"\"\"\n    data_type = tuple_data[0]\n    for i in range(1, len(tuple_data)):\n        if type(tuple_data[i]) != data_type:\n            return False\n    return True"}
{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, x):\n    # Check if the element is in the array\n    if x not in arr:\n        return False\n    # Count the number of times the element appears\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # Check if the element appears more than n/2 times\n    if count > n//2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n# Test the function\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    \"\"\"\n    :param string: input string\n    :return: string with characters removed which have odd index values\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string\n\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    \"\"\"\n    This function takes three arguments and returns the minimum of the three numbers.\n    \"\"\"\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\n#test the function\nassert min_of_three(10,20,0)==0"}
{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two empty lists, one for negative and one for positive elements\n    neg_list = []\n    pos_list = []\n\n    # iterate through the array and append elements to the appropriate list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # reverse the order of the negative list\n    neg_list = neg_list[::-1]\n\n    # concatenate the two lists and return the result\n    return neg_list + pos_list[:n]\n\n# test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, character):\n    \"\"\"\n    :param string: string\n    :param character: character\n    :return: string\n    \"\"\"\n    return string.replace(\" \", character)\n\n\n# assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n# assert replace_blank(\"hello people\",'1')==(\"hello1people\")"}
{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    # sort the list in descending order\n    lst.sort(reverse=True)\n    # return the first n items of the sorted list\n    return lst[:n]\n\n# test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])"}
{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\nfrom math import pi\n\ndef lateralsuface_cylinder(r,h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    :param r: radius of the cylinder\n    :param h: height of the cylinder\n    :return: lateral surface area of the cylinder\n    \"\"\"\n    return 2*pi*r*h"}
{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side_length):\n    \"\"\"\n    This function calculates the volume of a cube given its side length.\n    :param side_length: int or float, the side length of the cube\n    :return: int or float, the volume of the cube\n    \"\"\"\n    volume = side_length ** 3\n    return volume\n\n# Test the function\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n    :param num: int\n    :return: int\n    \"\"\"\n    # Convert the number to binary\n    num_binary = bin(num)[2:]\n\n    # Find the index of the first even bit\n    even_bit_index = num_binary.find('0', start=1)\n\n    # If there is no even bit, return the original number\n    if even_bit_index == -1:\n        return num\n\n    # Set all even bits to 1\n    num_binary = num_binary[:even_bit_index] + '1' + num_binary[even_bit_index:]\n\n    # Convert the binary number back to int\n    return int(num_binary, 2)\n\n\nif __name__ == '__main__':\n    assert even_bit_set_number(10) == 10\n    assert even_bit_set_number(15) == 15\n    assert even_bit_set_number(20) == 20\n    assert even_bit_set_number(25) == 25"}
{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(lst):\n    # create an empty dictionary\n    occurences = {}\n    # iterate over the list\n    for item in lst:\n        # check if the item is in the dictionary\n        if item in occurences:\n            # if it is, increment the count\n            occurences[item] += 1\n        else:\n            # if it is not, add it to the dictionary with a count of 1\n            occurences[item] = 1\n    # return the dictionary\n    return occurences\n\n# test the function\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ))"}
{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] != \"\":\n                count += 1\n    return count\n\n# test\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        return sum(get_total_number_of_sequences(m, n-1) for i in range(2, m+1))\n\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst1, lst2):\n    lst1.pop()\n    lst1.extend(lst2)\n    return lst1\n\n#assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    total=0\n    for i in string:\n        total+=1\n    return total\n\n#assert count_charac(\"python programming\")==18\nprint(count_charac(\"python programming\"))"}
{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    This function takes an integer as an input and returns the next perfect square greater than the given number.\n    \"\"\"\n    sqrt = int(n ** 0.5)\n    if sqrt * sqrt != n:\n        sqrt += 1\n    return sqrt * sqrt\n\n\n# Testing the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\ndef max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        mid = n // 2\n        left = max_sum(arr[:mid])\n        right = max_sum(arr[mid:])\n        return max(left, right) + max(arr[mid-1], arr[mid])\n\n\n# Test\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nprint(max_sum(arr))"}
{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\ndef lps(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    else:\n        max_len = 1\n        start = 0\n        for i in range(1, len(s)):\n            # find the length of palindromic subsequence with center at i\n            low = i - 1\n            high = i\n            while low >= 0 and high < len(s) and s[low] == s[high]:\n                if high - low + 1 > max_len:\n                    max_len = high - low + 1\n                    start = low\n                low -= 1\n                high += 1\n            # find the length of palindromic subsequence with center at i-1\n            low = i - 1\n            high = i\n            while low >= 0 and high < len(s) and s[low] == s[high]:\n                if high - low + 1 > max_len:\n                    max_len = high - low + 1\n                    start = low\n                low -= 1\n                high += 1\n        return max_len\n\n\nif __name__ == '__main__':\n    print(lps(\"TENS FOR TENS\"))"}
{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    intersection = []\n    for i in arr1:\n        if i in arr2:\n            intersection.append(i)\n    return intersection\n\n# test\narr1 = [1, 2, 3, 5, 7, 8, 9, 10]\narr2 = [1, 2, 4, 8, 9]\nassert intersection_array(arr1, arr2) == [1, 2, 8, 9]"}
{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple_list, element):\n    count = 0\n    for item in tuple_list:\n        if item == element:\n            count += 1\n    return count\n\n\n# assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n# assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),5) == 1\n# assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 2"}
{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\ndef insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in the list\n    \"\"\"\n    return [element] + lst"}
{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(c):\n    r, i = c.real, c.imag\n    return (r, math.atan(i/r))\n\nassert convert(1) == (1.0, 0.0)\nassert convert(3) == (2.0, math.pi/4)\nassert convert(-3) == (-2.0, -math.pi/4)"}
{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n# assert count_integer([1,2,'abc',1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    :param colors: list of colors\n    :param n: length of the combinations\n    :return: list of tuples with all combinations of colors\n    \"\"\"\n    if n == 1:\n        return colors\n    else:\n        result = []\n        for i in range(n):\n            result.append(tuple(colors))\n            for j in range(1, n):\n                result.append(tuple(colors[i:j+1]))\n        return result\n\n\n# assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n# assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue')]\n# assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Green', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n):\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n        return count\n\n\nif __name__ == '__main__':\n    assert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n\n\n#assert swap_numbers(10,20)==(20,10)\nprint(swap_numbers(10,20))"}
{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple with the maximum elements.\n    \"\"\"\n    tuple1_max = max(tuple1, key=lambda x: x[1])\n    tuple2_max = max(tuple2, key=lambda x: x[1])\n    tuple1_max_index = tuple1.index(tuple1_max)\n    tuple2_max_index = tuple2.index(tuple2_max)\n    tuple1_max_index_tuple = tuple1[tuple1_max_index]\n    tuple2_max_index_tuple = tuple2[tuple2_max_index]\n    tuple1_max_tuple = tuple1_max_index_tuple[0], tuple1_max_index_tuple[1]\n    tuple2_max_tuple = tuple2_max_index_tuple[0], tuple2_max_index_tuple[1]\n    return tuple1_max_tuple, tuple2_max_tuple\n\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return 0\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return "}
{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    Performs element-wise division operation across two tuples.\n    :param tuple1: first tuple\n    :param tuple2: second tuple\n    :return: tuple of division results\n    \"\"\"\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] / tuple2[i])\n    return tuple(result)\n\n# Test the function\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, l):\n    if len(lst) < l:\n        return (lst, [])\n    else:\n        return (lst[:l], lst[l:])\n\n# Test\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \"\"\"\n    return human_age // 2\n\n\nif __name__ == '__main__':\n    assert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(lst, n):\n    \"\"\"\n    Takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    split_lst = []\n    for i in range(0, len(lst), n):\n        split_lst.append(lst[i:i+n])\n    return split_lst\n\n# assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n# assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], 3) == [['a', 'd', 'g', 'j', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n}
{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side_length):\n    \"\"\"\n    This function calculates the lateral surface area of a cube.\n    :param side_length: The side length of the cube\n    :return: The lateral surface area of the cube\n    \"\"\"\n    # Calculate the surface area of one face of the cube\n    face_area = side_length**2\n    # Calculate the number of faces of the cube\n    num_faces = 6\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = num_faces * face_area\n    return lateral_surface_area\n\n# Test the function\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i**2\n    return sum\n\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return sum([(x + 1) * x for x in range(1, n)])"}
{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(character: str) -> int:\n    \"\"\"\n    This function takes a character as an input and returns its ASCII value.\n    \"\"\"\n    return ord(character)"}
{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: sum of even numbers at even positions\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n\n\n# assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n# assert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 12\n# assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20"}
{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst):\n    \"\"\"\n    Takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [tuple[1] for tuple in lst]\n\n# assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))"}
{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    :param tuple1: A tuple of length n\n    :param tuple2: A tuple of length n\n    :return: A tuple of length n with the subtracted elements\n    \"\"\"\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nprint(substract_elements((10, 4, 5), (2, 5, 18)))"}
{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n: positive integer\n    :return: sum of even index binomial coefficients\n    \"\"\"\n    if n % 2 == 0:\n        return sum(binomial_coefficients(n, k) for k in range(n))\n    else:\n        return sum(binomial_coefficients(n, k) for k in range(n-1))\n\ndef binomial_coefficients(n, k):\n    \"\"\"\n    :param n: positive integer\n    :param k: positive integer\n    :return: binomial coefficient\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return (n choose k) * (n-k choose n-k)\n\nif __name__ == '__main__':\n    assert even_binomial_Coeff_Sum(4) == 8\n    assert even_binomial_Coeff_Sum(5) == 10\n    assert even_binomial_Coeff_Sum(6) == 12\n    assert even_binomial_Coeff_Sum(7) == 14"}
{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cylinder(radius, height):\n    volume = math.pi * radius ** 2 * height\n    return round(volume, 2)\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary, n):\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dictionary[key] = value\n    return filtered_dictionary\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_list):\n    count = 0\n    for i in range(len(tuple_list)):\n        if isinstance(tuple_list[i], tuple):\n            count += 1\n    return count\n\n# assert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))"}
{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Check if a number is decagonal\n    \"\"\"\n    if n < 10 or n % 10 != 0:\n        return False\n    else:\n        return True\n\ndef nth_decagonal_number(n):\n    \"\"\"\n    Find the nth decagonal number\n    \"\"\"\n    if n < 1 or n % 10 != 0:\n        return None\n    else:\n        return (n * (n + 1)) // 2\n\n\nif __name__ == '__main__':\n    assert is_num_decagonal(3) == 27\n    assert nth_decagonal_number(3) == 27\n    assert nth_decagonal_number(4) == 45\n    assert nth_decagonal_number(5) == 75\n    assert nth_decagonal_number(6) == 120\n    assert nth_decagonal_number(7) == 189\n    assert nth_decagonal_number(8) == 288\n    assert nth_decagonal_number(9) == 390\n    assert nth_decagonal_number(10) == 500\n    assert nth_decagonal_number(11) == 630\n    assert nth_decagonal_number(12) == 787\n    assert nth_decagonal_number(13) == 964\n    assert nth_decagonal_number(14) == 1161\n    assert nth_decagonal_number(15) == 1388\n    assert nth_decagonal_number(16) == 1645\n    assert nth_decagonal_number(17) == 1932\n    assert nth_decagonal_number(18) == 2250\n    assert nth_decagonal_number(19) == 2598\n    assert nth_decagonal_number(20) == 3076\n    assert nth_decagonal_number(21) == 3584\n    assert nth_decagonal_number(22) == 4122\n    assert nth_decagonal_number(23) == 4689\n    assert nth_decagonal_number(24) == 5296\n    assert nth_decagonal_number(25) == 5943\n    assert nth_decagonal_number(26) == 6620\n    assert nth_decagonal_number(27) == 7327\n    assert nth_decagonal_number(28) == 8064\n    assert nth_decagonal_number(29) == 8831\n    assert nth_decagonal_number(30) == 9628\n    assert nth_decagonal_number(31) == 10455\n    assert nth_decagonal_number(32) == 11212\n    assert nth_decagonal_number(33) == 11999\n    assert nth_decagonal_number(34) == 12726\n    assert nth_decagonal_number(35) == 13483\n    assert nth_decagonal_number(36) == 14260\n    assert nth_decagonal_number(37) == 14967\n    assert nth_decagonal_number(38) == 15694\n    assert nth_decagonal_number(39) == 16441\n    assert nth_decagonal_number(40) == 17118\n    assert nth_decagonal_number(41) == 17725\n    assert nth_decagonal_number(42) == 18362\n    assert nth_decagonal_number(43) == 18929\n    assert nth_decagonal_number(44) == 19426\n    assert nth"}
{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n    \"\"\"\n    # Using set() to remove the duplicates from the list\n    # If the length of the original list and the set(list) are same then all elements are unique\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(lst1, lst2):\n    \"\"\"\n    Subtract two lists element-wise\n    :param lst1: first list\n    :param lst2: second list\n    :return: new list with element-wise subtraction\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] - lst2[i])\n    return new_lst\n\n\n# assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n# print(sub_list([1, 2, 3],[4,5,6]))"}
{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    digits = [int(d) for d in str(num)]\n    for i in range(10):\n        if digits[i] > i:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, element):\n    \"\"\"\n    :param lst: list\n    :param element: element\n    :return: True if all elements in the list are equal to the given element, False otherwise\n    \"\"\"\n    for item in lst:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\ndef text_match_two_three(text):\n    if 'ab' in text or 'abc' in text:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param arr: array\n    :param k: number of times to repeat the array\n    :param n: size of the array\n    :return: max sum of contiguous array\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        return max(max(arr[:k], k-1), max(arr[n-k:], k-1))\n\n\nif __name__ == '__main__':\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 2) == 20\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 1) == 10\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 0) == 0\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 3, 3) == 30\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 3, 2) == 20\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 3, 1) == 10\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 3, 0) == 0\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 2, 2) == 20\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 2, 1) == 10\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 2, 0) == 0\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 1, 2) == 10\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 1, 1) == 10\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 1, 0) == 0\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 0, 2) == 0\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 0, 1) == 0\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 0, 0) == 0"}
{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**2\n    return sum\n\nassert square_sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_len = 0\n    max_lst = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_lst = sublist\n    return max_len, max_lst\n\n# assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))"}
{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x,y):\n    return round(x/y)\n\n#test\nassert find(10,3) == 3"}
{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nimport math\n\ndef otherside_rightangle(a,b):\n    \"\"\"\n    This function calculates the other side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(a**2 + b**2)\n    return c\n\nassert otherside_rightangle(7,8)==10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    \"\"\"\n    This function takes a list as an input and returns the maximum value in it.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n# Test the function\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5"}
{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    sum = 1\n    for i in range(2, n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n\nassert sum_div(8)==7"}
{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(get_Inv_Count([1,20,6,4,5]))"}
{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst\n\n# Test\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(lst):\n    \"\"\"\n    This function takes a list of tuples as an input and returns the maximum aggregate value.\n    \"\"\"\n    max_agg = 0\n    for item in lst:\n        if item[1] > max_agg:\n            max_agg = item[1]\n            max_name = item[0]\n    return max_name, max_agg\n\n# Test the function\nprint(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]))"}
{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    if n == 0:\n        return 1.0\n    elif n == 1:\n        return 2.0\n    else:\n        return (2**n - 1) * (count_binary_seq(n - 1) + count_binary_seq(n - 2))\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 5.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 23.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(4), 125.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(5), 781.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if type(d) == dict:\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(lst):\n    \"\"\"\n    Function to return two words from a list of words starting with letter 'p'\n    \"\"\"\n    p_words = []\n    for word in lst:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]\n\n# Testing the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python\", \"Java\", \"c\"])==('Python', 'Java')\nassert start_withp([\"Python\", \"Java\", \"c\", \"Python\"])==('Python', 'Java')"}
{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, i, k, n):\n    \"\"\"\n    :param arr: list of integers\n    :param i: index of prefix\n    :param k: index of kth element\n    :param n: length of array\n    :return: max sum of increasing subsequence\n    \"\"\"\n    if i == k:\n        return arr[i]\n    elif k > i:\n        return max(arr[i], max_sum_increasing_subseq(arr, i, k, n))\n    else:\n        return max(arr[i], max_sum_increasing_subseq(arr, i, k, n) + arr[k])\n\n\nif __name__ == '__main__':\n    arr = [1, 101, 2, 3, 100, 4, 5]\n    i = 7\n    k = 4\n    n = len(arr)\n    print(max_sum_increasing_subseq(arr, i, k, n))"}
{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param n: number of largest products to find\n    :return: list of largest products\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            product = list1[i] * list2[j]\n            if product > result[-n]:\n                result.append(product)\n                result = result[:-n+1]\n    return result\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\n# assert maximum(5,10) == 10\n# assert maximum(10,5) == 10\n# assert maximum(10,15) == 15\n# assert maximum(15,10) == 15\n# assert maximum(15,5) == 15"}
{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    \"\"\"\n    Converts a string to a tuple of characters.\n    \"\"\"\n    return tuple(string)\n\n# Test\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit of a number.\n    \"\"\"\n    # Find the left most unset bit\n    left_most_unset_bit = num & ~(num - 1)\n\n    # Set the left most unset bit\n    num = num | left_most_unset_bit\n\n    # Return the number\n    return num\n\n\nif __name__ == \"__main__\":\n    assert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\nfrom math import pi\n\ndef volume_cone(r,h):\n    \"\"\"\n    Calculate the volume of a cone.\n    :param r: radius of the base\n    :param h: height of the cone\n    :return: volume of the cone\n    \"\"\"\n    return (1/3) * pi * r**2 * h"}
{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as an input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    return n\n\n# Test the function\nassert highest_Power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    This function takes in an integer n and returns the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, format_string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [format_string.format(i) for i in lst]\n\n\nif __name__ == '__main__':\n    print(add_string([1,2,3,4],'temp{0}'))"}
{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(lst1, lst2, lst3):\n    \"\"\"\n    This function takes in 3 lists and returns a nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(lst1)):\n        nested_dict[lst1[i]] = {}\n        for j in range(len(lst2)):\n            nested_dict[lst1[i]][lst2[j]] = lst3[i]\n    return nested_dict\n\n# test\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_):\n    \"\"\"\n    :param tuple_: tuple\n    :return: True if tuple contains no duplicates, False otherwise\n    \"\"\"\n    # create a set from tuple\n    set_tuple = set(tuple_)\n    # check if length of set is equal to length of tuple\n    if len(set_tuple) == len(tuple_):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    :param string: string\n    :return: first non-repeated character\n    \"\"\"\n    # create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # iterate over the string\n    for char in string:\n        # if the frequency of the character is 1, return it\n        if char_freq[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test the function\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"hello\") == \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    sorted_numbers = sorted(a,b,c)\n    n = len(sorted_numbers)\n    if n%2 == 0:\n        return (sorted_numbers[n//2] + sorted_numbers[(n//2)-1])/2\n    else:\n        return sorted_numbers[n//2]\n\nassert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(lst):\n    sum_digit=0\n    for i in lst:\n        sum_digit+=sum(int(digit) for digit in str(i))\n    return sum_digit\n\n#test\nprint(sum_of_digits([10,2,56]))"}
{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    \"\"\"\n    Extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty set to store the tuples\n    set_lst = set(lst)\n    # Return the length of the set\n    return len(set_lst)"}
{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function\nassert minimum(1,2) == 1"}
{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, element):\n    \"\"\"\n    This function checks whether an element exists in a tuple.\n    :param tuplex: tuple\n    :param element: element\n    :return: True if element exists in tuple, False otherwise\n    \"\"\"\n    for item in tuplex:\n        if item == element:\n            return True\n    return False"}
{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging its digits.\n    \"\"\"\n    # First we convert the number to string so that we can easily sort its digits\n    num_str = str(num)\n    # Then we sort the digits in descending order\n    num_str = ''.join(sorted(num_str, reverse=True))\n    # Finally we convert the sorted string back to number and return it\n    return int(num_str)\n\n\nif __name__ == \"__main__\":\n    assert rearrange_bigger(12) == 21\n    assert rearrange_bigger(15) == 51\n    assert rearrange_bigger(10) == 10\n    assert rearrange_bigger(13) == 31\n    assert rearrange_bigger(14) == 41\n    assert rearrange_bigger(11) == 11\n    assert rearrange_bigger(16) == 61\n    assert rearrange_bigger(17) == 71\n    assert rearrange_bigger(18) == 81\n    assert rearrange_bigger(19) == 91"}
{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as an input and returns the minimum product of all pairs of tuples in the list.\n    \"\"\"\n    # sorting the list\n    lst.sort()\n    # initializing product to 1\n    product = 1\n    # iterating over the list\n    for i in range(len(lst)-1):\n        # multiplying the current product with the next tuple\n        product *= lst[i+1][0]\n    # returning the minimum product\n    return product\n\n# testing the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"}
{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"\n    This function takes a list as an input and returns the minimum value in it.\n    \"\"\"\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    \"\"\"\n    This function removes odd numbers from a given list\n    :param lst: list of numbers\n    :return: list without odd numbers\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Test the function\nassert remove_odd([1,2,3]) == [2]"}
{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n    :param lst: list of tuples\n    :param n: the nth element to extract\n    :return: the nth element\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. n must be a positive integer.\"\n    elif n == 0:\n        return lst\n    else:\n        return lst[n-1]"}
{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    :param seq1:\n    :param seq2:\n    :return:\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    \"\"\"\n    Function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = 1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i],arr[j])\n    return max_pair\n\n# Test the function\narr = [1,2,3,4,7,0,8,4]\nprint(max_Product(arr))"}
{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    \"\"\"\n    Function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n\n# Test the function\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(lst):\n    total_sum = sum([round(num, 2) for num in lst])\n    return total_sum * len(lst)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum([i**3 for i in range(2, n+1)])\n\n\nif __name__ == '__main__':\n    assert cube_sum(2) == 72\n    print(cube_sum(2))"}
{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_data):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = '-'\n    concatenated_tuple = tuple_data[0]\n    for item in tuple_data[1:]:\n        concatenated_tuple += delimiter + str(item)\n    return concatenated_tuple\n\n\nif __name__ == '__main__':\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_list):\n    \"\"\"\n    Extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [string[-1] for string in tuple_list]"}
{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"}
{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters odd numbers from the list.\n    :param numbers: list of numbers\n    :return: list of odd numbers\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n#assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"}
{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    \"\"\"\n    Convert date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    date_list = date.split('-')\n    date_list.reverse()\n    date_str = '-'.join(date_list)\n    return date_str"}
{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Test the function\narr = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]\nprint(shell_sort(arr))"}
{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_list = []\n    tuples_list = []\n    for i in range(len(tuple1)):\n        if tuple1[i] == tuple2[i]:\n            and_list.append(tuple1[i])\n        else:\n            tuples_list.append(tuple1[i])\n    return and_list, tuples_list\n\n\nif __name__ == \"__main__\":\n    and_tuples((10, 4, 6, 9), (5, 2, 3, 3))"}
{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    \"\"\"\n    Finds the directrix of a parabola given the coefficients a, b, and c.\n    \"\"\"\n    # Find the discriminant\n    d = b**2 - 4*a*c\n    # Find the vertex\n    x_vertex = -b/(2*a)\n    y_vertex = f(x_vertex)\n    # Find the directrix\n    x_directrix = -b/(2*a)\n    y_directrix = -c/(2*a)\n    # Return the directrix\n    return (x_directrix, y_directrix)\n\ndef f(x):\n    \"\"\"\n    Returns the y value of the parabola given the x value.\n    \"\"\"\n    return a*x**2 + b*x + c"}
{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nprint(common_element([1,2,3,4,5], [5,6,7,8,9]))"}
{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    \"\"\"\n    Find the median length of a trapezium\n    \"\"\"\n    # Calculate the sum of the lengths of the two parallel sides\n    s=a+b\n    # Calculate the sum of the lengths of the two perpendicular sides\n    t=c+d\n    # Calculate the length of the trapezium\n    l=(s+t)/2\n    # Calculate the median length of the trapezium\n    m=l*(1+0.5*(s-t))\n    # Return the median length\n    return m\n\nassert median_trapezium(15,25,35)==20"}
{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\ndef check_greater(arr, num):\n    for i in range(len(arr)):\n        if num > arr[i]:\n            return True\n    return False\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True"}
{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_digit(n):\n    \"\"\"\n    This function takes an integer as an input and returns the last digit of the number.\n    \"\"\"\n    # Get the last digit of the number\n    last_digit = n % 10\n    # Return the last digit\n    return last_digit"}
{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\ndef neg_nos(lst):\n    \"\"\"\n    This function takes a list as an input and returns the negative numbers in the list.\n    \"\"\"\n    neg_nums = []\n    for num in lst:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n\n# Test the function\nassert neg_nos([-1,4,5,-6]) == [-1,-6]"}
{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    \"\"\"\n    This function removes all odd characters from a string.\n    \"\"\"\n    # define a set of odd characters\n    odd_chars = set(\"!@#$%^&*()_+-{}[]|;:'\\\",<.>/?`~\")\n    # define an empty string to hold the result\n    result = \"\"\n    # iterate over each character in the string\n    for char in string:\n        # check if the character is not in the set of odd characters\n        if char not in odd_chars:\n            # append the character to the result\n            result += char\n    # return the result\n    return result\n\n# test the function\nassert remove_odd(\"python\")==(\"yhn\")"}
{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\n\ndef count_bidirectional(lst):\n    \"\"\"\n    Count the number of bidirectional pairs in a list of tuples.\n    \"\"\"\n    bidirectional_pairs = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] > lst[j][0] and lst[i][1] < lst[j][1]:\n                bidirectional_pairs.append(lst[i])\n                bidirectional_pairs.append(lst[j])\n    return len(bidirectional_pairs)\n\n# assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))"}
{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    \"\"\"\n    This function takes a list of integers and returns a single integer.\n    \"\"\"\n    return sum(lst)\n\nassert multiple_to_single([11, 33, 50])==113350"}
{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b\\w+\\b\\s\\w+\\s\\w+\\.'\n    match = re.search(pattern, sentence)\n    if match:\n        return match.start(), match.end(), match.group()\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    sentence = \"clearly!! we can see the sky\"\n    print(find_adverb_position(sentence))"}
{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(size):\n    \"\"\"\n    This function calculates the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * size**2\n    return surface_area\n\n\nif __name__ == '__main__':\n    import unittest\n\n    class TestSurfaceAreaCube(unittest.TestCase):\n\n        def test_surfacearea_cube(self):\n            self.assertEqual(surfacearea_cube(5), 150)\n\n    unittest.main()"}
{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    \"\"\"\n    Count the number of positive numbers in an array of integers\n    :param arr: array of integers\n    :return: float\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count/len(arr)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54"}
{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    \"\"\"\n    This function performs index wise multiplication of tuple elements in the given two tuples.\n    :param tuple1: first tuple\n    :param tuple2: second tuple\n    :return: tuple with index wise multiplication of tuple elements\n    \"\"\"\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] * tuple2[i])\n    return tuple(result)\n\n\n# assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)))"}
{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple_list, list_to_count):\n    count = 0\n    for item in list_to_count:\n        count += tuple_list.count(item)\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(lst):\n    \"\"\"\n    This function takes a list of numbers as an input and returns a list of the cubes of the numbers in the list.\n    \"\"\"\n    result = []\n    for num in lst:\n        result.append(num ** 3)\n    return result\n\n# test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return n + cal_sum(n-1) + cal_sum(n-2)\n\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, size):\n    \"\"\"\n    :param lst: list of string values\n    :param size: size of string to extract\n    :return: list of extracted string\n    \"\"\"\n    extracted_list = []\n    for string in lst:\n        if len(string) >= size:\n            extracted_list.append(string[:size])\n    return extracted_list\n\n#assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    return string.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of all its even factors.\n    \"\"\"\n    #initialize sum variable\n    sum = 0\n    #initialize factor variable\n    factor = 2\n    #initialize while loop\n    while factor*factor <= n:\n        #check if n is divisible by factor\n        if n%factor == 0:\n            #if n is divisible by factor, add factor to sum\n            sum += factor\n        #increment factor\n        factor += 1\n    #return sum\n    return sum\n\n#test the function\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    Check if the text contains a word with 'z' in it.\n    \"\"\"\n    # Split the text into a list of words\n    words = text.split()\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word contains 'z'\n        if 'z' in word:\n            # Return True if a word with 'z' is found\n            return True\n\n    # Return False if no word with 'z' is found\n    return False"}
{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnum):\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n\n# test\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: sublist with minimum length\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    else:\n        min_len = len(lst[0])\n        for i in range(1,len(lst)):\n            if len(lst[i]) < min_len:\n                min_len = len(lst[i])\n                min_sublist = lst[i]\n        return min_sublist"}
{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    \"\"\"\n    This function calculates the area of a rectangle.\n    :param width: the width of the rectangle\n    :param height: the height of the rectangle\n    :return: the area of the rectangle\n    \"\"\"\n    area = width * height\n    return area\n\n#test the function\nassert rectangle_area(10,20)==200"}
{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    # split the string into a list of characters\n    string_list = list(string)\n    # iterate over the list of characters\n    for i in range(len(string_list)):\n        # check if the current character is uppercase\n        if string_list[i].isupper():\n            # remove the uppercase character from the list\n            string_list.pop(i)\n    # join the list of characters back into a string\n    return ''.join(string_list)"}
{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: list of first elements of sublists\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"}
{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count\n\n#assert upper_ctr('PYthon') == 1\nprint(upper_ctr('PYthon'))"}
{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns all possible combinations of the elements of the list.\n    \"\"\"\n    # base case\n    if len(lst) == 0:\n        return [[], []]\n    else:\n        # recursive case\n        return [[]] + lst + combinations_list(lst[1:])\n\n\n# test the function\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = 1\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n        if current_product < 0:\n            current_product = 1\n        max_product = max(max_product, current_product)\n    return max_product\n\n\nif __name__ == '__main__':\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    \"\"\"\n    This function takes a dictionary as an input and returns a new dictionary with all the empty values removed.\n    \"\"\"\n    new_dictionary = {}\n    for key in dictionary:\n        if dictionary[key] != None:\n            new_dictionary[key] = dictionary[key]\n    return new_dictionary\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return max(arr[0] * max_product(arr[1:]), max_product(arr[1:]) * arr[-1])\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_list):\n    \"\"\"\n    This function takes a list of tuples as an input and returns a list of tuples\n    where each tuple contains the sum of the neighboring elements of the given tuple.\n    \"\"\"\n    new_list = []\n    for i in range(len(tuple_list)-1):\n        new_list.append((tuple_list[i] + tuple_list[i+1]))\n    new_list.append(tuple_list[-1])\n    return new_list\n\n# Test the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\ndef find_remainder(arr, n):\n    \"\"\"\n    :param arr: array of integers\n    :param n: modulo value\n    :return: remainder of array multiplication modulo n\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n\n\nif __name__ == '__main__':\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],12) ==10\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],13) ==11\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],14) ==12\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],15) ==13\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],16) ==14\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],17) ==15\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],18) ==16\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],19) ==17\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],20) ==18\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],21) ==19\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],22) ==20\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],23) ==21\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],24) ==22\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],25) ==23\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],26) ==24\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],27) ==25\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],28) ==26\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],29) ==27\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],30) ==28\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],31) ==29\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],32) ==30\n    assert find_remainder([ "}
{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: True if the list contains consecutive numbers, False otherwise\n    \"\"\"\n    if len(lst) < 2:\n        return False\n    for i in range(1,len(lst)):\n        if lst[i] - lst[i-1] != 1:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list, tuple_set):\n    intersection = []\n    for tuple in tuple_list:\n        if tuple in tuple_set:\n            intersection.append(tuple)\n    return intersection\n\n# Driver code  \ntuple_list = [(3, 4), (5, 6), (9, 10), (4, 5)]\ntuple_set = [(5, 4), (3, 4), (6, 5), (9, 11)]\n\nprint(tuple_intersection(tuple_list, tuple_set))"}
{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    This function takes a string and two characters as input and returns a new string with all occurrences of old_char replaced by new_char.\n    \"\"\"\n    new_string = string.replace(old_char, new_char)\n    return new_string\n\n# Test the function\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(dictionary):\n    \"\"\"\n    This function takes a dictionary as an input and returns a new dictionary sorted by value.\n    \"\"\"\n    # Create a list of tuples from the dictionary\n    sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary from the sorted list\n    new_dictionary = dict(sorted_list)\n\n    # Return the new dictionary\n    return new_dictionary\n\n# Test the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return max(arr) + min(arr)\n\n# Test the function\nassert big_sum([1,2,3]) == 4"}
{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    :param s: string\n    :return: string in lower case\n    \"\"\"\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function removes all lowercase substrings from a given string.\n    \"\"\"\n    # split the string into a list of words\n    words = string.split()\n    # iterate over the list of words\n    for i in range(len(words)):\n        # check if the current word is lowercase\n        if words[i].islower():\n            # remove the current word from the list of words\n            del words[i]\n    # join the list of words back into a string\n    return ''.join(words)"}
{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of the number.\n    \"\"\"\n    num = abs(num)\n    while num >= 10:\n        num = num // 10\n    return num\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(first_Digit(num))"}
{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\ndef Split(lst):\n    \"\"\"\n    Takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2 != 0]\n\n# assert Split([1,2,3,4,5,6]) == [1,3,5]\nprint(Split([1,2,3,4,5,6]))"}
{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\ndef find_Odd_Pair(arr, xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] ^ arr[j]) == xor:\n                count += 1\n    return count\n\n\n# Test the function\narr = [5,4,7,2,1]\nxor = 5\nprint(find_Odd_Pair(arr,xor))"}
{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\ndef toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string\n    :param string: string\n    :return: string\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n\n\n#assert toggle_string(\"Python\")==(\"pYTHON\")\n#print(toggle_string(\"Python\"))"}
{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\ndef digit_distance_nums(num1, num2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1_str = str(num1)\n    num2_str = str(num2)\n    sum_diff = 0\n    for i in range(len(num1_str)):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n    return sum_diff\n\n\nif __name__ == \"__main__\":\n    assert digit_distance_nums(1, 2) == 1\n    assert digit_distance_nums(10, 12) == 2\n    assert digit_distance_nums(100, 123) == 6\n    assert digit_distance_nums(1000, 1234) == 10"}
{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\ndef max_sub_array_sum(numbers, target):\n    \"\"\"\n    :param numbers: list of integers\n    :param target: integer\n    :return: integer\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    for num in numbers:\n        current_sum = max(num, current_sum + num)\n        if current_sum >= target:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))"}
{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\ndef union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n    \"\"\"\n    # Converting the tuples to sets to remove duplicates and then converting back to list\n    union_list = sorted(list(set(tuple1) | set(tuple2)))\n    return union_list\n\n# Testing the function\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n\ndef Find_Max_Length(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: int\n    \"\"\"\n    if not lst:\n        return 0\n    max_length = 1\n    for i in range(1,len(lst)):\n        for j in range(i):\n            if len(lst[i]) - len(lst[j]) > max_length:\n                max_length = len(lst[i]) - len(lst[j])\n    return max_length\n\n\n#assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n#assert Find_Max_Length([[1,2],[1,2,3],[1,2,3,4]]) == 3\n#assert Find_Max_Length([[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5]]) == 4\n#assert Find_Max_Length([[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6]]) == 5"}
{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\ndef extract_values(s):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    return [x.strip() for x in s.split(\",\") if x.strip() == x.strip('\"')]\n\n# assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] != lst[j] and lst[i] != n and lst[j] != n:\n                count += 1\n    return count\n\n\n# Test cases\nprint(count_Pairs([1,2,1],3))\nprint(count_Pairs([1,2,3,4],3))\nprint(count_Pairs([1,2,3,4,5],3))"}
{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\ndef split(string):\n    \"\"\"\n    This function takes a string as an input and returns a list of characters.\n    \"\"\"\n    # split the string using split() method\n    result = string.split()\n    # return the result\n    return result\n\n# Test the function\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\ndef sum_digits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n<0:\n        raise ValueError(\"n should be non-negative\")\n    sum = 0\n    while n>0:\n        sum += n%10\n        n = n//10\n    return sum\n\n#test\nassert sum_digits(345)==12"}
{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\ndef issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True"}
{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\ndef empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(n)]\n\n# assert empty_list(5)==[{},{},{},{},{}]\nprint(empty_list(5))"}
{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist in place.\n    It returns the sorted list of lists.\n    \"\"\"\n    for sublist in lst:\n        sublist.sort()\n    return lst"}
{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\ndef two_unique_nums(lst):\n    \"\"\"\n    This function takes a list of numbers as an input and returns a new list with\n    only two unique numbers.\n    \"\"\"\n    # create a set from the list to remove duplicates\n    set_lst = set(lst)\n    # convert the set back to a list and return\n    return list(set_lst)\n\n# test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\ndef unique_product(lst):\n    # Create a set from the list to remove duplicates\n    unique_lst = set(lst)\n    # Multiply all the elements in the set\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"}
{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\n\nfrom math import pi\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Calculate the surface area of a cylinder\n    :param r: radius of the cylinder\n    :param h: height of the cylinder\n    :return: surface area of the cylinder\n    \"\"\"\n    return 2*pi*r*h + 2*pi*r**2"}
{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\ndef is_Sub_Array(lst1, lst2):\n    \"\"\"\n    :param lst1: list\n    :param lst2: list\n    :return: True if lst1 is sublist of lst2 else False\n    \"\"\"\n    if len(lst1) > len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i:i+len(lst2)] == lst2:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\n\nif __name__ == \"__main__\":\n    assert last_Digit_Factorial(4) == 4"}
{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\ndef interleave_lists(lst1, lst2, lst3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a single flat list\n    that is the interleaving of the 3 input lists.\n    \"\"\"\n    # create an empty list to store the interleaved list\n    interleaved_list = []\n    # iterate through the input lists\n    for i in range(len(lst1)):\n        # append the element from the first list\n        interleaved_list.append(lst1[i])\n        # append the element from the second list\n        interleaved_list.append(lst2[i])\n        # append the element from the third list\n        interleaved_list.append(lst3[i])\n    # return the interleaved list\n    return interleaved_list\n\n# test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n\ndef find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns the dissimilar elements in them.\n    \"\"\"\n    dissimilar = []\n    for i in tuple1:\n        if i not in tuple2:\n            dissimilar.append(i)\n    for i in tuple2:\n        if i not in tuple1:\n            dissimilar.append(i)\n    return dissimilar\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef extract_even(tuple_: Tuple) -> Tuple:\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    return tuple(filter(lambda x: isinstance(x, tuple) and len(x) % 2 == 0, tuple_))"}
{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\ndef surface_Area(base_edge, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid.\n    :param base_edge: the length of one edge of the square base\n    :param height: the height of the pyramid\n    :return: the surface area of the pyramid\n    \"\"\"\n    # calculate the area of the square base\n    base_area = base_edge ** 2\n    # calculate the lateral surface area of the pyramid\n    lateral_area = 4 * base_edge * height\n    # calculate the top and bottom areas of the pyramid\n    top_area = base_area\n    bottom_area = 0\n    # add all the areas together to get the total surface area\n    total_area = base_area + lateral_area + top_area + bottom_area\n    return total_area\n\n# test the function\nassert surface_Area(3,4) == 33"}
{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\n\ndef is_empty(dictionary):\n    \"\"\"\n    This function checks if a dictionary is empty\n    :param dictionary: input dictionary\n    :return: True if dictionary is empty, False otherwise\n    \"\"\"\n    if len(dictionary) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n\ndef catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sum([catalan_number(i) * catalan_number(n - i - 1) for i in range(1, n)])\n\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\ndef expensive_items(data,n):\n    \"\"\"\n    This function takes in a list of dictionaries and returns a list of the n most expensive items.\n    \"\"\"\n    # sort the data by price in descending order\n    sorted_data = sorted(data,key=lambda x:x['price'],reverse=True)\n    # return the first n items\n    return [item for item in sorted_data[:n]]\n\n# test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a new list\n    that is the first n elements of the original list followed by the rest of the list.\n    \"\"\"\n    if n > len(lst):\n        return lst\n    else:\n        return lst[:n] + lst[n:]\n\n\n# Test the function\nprint(split_Arr([12,10,5,6,52,36],2))"}
{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\ndef list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple\n    \"\"\"\n    return tuple(lst)\n\n# assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n# assert list_tuple([1, 2, 3, 4, 5])==(1, 2, 3, 4, 5)"}
{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\ndef big_diff(lst):\n    \"\"\"\n    This function takes a list as an input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    else:\n        return max(lst) - min(lst)\n\n# Test the function\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([-1,2,3,4]) == 5\nassert big_diff([1,2,3,4,5]) == 5\nassert big_diff([-1,2,3,4,5,6]) == 7"}
{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\ndef perfect_squares(start, end):\n    \"\"\"\n    This function takes two numbers as input and returns a list of all perfect squares between them.\n    \"\"\"\n    result = []\n    for i in range(start, end+1):\n        if i**2 == i:\n            result.append(i)\n    return result\n\n# Test the function\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n\nimport math\n\ndef polar_rect(r,theta):\n    x = r*math.cos(theta)\n    y = r*math.sin(theta)\n    return (x,y)\n\ndef rect_polar(x,y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y,x)\n    return (r,theta)\n\ndef test_polar_rect():\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert polar_rect(2,3)==((3.464102530563936j, 1.7323888300841898j), (-1.7323888300841898j, 3.464102530563936j))\n    assert polar_rect(0,0)==((0.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,0)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.pi)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.pi/2)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.pi/4)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.pi/3)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2))==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/3)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/4)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/6)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2*1j)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2*2j)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2*3j)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2*4j)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2*5j)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_rect(1,math.sqrt(2)/2*6j)==((1.0, 0.0j), (0.0, 0.0j))\n    assert polar_"}
{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\ndef swap_List(lst):\n    \"\"\"\n    This function takes a list as an input and returns the list with the first and last elements interchanged.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        return [lst[-1] + lst[:-1]]"}
{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum([(n-i)*(n-i-1) for i in range(1,n)])\n\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n\ndef removezero_ip(ip):\n    \"\"\"\n    This function removes leading zeroes from an ip address.\n    \"\"\"\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0':\n            ip_list[i] = ''\n    return '.'.join(ip_list)"}
{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the difference between the first even and first odd number of the list.\n    \"\"\"\n    if len(lst)<2:\n        return None\n    else:\n        first_even=lst[0]\n        first_odd=lst[1]\n        if first_even%2==0 and first_odd%2!=0:\n            return first_odd-first_even\n        elif first_even%2!=0 and first_odd%2==0:\n            return first_even-first_odd\n        else:\n            return None\n\n# Test the function\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8])==1\nassert diff_even_odd([1,2,3,4,5,6,7,8,9])==None"}
{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\n\ndef min_Swaps(num1, num2):\n    count = 0\n    while num1 != num2:\n        if num1[0] == num2[0]:\n            num1 = num1[1:]\n            num2 = num2[1:]\n        else:\n            count += 1\n    return count\n\nassert min_Swaps(\"1101\",\"1110\") == 1"}
{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(tuple_):\n    return sys.getsizeof(tuple_)\n\n# assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n# assert tuple_size(()) == sys.getsizeof(())\n# assert tuple_size((1,)) == sys.getsizeof((1,))\n# assert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))\n# assert tuple_size((1, 2, 3, 4, 5, 6)) == sys.getsizeof((1, 2, 3, 4, 5, 6))\n# assert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))"}
{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    :param arr1: first sorted array\n    :param arr2: second sorted array\n    :param k: kth element\n    :return: kth element\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 0:\n        return arr1[0]\n    if k == len(arr1) + len(arr2):\n        return arr2[0]\n    if k < len(arr1) + len(arr2):\n        return find_kth(arr1, arr2[:k], k)\n    else:\n        return find_kth(arr1[:k], arr2, k)\n\n\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 6) == 9\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 7) == 10\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 8) == 10\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 9) == 10\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 10) == 10"}
{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\ndef armstrong_number(n):\n    sum = 0\n    n_str = str(n)\n    for i in n_str:\n        sum += int(i) ** len(n_str)\n    return sum == n\n\n\n# assert armstrong_number(153)==True\n# assert armstrong_number(154)==False"}
{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\ndef sum_average(n):\n    total = sum(range(1, n+1))\n    average = total/n\n    return total, average\n\nassert sum_average(10)==(55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\ndef is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\ndef first_repeated_char(string):\n    \"\"\"\n    This function takes a string as an input and returns the first character that is repeated in the string.\n    \"\"\"\n    #Creating a dictionary to store the characters and their count\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    #Iterating through the dictionary to find the first character that is repeated\n    for k,v in char_count.items():\n        if v > 1:\n            return k\n\n    #If no repeated character is found, returning None\n    return None"}
{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\ndef get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to n.\n    A number is considered lucid if it is the sum of an even number and an odd number.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n+1):\n        for j in range(i+1, n+1):\n            if i % 2 == 0 and j % 2 != 0:\n                ludic_numbers.append(i + j)\n    return ludic_numbers\n\n# assert get_ludic(10) == [1, 2, 3, 5, 7]\nprint(get_ludic(10))"}
{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\ndef reverse_words(string):\n    \"\"\"\n    This function takes a string as an input and returns the reversed string\n    where words are separated by spaces.\n    \"\"\"\n    words = string.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\n# Test the function\nstring = \"python program\"\nassert reverse_words(string) == \"program python\""}
{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\ndef prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n# assert prime_num(13)==True\n# assert prime_num(12)==False"}
{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians\n    \"\"\"\n    return degrees * math.pi/180\n\n\nif __name__ == '__main__':\n    assert radian_degree(90)==1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\nimport re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Find a regex pattern in a string and return the matching substring, start and end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\n\nif __name__ == '__main__':\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'dog') == ('dog', 25, 29)\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'cat') == None"}
{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\ndef bell_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum(bell_Number(i) * bell_Number(n - i - 1) for i in range(1, n))"}
{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\ndef remove_kth_element(lst, k):\n    \"\"\"\n    :param lst: list\n    :param k: int\n    :return: list\n    \"\"\"\n    if k > len(lst):\n        return lst\n    else:\n        return lst[:k] + lst[k+1:]\n\n\n# assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n# assert remove_kth_element([1,1,2,3,4,4,5,1],4)==[1, 1, 2, 3, 4, 5, 1]\n# assert remove_kth_element([1,1,2,3,4,4,5,1],5)==[1, 1, 2, 3, 4, 1]\n# assert remove_kth_element([1,1,2,3,4,4,5,1],6)==[1, 1, 2, 3, 4, 1]"}
{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\ndef max_of_nth(matrix, n):\n    \"\"\"\n    Returns the max of the n'th column of the matrix.\n    \"\"\"\n    if not matrix:\n        return None\n    if n < 0:\n        return None\n    if n == 0:\n        return max(matrix[0])\n    else:\n        return max(matrix[n])\n\n\n# assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n# assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1) == 9\n# assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0) == 5"}
{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(lst):\n    \"\"\"\n    Takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return result"}
{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\ndef cummulative_sum(lst):\n    \"\"\"\n    This function takes a list of tuples as an argument and returns the cumulative sum of all the values present in the list.\n    \"\"\"\n    sum = 0\n    for i in lst:\n        sum += sum(i)\n    return sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_tuple(tuples):\n    \"\"\"\n    Takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tuple in tuples:\n        result.append(sum(tuple)/len(tuple))\n    return result\n\n\n# assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))"}
{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\ndef tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Takes two tuples of the same length and performs the element wise modulo.\n    :param tuple1: tuple of integers\n    :param tuple2: tuple of integers\n    :return: tuple of integers\n    \"\"\"\n    assert len(tuple1) == len(tuple2), \"Tuples must be of the same length\"\n    return tuple([a % b for a, b in zip(tuple1, tuple2)])\n\n\n# Test\ntuple1 = (10, 4, 5, 6)\ntuple2 = (5, 6, 7, 5)\nassert tuple_modulo(tuple1, tuple2) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\ndef div_list(lst1, lst2):\n    \"\"\"\n    Divide two lists element wise.\n    :param lst1: first list\n    :param lst2: second list\n    :return: list of division results\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]/lst2[i])\n    return result\n\n# assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nprint(div_list([4,5,6],[1, 2, 3]))"}
{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\ndef move_num(s):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n    \"\"\"\n    return ''.join(filter(str.isalpha, s)) + s"}
{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\ndef largest_subset(lst):\n    \"\"\"\n    Returns the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return 0\n    else:\n        max_size = 1\n        for i in range(1, n):\n            for j in range(i, n):\n                if lst[i] % lst[j] == 0:\n                    subset = [lst[i]] + subset\n                    if len(subset) > max_size:\n                        max_size = len(subset)\n        return max_size\n\n# Test the function\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4"}
{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\ndef get_median(list1, list2, size):\n    \"\"\"\n    This function takes two sorted lists of same size and returns the median.\n    \"\"\"\n    if size % 2 == 0:\n        return (list1[size//2] + list2[size//2]) / 2\n    else:\n        return list1[size//2]\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\ndef nth_nums(lst, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in lst]\n\n\nif __name__ == '__main__':\n    assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\ndef is_upper(string):\n    \"\"\"\n    This function takes a string as an input and returns the string in uppercase.\n    \"\"\"\n    return string.isupper()\n\n# Test the function\nassert is_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\nimport math\n\ndef triangle_area(r):\n    \"\"\"\n    :param r: float\n    :return: float\n    \"\"\"\n    if r < 0:\n        return None\n    else:\n        return (math.sqrt(3) / 4) * r ** 2"}
{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\ndef replace_spaces(string):\n    \"\"\"\n    This function takes a string as an input and returns the string with all spaces replaced with '%20'\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n\n# Test the function\nprint(replace_spaces(\"My Name is Dawood\"))"}
{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\ndef split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a list of even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\n# Test the function\nprint(split([1,2,3,4,5]))"}
{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\ndef get_coordinates(coordinate):\n    \"\"\"\n    :param coordinate: tuple of two integers\n    :return: list of tuples of adjacent coordinates\n    \"\"\"\n    x, y = coordinate\n    result = []\n    for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < 10 and 0 <= ny < 10:\n            result.append((nx, ny))\n    return result"}
{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\ndef replace_spaces(string):\n    \"\"\"\n    Function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Using the replace() method to replace all occurrences of whitespace with an underscore\n    # and all occurrences of an underscore with a whitespace\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")\n\n# Testing the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\ndef move_zero(lst):\n    \"\"\"\n    This function takes a list as an input and returns a new list with all zeroes moved to the end.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        if i != 0:\n            new_lst.append(i)\n    new_lst.extend(lst[lst.index(0):])\n    return new_lst\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\ndef pair_xor_Sum(lst, target):\n    \"\"\"\n    :param lst: list of integers\n    :param target: integer\n    :return: sum of xor of all pairs of numbers in the given list\n    \"\"\"\n    if not lst:\n        return 0\n    n = len(lst)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += lst[i] ^ lst[j]\n    return sum == target\n\n\nif __name__ == '__main__':\n    assert pair_xor_Sum([5,9,7,6],4) == 47\n    assert pair_xor_Sum([1,2,3,4],10) == 45\n    assert pair_xor_Sum([1,2,3,4],15) == 0\n    assert pair_xor_Sum([1,2,3,4],20) == 0\n    assert pair_xor_Sum([1,2,3,4],25) == 0"}
{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\ndef heap_sort(lst):\n    \"\"\"\n    This function sorts the given list using heap sort algorithm.\n    \"\"\"\n    n = len(lst)\n    heap = lst[:n//2]\n    heapify(heap)\n    for i in range(n//2, n):\n        heap.append(lst[i])\n        heapify(heap)\n    return heap\n\ndef heapify(heap):\n    \"\"\"\n    This function is used to convert the given list into heap.\n    \"\"\"\n    n = len(heap)\n    for i in range(n//2-1, 0, -1):\n        if heap[i] < heap[2*i+1]:\n            heap[i], heap[2*i+1] = heap[2*i+1], heap[i]\n        if heap[i] < heap[2*i+2]:\n            heap[i], heap[2*i+2] = heap[2*i+2], heap[i]\n\nif __name__ == \"__main__\":\n    lst = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    print(heap_sort(lst))"}
{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\ndef noprofit_noloss(amount,target):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n    if amount<target:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\ndef wind_chill(wind_velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill_factor = 0.397 + 0.076 * wind_velocity + 0.038 * (wind_velocity ** 2) - 0.104 * temperature + 0.0062 * (temperature ** 2)\n    wind_chill_factor = round(wind_chill_factor)\n    return wind_chill_factor\n\n\n# assert wind_chill(120,35)==40\n# assert wind_chill(100,25)==30\n# assert wind_chill(50,15)==15\n# assert wind_chill(150,30)==45\n# assert wind_chill(100,20)==25\n# assert wind_chill(150,15)==20\n# assert wind_chill(100,10)==15\n# assert wind_chill(150,5)==10\n# assert wind_chill(100,0)==0\n# assert wind_chill(150,-5)==-5\n# assert wind_chill(100,-10)==-10\n# assert wind_chill(150,-15)==-15\n# assert wind_chill(100,-20)==-20\n# assert wind_chill(150,-25)==-25\n# assert wind_chill(100,-30)==-30\n# assert wind_chill(150,-35)==-35\n# assert wind_chill(100,-40)==-40\n# assert wind_chill(150,-45)==-45\n# assert wind_chill(100,-50)==-50\n# assert wind_chill(150,-55)==-55\n# assert wind_chill(100,-60)==-60\n# assert wind_chill(150,-65)==-65\n# assert wind_chill(100,-70)==-70\n# assert wind_chill(150,-75)==-75\n# assert wind_chill(100,-80)==-80\n# assert wind_chill(150,-85)==-85\n# assert wind_chill(100,-90)==-90\n# assert wind_chill(150,-95)==-95\n# assert wind_chill(100,-100)==-100\n# assert wind_chill(150,-105)==-105\n# assert wind_chill(100,-110)==-110\n# assert wind_chill(150,-115)==-115\n# assert wind_chill(100,-120)==-120\n# assert wind_chill(150,-125)==-125\n# assert wind_chill(100,-130)==-130\n# assert wind_chill(150,-135)==-135\n# assert wind_chill(100,-140)==-140\n# assert wind_chill(150,-145)==-145\n# assert wind_chill(100,-150)==-150\n# assert wind_chill(150,-155)==-155\n# assert wind_chill(100,-160)==-160\n# assert wind_chill(150,-165)==-165\n# assert wind_chill"}
{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sum_name_length(sample_names):\n    \"\"\"\n    This function takes a list of names as an input and returns the sum of the length of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length\n\nsample_names = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\nassert sum_name_length(sample_names)==16"}
{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\n\ndef remove_parenthesis(lst):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a list\n    :param lst: list\n    :return: list\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item.count(\"()\") == 0:\n            new_lst.append(item)\n        else:\n            new_item = item.replace(\"()\", \"\")\n            new_lst.append(new_item)\n    return new_lst\n\n\n#assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n#assert remove_parenthesis([\"python (chrome) (firefox)\"])==(\"python chrome firefox\")\n#assert remove_parenthesis([\"python (chrome) (firefox) (safari)\"])==(\"python chrome firefox safari\")"}
{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\ndef is_nonagonal(n):\n    \"\"\"\n    Check if a number is nonagonal\n    \"\"\"\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 15 == 0:\n        return False\n    if n % 20 == 0:\n        return False\n    if n % 60 == 0:\n        return False\n    return True\n\ndef nth_nonagonal_number(n):\n    \"\"\"\n    Find the nth nonagonal number\n    \"\"\"\n    if n % 3 == 0:\n        return (n // 3) * (2 * 3 + 1)\n    if n % 5 == 0:\n        return (n // 5) * (2 * 5 + 1)\n    if n % 15 == 0:\n        return (n // 15) * (2 * 15 + 1)\n    if n % 20 == 0:\n        return (n // 20) * (2 * 20 + 1)\n    if n % 60 == 0:\n        return (n // 60) * (2 * 60 + 1)\n    raise ValueError(\"n must be a multiple of 3, 5, 15, 20 or 60\")\n\n\nif __name__ == '__main__':\n    assert is_nonagonal(10) == True\n    assert nth_nonagonal_number(10) == 325\n    assert nth_nonagonal_number(15) == 1005\n    assert nth_nonagonal_number(20) == 2000\n    assert nth_nonagonal_number(25) == 2500\n    assert nth_nonagonal_number(30) == 3000\n    assert nth_nonagonal_number(35) == 3500\n    assert nth_nonagonal_number(40) == 4000\n    assert nth_nonagonal_number(45) == 4500\n    assert nth_nonagonal_number(50) == 5000\n    assert nth_nonagonal_number(55) == 5500\n    assert nth_nonagonal_number(60) == 6000\n    assert nth_nonagonal_number(65) == 6500\n    assert nth_nonagonal_number(70) == 7000\n    assert nth_nonagonal_number(75) == 7500\n    assert nth_nonagonal_number(80) == 8000\n    assert nth_nonagonal_number(85) == 8500\n    assert nth_nonagonal_number(90) == 9000\n    assert nth_nonagonal_number(95) == 9500\n    assert nth_nonagonal_number(100) == 10000\n    assert nth_nonagonal_number(105) == 10500\n    assert nth_nonagonal_number(110) == 11000\n    assert nth_nonagonal_number(115) == 11500\n    assert nth_nonagonal_number(120) == 12000\n    assert nth_nonagonal_number(125) == 12500\n    assert nth_nonagonal_number(130) == 13000\n    assert nth_nonagonal_number(135) == 13500\n    assert nth_nonagonal_number(140) == 14000\n    assert nth_nonagonal_number(145) == 14500\n    assert nth_nonagonal_number(150) == 15000\n    assert nth_nonagonal_number(155) == 15500\n    assert nth_nonagonal_number(160) == 160"}
{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n    \"\"\"\n    # Split the string into a list of words\n    words = text.split()\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word contains 'z' except at the start and end of the word\n        if 'z' in word and word[0] != 'z' and word[-1] != 'z':\n            return True\n\n    # If no 'z' is found in any of the words, return False\n    return False"}
{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\ndef reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    :param arr: array\n    :param k: position\n    :return: array\n    \"\"\"\n    if k > len(arr) or k < 0:\n        return arr\n    else:\n        return arr[:k] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tuple_tuple, dict_dict):\n    \"\"\"\n    This function takes in a tuple and a dictionary and returns a tuple with the dictionary added to the tuple.\n    \"\"\"\n    return tuple_tuple + (dict_dict,)\n\n# assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n# assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    totalCost = 0\n    visited = 0\n    stack = [(0, 0)]\n    while stack:\n        x, y = stack[-1]\n        visited += 1\n        totalCost += matrix[x][y]\n        if x < n - 1 and matrix[x + 1][y] == matrix[x][y]:\n            stack.append((x + 1, y))\n        elif y < n - 1 and matrix[x][y + 1] == matrix[x][y]:\n            stack.append((x, y + 1))\n        else:\n            stack.pop()\n    return totalCost / visited\n\nmatrix = [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nprint(maxAverageOfPath(matrix))"}
{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\ndef filter_data(data:dict, min_height:float, min_weight:float) -> dict:\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n    for name, (height, weight) in data.items():\n        if height > min_height and weight > min_weight:\n            result[name] = (height, weight)\n    return result"}
{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nlist2 = [2, 2, 3, 1, 2, 6, 7, 9]\n\nprint(count_same_pair(list1, list2))"}
{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base, power):\n    sum = 0\n    for i in range(1, power+1):\n        sum += int(str(base)**i)\n    return sum\n\nassert power_base_sum(2,100)==115"}
{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\ndef extract_quotation(string):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    return string.split('\"')[1:-1]"}
{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\ndef multiply_elements(tup):\n    \"\"\"\n    :param tup: tuple of numbers\n    :return: tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}\n    \"\"\"\n    N = len(tup)\n    result = []\n    for i in range(N):\n        result.append(tup[i] * tup[i+1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\ndef sum_list(a,b):\n    return [a[i]+b[i] for i in range(len(a))]\n\n#test\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\ndef consecutive_duplicates(lst):\n    \"\"\"\n    This function removes consecutive duplicates of a given list.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i+1]:\n                del lst[i+1]\n                i += 1\n            else:\n                i += 1\n        return lst\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\nimport math\n\ndef lateralsurface_cone(r,h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone.\n    \"\"\"\n    return math.pi*r*(r+h)"}
{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n    return text\n\n\n# test the function\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\ndef find_first_occurrence(arr, x):\n    \"\"\"\n    :param arr: sorted array\n    :param x: number to find\n    :return: index of first occurrence of x in arr\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\ndef sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(lst)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += lst[i]*lst[j]\n    return ans\n\n\nif __name__ == '__main__':\n    print(sum_Of_Subarray_Prod([1,2,3]))"}
{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\ndef toggle_middle_bits(num):\n    \"\"\"\n    Toggle all bits except the first and the last bit.\n    :param num: int\n    :return: int\n    \"\"\"\n    # Get the number of bits in the number\n    num_bits = len(str(num))\n    # Create a new number with all bits set to 1\n    new_num = (1 << num_bits) - 1\n    # Toggle all bits except the first and the last bit\n    new_num ^= num\n    # Return the new number\n    return new_num\n\n\nif __name__ == '__main__':\n    assert toggle_middle_bits(9) == 15\n    assert toggle_middle_bits(10) == 21\n    assert toggle_middle_bits(11) == 23\n    assert toggle_middle_bits(12) == 27\n    assert toggle_middle_bits(13) == 31\n    assert toggle_middle_bits(14) == 33\n    assert toggle_middle_bits(15) == 37\n    assert toggle_middle_bits(16) == 41\n    assert toggle_middle_bits(17) == 43\n    assert toggle_middle_bits(18) == 47\n    assert toggle_middle_bits(19) == 51\n    assert toggle_middle_bits(20) == 53\n    assert toggle_middle_bits(21) == 59\n    assert toggle_middle_bits(22) == 61\n    assert toggle_middle_bits(23) == 67\n    assert toggle_middle_bits(24) == 71\n    assert toggle_middle_bits(25) == 73\n    assert toggle_middle_bits(26) == 79\n    assert toggle_middle_bits(27) == 83\n    assert toggle_middle_bits(28) == 89\n    assert toggle_middle_bits(29) == 97\n    assert toggle_middle_bits(30) == 103\n    assert toggle_middle_bits(31) == 107\n    assert toggle_middle_bits(32) == 113\n    assert toggle_middle_bits(33) == 127\n    assert toggle_middle_bits(34) == 131\n    assert toggle_middle_bits(35) == 137\n    assert toggle_middle_bits(36) == 139\n    assert toggle_middle_bits(37) == 149\n    assert toggle_middle_bits(38) == 151\n    assert toggle_middle_bits(39) == 157\n    assert toggle_middle_bits(40) == 163\n    assert toggle_middle_bits(41) == 167\n    assert toggle_middle_bits(42) == 173\n    assert toggle_middle_bits(43) == 179\n    assert toggle_middle_bits(44) == 181\n    assert toggle_middle_bits(45) == 191\n    assert toggle_middle_bits(46) == 193\n    assert toggle_middle_bits(47) == 197\n    assert toggle_middle_bits(48) == 199\n    assert toggle_middle_bits(49) == 211\n    assert toggle_middle_bits(50) == 223\n    assert toggle_middle_bits(51) == 227\n    assert toggle_middle_bits(52) == 229\n    assert toggle_middle_bits(53) == 233\n    assert toggle_middle_bits(54) == 239\n    assert toggle_middle_bits(55) == 241\n    assert toggle_middle_bits(56) == 251\n    assert toggle_middle_bits(57) == 257\n    assert toggle_"}
{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\ndef left_insertion(lst, val):\n    \"\"\"\n    This function takes a sorted list and a value and returns the index of the value in the list\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n        elif lst[i] > val:\n            return i\n    return len(lst)\n\n\n# Test the function\nprint(left_insertion([1,2,4,5],6))"}
{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\nimport re\n\ndef check_str(str):\n    vowels = \"aeiouAEIOU\"\n    if re.search(r\"^[\" + vowels + \"]\", str):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n\ndef find_Index(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return -1\n    arr = [0]\n    for i in range(1, n+1):\n        arr.append(i)\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if arr[i] + arr[j] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr[0]\n\n\nif __name__ == '__main__':\n    print(find_Index(2))"}
{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\ndef tuple_to_dict(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: dict\n    \"\"\"\n    dict_ = {}\n    for i in range(len(tuple_) - 1):\n        dict_[tuple_[i]] = tuple_[i+1]\n    return dict_\n\n\ntuple_to_dict((1, 5, 7, 10, 13, 5))"}
{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\ndef all_Characters_Same(string):\n    \"\"\"\n    :param string: string\n    :return: True if all characters are same, False otherwise\n    \"\"\"\n    if len(string) > 1:\n        return string[0] == string[1:]\n    else:\n        return True\n\n# assert all_Characters_Same(\"python\") == False\n# assert all_Characters_Same(\"hello\") == False\n# assert all_Characters_Same(\"world\") == True"}
{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\nimport math\n\ndef area_tetrahedron(n):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n    \"\"\"\n    # Calculate the height of the tetrahedron\n    h = math.sqrt(n**2 - 4*n/3)\n    # Calculate the area of the base of the tetrahedron\n    a = n/2\n    b = n/2\n    c = n/2\n    area_base = 0.5*a*b*c\n    # Calculate the area of the tetrahedron\n    area_tetrahedron = 0.5*a*b*c*h\n    return area_tetrahedron\n\nassert area_tetrahedron(3)==15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\ndef rotate_right(lst, k):\n    \"\"\"\n    :type lst: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if k == 0:\n        return lst\n    else:\n        return lst[k:] + lst[:k]"}
{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\ndef check_none(tuple_list):\n    \"\"\"\n    This function checks if the given tuple has any none value or not.\n    \"\"\"\n    for i in tuple_list:\n        if i is None:\n            return True\n    return False\n\n\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6)) == False"}
{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(digit) for digit in str(startnum)]\n    for num in range(startnum, endnum+1):\n        digits2 = [int(digit) for digit in str(num)]\n        if all(digit%digit2 == 0 for digit, digit2 in zip(digits, digits2)):\n            yield num\n\n\nif __name__ == '__main__':\n    print(list(divisible_by_digits(1, 22)))"}
{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\n\ndef sector_area(r, angle):\n    if angle > 360:\n        return None\n    else:\n        return (r**2)*(angle/360)"}
{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\ndef capital_words_spaces(string):\n    \"\"\"\n    This function takes a string as an input and returns the string with spaces between words starting with capital letters.\n    \"\"\"\n    words = string.split()\n    capital_words = [word for word in words if word[0].isupper()]\n    spaces = [word for word in words if not word[0].isupper()]\n    capital_words_spaces = ' '.join(capital_words) + ' '.join(spaces)\n    return capital_words_spaces\n\n\n# Test the function\nstring = \"Python\"\nassert capital_words_spaces(string) == string"}
{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\ndef sort_numeric_strings(lst):\n    \"\"\"\n    This function sorts a list of strings of numbers numerically.\n    \"\"\"\n    lst.sort(key=lambda x: int(x))\n    return lst"}
{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\ndef add_tuple(lst, tpl):\n    \"\"\"\n    This function takes a list and a tuple as input and returns the list with the tuple added.\n    \"\"\"\n    lst.append(tpl)\n    return lst\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\ndef check_min_heap(arr):\n    \"\"\"\n    :param arr: array\n    :return: True if arr is min heap, False otherwise\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n//2):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n\ndef jacobsthal_num(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return jacobsthal_num(n // 2) * 3\n    else:\n        return jacobsthal_num(n // 2) * 4\n\n\nif __name__ == '__main__':\n    print(jacobsthal_num(5))"}
{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\ndef min_k(lst, k):\n    \"\"\"\n    :type lst: List[Tuple[str, int]]\n    :type k: int\n    :rtype: List[Tuple[str, int]]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])[:k]\n\n\nif __name__ == '__main__':\n    print(min_k(\n        [('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2))"}
{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\ndef second_smallest(lst):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the second smallest number in the list.\n    \"\"\"\n    # sort the list in ascending order\n    lst.sort()\n    # return the second element in the list\n    return lst[1]\n\n# test the function\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2"}
{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n\n\n#assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nprint(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))"}
{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\ndef unique_sublists(lst):\n    sublists={}\n    for sublist in lst:\n        if sublist not in sublists:\n            sublists[tuple(sublist)]=1\n        else:\n            sublists[tuple(sublist)]+=1\n    return sublists\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\nimport re\n\ndef is_decimal(s):\n    pattern = re.compile(r'^\\d+\\.\\d{2}$')\n    return bool(pattern.match(s))\n\n# assert is_decimal('123.11')==True\n# assert is_decimal('123')==False\n# assert is_decimal}
{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\ndef unique_Element(lst):\n    # Using set to remove duplicates from list\n    # If length of set is equal to length of list then means all elements are unique\n    return len(set(lst)) == len(lst)\n\n# Testing the function\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,3,4,5]) == True\nassert unique_Element([1,2,3,4,5,6,7,8,9,9]) == False"}
{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n\ndef check_monthnumber_number(month):\n    if month in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\ndef find_min_diff(arr, diff):\n    \"\"\"\n    :param arr: array\n    :param diff: difference\n    :return: minimum difference\n    \"\"\"\n    n = len(arr)\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff_val = abs(arr[i] - arr[j])\n            if diff_val < min_diff:\n                min_diff = diff_val\n    return min_diff\n\n\nif __name__ == '__main__':\n    arr = (1,5,3,19,18,25)\n    print(find_min_diff(arr,6))"}
{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\ndef number_ctr(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\n# assert number_ctr('program2bedone') == 1\n# assert number_ctr('') == 0\n# assert number_ctr('12345') == 5\n# assert number_ctr('1234567890') == 10\n# assert number_ctr('12345678901234567890') == 20"}
{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n\ndef is_polite(n):\n    \"\"\"\n    Check if n is a polite number.\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 6 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 8 == 0:\n        return False\n    if n % 9 == 0:\n        return False\n    if n % 10 == 0:\n        return False\n    if n % 11 == 0:\n        return True\n    if n % 12 == 0:\n        return True\n    if n % 13 == 0:\n        return True\n    if n % 14 == 0:\n        return True\n    if n % 15 == 0:\n        return True\n    if n % 16 == 0:\n        return True\n    if n % 17 == 0:\n        return True\n    if n % 18 == 0:\n        return True\n    if n % 19 == 0:\n        return True\n    if n % 20 == 0:\n        return True\n    if n % 21 == 0:\n        return True\n    if n % 22 == 0:\n        return True\n    if n % 23 == 0:\n        return True\n    if n % 24 == 0:\n        return True\n    if n % 25 == 0:\n        return True\n    if n % 26 == 0:\n        return True\n    if n % 27 == 0:\n        return True\n    if n % 28 == 0:\n        return True\n    if n % 29 == 0:\n        return True\n    if n % 30 == 0:\n        return True\n    if n % 31 == 0:\n        return True\n    if n % 32 == 0:\n        return True\n    if n % 33 == 0:\n        return True\n    if n % 34 == 0:\n        return True\n    if n % 35 == 0:\n        return True\n    if n % 36 == 0:\n        return True\n    if n % 37 == 0:\n        return True\n    if n % 38 == 0:\n        return True\n    if n % 39 == 0:\n        return True\n    if n % 40 == 0:\n        return True\n    if n % 41 == 0:\n        return True\n    if n % 42 == 0:\n        return True\n    if n % 43 == 0:\n        return True\n    if n % 44 == 0:\n        return True\n    if n % 45 == 0:\n        return True\n    if n % 46 == 0:\n        return True\n    if n % 47 == 0:\n        return True\n    if n % 48 == 0:\n        return True\n    if n % 49 == 0:\n        return True\n    if n % 50 == 0:\n        return True\n    if n % 51 == 0:\n        return True\n    if n % 52 == 0:\n        return True\n    if n % 53 == 0:\n        return True\n    if n % 54 == 0:\n        return True\n    if n % 55 == 0:\n        return True\n    if n % 56 == 0:\n        return True\n    if n % 57 == 0:\n        return True\n    if n % 58 == 0:\n        return True\n    if n % 59 == 0:\n        return True\n    if n % 60 =="}
{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\ndef pair_wise(lst):\n    \"\"\"\n    :param lst: input list\n    :return: list of pairs of consecutive items in the list\n    \"\"\"\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\ndef get_pairs_count(numbers, sum):\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                pairs.append((numbers[i], numbers[j]))\n    return len(pairs)\n\n# test\nprint(get_pairs_count([1,1,1,1],2))"}
{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\ndef Diff(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    result = []\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            result.append(list1[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\ndef odd_num_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\ndef check_expression(input_string):\n    stack = []\n    for token in input_string.split():\n        if token == '(':\n            stack.append(token)\n        elif token == ')':\n            if not stack or stack.pop() != '(':\n                return False\n        elif token == '[':\n            stack.append(token)\n        elif token == ']':\n            if not stack or stack.pop() != '[':\n                return False\n        elif token == '{' or token == '}':\n            if not stack or stack.pop() != token:\n                return False\n        else:\n            return False\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    print(check_expression(\"{()}[{}]\"))\n    print(check_expression(\"{([{}])}\"))\n    print(check_expression(\"{([{}])}()\"))\n    print(check_expression(\"{([{}])}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}\"))\n    print(check_expression(\"{([{}])}()[]{}()\"))\n    print(check_expression(\"{([{}])}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]{}()[]{}()[]\"))\n    print(check_expression(\"{([{}])}()[]{}()[]"}
{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\ndef remove_length(string, k):\n    \"\"\"\n    :param string: string\n    :param k: int\n    :return: string\n    \"\"\"\n    string = string.split()\n    string = [word for word in string if len(word) != k]\n    string = ' '.join(string)\n    return string\n\n\nif __name__ == '__main__':\n    assert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\ndef occurance_substring(string, substring):\n    \"\"\"\n    :param string: string to search\n    :param substring: substring to search\n    :return: tuple of substring and its position in string\n    \"\"\"\n    if substring in string:\n        return substring, string.index(substring)\n    else:\n        return None\n\n\n# assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n# assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n# assert occurance_substring('python programming, python language','python')==('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\ndef odd_position(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: True if every odd index contains odd numbers of the list, False otherwise\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\ndef find_sum(lst):\n    \"\"\"\n    This function takes a list as an input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if lst.count(i) == 1:\n            sum += i\n    return sum\n\n# Test the function\nassert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(lst):\n        if lst[i] == lst[i+1]:\n            result.append(lst[i])\n            i += 1\n        else:\n            result.append(lst[i])\n            i += 1\n    return result\n\n# Test\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\ndef find_combinations(tuples):\n    \"\"\"\n    Find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Create a set of tuples\n    set_tuples = set(tuples)\n\n    # Create a set of tuples with their sums\n    set_tuples_sums = set()\n    for tuple in set_tuples:\n        set_tuples_sums.add(tuple[0] + tuple[1])\n\n    # Find the combinations of sums with tuples\n    combinations = []\n    for sum in set_tuples_sums:\n        for tuple in set_tuples:\n            if sum == tuple[0] + tuple[1]:\n                combinations.append(tuple)\n\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    if count_divisors(n) % 2 == 0:\n        print(f\"The number {n} has an even number of divisors.\")\n    else:\n        print(f\"The number {n} has an odd number of divisors.\")"}
{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\ndef odd_length_sum(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    else:\n        return sum([arr[i:i+2] for i in range(len(arr)-1)]) + odd_length_sum(arr[1:-1])\n\n\nif __name__ == '__main__':\n    assert odd_length_sum([1,2,4]) == 14\n    assert odd_length_sum([1,2,3,4]) == 20\n    assert odd_length_sum([1,2,3,4,5]) == 25\n    assert odd_length_sum([1,2,3,4,5,6]) == 30\n    assert odd_length_sum([1,2,3,4,5,6,7]) == 35\n    assert odd_length_sum([1,2,3,4,5,6,7,8]) == 40\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9]) == 45\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 50\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11]) == 55\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12]) == 60\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 65\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 70\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 75\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 80\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 85\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 90\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 95\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 100\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 105\n    assert odd_length_sum([1,2,3,4,5,6,7,8,9,10,"}
{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color\n    \"\"\"\n    # Convert rgb to grayscale\n    gray = (r + g + b) / 3\n\n    # Calculate the difference between the max and min values\n    d = max(r, g, b) - min(r, g, b)\n\n    # Calculate the hue value\n    h = 0\n    if d == 0:\n        h = 0\n    elif d == r:\n        h = (g - b) / d\n    elif d == g:\n        h = (b - r) / d + 2\n    elif d == b:\n        h = (r - g) / d + 4\n    else:\n        h = 6\n\n    # Calculate the saturation value\n    s = d / 255\n\n    # Calculate the value\n    v = 255 - d\n\n    # Return the hsv color\n    return (h, s, v)\n\n\n# Test the function\nprint(rgb_to_hsv(255, 255, 255))"}
{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even*odd\n\n# Testing the function\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\ndef tuple_str_int(tuple_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    tuple_list = tuple_str.split(\",\")\n    tuple_list = [int(x) for x in tuple_list]\n    return tuple(tuple_list)\n\n\n# assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n# assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)"}
{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\ndef right_insertion(lst, val):\n    \"\"\"\n    This function takes a sorted list and a value to insert into the list.\n    It returns the index of the value in the list.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n        elif lst[i] < val:\n            break\n    return len(lst)\n\n\n# Test the function\nassert right_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\ndef text_match_three(text):\n    if text.count(\"ab\") == 3:\n        return True\n    else:\n        return False\n\ntext = \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\ndef new_tuple(lst, s):\n    \"\"\"\n    Create a new tuple from the given list and string.\n    \"\"\"\n    return tuple(lst) + tuple([s])\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n\ndef even_position(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nprint(even_position([3,2,1])) # False\nprint(even_position([2,4,6])) # True\nprint(even_position([1,3,5])) # False"}
{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\ndef remove_nested(tuple_list):\n    \"\"\"\n    This function removes nested tuples from the given tuple.\n    \"\"\"\n    new_tuple = []\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            new_tuple.extend(remove_nested(item))\n        else:\n            new_tuple.append(item)\n    return tuple(new_tuple)\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\ndef count_list(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nprint(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))"}
{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\ndef last(arr, x):\n    \"\"\"\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    if x not in arr:\n        return -1\n    else:\n        for i in range(len(arr)-1, -1, -1):\n            if arr[i] == x:\n                return i\n\n\n# Test the function\narr = [1, 2, 3]\nassert last(arr, 1) == 0\nassert last(arr, 4) == -1"}
{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\nimport re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext_starta_endb(\"aabbbb\") # True\ntext_starta_endb(\"a\") # False\ntext_starta_endb(\"ab\") # False\ntext_starta_endb(\"abc\") # False"}
{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\ndef return_sum(dictionary):\n    total = 0\n    for key in dictionary:\n        total += dictionary[key]\n    return total\n\n# assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nprint(return_sum({'a': 100, 'b':200, 'c':300}))"}
{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\ndef sum_in_range(l, r):\n    \"\"\"\n    :param l: int\n    :param r: int\n    :return: int\n    \"\"\"\n    if l % 2 == 0:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    return sum(range(l, r + 1, 2))\n\n\n# assert sum_in_range(2,5) == 8\n# print(sum_in_range(2,5))"}
{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\ndef _sum(numbers):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the sum of all the numbers in the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\n\nif __name__ == '__main__':\n    assert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\ndef left_rotate(num, d):\n    \"\"\"\n    :type num: int\n    :type d: int\n    :rtype: int\n    \"\"\"\n    if d == 0:\n        return num\n    if d > 31:\n        return 0\n    return (num << d) | num >> (32 - d)\n\n\ndef test_left_rotate():\n    assert left_rotate(16, 2) == 64\n    assert left_rotate(1, 2) == 4\n    assert left_rotate(1, 1) == 2\n    assert left_rotate(1, 0) == 1\n    assert left_rotate(1, 32) == 1\n    assert left_rotate(1, -1) == 0\n    assert left_rotate(1, -32) == 0\n    assert left_rotate(1, -33) == 0\n    assert left_rotate(1, -34) == 0\n    assert left_rotate(1, -35) == 0\n    assert left_rotate(1, -36) == 0\n    assert left_rotate(1, -37) == 0\n    assert left_rotate(1, -38) == 0\n    assert left_rotate(1, -39) == 0\n    assert left_rotate(1, -40) == 0\n    assert left_rotate(1, -41) == 0\n    assert left_rotate(1, -42) == 0\n    assert left_rotate(1, -43) == 0\n    assert left_rotate(1, -44) == 0\n    assert left_rotate(1, -45) == 0\n    assert left_rotate(1, -46) == 0\n    assert left_rotate(1, -47) == 0\n    assert left_rotate(1, -48) == 0\n    assert left_rotate(1, -49) == 0\n    assert left_rotate(1, -50) == 0\n    assert left_rotate(1, -51) == 0\n    assert left_rotate(1, -52) == 0\n    assert left_rotate(1, -53) == 0\n    assert left_rotate(1, -54) == 0\n    assert left_rotate(1, -55) == 0\n    assert left_rotate(1, -56) == 0\n    assert left_rotate(1, -57) == 0\n    assert left_rotate(1, -58) == 0\n    assert left_rotate(1, -59) == 0\n    assert left_rotate(1, -60) == 0\n    assert left_rotate(1, -61) == 0\n    assert left_rotate(1, -62) == 0\n    assert left_rotate(1, -63) == 0\n    assert left_rotate(1, -64) == 0\n    assert left_rotate(1, -65) == 0\n    assert left_rotate(1, -66) == 0\n    assert left_rotate(1, -67) == 0\n    assert left_rotate(1, -68) == 0\n    assert left_rotate(1, -69) == 0\n    assert left_rotate(1, -70) == 0\n    assert left_rotate(1, -71) == 0\n    assert left_rotate(1, -72) == 0\n    assert left_rotate(1, -73) == 0\n    assert left_rotate(1, -74) == 0\n    assert left_rotate(1, -75) == 0\n    assert left_rotate(1, -76) == 0\n    assert left_rotate(1, -77) == 0\n    assert left_rotate(1, -78) == 0\n    assert left_rotate(1, -79) == 0\n    assert left_rotate(1, -80) == 0\n    assert left_rotate(1,"}
{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\ndef remove_all_spaces(string):\n    \"\"\"\n    This function removes all whitespaces from a given string.\n    :param string: string\n    :return: string without whitespaces\n    \"\"\"\n    return ''.join(string.split())"}
{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\ndef test_three_equal(a, b, c):\n    if a == b and b == c:\n        return 3\n    else:\n        return 0\n\n\n# test the function\nprint(test_three_equal(1,1,1))"}
{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\n\n# assert not is_perfect_square(10)\n# assert is_perfect_square(16)\n# assert is_perfect_square(25)"}
{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\ndef is_product_even(lst):\n    product = reduce(lambda x,y: x*y, lst)\n    return product % 2 == 0\n\n# assert is_product_even([1,2,3])\n# assert is_product_even([2,3,4])\n# assert is_product_even([1,2,3,4])\n# assert is_product_even([-1,2,3,4])\n# assert is_product_even([1,2,3,4,5])"}
{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\ndef max_sum_list(lst):\n    max_sum = lst[0]\n    max_sum_index = 0\n    for i in range(1,len(lst)):\n        if sum(lst[i]) > max_sum:\n            max_sum = sum(lst[i])\n            max_sum_index = i\n    return lst[max_sum_index]\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\ndef max_run_uppercase(string):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1] and string[i].isupper():\n            max_run += 1\n        else:\n            max_run = 0\n    return max_run\n\n# assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n# assert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\ndef first_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the first odd number in the list.\n    \"\"\"\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None\n\n# Test the function\nprint(first_odd([1,3,5])) # 1\nprint(first_odd([2,4,6])) # None"}
{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\ndef check_K(tuples, k):\n    \"\"\"\n    :param tuples: list of tuples\n    :param k: integer\n    :return: True if k is present in tuples else False\n    \"\"\"\n    for tuple in tuples:\n        if k in tuple:\n            return True\n    return False\n\n\n# assert check_K((10, 4, 5, 6, 8), 6) == True\n# assert check_K((10, 4, 5, 6, 8), 7) == False"}
{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\ndef check_smaller(tuple1, tuple2):\n    \"\"\"\n    This function checks if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple1[i] > tuple2[i]:\n            return True\n    return False\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
