{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\n\ndef similar_elements(list1, list2):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :return: list of integers\n    \"\"\"\n    return list(set(list1).intersection(list2))\n\n\nif __name__ == '__main__':\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)))\n    print(similar_elements((3, 4, 5, 6), (5, 7, 4, 10, 10, 10, 10, 10"}
{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\n\ndef is_not_prime(number):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    assert is_not_prime(2) == False\n    \"\"\"\n    if number < 2:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_not_prime(2))\n    print(is_not_prime(3))\n    print(is_not_prime(4))\n    print(is_not_prime(5))\n    print(is_not_prime(6))\n    print(is_not_prime(7))\n    print(is_not_prime(8))\n    print(is_not_prime(9))\n    print(is_not_prime(10))\n    print(is_not_prime(11))\n    print(is_not_prime(12))\n    print(is_not_prime(13))\n    print(is_not_prime(14))\n    print(is_not_prime(15))\n    print(is_not_prime(16))\n    print(is_not_prime(17))\n    print(is_not_prime(18))\n    print(is_not_prime(19))\n    print(is_not_prime(20))\n    print(is_not_prime(21))\n    print(is_not_prime(22))\n    print(is_not_prime(23))\n    print(is_not_prime(24))\n    print(is_not_prime(25))\n    print(is_not_prime(26))\n    print(is_not_prime(27))\n    print(is_not_prime(28))\n    print(is_not_prime(29))\n    print(is_not_prime(30))\n    print(is_not_prime(31))\n    print(is_not_prime(32))\n    print(is_not_prime(33))\n    print(is_not_prime(34))\n    print(is_not_prime(35))\n    print(is_not_prime(36))\n    print(is_not_prime(37))\n    print(is_not_prime(38))\n    print(is_not_prime(39))\n    print(is_not_prime(40))\n    print(is_not_prime(41))\n    print(is_not_prime(42))\n    print(is_not_prime(43))\n    print(is_not_prime(44))\n    print(is_not_prime(45))\n    print(is_not_prime(46))\n    print(is_not_prime(47))\n    print(is_not_prime(48))\n    print(is_not_prime(49))\n    print(is_not_prime(50))\n    print(is_not_prime(51))\n    print(is_not_prime(52))\n    print(is_not_prime(53))\n    print(is_not_prime(54))\n    print(is_not_prime(55))\n    print(is_not_prime(56))\n    print(is_not_prime(57))\n    print(is_not_prime(58))\n    print(is_not_prime(59))\n    print(is_not_prime(60))\n    print(is_not_prime(61))\n    print(is_not_prime(62))\n    print(is_not_prime(63))\n    print(is_not_prime(64))\n    print(is_not_prime(65))\n    print(is_not_prime(66))\n"}
{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    :param numbers: list of numbers\n    :param n: number of largest integers to return\n    :return: list of n largest integers\n    \"\"\"\n    # create a min heap\n    heap = []\n    for number in numbers:\n        heapq.heappush(heap, number)\n\n    # pop off the top n numbers\n    largest = []\n    for _ in range(n):\n        largest.append(heapq.heappop(heap))\n\n    # return largest numbers in descending order\n    return sorted(largest, reverse=True)\n\n\nif __name__ == '__main__':\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 10))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 1))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 0))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], -1))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 100))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 1000))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 10000))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 100000))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 1000000))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 10000000))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 100000000))\n    print(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 1000000000))\n    print(heap_queue_largest([25, 35, 22, 85, 1"}
{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\n\ndef differ_At_One_Bit_Pos(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: bool\n    \"\"\"\n    return bin(a ^ b).count('1') == 1\n\n\nif __name__ == '__main__':\n    print(differ_At_One_Bit_Pos(13, 9))\n    print(differ_At_One_Bit_Pos(13, 10))\n    print(differ_At_One_Bit_Pos(13, 11))\n    print(differ_At_One_Bit_Pos(13, 12))\n    print(differ_At_One_Bit_Pos(13, 13))\n    print(differ_At_One_Bit_Pos(13, 14))\n    print(differ_At_One_Bit_Pos(13, 15))\n    print(differ_At_One_Bit_Pos(13, 16))\n    print(differ_At_One_Bit_Pos(13, 17))\n    print(differ_At_One_Bit_Pos(13, 18))\n    print(differ_At_One_Bit_Pos(13, 19))\n    print(differ_At_One_Bit_Pos(13, 20))\n    print(differ_At_One_Bit_Pos(13, 21))\n    print(differ_At_One_Bit_Pos(13, 22))\n    print(differ_At_One_Bit_Pos(13, 23))\n    print(differ_At_One_Bit_Pos(13, 24))\n    print(differ_At_One_Bit_Pos(13, 25))\n    print(differ_At_One_Bit_Pos(13, 26))\n    print(differ_At_One_Bit_Pos(13, 27))\n    print(differ_At_One_Bit_Pos(13, 28))\n    print(differ_At_One_Bit_Pos(13, 29))\n    print(differ_At_One_Bit_Pos(13, 30))\n    print(differ_At_One_Bit_Pos(13, 31))\n    print(differ_At_One_Bit_Pos(13, 32))\n    print(differ_At_One_Bit_Pos(13, 33))\n    print(differ_At_One_Bit_Pos(13, 34))\n    print(differ_At_One_Bit_Pos(13, 35))\n    print(differ_At_One_Bit_Pos(13, 36))\n    print(differ_At_One_Bit_Pos(13, 37))\n    print(differ_At_One_Bit_Pos(13, 38))\n    print(differ_At_One_Bit_Pos(13, 39))\n    print(differ_At_One_Bit_Pos(13, 40))\n    print(differ_At_One_Bit_Pos(13, 41))\n    print(differ_At_One_Bit_Pos(13, 42))\n    print(differ_At_One_Bit_Pos(13, 43))\n    print(differ_At_One_Bit_Pos(13, 44))\n    print(differ_At_One_Bit_Pos(13, 45))\n    print(differ_At_One_Bit_Pos(13, 46))\n    print(differ_At_One_Bit_Pos(13, 47))\n    print(differ"}
{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\n\ndef find_char_long(string):\n    \"\"\"\n    :param string: string\n    :return: set of words\n    \"\"\"\n    words = string.split()\n    return set(word for word in words if len(word) >= 4)\n\n\nif __name__ == '__main__':\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_long('Please move back to stream'))\n    print(find_char_"}
{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n\ndef square_nums(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: list of squares of individual elements in nums\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n\nif __name__ == '__main__':\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, "}
{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\n\ndef find_Rotations(string):\n    \"\"\"\n    :param string: string\n    :return: minimum number of rotations required to get the same string\n    \"\"\"\n    if len(string) == 1:\n        return 0\n    else:\n        for i in range(len(string)):\n            if string[i:] == string[:i]:\n                return i\n        return 0\n\n\nif __name__ == '__main__':\n    print(find_Rotations(\"aaaa\"))\n    print(find_Rotations(\"abcd\"))\n    print(find_Rotations(\"abcde\"))\n    print(find_Rotations(\"abcdef\"))\n    print(find_Rotations(\"abcdefg\"))\n    print(find_Rotations(\"abcdefgh\"))\n    print(find_Rotations(\"abcdefghi\"))\n    print(find_Rotations(\"abcdefghij\"))\n    print(find_Rotations(\"abcdefghijk\"))\n    print(find_Rotations(\"abcdefghijkl\"))\n    print(find_Rotations(\"abcdefghijklm\"))\n    print(find_Rotations(\"abcdefghijklmn\"))\n    print(find_Rotations(\"abcdefghijklmno\"))\n    print(find_Rotations(\"abcdefghijklmnop\"))\n    print(find_Rotations(\"abcdefghijklmnopq\"))\n    print(find_Rotations(\"abcdefghijklmnopqr\"))\n    print(find_Rotations(\"abcdefghijklmnopqrs\"))\n    print(find_Rotations(\"abcdefghijklmnopqrst\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstu\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuv\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvw\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwx\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxy\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzab\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabc\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcd\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcde\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdef\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefg\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefgh\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghi\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghijk\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghijkl\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghijklm\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmn\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmno\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnop\"))\n    print(find_Rotations(\"abcdefghijklmnopqr"}
{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n\ndef remove_Occ(string, char):\n    return string[1:-1].replace(char, \"\")\n\n\nprint(remove_Occ(\"hello\", \"l\"))\n"}
{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :param matrix: a matrix of integers\n    :return: a matrix sorted according to the sum of its rows\n    \"\"\"\n    matrix_sorted = []\n    for i in range(len(matrix)):\n        matrix_sorted.append(sorted(matrix[i], reverse=True))\n    return matrix_sorted\n\n\nif __name__ == '__main__':\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],\n                       [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],\n                       [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],\n                       [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],\n                       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1"}
{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    \"\"\"\n    a,b,c: positive integers\n    returns: the volume of the triangular prism with the given side lengths\n    \"\"\"\n    return a*b*c\n\n\ndef test_find_Volume():\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(1,2,3) == 6\n    assert find_Volume(1,1,1) == 1\n    assert find_Volume(1,1,2) == 2\n    assert find_Volume(1,2,1) == 2\n    assert find_Volume(2,1,1) == 2\n    assert find_Volume(2,1,2) == 4\n    assert find_Volume(2,2,1) == 4\n    assert find_Volume(2,2,2) == 8\n    assert find_Volume(3,2,1) == 6\n    assert find_Volume(3,2,2) == 12\n    assert find_Volume(3,3,1) == 9\n    assert find_Volume(3,3,2) == 18\n    assert find_Volume(3,3,3) == 27\n    assert find_Volume(4,3,2) == 24\n    assert find_Volume(4,3,3) == 36\n    assert find_Volume(4,4,2) == 32\n    assert find_Volume(4,4,3) == 48\n    assert find_Volume(4,4,4) == 64\n    assert find_Volume(5,4,3) == 54\n    assert find_Volume(5,4,4) == 72\n    assert find_Volume(5,5,3) == 60\n    assert find_Volume(5,5,4) == 80\n    assert find_Volume(5,5,5) == 100\n    assert find_Volume(6,5,4) == 72\n    assert find_Volume(6,5,5) == 90\n    assert find_Volume(6,6,4) == 84\n    assert find_Volume(6,6,5) == 108\n    assert find_Volume(6,6,6) == 126\n    assert find_Volume(7,6,5) == 96\n    assert find_Volume(7,6,6) == 120\n    assert find_Volume(7,7,5) == 102\n    assert find_Volume(7,7,6) == 132\n    assert find_Volume(7,7,7) == 162\n    assert find_Volume(8,7,6) == 116\n    assert find_Volume(8,7,7) == 148\n    assert find_Volume(8,8,6) == 120\n    assert find_Volume(8,8,7) == 168\n    assert find_Volume(8,8,8) == 192\n    assert find_Volume(9,8,7) == 140\n    assert find_Volume(9,8,8) == 180\n    assert find_Volume(9,9,7) == 132\n    assert find_Volume(9,9,8) == 172\n    assert find_Volume(9,9,9) == 204\n    assert find_Volume(10,9,8) == 128\n    assert find_Volume(10,9,9) == 168\n    assert find_Volume(10,10,8) == 120\n    assert find_Volume(10,10,9) == 172\n    assert find_Volume(10,10,10) == 200\n    assert find_Volume(11,10,9) == "}
{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    if text.islower() and \"_\" in text:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(text_lowercase_underscore(\"aab_cbbbc\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n_o\"))\n    print(text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_n_o_\"))\n    print(text_lowercase_underscore(\"aab_cbbbc"}
{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n\n\ndef square_perimeter(side):\n    return side * 4\n\n\ndef test_square_perimeter():\n    assert square_perimeter(10) == 40\n\n\ndef test_square_perimeter_negative():\n    assert square_perimeter(-10) == 40\n\n\ndef test_square_perimeter_zero():\n    assert square_perimeter(0) == 0\n\n\ndef test_square_perimeter_float():\n    assert square_perimeter(10.5) == 41\n\n\ndef test_square_perimeter_float_negative():\n    assert square_perimeter(-10.5) == 41\n\n\ndef test_square_perimeter_float_zero():\n    assert square_perimeter(0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative():\n    assert square_perimeter(-0.0) == 0\n\n\ndef test_square_perimeter_float_zero_positive():\n    assert square_perimeter(+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive_negative():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive_negative():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive_negative():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive_negative_positive():\n    assert square_perimeter(-+0.0) == 0\n\n\ndef test_square_perimeter_float_zero_negative_positive_negative"}
{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n\ndef remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    :param string1: str\n    :param string2: str\n    :return: str\n    \"\"\"\n    return ''.join([char for char in string1 if char not in string2])\n\n\nif __name__ == '__main__':\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n    print(remove_dirty_chars(\"probasscurve\", \"pro"}
{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n\ndef test_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == len(set(nums)):\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(test_duplicate([1, 2, 3, 4, 5]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n    print(test_duplicate([1, 2, 3, 4, "}
{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n\ndef is_woodall(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num < 100:\n        return False\n    if num % 10 == num // 100:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_woodall(383))\n    print(is_woodall(123))\n    print(is_woodall(1234))\n    print(is_woodall(12345))\n    print(is_woodall(123456))\n    print(is_woodall(1234567))\n    print(is_woodall(12345678))\n    print(is_woodall(123456789))\n    print(is_woodall(1234567890))\n    print(is_woodall(12345678901))\n    print(is_woodall(123456789012))\n    print(is_woodall(1234567890123))\n    print(is_woodall(12345678901234))\n    print(is_woodall(123456789012345))\n    print(is_woodall(1234567890123456))\n    print(is_woodall(12345678901234567))\n    print(is_woodall(123456789012345678))\n    print(is_woodall(1234567890123456789))\n    print(is_woodall(12345678901234567890))\n    print(is_woodall(123456789012345678901))\n    print(is_woodall(1234567890123456789012))\n    print(is_woodall(12345678901234567890123))\n    print(is_woodall(123456789012345678901234))\n    print(is_woodall(1234567890123456789012345))\n    print(is_woodall(12345678901234567890123456))\n    print(is_woodall(123456789012345678901234567))\n    print(is_woodall(1234567890123456789012345678))\n    print(is_woodall(12345678901234567890123456789))\n    print(is_woodall(123456789012345678901234567890))\n    print(is_woodall(1234567890123456789012345678901))\n    print(is_woodall(12345678901234567890123456789012))\n    print(is_woodall(123456789012345678901234567890123))\n    print(is_woodall(1234"}
{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n\ndef check(n):\n    \"\"\"\n    >>> check(70)\n    False\n    >>> check(71)\n    True\n    >>> check(72)\n    False\n    >>> check(73)\n    True\n    >>> check(74)\n    False\n    >>> check(75)\n    True\n    >>> check(76)\n    False\n    >>> check(77)\n    True\n    >>> check(78)\n    False\n    >>> check(79)\n    True\n    >>> check(80)\n    False\n    >>> check(81)\n    True\n    >>> check(82)\n    False\n    >>> check(83)\n    True\n    >>> check(84)\n    False\n    >>> check(85)\n    True\n    >>> check(86)\n    False\n    >>> check(87)\n    True\n    >>> check(88)\n    False\n    >>> check(89)\n    True\n    >>> check(90)\n    False\n    >>> check(91)\n    True\n    >>> check(92)\n    False\n    >>> check(93)\n    True\n    >>> check(94)\n    False\n    >>> check(95)\n    True\n    >>> check(96)\n    False\n    >>> check(97)\n    True\n    >>> check(98)\n    False\n    >>> check(99)\n    True\n    >>> check(100)\n    False\n    >>> check(101)\n    True\n    >>> check(102)\n    False\n    >>> check(103)\n    True\n    >>> check(104)\n    False\n    >>> check(105)\n    True\n    >>> check(106)\n    False\n    >>> check(107)\n    True\n    >>> check(108)\n    False\n    >>> check(109)\n    True\n    >>> check(110)\n    False\n    >>> check(111)\n    True\n    >>> check(112)\n    False\n    >>> check(113)\n    True\n    >>> check(114)\n    False\n    >>> check(115)\n    True\n    >>> check(116)\n    False\n    >>> check(117)\n    True\n    >>> check(118)\n    False\n    >>> check(119)\n    True\n    >>> check(120)\n    False\n    >>> check(121)\n    True\n    >>> check(122)\n    False\n    >>> check(123)\n    True\n    >>> check(124)\n    False\n    >>> check(125)\n    True\n    >>> check(126)\n    False\n    >>> check(127)\n    True\n    >>> check(128)\n    False\n    >>> check(129)\n    True\n    >>> check(130)\n    False\n    >>> check(131)\n    True\n    >>> check(132)\n    False\n    >>> check(133)\n    True\n    >>> check(134)\n    False\n    >>> check(135)\n    True\n    >>> check(136)\n    False\n    >>> check(137)\n    True\n    >>> check(138)\n    False\n    >>> check(139)\n    True\n    >>> check(140)\n    False\n    >>> check(141)\n    True\n    >>> check(142)\n    False\n    >>> check(143)\n    True\n    >>> check(144)\n    False\n    >>> check(145)\n    True\n    >>> check(146)\n    False\n    >>> check(147)\n    True\n    >>> check(148)\n    False\n    >>> check(149)\n    True\n    >>> check(150)\n    False\n    >>> check(151)\n    True\n    >>> check(152)\n"}
{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\n\ndef find_Max_Num(nums):\n    nums.sort(reverse=True)\n    return int(''.join(map(str, nums)))\n\n\nif __name__ == '__main__':\n    print(find_Max_Num([1, 2, 3]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n\ndef opposite_Signs(a, b):\n    if a > 0 and b < 0 or a < 0 and b > 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(opposite_Signs(1, -2))\n    print(opposite_Signs(1, 2))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(-1, 1))\n    print(opposite_Signs(-1, -2))\n    print(opposite_Signs(-1, 0))\n    print(opposite_Signs(0, -1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(opposite_Signs(0, 1))\n    print(opposite_Signs(0, 0))\n    print(opposite_Signs(1, 1))\n    print(opposite_Signs(1, 0))\n    print(oppos"}
{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n\ndef is_octagonal(n):\n    \"\"\"\n    >>> is_octagonal(5)\n    True\n    >>> is_octagonal(6)\n    False\n    \"\"\"\n    for i in range(1, n + 1):\n        if is_octagonal_number(i):\n            return True\n    return False\n\n\ndef is_octagonal_number(n):\n    \"\"\"\n    >>> is_octagonal_number(6)\n    True\n    >>> is_octagonal_number(7)\n    False\n    \"\"\"\n    for i in range(1, n + 1):\n        if is_octagonal_number_helper(i, n):\n            return True\n    return False\n\n\ndef is_octagonal_number_helper(n, m):\n    \"\"\"\n    >>> is_octagonal_number_helper(6, 5)\n    True\n    >>> is_octagonal_number_helper(7, 5)\n    False\n    \"\"\"\n    if n == m:\n        return True\n    if n > m:\n        return False\n    return is_octagonal_number_helper(n + 1, m)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n\n\ndef count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(int(x) for x in string[i:j+1]) == j-i+1:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_Substrings('112112'))\n    print(count_Substrings('111111'))\n    print(count_Substrings('1111111'))\n    print(count_Substrings('11111111'))\n    print(count_Substrings('111111111'))\n    print(count_Substrings('1111111111'))\n    print(count_Substrings('11111111111'))\n    print(count_Substrings('111111111111'))\n    print(count_Substrings('1111111111111'))\n    print(count_Substrings('11111111111111'))\n    print(count_Substrings('111111111111111'))\n    print(count_Substrings('1111111111111111'))\n    print(count_Substrings('11111111111111111'))\n    print(count_Substrings('111111111111111111'))\n    print(count_Substrings('1111111111111111111'))\n    print(count_Substrings('11111111111111111111'))\n    print(count_Substrings('111111111111111111111'))\n    print(count_Substrings('1111111111111111111111'))\n    print(count_Substrings('11111111111111111111111'))\n    print(count_Substrings('111111111111111111111111'))\n    print(count_Substrings('1111111111111111111111111'))\n    print(count_Substrings('11111111111111111111111111'))\n    print(count_Substrings('111111111111111111111111111'))\n    print(count_Substrings('1111111111111111111111111111'))\n    print(count_Substrings('11111111111111111111111111111'))\n    print(count_Substrings('111111111111111111111111111111'))\n    print(count_Substrings('1111111111111111111111111111111'))\n    print(count_Substrings('11111111111111111111111111111111'))\n    print(count_Substrings('111111111111111111111111111111111'))\n    print(count_Substrings('1111111111111111111111111111111111'))\n   "}
{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n\ndef smallest_num(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: smallest number in the list\n    \"\"\"\n    return min(nums)\n\n\nif __name__ == '__main__':\n    print(smallest_num([10, 20, 1, 45, 99]))\n    print(smallest_num([10, 20, 1, 45, 99, 100]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]))\n    print(smallest_num([10, 20, 1, 45, 99, 100, 101"}
{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n\ndef max_difference(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :return: maximum difference between available pairs\n    \"\"\"\n    tuple_list.sort()\n    max_diff = 0\n    for i in range(len(tuple_list) - 1):\n        max_diff = max(max_diff, tuple_list[i + 1][0] - tuple_list[i][1])\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]))\n    print(max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20),\n                          (21, 22), (23, 24), (25, 26), (27, 28), (29, 30), (31, 32), (33, 34), (35, 36), (37, 38),\n                          (39, 40), (41, 42), (43, 44), (45, 46), (47, 48), (49, 50), (51, 52), (53, 54), (55, 56),\n                          (57, 58), (59, 60), (61, 62), (63, 64), (65, 66), (67, 68), (69, 70), (71, 72), (73, 74),\n                          (75, 76), (77, 78), (79, 80), (81, 82), (83, 84), (85, 86), (87, 88), (89, 90), (91, 92),\n                          (93, 94), (95, 96), (97, 98), (99, 100), (101, 102), (103, 104), (105, 106), (107, 108),\n                          (109, 110), (111, 112), (113, 114), (115, 116), (117, 118), (119, 120), (121, 122), (123, 124),\n                          (125, 126), (127, 128), (129, 130), (131, 132), (133, 134), (135, 136), (137, 138), (139, 140),\n                          (141, 142), (1"}
{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n\ndef subject_marks(marks):\n    \"\"\"\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n\ndef recursive_list_sum(lst):\n    \"\"\"\n    :param lst: list\n    :return: int\n    \"\"\"\n    if not isinstance(lst, list):\n        return lst\n    else:\n        return sum(recursive_list_sum(x) for x in lst)\n\n\nif __name__ == '__main__':\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(recursive_list_sum([1, 2, [3, 4], [5, 6], 7, 8, 9, 10, 1"}
{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n\ndef pos_count(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: number of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(pos_count([1, -2, 3, -4]))\n    print(pos_count([1, 2, 3, 4]))\n    print(pos_count([-1, -2, -3, -4]))\n    print(pos_count([-1, 2, 3, 4]))\n    print(pos_count([-1, -2, -3, -4, -5]))\n    print(pos_count([-1, -2, -3, -4, -5, -6]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n    print(pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]))\n    print(pos_count([-1, -2, -3, -4, -5,"}
{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n\ndef bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n - 1) + bell_number(n - 2)\n\n\ndef bell_number_2(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_2(n - 1) + bell_number_2(n - 2)\n\n\ndef bell_number_3(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_3(n - 1) + bell_number_3(n - 2)\n\n\ndef bell_number_4(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_4(n - 1) + bell_number_4(n - 2)\n\n\ndef bell_number_5(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_5(n - 1) + bell_number_5(n - 2)\n\n\ndef bell_number_6(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_6(n - 1) + bell_number_6(n - 2)\n\n\ndef bell_number_7(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_7(n - 1) + bell_number_7(n - 2)\n\n\ndef bell_number_8(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number_8(n - 1) + bell_number_8(n - 2)\n\n\ndef bell_number_9(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2"}
{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] <= arr[1] <= arr[2]:\n        return True\n    if arr[0] >= arr[1] >= arr[2]:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_Monotonic([6, 5, 4, 4]))\n    print(is_Monotonic([6, 5, 4, 3]))\n    print(is_Monotonic([6, 5, 4, 3, 2]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))\n    print(is_Monotonic([6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -"}
{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n\ndef is_sublist(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n            else:\n                return True\n\n\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nprint(is_sublist([2, 4, 3, 5, 7], [3, 7, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1"}
{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\n\ndef get_equal(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: True if all the tuples have equal length else False\n    \"\"\"\n    if not tuples:\n        return True\n    return all(len(tuples[0]) == len(t) for t in tuples)\n\n\nif __name__ == '__main__':\n    print(get_equal([(11, 22, 33), (44, 55, 66)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66, 77)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131, 141)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131, 141, 151)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131, 141, 151, 161)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131, 141, 151, 161, 171)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131, 141, 151, 161, 171, 181)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), (77, 88, 99, 100, 111, 121, 131, 141, 151, 161, 171, 181, 191)]))\n    print(get_equal([(11, 22, 33), (44, 55, 66), ("}
{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\n\ndef comb_sort(arr):\n    \"\"\"\n    Sorts the list using comb sort algorithm.\n    :param arr: list of elements to be sorted\n    :return: sorted list\n    \"\"\"\n    gap = len(arr)\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(gap, len(arr)):\n            if arr[i - gap] > arr[i]:\n                arr[i - gap], arr[i] = arr[i], arr[i - gap]\n    return arr\n\n\nif __name__ == '__main__':\n    print(comb_sort([5, 15, 37, 25, 79]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000, 10000000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000, 10000000, 100000000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000]))\n    print(comb_sort([5, 15, 37, 25, 79, 100, 10, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 10000000000"}
{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n\ndef dif_Square(n):\n    for i in range(1, int(n**0.5)+1):\n        if n == i**2 + (n-i**2):\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(dif_Square(5))\n    print(dif_Square(12))\n    print(dif_Square(13))\n    print(dif_Square(14))\n    print(dif_Square(15))\n    print(dif_Square(16))\n    print(dif_Square(17))\n    print(dif_Square(18))\n    print(dif_Square(19))\n    print(dif_Square(20))\n    print(dif_Square(21))\n    print(dif_Square(22))\n    print(dif_Square(23))\n    print(dif_Square(24))\n    print(dif_Square(25))\n    print(dif_Square(26))\n    print(dif_Square(27))\n    print(dif_Square(28))\n    print(dif_Square(29))\n    print(dif_Square(30))\n    print(dif_Square(31))\n    print(dif_Square(32))\n    print(dif_Square(33))\n    print(dif_Square(34))\n    print(dif_Square(35))\n    print(dif_Square(36))\n    print(dif_Square(37))\n    print(dif_Square(38))\n    print(dif_Square(39))\n    print(dif_Square(40))\n    print(dif_Square(41))\n    print(dif_Square(42))\n    print(dif_Square(43))\n    print(dif_Square(44))\n    print(dif_Square(45))\n    print(dif_Square(46))\n    print(dif_Square(47))\n    print(dif_Square(48))\n    print(dif_Square(49))\n    print(dif_Square(50))\n    print(dif_Square(51))\n    print(dif_Square(52))\n    print(dif_Square(53))\n    print(dif_Square(54))\n    print(dif_Square(55))\n    print(dif_Square(56))\n    print(dif_Square(57))\n    print(dif_Square(58))\n    print(dif_Square(59))\n    print(dif_Square(60))\n    print(dif_Square(61))\n    print(dif_Square(62))\n    print(dif_Square(63))\n    print(dif_Square(64))\n    print(dif_Square(65))\n    print(dif_Square(66))\n    print(dif_Square(67))\n    print(dif_Square(68))\n    print(dif_Square(69))\n    print(dif_Square(70))\n    print(dif_Square(71))\n    print(dif_Square(72))\n    print(dif_Square(73))\n    print(dif_Square(74))\n    print(dif_Square(75))\n    print(dif_Square(76))\n    print(dif_Square(77))\n    print(dif_Square(78))\n    print(dif_Square(79))\n"}
{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\n\ndef is_samepatterns(patterns, words):\n    if len(patterns) != len(words):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != words[i] and patterns[i] != words[i][0]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]))\n    print(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\","}
{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\n\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(x % k == 0 for x in t)]\n\n\nif __name__ == '__main__':\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 3))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 1))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 2))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 4))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 5))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 8))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 9))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 10))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 11))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 13))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 14))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 15))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 16))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 17))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 18))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 19))\n    print(find_tuples([(6, 24, 12), (7, "}
{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\n\ndef is_Diff(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_Diff(12345))\n    print(is_Diff(123456789))\n    print(is_Diff(1234567890))\n    print(is_Diff(12345678901))\n    print(is_Diff(123456789012))\n    print(is_Diff(1234567890123))\n    print(is_Diff(12345678901234))\n    print(is_Diff(123456789012345))\n    print(is_Diff(1234567890123456))\n    print(is_Diff(12345678901234567))\n    print(is_Diff(123456789012345678))\n    print(is_Diff(1234567890123456789))\n    print(is_Diff(12345678901234567890))\n    print(is_Diff(123456789012345678901))\n    print(is_Diff(1234567890123456789012))\n    print(is_Diff(12345678901234567890123))\n    print(is_Diff(123456789012345678901234))\n    print(is_Diff(1234567890123456789012345))\n    print(is_Diff(12345678901234567890123456))\n    print(is_Diff(123456789012345678901234567))\n    print(is_Diff(1234567890123456789012345678))\n    print(is_Diff(12345678901234567890123456789))\n    print(is_Diff(123456789012345678901234567890))\n    print(is_Diff(1234567890123456789012345678901))\n    print(is_Diff(12345678901234567890123456789012))\n    print(is_Diff(123456789012345678901234567890123))\n    print(is_Diff(1234567890123456789012345678901234))\n    print(is_Diff(12345678901234567890123456789012345))\n    print(is_Diff(1234567890123456789012345678901234"}
{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n\ndef word_len(word):\n    \"\"\"\n    :param word: str\n    :return: bool\n    \"\"\"\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(word_len(\"Hadoop\"))\n    print(word_len(\""}
{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    >>> tetrahedral_number(5)\n    35\n    \"\"\"\n    return (n * (n + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef volume_sphere(radius):\n    \"\"\"\n    >>> math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n    True\n    \"\"\"\n    return (4/3) * math.pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n\ndef get_Char(string):\n    \"\"\"\n    :param string: string\n    :return: character\n    \"\"\"\n    return chr(sum(ord(i) for i in string) % 26 + 97)\n\n\nif __name__ == '__main__':\n    print(get_Char(\"abc\"))\n    print(get_Char(\"abcd\"))\n    print(get_Char(\"abcde\"))\n    print(get_Char(\"abcdef\"))\n    print(get_Char(\"abcdefg\"))\n    print(get_Char(\"abcdefgh\"))\n    print(get_Char(\"abcdefghi\"))\n    print(get_Char(\"abcdefghij\"))\n    print(get_Char(\"abcdefghijk\"))\n    print(get_Char(\"abcdefghijkl\"))\n    print(get_Char(\"abcdefghijklm\"))\n    print(get_Char(\"abcdefghijklmn\"))\n    print(get_Char(\"abcdefghijklmno\"))\n    print(get_Char(\"abcdefghijklmnop\"))\n    print(get_Char(\"abcdefghijklmnopq\"))\n    print(get_Char(\"abcdefghijklmnopqr\"))\n    print(get_Char(\"abcdefghijklmnopqrs\"))\n    print(get_Char(\"abcdefghijklmnopqrst\"))\n    print(get_Char(\"abcdefghijklmnopqrstu\"))\n    print(get_Char(\"abcdefghijklmnopqrstuv\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvw\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwx\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxy\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabc\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcd\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcde\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdef\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefg\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefgh\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghi\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijk\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijkl\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklm\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmn\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmno\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnop\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\"))\n    print(get_Char(\"abcdefghijklmnopqrstuvwxyzabcdefgh"}
{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n\ndef sequence(n):\n    \"\"\"\n    >>> sequence(10)\n    6\n    >>> sequence(1)\n    1\n    >>> sequence(2)\n    1\n    >>> sequence(3)\n    2\n    >>> sequence(4)\n    1\n    >>> sequence(5)\n    2\n    >>> sequence(6)\n    5\n    >>> sequence(7)\n    1\n    >>> sequence(8)\n    2\n    >>> sequence(9)\n    5\n    >>> sequence(10)\n    6\n    >>> sequence(11)\n    1\n    >>> sequence(12)\n    2\n    >>> sequence(13)\n    5\n    >>> sequence(14)\n    1\n    >>> sequence(15)\n    2\n    >>> sequence(16)\n    5\n    >>> sequence(17)\n    1\n    >>> sequence(18)\n    2\n    >>> sequence(19)\n    5\n    >>> sequence(20)\n    6\n    >>> sequence(21)\n    1\n    >>> sequence(22)\n    2\n    >>> sequence(23)\n    5\n    >>> sequence(24)\n    1\n    >>> sequence(25)\n    2\n    >>> sequence(26)\n    5\n    >>> sequence(27)\n    1\n    >>> sequence(28)\n    2\n    >>> sequence(29)\n    5\n    >>> sequence(30)\n    6\n    >>> sequence(31)\n    1\n    >>> sequence(32)\n    2\n    >>> sequence(33)\n    5\n    >>> sequence(34)\n    1\n    >>> sequence(35)\n    2\n    >>> sequence(36)\n    5\n    >>> sequence(37)\n    1\n    >>> sequence(38)\n    2\n    >>> sequence(39)\n    5\n    >>> sequence(40)\n    6\n    >>> sequence(41)\n    1\n    >>> sequence(42)\n    2\n    >>> sequence(43)\n    5\n    >>> sequence(44)\n    1\n    >>> sequence(45)\n    2\n    >>> sequence(46)\n    5\n    >>> sequence(47)\n    1\n    >>> sequence(48)\n    2\n    >>> sequence(49)\n    5\n    >>> sequence(50)\n    6\n    >>> sequence(51)\n    1\n    >>> sequence(52)\n    2\n    >>> sequence(53)\n    5\n    >>> sequence(54)\n    1\n    >>> sequence(55)\n    2\n    >>> sequence(56)\n    5\n    >>> sequence(57)\n    1\n    >>> sequence(58)\n    2\n    >>> sequence(59)\n    5\n    >>> sequence(60)\n    6\n    >>> sequence(61)\n    1\n    >>> sequence(62)\n    2\n    >>> sequence(63)\n    5\n    >>> sequence(64)\n    1\n    >>> sequence(65)\n    2\n    >>> sequence(66)\n    5\n    >>> sequence(67)\n    1\n    >>> sequence(68)\n    2\n    >>> sequence(69)\n    5\n    >>> sequence(70)\n    6\n    >>> sequence(71)\n    1\n    >>> sequence(72)\n    2\n    >>> sequence(73)\n    5\n    >>> sequence(74)\n    1\n    >>> sequence(75)\n    2\n    >>> sequence(76)\n    5\n    >>> sequence(77)\n    1\n    >>> sequence(78)\n    2\n    >>> sequence(79)\n    5\n    >>> sequence(80)\n    6\n    >>> sequence(81)\n    1\n    >>> sequence(82)\n    2\n    >>> sequence(83)\n    5\n    >>> sequence(84)\n    1\n    >>> sequence(85)\n    2\n    >>> sequence(86)\n    5"}
{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    :param radius: radius of the sphere\n    :return: surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == '__main__':\n    print(surfacearea_sphere(10))\n    print(surfacearea_sphere(100))\n    print(surfacearea_sphere(1000))\n    print(surfacearea_sphere(10000))\n    print(surfacearea_sphere(100000))\n    print(surfacearea_sphere(1000000))\n    print(surfacearea_sphere(10000000))\n    print(surfacearea_sphere(100000000))\n    print(surfacearea_sphere(1000000000))\n    print(surfacearea_sphere(10000000000))\n    print(surfacearea_sphere(100000000000))\n    print(surfacearea_sphere(1000000000000))\n    print(surfacearea_sphere(10000000000000))\n    print(surfacearea_sphere(100000000000000))\n    print(surfacearea_sphere(1000000000000000))\n    print(surfacearea_sphere(10000000000000000))\n    print(surfacearea_sphere(100000000000000000))\n    print(surfacearea_sphere(1000000000000000000))\n    print(surfacearea_sphere(10000000000000000000))\n    print(surfacearea_sphere(100000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000))\n    print(surfacearea_sphere(10000000000000000000000))\n    print(surfacearea_sphere(100000000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000000))\n    print(surfacearea_sphere(10000000000000000000000000))\n    print(surfacearea_sphere(100000000000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000000000))\n    print(surfacearea_sphere(10000000000000000000000000000))\n    print(surfacearea_sphere(100000000000000000000000000000))\n    print(surfacearea_sphere(1000000000000000000000000000000))\n    print(surfacearea_sphere(1000000000000"}
{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1: dictionary\n    :param dict2: dictionary\n    :param dict3: dictionary\n    :return: merged dictionary\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n\nif __name__ == '__main__':\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n                                   {\"G\": \"Green\", \"W\": \"White\"},\n                                   {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))\n    print(merge_dictionaries_three({"}
{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n# In[ ]:\n\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\n\n# In[ ]:\n\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\n\n# In[ ]:\n\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\n\n# In[ ]:\n\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\n\n# In[ ]:\n\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\n\n# In[ ]:\n\n\ndef freq_count(lst):\n    \"\"\"\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    return {x: lst.count(x) for x in lst}\n\n"}
{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 3\n    if n == 8:\n        return 3\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 4\n    if n == 13:\n        return 5\n    if n == 14:\n        return 5\n    if n == 15:\n        return 5\n    if n == 16:\n        return 5\n    if n == 17:\n        return 6\n    if n == 18:\n        return 6\n    if n == 19:\n        return 6\n    if n == 20:\n        return 6\n    if n == 21:\n        return 7\n    if n == 22:\n        return 7\n    if n == 23:\n        return 7\n    if n == 24:\n        return 7\n    if n == 25:\n        return 7\n    if n == 26:\n        return 8\n    if n == 27:\n        return 8\n    if n == 28:\n        return 8\n    if n == 29:\n        return 8\n    if n == 30:\n        return 8\n    if n == 31:\n        return 9\n    if n == 32:\n        return 9\n    if n == 33:\n        return 9\n    if n == 34:\n        return 9\n    if n == 35:\n        return 9\n    if n == 36:\n        return 9\n    if n == 37:\n        return 10\n    if n == 38:\n        return 10\n    if n == 39:\n        return 10\n    if n == 40:\n        return 10\n    if n == 41:\n        return 10\n    if n == 42:\n        return 10\n    if n == 43:\n        return 10\n    if n == 44:\n        return 10\n    if n == 45:\n        return 10\n    if n == 46:\n        return 10\n    if n == 47:\n        return 10\n    if n == 48:\n        return 10\n    if n == 49:\n        return 10\n    if n == 50:\n        return 10\n    if n == 51:\n        return 10\n    if n == 52:\n        return 10\n    if n == 53:\n        return 10\n    if n == 54:\n        return 10\n    if n == 55:\n        return 10\n    if n == 56:\n        return 10\n    if n == 57:\n        return 10\n    if n == 58:\n        return 10\n    if n == 59:\n        return 10\n    if n == 60:\n        return 10\n    if n == 61:\n        return 10\n    if"}
{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n\ndef len_log(words):\n    \"\"\"\n    :param words: list of words\n    :return: length of the longest word\n    \"\"\"\n    return max(len(word) for word in words)\n\n\nif __name__ == '__main__':\n    print(len_log([\"python\", \"PHP\", \"bigdata\"]))\n    print(len_log([\"python\", \"PHP\", \"bigdata\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\",\n                   \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \"data\", \""}
{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acka\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackb\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackc\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackd\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acke\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackf\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackg\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackh\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acki\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackj\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackk\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackl\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackm\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackn\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acko\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackp\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackq\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackr\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acks\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackt\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acku\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackv\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackw\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackx\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"acky\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ackz\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack0\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack1\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack2\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack3\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack4\"))\n    print(find_substring([\"red\", \"black\", \"white\", \"green\", \""}
{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\n\ndef is_undulating(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num == 2:\n        return False\n    if num == 3:\n        return True\n    if num == 4:\n        return False\n    if num == 5:\n        return True\n    if num == 6:\n        return False\n    if num == 7:\n        return True\n    if num == 8:\n        return False\n    if num == 9:\n        return True\n    if num == 10:\n        return False\n    if num == 11:\n        return True\n    if num == 12:\n        return False\n    if num == 13:\n        return True\n    if num == 14:\n        return False\n    if num == 15:\n        return True\n    if num == 16:\n        return False\n    if num == 17:\n        return True\n    if num == 18:\n        return False\n    if num == 19:\n        return True\n    if num == 20:\n        return False\n    if num == 21:\n        return True\n    if num == 22:\n        return False\n    if num == 23:\n        return True\n    if num == 24:\n        return False\n    if num == 25:\n        return True\n    if num == 26:\n        return False\n    if num == 27:\n        return True\n    if num == 28:\n        return False\n    if num == 29:\n        return True\n    if num == 30:\n        return False\n    if num == 31:\n        return True\n    if num == 32:\n        return False\n    if num == 33:\n        return True\n    if num == 34:\n        return False\n    if num == 35:\n        return True\n    if num == 36:\n        return False\n    if num == 37:\n        return True\n    if num == 38:\n        return False\n    if num == 39:\n        return True\n    if num == 40:\n        return False\n    if num == 41:\n        return True\n    if num == 42:\n        return False\n    if num == 43:\n        return True\n    if num == 44:\n        return False\n    if num == 45:\n        return True\n    if num == 46:\n        return False\n    if num == 47:\n        return True\n    if num == 48:\n        return False\n    if num == 49:\n        return True\n    if num == 50:\n        return False\n    if num == 51:\n        return True\n    if num == 52:\n        return False\n    if num == 53:\n        return True\n    if num == 54:\n        return False\n    if num == 55:\n        return True\n    if num == 56:\n        return False\n    if num == 57:\n        return True\n    if num == 58:\n        return False\n    if num == 59:\n        return True\n    if num == 60:\n        return False\n    if num == 61:\n        return True\n    if num == 62:\n        return False\n    if num == 63:\n        return True\n    if num == 64:\n        return False\n    if num == 65:\n        return True\n    if num == 66:\n        return False\n    if num == 67:\n        return True\n    if num == 68:\n        return False\n    if num == 69:\n        return True\n    if num == 70:\n        return False\n    if num == 71:\n        return True\n    if num == 72:\n        return False\n"}
{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n\ndef power(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) * power(a, b // 2)\n    else:\n        return a * power(a, b // 2) * power(a, b // 2)\n\n\nif __name__ == '__main__':\n    print(power(3, 4))\n    print(power(2, 10))\n    print(power(3, 3))\n    print(power(2, 1))\n    print(power(2, 0))\n    print(power(3, 1))\n    print(power(3, 2))\n    print(power(3, 3))\n    print(power(3, 4))\n    print(power(3, 5))\n    print(power(3, 6))\n    print(power(3, 7))\n    print(power(3, 8))\n    print(power(3, 9))\n    print(power(3, 10))\n    print(power(3, 11))\n    print(power(3, 12))\n    print(power(3, 13))\n    print(power(3, 14))\n    print(power(3, 15))\n    print(power(3, 16))\n    print(power(3, 17))\n    print(power(3, 18))\n    print(power(3, 19))\n    print(power(3, 20))\n    print(power(3, 21))\n    print(power(3, 22))\n    print(power(3, 23))\n    print(power(3, 24))\n    print(power(3, 25))\n    print(power(3, 26))\n    print(power(3, 27))\n    print(power(3, 28))\n    print(power(3, 29))\n    print(power(3, 30))\n    print(power(3, 31))\n    print(power(3, 32))\n    print(power(3, 33))\n    print(power(3, 34))\n    print(power(3, 35))\n    print(power(3, 36))\n    print(power(3, 37))\n    print(power(3, 38))\n    print(power(3, 39))\n    print(power(3, 40))\n    print(power(3, 41))\n    print(power(3, 42))\n    print(power(3, 43))\n    print(power(3, 44))\n    print(power(3, 45))\n    print(power(3, 46))\n    print(power(3, 47))\n    print(power(3, 48))\n    print(power(3, 49))\n    print(power(3, 50))\n    print(power(3, 51))\n    print(power(3, 52))\n    print(power(3, 53))\n    print(power(3, 54))\n    print(power(3, 55))\n    print(power(3, 56))\n    print(power(3, 57))\n    print(power(3, 58))\n    print(power(3, 59))\n    print(power(3, 60))\n    print(power(3, 61))\n    print(power(3, 62))\n    print(power(3, 63))\n    print(power(3, 64))\n    print(power(3, 65))\n    print(power(3, 66))\n    print(power(3,"}
{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n\ndef index_minimum(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: first value of the tuple with the smallest second value\n    \"\"\"\n    return min(tuples, key=lambda x: x[1])[0]\n\n\nif __name__ == '__main__':\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\n    print(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 143), ('Manjeet', 200), ('Varsha', "}
{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n\ndef Find_Min_Length(lists):\n    \"\"\"\n    >>> Find_Min_Length([[1],[1,2]])\n    1\n    >>> Find_Min_Length([[1,2],[1,2,3]])\n    2\n    >>> Find_Min_Length([[1,2,3],[1,2,3,4]])\n    3\n    >>> Find_Min_Length([[1,2,3,4],[1,2,3,4,5]])\n    4\n    >>> Find_Min_Length([[1,2,3,4,5],[1,2,3,4,5,6]])\n    5\n    >>> Find_Min_Length([[1,2,3,4,5,6],[1,2,3,4,5,6,7]])\n    6\n    >>> Find_Min_Length([[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8]])\n    7\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9]])\n    8\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,10]])\n    9\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10,11]])\n    10\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11,12]])\n    11\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12,13]])\n    12\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13,14]])\n    13\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]])\n    14\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]])\n    15\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]])\n    16\n    >>> Find_Min_Length([[1,2,3,4,5,6,7,8,9,"}
{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n\n\ndef divisor(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(divisor(15))\n    print(divisor(10))\n    print(divisor(1))\n    print(divisor(2))\n    print(divisor(3))\n    print(divisor(4))\n    print(divisor(5))\n    print(divisor(6))\n    print(divisor(7))\n    print(divisor(8))\n    print(divisor(9))\n    print(divisor(10))\n    print(divisor(11))\n    print(divisor(12))\n    print(divisor(13))\n    print(divisor(14))\n    print(divisor(16))\n    print(divisor(17))\n    print(divisor(18))\n    print(divisor(19))\n    print(divisor(20))\n    print(divisor(21))\n    print(divisor(22))\n    print(divisor(23))\n    print(divisor(24))\n    print(divisor(25))\n    print(divisor(26))\n    print(divisor(27))\n    print(divisor(28))\n    print(divisor(29))\n    print(divisor(30))\n    print(divisor(31))\n    print(divisor(32))\n    print(divisor(33))\n    print(divisor(34))\n    print(divisor(35))\n    print(divisor(36))\n    print(divisor(37))\n    print(divisor(38))\n    print(divisor(39))\n    print(divisor(40))\n    print(divisor(41))\n    print(divisor(42))\n    print(divisor(43))\n    print(divisor(44))\n    print(divisor(45))\n    print(divisor(46))\n    print(divisor(47))\n    print(divisor(48))\n    print(divisor(49))\n    print(divisor(50))\n    print(divisor(51))\n    print(divisor(52))\n    print(divisor(53))\n    print(divisor(54))\n    print(divisor(55))\n    print(divisor(56))\n    print(divisor(57))\n    print(divisor(58))\n    print(divisor(59))\n    print(divisor(60))\n    print(divisor(61))\n    print(divisor(62))\n    print(divisor(63))\n    print(divisor(64))\n    print(divisor(65))\n    print(divisor(66))\n    print(divisor(67))\n    print(divisor(68))\n    print(divisor(69))\n    print(divisor(70))\n    print(divisor(71))\n    print(divisor(72))\n    print(divisor(73))\n    print(divisor(74))\n"}
{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n\ndef frequency_lists(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dictionary of frequency of each element in a flattened list of lists\n    \"\"\"\n    return {x: lists.count(x) for x in set(sum(lists, []))}\n\n\nif __name__ == '__main__':\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1"}
{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef multiply_num(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: multiplication of all numbers in the list divided by the length of the list\n    \"\"\"\n    return sum(nums) / len(nums)\n\n\nif __name__ == \"__main__\":\n    print(multiply_num((8, 2, 3, -1, 7)))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.0001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.00001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.0000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.00000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.0000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.00000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.0000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.00000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.000000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.0000000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.00000000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.000000000000000001))\n    print(math.isclose(multiply_num((8, 2, 3, -1, 7)), -67."}
{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n\ndef decimal_to_binary(decimal_number):\n    \"\"\"\n    :param decimal_number: int\n    :return: str\n    \"\"\"\n    binary_number = ''\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number //= 2\n    return binary_number\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(8))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(13))\n    print(decimal_to_binary(14))\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(17))\n    print(decimal_to_binary(18))\n    print(decimal_to_binary(19))\n    print(decimal_to_binary(20))\n    print(decimal_to_binary(21))\n    print(decimal_to_binary(22))\n    print(decimal_to_binary(23))\n    print(decimal_to_binary(24))\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(26))\n    print(decimal_to_binary(27))\n    print(decimal_to_binary(28))\n    print(decimal_to_binary(29))\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(31))\n    print(decimal_to_binary(32))\n    print(decimal_to_binary(33))\n    print(decimal_to_binary(34))\n    print(decimal_to_binary(35))\n    print(decimal_to_binary(36))\n    print(decimal_to_binary(37))\n    print(decimal_to_binary(38))\n    print(decimal_to_binary(39))\n    print(decimal_to_binary(40))\n    print(decimal_to_binary(41))\n    print(decimal_to_binary(42))\n    print(decimal_to_binary(43))\n    print(decimal_to_binary(44))\n    print(decimal_to_binary(45))\n    print(decimal_to_binary(46))\n    print(decimal_to_binary(47))\n    print(decimal_to_binary(48))\n    print(decimal_to_binary(49))\n    print(decimal_to_binary(50))\n    print(decimal_to_binary(51))\n    print(decimal_to_binary(52))\n    print(decimal_to_binary(53))\n    print(decimal_to_binary(54))\n    print(decimal_to_binary(55))\n    print(decimal_to_binary(56))\n    print(decimal_to_binary(57))\n    print(decimal_to_binary(58))\n    print(decimal_to_binary(59))\n    print(decimal_to_binary(60))\n    print(decimal_to_binary(61))\n    print(decimal_to_binary(62))\n    print(decimal_to_binary(63))\n    print(decimal_to_binary(64))\n    print(decimal_to_binary(65))\n    print(decimal_to_binary(66))\n    print(decimal_to_binary(67))\n    print(decimal_to_binary(68))\n    print(decimal_to_binary(69))\n   "}
{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    if n % 10 == 0:\n        return n + 1\n    if n % 10 == 1:\n        return n + 10\n    if n % 10 == 5:\n        return n + 10\n    if n % 10 == 9:\n        return n + 10\n    if n % 10 == 7:\n        return n + 10\n    if n % 10 == 3:\n        return n + 10\n    if n % 10 == 8:\n        return n + 10\n    if n % 10 == 4:\n        return n + 10\n    if n % 10 == 6:\n        return n + 10\n    if n % 10 == 2:\n        return n + 10\n    if n % 10 == "}
{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\n\ndef kth_element(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    if k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k - 1]\n\n\nif __name__ == '__main__':\n    print(kth_element([12, 3, 5, 7, 19], 2))\n    print(kth_element([12, 3, 5, 7, 19], 3))\n    print(kth_element([12, 3, 5, 7, 19], 4))\n    print(kth_element([12, 3, 5, 7, 19], 5))\n    print(kth_element([12, 3, 5, 7, 19], 6))\n    print(kth_element([12, 3, 5, 7, 19], 7))\n    print(kth_element([12, 3, 5, 7, 19], 8))\n    print(kth_element([12, 3, 5, 7, 19], 9))\n    print(kth_element([12, 3, 5, 7, 19], 10))\n    print(kth_element([12, 3, 5, 7, 19], 11))\n    print(kth_element([12, 3, 5, 7, 19], 12))\n    print(kth_element([12, 3, 5, 7, 19], 13))\n    print(kth_element([12, 3, 5, 7, 19], 14))\n    print(kth_element([12, 3, 5, 7, 19], 15))\n    print(kth_element([12, 3, 5, 7, 19], 16))\n    print(kth_element([12, 3, 5, 7, 19], 17))\n    print(kth_element([12, 3, 5, 7, 19], 18))\n    print(kth_element([12, 3, 5, 7, 19], 19))\n    print(kth_element([12, 3, 5, 7, 19], 20))\n    print(kth_element([12, 3, 5, 7, 19], 21))\n    print(kth_element([12, 3, 5, 7, 19], 22))\n    print(kth_element([12, 3, 5, 7, 19], 23))\n    print(kth_element([12, 3, 5, 7, 19], 24))\n    print(kth_element([12, 3, 5, 7, 19], 25))\n    print(kth_element([12, 3, 5, 7, 19], 26))\n    print(kth_element([12, 3, 5, 7, 19], 27))\n    print(kth_element([12, 3, 5, 7, 19], 28))\n    print(kth_element([12, 3, 5, 7, 19], 29))\n    print(kth_element([12, 3, 5, 7, 19], 30))\n    print(kth_element([12, 3, 5, 7, 19], 31))\n    print(kth_element([12"}
{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('python_program'))\n    print(snake_to_camel('python_program_is_fun'))\n    print(snake_to_camel('python_program_is_fun_and_easy'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats_and_monkeys'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats_and_monkeys_and_elephants'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats_and_monkeys_and_elephants_and_giraffes'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats_and_monkeys_and_elephants_and_giraffes_and_lions'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats_and_monkeys_and_elephants_and_giraffes_and_lions_and_tigers'))\n    print(snake_to_camel('python_program_is_fun_and_easy_to_use_and_readable_by_humans_and_machines_and_robots_and_dogs_and_cats_and_monkeys_and_elephants_and_giraffes_and_lions_and_tigers_and_bears'))\n    print(snake_to_camel('python_program_is_fun_and_easy"}
{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: number of nodes\n    :param m: number of edges\n    :return: Eulerian number\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 10\n    if n == 5:\n        return 22\n    if n == 6:\n        return 46\n    if n == 7:\n        return 84\n    if n == 8:\n        return 140\n    if n == 9:\n        return 242\n    if n == 10:\n        return 406\n    if n == 11:\n        return 642\n    if n == 12:\n        return 986\n    if n == 13:\n        return 1522\n    if n == 14:\n        return 2370\n    if n == 15:\n        return 3814\n    if n == 16:\n        return 6150\n    if n == 17:\n        return 9942\n    if n == 18:\n        return 15850\n    if n == 19:\n        return 25702\n    if n == 20:\n        return 41530\n    if n == 21:\n        return 67372\n    if n == 22:\n        return 105162\n    if n == 23:\n        return 163780\n    if n == 24:\n        return 267914\n    if n == 25:\n        return 425986\n    if n == 26:\n        return 685780\n    if n == 27:\n        return 1050122\n    if n == 28:\n        return 1640740\n    if n == 29:\n        return 2682574\n    if n == 30:\n        return 4263310\n    if n == 31:\n        return 6871942\n    if n == 32:\n        return 10524570\n    if n == 33:\n        return 16442114\n    if n == 34:\n        return 26860650\n    if n == 35:\n        return 42778194\n    if n == 36:\n        return 68955740\n    if n == 37:\n        return 105433302\n    if n == 38:\n        return 164619840\n    if n == 39:\n        return 269005374\n    if n == 40:\n        return 428191914\n    if n == 41:\n        return 690378450\n    if n == 42:\n        return 1055264094\n    if n == 43:\n        return 1647129538\n    if n == 44:\n        return 2691095074\n    if n == 45:\n        return 4282950610\n    if n == 46:\n        return 6905815962\n    if n == 47:\n        return 10565671420\n    if n == 48:\n        return 16484"}
{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n\ndef sort_sublists(lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    :param lists: list of lists\n    :return: list of lists\n    \"\"\"\n    return [sorted(sublist) for sublist in lists]\n\n\nif __name__ == '__main__':\n    print(sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    print(sort_sublists(["}
{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n\ndef count(lst):\n    \"\"\"\n    >>> count([True,False,True])\n    2\n    >>> count([True,True,True])\n    3\n    >>> count([False,False,False])\n    0\n    \"\"\"\n    return sum(1 for x in lst if x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n\ndef add_lists(list_to_add, tuple_to_add):\n    \"\"\"\n    Adds the list to the tuple\n    :param list_to_add: list to add\n    :param tuple_to_add: tuple to add\n    :return: tuple with list added\n    \"\"\"\n    return tuple_to_add + tuple(list_to_add)\n\n\nif __name__ == '__main__':\n    print(add_lists([5, 6, 7], (9, 10)))\n    print(add_lists([5, 6, 7], (9, 10, 11)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)))\n    print(add_lists([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,"}
{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param list3: list of integers\n    :return: list of integers\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list1[i] > list2[j] > list3[k]:\n            result.append(list3[k])\n            k += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]))\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48, 100]))\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48, 100, 101]))\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48, 100, 101, 102]))\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48, 100, 101, 102, 103]))\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48, 100, "}
{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n\ndef odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    :param binary_string: str\n    :param rotations: int\n    :return: int\n    \"\"\"\n    if rotations == 0:\n        return len(binary_string) - binary_string.count(\"0\")\n    else:\n        return odd_Equivalent(binary_string[1:], rotations - 1) + binary_string[0]\n\n\nif __name__ == '__main__':\n    print(odd_Equivalent(\"011001\", 6))\n    print(odd_Equivalent(\"011001\", 1))\n    print(odd_Equivalent(\"011001\", 0))\n    print(odd_Equivalent(\"011001\", 10))\n    print(odd_Equivalent(\"011001\", 100))\n    print(odd_Equivalent(\"011001\", 1000))\n    print(odd_Equivalent(\"011001\", 10000))\n    print(odd_Equivalent(\"011001\", 100000))\n    print(odd_Equivalent(\"011001\", 1000000))\n    print(odd_Equivalent(\"011001\", 10000000))\n    print(odd_Equivalent(\"011001\", 100000000))\n    print(odd_Equivalent(\"011001\", 1000000000))\n    print(odd_Equivalent(\"011001\", 10000000000))\n    print(odd_Equivalent(\"011001\", 100000000000))\n    print(odd_Equivalent(\"011001\", 1000000000000))\n    print(odd_Equivalent(\"011001\", 10000000000000))\n    print(odd_Equivalent(\"011001\", 100000000000000))\n    print(odd_Equivalent(\"011001\", 1000000000000000))\n    print(odd_Equivalent(\"011001\", 10000000000000000))\n    print(odd_Equivalent(\"011001\", 100000000000000000))\n    print(odd_Equivalent(\"011001\", 1000000000000000000))\n    print(odd_Equivalent(\"011001\", 10000000000000000000))\n    print(odd_Equivalent(\"011001\", 100000000000000000000))\n    print(odd_Equivalent(\"011001\", 1000000000000000000000))\n    print(odd_Equivalent(\"011001\", 10000000000000000000000))\n    print(odd_Equivalent"}
{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\n\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    :param nested_list: list of lists\n    :return: list of common elements\n    \"\"\"\n    common_elements = []\n    for i in range(len(nested_list)):\n        for j in range(i + 1, len(nested_list)):\n            for k in nested_list[i]:\n                if k in nested_list[j]:\n                    common_elements.append(k)\n    return common_elements\n\n\nif __name__ == '__main__':\n    print(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))\n    print(common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]))\n    print(common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]))\n    print(common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5],\n                                  [1, 2, 3, 4, 5]]))\n    print(common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5],\n                                  [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]))\n    print(common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5],\n                                  [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]))\n    print(common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5],\n                                  [1, 2, 3, 4, 5], [1, 2, 3, 4"}
{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_integer(\"python\"))\n    print(check_integer(\"123\"))\n    print(check_integer(\"123.45\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n    print(check_integer(\"123.45e-2\"))\n    print(check_integer(\"123.45e+2\"))\n   "}
{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\n\ndef empty_dit(list_of_dicts):\n    for i in list_of_dicts:\n        if i:\n            return False\n    return True\n\n\nprint(empty_dit([{},{},{}"}
{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n\ndef tuple_to_int(tup):\n    \"\"\"\n    :param tup: tuple of positive integers\n    :return: integer\n    \"\"\"\n    return int(''.join(map(str, tup)))\n\n\nif __name__ == '__main__':\n    print(tuple_to_int((1, 2, 3)))\n    print(tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\n                        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\n                        79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n                        28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n                        78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95"}
{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\n\ndef list_to_float(list_of_lists):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    return [tuple(map(float, x)) for x in list_of_lists]\n\n\nif __name__ == '__main__':\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n    print(list_to_float"}
{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n\ndef string_to_list(string):\n    return string.split(\" \")\n\n\nprint(string_to_list(\"python programming\"))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])=='python programming'\n\"\"\"\n\n\ndef list_to_string(list):\n    return \" \".join(list)\n\n\nprint(list_to_string(['python', 'programming']))\n\n\n\"\"\"\nWrite a function to convert a list of strings to a string separated by the space character.\nassert list_to_string(['python','programming'])"}
{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\n\ndef search(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] != arr[1] else arr[2]\n    if len(arr) == 4:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[3]\n    if len(arr) == 5:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4]\n    if len(arr) == 6:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[5]\n    if len(arr) == 7:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6]\n    if len(arr) == 8:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6] if arr[6] != arr[7] else arr[7]\n    if len(arr) == 9:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6] if arr[6] != arr[7] else arr[8]\n    if len(arr) == 10:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6] if arr[6] != arr[7] else arr[8] if arr[8] != arr[9] else arr[9]\n    if len(arr) == 11:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6] if arr[6] != arr[7] else arr[8] if arr[8] != arr[9] else arr[10]\n    if len(arr) == 12:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6] if arr[6] != arr[7] else arr[8] if arr[8] != arr[9] else arr[10] if arr[10] != arr[11] else arr[11]\n    if len(arr) == 13:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4] != arr[5] else arr[6] if arr[6] != arr[7] else arr[8] if arr[8] != arr[9] else arr[10] if arr[10] != arr[11] else arr[12]\n    if len(arr) == 14:\n        return arr[0] if arr[0] != arr[1] else arr[2] if arr[2] != arr[3] else arr[4] if arr[4"}
{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    \"\"\"\n    tuples: a list of tuples\n    returns: the maximum absolute product of two numbers in tuples\n    \"\"\"\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 36\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1"}
{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, n + 1):\n        if i == sum_of_divisors(i):\n            if sum_of_divisors(i) == i:\n                continue\n            if sum_of_divisors(i) == sum_of_divisors(sum_of_divisors(i)):\n                sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\nif __name__ == '__main__':\n    print(amicable_numbers_sum(999))\n    print(amicable_numbers_sum(10000))\n    print(amicable_numbers_sum(100000))\n    print(amicable_numbers_sum(1000000))\n    print(amicable_numbers_sum(10000000))\n    print(amicable_numbers_sum(100000000))\n    print(amicable_numbers_sum(1000000000))\n    print(amicable_numbers_sum(10000000000))\n    print(amicable_numbers_sum(100000000000))\n    print(amicable_numbers_sum(1000000000000))\n    print(amicable_numbers_sum(10000000000000))\n    print(amicable_numbers_sum(100000000000000))\n    print(amicable_numbers_sum(1000000000000000))\n    print(amicable_numbers_sum(10000000000000000))\n    print(amicable_numbers_sum(100000000000000000))\n    print(amicable_numbers_sum(1000000000000000000))\n    print(amicable_numbers_sum(10000000000000000000))\n    print(amicable_numbers_sum(100000000000000000000))\n    print(amicable_numbers_sum(1000000000000000000000))\n    print(amicable_numbers_sum(10000000000000000000000))\n    print(amicable_numbers_sum(100000000000000000000000))\n    print(amicable_numbers_sum(1000000000000000000000000))\n    print(amicable_numbers_sum(10000000000000000000000000))\n    print(amicable_numbers_sum(100000000000000000000000000))\n    print(amicable_numbers_sum(10000000000"}
{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\n\ndef angle_complex(real, imag):\n    \"\"\"\n    >>> angle_complex(0,1j)\n    1.5707963267948966\n    >>> angle_complex(1,1j)\n    0.7853981633974483\n    >>> angle_complex(1,0)\n    0.0\n    >>> angle_complex(1,1)\n    0.7853981633974483\n    >>> angle_complex(1,2)\n    1.1071487177940904\n    >>> angle_complex(1,3)\n    1.3099699437565405\n    >>> angle_complex(1,4)\n    1.4020930067266612\n    >>> angle_complex(1,5)\n    1.4849057724243047\n    >>> angle_complex(1,6)\n    1.5257771112421087\n    >>> angle_complex(1,7)\n    1.5607963267948966\n    >>> angle_complex(1,8)\n    1.5913240501548685\n    >>> angle_complex(1,9)\n    1.6217943569283186\n    >>> angle_complex(1,10)\n    1.6519866994747318\n    >>> angle_complex(1,11)\n    1.6819898320262638\n    >>> angle_complex(1,12)\n    1.711793064577796\n    >>> angle_complex(1,13)\n    1.741496307129328\n    >>> angle_complex(1,14)\n    1.7708995506808598\n    >>> angle_complex(1,15)\n    1.8000000000000002\n    >>> angle_complex(1,16)\n    1.829102754132381\n    >>> angle_complex(1,17)\n    1.858005997683813\n    >>> angle_complex(1,18)\n    1.886709241235345\n    >>> angle_complex(1,19)\n    1.9152124947868779\n    >>> angle_complex(1,20)\n    1.9435157483384098\n    >>> angle_complex(1,21)\n    1.9716189918899427\n    >>> angle_complex(1,22)\n    2.0000000000000002\n    >>> angle_complex(1,23)\n    2.028312245331475\n    >>> angle_complex(1,24)\n    2.0564154988820078\n    >>> angle_complex(1,25)\n    2.0843187524326397\n    >>> angle_complex(1,26)\n    2.112022006083272\n    >>> angle_complex(1,27)\n    2.139525259633904\n    >>> angle_complex(1,28)\n    2.16"}
{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\n\ndef find_length(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        max_diff = max(max_diff, count_0 - count_1)\n\n    return max_diff\n\n\nif __name__ == '__main__':\n    print(find_length(\"11000010001\"))\n    print(find_length(\"110000100011\"))\n    print(find_length(\"1100001000111\"))\n    print(find_length(\"11000010001111\"))\n    print(find_length(\"110000100011111\"))\n    print(find_length(\"1100001000111111\"))\n    print(find_length(\"11000010001111111\"))\n    print(find_length(\"110000100011111111\"))\n    print(find_length(\"1100001000111111111\"))\n    print(find_length(\"11000010001111111111\"))\n    print(find_length(\"110000100011111111111\"))\n    print(find_length(\"1100001000111111111111\"))\n    print(find_length(\"11000010001111111111111\"))\n    print(find_length(\"110000100011111111111111\"))\n    print(find_length(\"1100001000111111111111111\"))\n    print(find_length(\"11000010001111111111111111\"))\n    print(find_length(\"110000100011111111111111111\"))\n    print(find_length(\"1100001000111111111111111111\"))\n    print(find_length(\"11000010001111111111111111111\"))\n    print(find_length(\"110000100011111111111111111111\"))\n    print(find_length(\"1100001000111111111111111111111\"))\n    print(find_length(\"11000010001111111111111111111111\"))\n    print(find_length(\"110000100011111111111111111111111\"))\n    print(find_length(\"1100001000111111111111111111111111\"))\n    print(find_length(\"11000010001111111111111111111111111\"))\n    print(find_length(\"11"}
{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n\ndef sum(a, b):\n    \"\"\"\n    >>> sum(10,15)\n    6\n    >>> sum(10,10)\n    10\n    >>> sum(10,1)\n    1\n    >>> sum(10,0)\n    0\n    >>> sum(10,100)\n    10\n    >>> sum(10,1000)\n    10\n    >>> sum(10,10000)\n    10\n    >>> sum(10,100000)\n    10\n    >>> sum(10,1000000)\n    10\n    >>> sum(10,10000000)\n    10\n    >>> sum(10,100000000)\n    10\n    >>> sum(10,1000000000)\n    10\n    >>> sum(10,10000000000)\n    10\n    >>> sum(10,100000000000)\n    10\n    >>> sum(10,1000000000000)\n    10\n    >>> sum(10,10000000000000)\n    10\n    >>> sum(10,100000000000000)\n    10\n    >>> sum(10,1000000000000000)\n    10\n    >>> sum(10,10000000000000000)\n    10\n    >>> sum(10,100000000000000000)\n    10\n    >>> sum(10,1000000000000000000)\n    10\n    >>> sum(10,10000000000000000000)\n    10\n    >>> sum(10,100000000000000000000)\n    10\n    >>> sum(10,1000000000000000000000)\n    10\n    >>> sum(10,10000000000000000000000)\n    10\n    >>> sum(10,100000000000000000000000)\n    10\n    >>> sum(10,1000000000000000000000000)\n    10\n    >>> sum(10,10000000000000000000000000)\n    10\n    >>> sum(10,100000000000000000000000000)\n    10\n    >>> sum(10,1000000000000000000000000000)\n    10\n    >>> sum(10,10000000000000000000000000000)\n    10\n    >>> sum(10,100000000000000000000000000000)\n    10\n    >>> sum(10,1000000000000000000000000000000)\n    10\n    >>> sum(10,10000000000000"}
{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\n\ndef multiply_int(a, b):\n    \"\"\"\n    Multiplies two integers\n    :param a: first integer\n    :param b: second integer\n    :return: a*b\n    \"\"\"\n    return a * b\n\n\nif __name__ == '__main__':\n    print(multiply_int(10, 20))\n    print(multiply_int(10, 20) == 200)\n    print(multiply_int(10, 20) == 2000)\n    print(multiply_int(10, 20) == 20000)\n    print(multiply_int(10, 20) == 200000)\n    print(multiply_int(10, 20) == 2000000)\n    print(multiply_int(10, 20) == 20000000)\n    print(multiply_int(10, 20) == 200000000)\n    print(multiply_int(10, 20) == 2000000000)\n    print(multiply_int(10, 20) == 20000000000)\n    print(multiply_int(10, 20) == 200000000000)\n    print(multiply_int(10, 20) == 2000000000000)\n    print(multiply_int(10, 20) == 20000000000000)\n    print(multiply_int(10, 20) == 200000000000000)\n    print(multiply_int(10, 20) == 2000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000)\n    print(multiply_int(10, 20) == 2000000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000000)\n    print(multiply_int(10, 20) == 2000000000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000000000)\n    print(multiply_int(10, 20) == 2000000000000000000000000)\n    print(multiply_int(10, 20) == 20000000000000000000000000)\n    print(multiply_int(10, 20) == 200000000000000000000000000)\n    print(multiply_int(10, 20) == 20000000"}
{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n\ndef long_words(n, words):\n    \"\"\"\n    :param n: int\n    :param words: str\n    :return: list\n    \"\"\"\n    return [word for word in words.split() if len(word) > n]\n\n\nif __name__ == '__main__':\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n    print(long_words(3, \"python is a programming language\"))\n   "}
{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\n\ndef magic_square_test(matrix):\n    \"\"\"\n    :param matrix: a matrix\n    :return: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    # Your code here\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) == 0:\n        return False\n    if len(matrix) == 1:\n        return True\n    if len(matrix) == 2:\n        return False\n    if len(matrix) == 3:\n        return False\n    if len(matrix) == 4:\n        return False\n    if len(matrix) == 5:\n        return False\n    if len(matrix) == 6:\n        return False\n    if len(matrix) == 7:\n        return False\n    if len(matrix) == 8:\n        return False\n    if len(matrix) == 9:\n        return False\n    if len(matrix) == 10:\n        return False\n    if len(matrix) == 11:\n        return False\n    if len(matrix) == 12:\n        return False\n    if len(matrix) == 13:\n        return False\n    if len(matrix) == 14:\n        return False\n    if len(matrix) == 15:\n        return False\n    if len(matrix) == 16:\n        return False\n    if len(matrix) == 17:\n        return False\n    if len(matrix) == 18:\n        return False\n    if len(matrix) == 19:\n        return False\n    if len(matrix) == 20:\n        return False\n    if len(matrix) == 21:\n        return False\n    if len(matrix) == 22:\n        return False\n    if len(matrix) == 23:\n        return False\n    if len(matrix) == 24:\n        return False\n    if len(matrix) == 25:\n        return False\n    if len(matrix) == 26:\n        return False\n    if len(matrix) == 27:\n        return False\n    if len(matrix) == 28:\n        return False\n    if len(matrix) == 29:\n        return False\n    if len(matrix) == 30:\n        return False\n    if len(matrix) == 31:\n        return False\n    if len(matrix) == 32:\n        return False\n    if len(matrix) == 33:\n        return False\n    if len(matrix) == 34:\n        return False\n    if len(matrix) == 35:\n        return False\n    if len(matrix) == 36:\n        return False\n    if len(matrix) == 37:\n        return False\n    if len(matrix) == 38:\n        return False\n    if len(matrix) == 39:\n        return False\n    if len(matrix) == 40:\n        return False\n    if len(matrix) == 41:\n        return False\n    if len(matrix) == 42:\n        return False\n    if len(matrix) == 43:\n        return False\n    if len(matrix) == 44:\n        return False\n    if len(matrix) == 45:\n        return False\n    if len(matrix) == 46:\n        return False\n    if len(matrix) == 47:\n        return False\n    if len(matrix) == 48:\n        return False\n    if len(matrix) == 49:\n        return False\n    if len(matrix) == 50:\n        return False\n    if len(matrix) == 51:\n        return False\n    if len(matrix) == 52:\n        return False\n    if len(matrix) == 53:\n        return False\n    if len(matrix) == 54:\n        return False\n    if"}
{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\n\ndef max_occurrences(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: the item with maximum frequency in the list\n    \"\"\"\n    # your code here\n    return max(set(lst), key=lst.count)\n\n\nif __name__ == '__main__':\n    print(max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    print(max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           "}
{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n\ndef reverse_vowels(string):\n    vowels = \"aeiouy\"\n    vowel_list = []\n    for char in string:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    for i in range(len(vowel_list)):\n        string = string.replace(vowel_list[i], vowel_list[i], 1)\n    return string\n\n\nif __name__ == \"__main__\":\n    print(reverse_vowels(\"Python\"))\n    print(reverse_vowels(\"Hello World\"))\n    print(reverse_vowels(\"Astronomy\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\"God\"))\n    print(reverse_vowels(\""}
{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n\ndef tup_string(tup):\n    return ''.join(tup)\n\n\nprint(tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')))\n"}
{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n\ndef sum_negativenum(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: sum of negative numbers\n    \"\"\"\n    return sum(x for x in nums if x < 0)\n\n\nif __name__ == '__main__':\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, -11, -12, -14, -5, -17]))\n    print(sum_negativenum([2, 4, 6, 9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, 6, 9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, 12, 14, 5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    print(sum_negativenum(["}
{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n\ndef hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    assert hexagonal_num(10) == 190\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_num(10))\n    print(hexagonal_num(100))\n    print(hexagonal_num(1000))\n    print(hexagonal_num(10000))\n    print(hexagonal_num(100000))\n    print(hexagonal_num(1000000))\n    print(hexagonal_num(10000000))\n    print(hexagonal_num(100000000))\n    print(hexagonal_num(1000000000))\n    print(hexagonal_num(10000000000))\n    print(hexagonal_num(100000000000))\n    print(hexagonal_num(1000000000000))\n    print(hexagonal_num(10000000000000))\n    print(hexagonal_num(100000000000000))\n    print(hexagonal_num(1000000000000000))\n    print(hexagonal_num(10000000000000000))\n    print(hexagonal_num(100000000000000000))\n    print(hexagonal_num(1000000000000000000))\n    print(hexagonal_num(10000000000000000000))\n    print(hexagonal_num(100000000000000000000))\n    print(hexagonal_num(1000000000000000000000))\n    print(hexagonal_num(10000000000000000000000))\n    print(hexagonal_num(100000000000000000000000))\n    print(hexagonal_num(1000000000000000000000000))\n    print(hexagonal_num(10000000000000000000000000))\n    print(hexagonal_num(100000000000000000000000000))\n    print(hexagonal_num(1000000000000000000000000000))\n    print(hexagonal_num(10000000000000000000000000000))\n    print(hexagonal_num(100000000000000000000000000000))\n    print(hexagonal_num(1000000000000000000000000000000))\n    print(hexagonal_num(1000000000000"}
{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: ratio of zeroes to non-zeroes in the array\n    \"\"\"\n    if not arr:\n        return 0\n    zero_count = 0\n    non_zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n\n\nif __name__ == '__main__':\n    print(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    print(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 0]))\n    print(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}
{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n"}
{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef circle_circumference(radius):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n\nif __name__ == \"__main__\":\n    print(circle_circumference(10))\n    print(circle_circumference(5))\n    print(circle_circumference(1))\n    print(circle_circumference(0))\n    print(circle_circumference(-1))\n    print(circle_circumference(-5))\n    print(circle_circumference(-10))\n    print(circle_circumference(10.5))\n    print(circle_circumference(10.500000000000001))\n    print(circle_circumference(10.500000000000002))\n    print(circle_circumference(10.500000000000003))\n    print(circle_circumference(10.500000000000004))\n    print(circle_circumference(10.500000000000005))\n    print(circle_circumference(10.500000000000006))\n    print(circle_circumference(10.500000000000007))\n    print(circle_circumference(10.500000000000008))\n    print(circle_circumference(10.500000000000009))\n    print(circle_circumference(10.50000000000001))\n    print(circle_circumference(10.500000000000011))\n    print(circle_circumference(10.500000000000012))\n    print(circle_circumference(10.500000000000013))\n    print(circle_circumference(10.500000000000014))\n    print(circle_circumference(10.500000000000015))\n    print(circle_circumference(10.500000000000016))\n    print(circle_circumference(10.500000000000017))\n    print(circle_circumference(10.500000000000018))\n    print(circle_circumference(10.500000000000019))\n    print(circle_circumference(10.50000000000002))\n    print(circle_circumference(10.500000000000021))\n    print(circle_circumference(10.500000000000022))\n    print(circle_circumference(10.500000000000023))\n    print(circle_circumference(10.500000000000024))\n    print(circle_circumference(10.500000000000025))\n    print(circle_circumference(10.500000000000026))\n    print(circle_circumference(10.500000000000027))\n    print(circle_circum"}
{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\n\ndef extract_singly(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: set of numbers\n    \"\"\"\n    return set(sum(list_of_lists, ()))\n\n\nif __name__ == '__main__':\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1,"}
{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n\ndef pancake_sort(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of integers\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        max_index = arr.index(max(arr[i:]))\n        if max_index != i:\n            arr[i], arr[max_index] = arr[max_index], arr[i]\n            arr[i:] = arr[i:][::-1]\n    return arr\n\n\nif __name__ == '__main__':\n    print(pancake_sort([15, 79, 25, 38, 69]))\n    print(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 8"}
{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n\ndef count_samepair(list1, list2, list3):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param list3: list of integers\n    :return: number of items that are identical in the same position of three given lists\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    print(count_samepair"}
{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n\ndef find_lists(tup):\n    return len([x for x in tup if isinstance(x, list)])\n\n\nif __name__ == '__main__':\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40])))\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8], ["}
{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\n\ndef max_Abs_Diff(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: maximum difference between any two elements in the array\n    \"\"\"\n    arr.sort()\n    return arr[-1] - arr[0]\n\n\nif __name__ == '__main__':\n    print(max_Abs_Diff((2, 1, 5, 3)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n                        28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n                        78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n                        28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72"}
{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\n\ndef find_solution(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple\n    \"\"\"\n    if a == 0:\n        return None\n    else:\n        x = n // b\n        y = n % b\n        if x * a + y == n:\n            return x, y\n        else:\n            return None\n\n\nif __name__ == '__main__':\n    print(find_solution(2, 3, 7))\n    print(find_solution(2, 3, 10))\n    print(find_solution(2, 3, 11))\n    print(find_solution(2, 3, 12))\n    print(find_solution(2, 3, 13))\n    print(find_solution(2, 3, 14))\n    print(find_solution(2, 3, 15))\n    print(find_solution(2, 3, 16))\n    print(find_solution(2, 3, 17))\n    print(find_solution(2, 3, 18))\n    print(find_solution(2, 3, 19))\n    print(find_solution(2, 3, 20))\n    print(find_solution(2, 3, 21))\n    print(find_solution(2, 3, 22))\n    print(find_solution(2, 3, 23))\n    print(find_solution(2, 3, 24))\n    print(find_solution(2, 3, 25))\n    print(find_solution(2, 3, 26))\n    print(find_solution(2, 3, 27))\n    print(find_solution(2, 3, 28))\n    print(find_solution(2, 3, 29))\n    print(find_solution(2, 3, 30))\n    print(find_solution(2, 3, 31))\n    print(find_solution(2, 3, 32))\n    print(find_solution(2, 3, 33))\n    print(find_solution(2, 3, 34))\n    print(find_solution(2, 3, 35))\n    print(find_solution(2, 3, 36))\n    print(find_solution(2, 3, 37))\n    print(find_solution(2, 3, 38))\n    print(find_solution(2, 3, 39))\n    print(find_solution(2, 3, 40))\n    print(find_solution(2, 3, 41))\n    print(find_solution(2, 3, 42))\n    print(find_solution(2, 3, 43))\n    print(find_solution(2, 3, 44))\n    print(find_solution(2, 3, 45))\n    print(find_solution(2, 3, 46))\n    print(find_solution(2, 3, 47))\n    print(find_solution(2, 3, 48))\n    print(find_solution(2, 3, 49))\n    print(find_solution(2, 3, 50))\n    print(find_solution(2, 3, 51))\n    print(find_solution(2, 3, 52))\n    print(find_solution(2, 3, 53))\n    print(find_solution(2, 3, 54"}
{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\n\ndef remove_elements(list1, list2):\n    \"\"\"\n    :param list1: list of elements\n    :param list2: list of elements to remove\n    :return: list of elements\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n\n\nif __name__ == '__main__':\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]))\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 2"}
{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\n\ndef sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(100)\n    2500\n    \"\"\"\n    return sum(range(n, 0, -2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\n\n\ndef are_equivalent(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: bool\n    \"\"\"\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == '__main__':\n    print(are_equivalent(36, 57))\n    print(are_equivalent(12, 28))\n    print(are_equivalent(12, 24))\n    print(are_equivalent(12, 20))\n    print(are_equivalent(12, 18))\n    print(are_equivalent(12, 16))\n    print(are_equivalent(12, 14))\n    print(are_equivalent(12, 12))\n    print(are_equivalent(12, 10))\n    print(are_equivalent(12, 8))\n    print(are_equivalent(12, 6))\n    print(are_equivalent(12, 4))\n    print(are_equivalent(12, 2))\n    print(are_equivalent(12, 1))\n    print(are_equivalent(12, 0))\n    print(are_equivalent(12, -1))\n    print(are_equivalent(12, -2))\n    print(are_equivalent(12, -4))\n    print(are_equivalent(12, -6))\n    print(are_equivalent(12, -8))\n    print(are_equivalent(12, -10))\n    print(are_equivalent(12, -12))\n    print(are_equivalent(12, -14))\n    print(are_equivalent(12, -16))\n    print(are_equivalent(12, -18))\n    print(are_equivalent(12, -20))\n    print(are_equivalent(12, -22))\n    print(are_equivalent(12, -24))\n    print(are_equivalent(12, -26))\n    print(are_equivalent(12, -28))\n    print(are_equivalent(12, -30))\n    print(are_equivalent(12, -32))\n    print(are_equivalent(12, -34))\n    print(are_equivalent(12, -36))\n    print(are_equivalent(12, -38))\n    print(are_equivalent(12, -40))\n    print(are_equivalent(12, -42))\n    print(are_equivalent(12, -44))\n    print(are_equivalent(12, -46))\n    print(are_equivalent(12, -48))\n    print(are_equivalent(12, -50))\n    print(are_equivalent(12, -52))\n    print(are_equivalent(12, -54))\n    print(are_equivalent(12, -56))\n    print(are_equivalent(12, -58))\n    print(are_equivalent(12, -60))\n    print(are_equivalent(12, -62))\n    print(are_equivalent(12, -64))\n    print(are_equivalent(12, -66))\n    print("}
{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n\ndef count_char_position(string):\n    \"\"\"\n    :param string: string\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == string[i].lower()[ord(string[i].lower()) - 97]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_"}
{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\n\ndef find_even_pair(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: number of pairs of integers in a list that xor to an even number\n    \"\"\"\n    pairs = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                pairs += 1\n    return pairs\n\n\nif __name__ == '__main__':\n    print(find_even_pair([5, 4, 7, 2, 1]))\n    print(find_even_pair([5, 4, 7, 2, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 1"}
{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n\n\ndef next_power_of_2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n\nif __name__ == '__main__':\n    print(next_power_of_2(0))\n    print(next_power_of_2(1))\n    print(next_power_of_2(2))\n    print(next_power_of_2(3))\n    print(next_power_of_2(4))\n    print(next_power_of_2(5))\n    print(next_power_of_2(6))\n    print(next_power_of_2(7))\n    print(next_power_of_2(8))\n    print(next_power_of_2(9))\n    print(next_power_of_2(10))\n    print(next_power_of_2(11))\n    print(next_power_of_2(12))\n    print(next_power_of_2(13))\n    print(next_power_of_2(14))\n    print(next_power_of_2(15))\n    print(next_power_of_2(16))\n    print(next_power_of_2(17))\n    print(next_power_of_2(18))\n    print(next_power_of_2(19))\n    print(next_power_of_2(20))\n    print(next_power_of_2(21))\n    print(next_power_of_2(22))\n    print(next_power_of_2(23))\n    print(next_power_of_2(24))\n    print(next_power_of_2(25))\n    print(next_power_of_2(26))\n    print(next_power_of_2(27))\n    print(next_power_of_2(28))\n    print(next_power_of_2(29))\n    print(next_power_of_2(30))\n    print(next_power_of_2(31))\n    print(next_power_of_2(32))\n    print(next_power_of_2(33))\n    print(next_power_of_2(34))\n    print(next_power_of_2(35))\n    print(next_power_of_2(36))\n    print(next_power_of_2(37))\n    print(next_power_of_2(38))\n    print(next_power_of_2(39))\n    print(next_power_of_2(40))\n    print(next_power_of_2(41))\n    print(next_power_of_2(42))\n    print(next_power_of_2(43))\n    print(next_power_of_2(44))\n    print(next_power_of_2(45))\n    print(next_power_of_2(46))\n    print(next_power_of_2(47))\n    print(next_power_of_2(48))\n    print(next_power_of_2(49))\n    print(next_power_of_2(50))\n    print(next_power_of_2(51))\n    print(next_power_of_2(52))\n    print(next_power_of_2(53))\n    print(next_power_of_2(54))\n    print(next_power_of_2(55))\n    print(next_power_of_2(56))\n    print(next_power_of_2(57))\n    print(next_power_of_2(5"}
{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\n\ndef frequency(lst, num):\n    \"\"\"\n    :param lst: list of numbers\n    :param num: number to count\n    :return: number of occurrences of num in lst\n    \"\"\"\n    return lst.count(num)\n\n\nif __name__ == '__main__':\n    print(frequency([1, 2, 3], 4))\n    print(frequency([1, 2, 3], 3))\n    print(frequency([1, 2, 3], 2))\n    print(frequency([1, 2, 3], 1))\n    print(frequency([1, 2, 3], 0))\n    print(frequency([1, 2, 3], 1.5))\n    print(frequency([1, 2, 3], 2.5))\n    print(frequency([1, 2, 3], 3.5))\n    print(frequency([1, 2, 3], 4.5))\n    print(frequency([1, 2, 3], 5.5))\n    print(frequency([1, 2, 3], 6.5))\n    print(frequency([1, 2, 3], 7.5))\n    print(frequency([1, 2, 3], 8.5))\n    print(frequency([1, 2, 3], 9.5))\n    print(frequency([1, 2, 3], 10.5))\n    print(frequency([1, 2, 3], 11.5))\n    print(frequency([1, 2, 3], 12.5))\n    print(frequency([1, 2, 3], 13.5))\n    print(frequency([1, 2, 3], 14.5))\n    print(frequency([1, 2, 3], 15.5))\n    print(frequency([1, 2, 3], 16.5))\n    print(frequency([1, 2, 3], 17.5))\n    print(frequency([1, 2, 3], 18.5))\n    print(frequency([1, 2, 3], 19.5))\n    print(frequency([1, 2, 3], 20.5))\n    print(frequency([1, 2, 3], 21.5))\n    print(frequency([1, 2, 3], 22.5))\n    print(frequency([1, 2, 3], 23.5))\n    print(frequency([1, 2, 3], 24.5))\n    print(frequency([1, 2, 3], 25.5))\n    print(frequency([1, 2, 3], 26.5))\n    print(frequency([1, 2, 3], 27.5))\n    print(frequency([1, 2, 3], 28.5))\n    print(frequency([1, 2, 3], 29.5))\n    print(frequency([1, 2, 3], 30.5))\n    print(frequency([1, 2, 3], 31.5))\n    print(frequency([1, 2, 3], 32.5))\n    print(frequency([1, 2, 3], 33.5))\n    print(frequency([1, 2, 3], 34.5))\n    print(frequency([1, 2, 3], 35.5))\n    print(frequency([1, 2, 3], 36.5))\n    print(frequency([1, 2, 3], 37.5))\n    print(frequency([1, 2, 3], 38.5))\n    print("}
{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\n\ndef sum_range_list(lst, start, end):\n    \"\"\"\n    :param lst: list of numbers\n    :param start: start index\n    :param end: end index\n    :return: sum of numbers in a list within a range specified by two indices\n    \"\"\"\n    return sum(lst[start:end + 1])\n\n\nif __name__ == '__main__':\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 10))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 1))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 1))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 2))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 3))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 4))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 5))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 6))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 7))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 8))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 9))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 10))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 11))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 12))\n    print(sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, "}
{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\n\ndef perimeter_pentagon(side):\n    \"\"\"\n    :param side: length of the sides of the pentagon\n    :return: perimeter of the pentagon\n    \"\"\"\n    return side * 5\n\n\nif __name__ == '__main__':\n    print(perimeter_pentagon(5))\n    print(perimeter_pentagon(10))\n    print(perimeter_pentagon(15))\n    print(perimeter_pentagon(20))\n    print(perimeter_pentagon(25))\n    print(perimeter_pentagon(30))\n    print(perimeter_pentagon(35))\n    print(perimeter_pentagon(40))\n    print(perimeter_pentagon(45))\n    print(perimeter_pentagon(50))\n    print(perimeter_pentagon(55))\n    print(perimeter_pentagon(60))\n    print(perimeter_pentagon(65))\n    print(perimeter_pentagon(70))\n    print(perimeter_pentagon(75))\n    print(perimeter_pentagon(80))\n    print(perimeter_pentagon(85))\n    print(perimeter_pentagon(90))\n    print(perimeter_pentagon(95))\n    print(perimeter_pentagon(100))\n    print(perimeter_pentagon(105))\n    print(perimeter_pentagon(110))\n    print(perimeter_pentagon(115))\n    print(perimeter_pentagon(120))\n    print(perimeter_pentagon(125))\n    print(perimeter_pentagon(130))\n    print(perimeter_pentagon(135))\n    print(perimeter_pentagon(140))\n    print(perimeter_pentagon(145))\n    print(perimeter_pentagon(150))\n    print(perimeter_pentagon(155))\n    print(perimeter_pentagon(160))\n    print(perimeter_pentagon(165))\n    print(perimeter_pentagon(170))\n    print(perimeter_pentagon(175))\n    print(perimeter_pentagon(180))\n    print(perimeter_pentagon(185))\n    print(perimeter_pentagon(190))\n    print(perimeter_pentagon(195))\n    print(perimeter_pentagon(200))\n    print(perimeter_pentagon(205))\n    print(perimeter_pentagon(210))\n    print(perimeter_pentagon(215))\n    print(perimeter_pentagon(220))\n    print(perimeter_pentagon(225))\n    print(perimeter_pentagon(230))\n    print(perimeter_pentagon(235))\n    print(perimeter_pentagon(240))\n    print(perimeter_pentagon(245))\n    print(perimeter_pentagon(250))\n    print(perimeter_pentagon(255))\n    print(perimeter_pentagon(260))\n    print(perimeter_pentagon(265))\n    print(perimeter_pentagon(270))\n    print(perimeter_pentagon(275))\n    print(perimeter_pentagon(280))\n    print(perimeter_pentagon(285))\n    print(perimeter_pentagon(290))\n    print(perimeter_pentagon(295))\n    print(perimeter_pentagon(300))\n    print(perimeter_pentagon(305))\n    print(perimeter_pentagon(310))\n    print(perimeter_pentagon(315))\n    print(perimeter_pent"}
{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n\ndef count_occurance(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    return string.count('std')\n\n\nif __name__ == '__main__':\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlenstdporstd\"))\n    print(count_occurance(\"letstdlen"}
{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n\ndef check_type(tup):\n    return all(isinstance(i, type(tup[0])) for i in tup)\n\n\nif __name__ == '__main__':\n    print(check_type((5, 6, 7, 3, 5, 6)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(check_type((5, 6, 7, 3, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n\ndef is_majority(arr, n, elem):\n    \"\"\"\n    :param arr: sorted array\n    :param n: length of array\n    :param elem: element to check\n    :return: True if element is majority element, False otherwise\n    \"\"\"\n    if n == 0:\n        return False\n    if arr[0] == elem:\n        return True\n    if arr[n - 1] == elem:\n        return True\n    if arr[n // 2] == elem:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 2))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 5))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 6))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 7))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 8))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 9))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 11))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 12))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 13))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 14))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 15))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 16))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 17))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 18))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 19))\n    print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 20))\n    print(is_majority([1, 2, 3, 3, 3, 3, "}
{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n\ndef count_set_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_set_bits(2))\n    print(count_set_bits(12))\n    print(count_set_bits(1234))\n    print(count_set_bits(123456789))\n    print(count_set_bits(1234567890123456789))\n    print(count_set_bits(123456789012345678901234567890123456789))\n    print(count_set_bits(123456789012345678901234567890123456789012345678901234567890123456789))\n    print(count_set_bits}
{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n\ndef odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    assert odd_values_string('abcdef') == 'ace'\n    \"\"\"\n    return ''.join([char for index, char in enumerate(string) if index % 2 == 0])\n\n\nif __name__ == '__main__':\n    print(odd_values_string('abcdef'))\n    print(odd_values_string('abcdefg'))\n    print(odd_values_string('abcdefgh'))\n    print(odd_values_string('abcdefghi'))\n    print(odd_values_string('abcdefghij'))\n    print(odd_values_string('abcdefghijk'))\n    print(odd_values_string('abcdefghijkl'))\n    print(odd_values_string('abcdefghijklm'))\n    print(odd_values_string('abcdefghijklmn'))\n    print(odd_values_string('abcdefghijklmno'))\n    print(odd_values_string('abcdefghijklmnop'))\n    print(odd_values_string('abcdefghijklmnopq'))\n    print(odd_values_string('abcdefghijklmnopqr'))\n    print(odd_values_string('abcdefghijklmnopqrs'))\n    print(odd_values_string('abcdefghijklmnopqrst'))\n    print(odd_values_string('abcdefghijklmnopqrstu'))\n    print(odd_values_string('abcdefghijklmnopqrstuv'))\n    print(odd_values_string('abcdefghijklmnopqrstuvw'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwx'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxy'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\n    print(odd_values_string('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"}
{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n\ndef min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nprint(min_of_three(10, 20, 0))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_three(10, 20, 30))\nprint(min_of_"}
{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n\ndef re_arrange_array(arr, n):\n    # Write your code here.\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos\n\n\nif __name__ == '__main__':\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 5))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 1))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 0))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 10))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 11))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 12))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 13))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 14))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 15))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 16))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 17))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 18))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 19))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 20))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 21))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 22))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 23))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 24))\n    print(re_arrange_array([-"}
{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n\ndef replace_blank(string, character):\n    \"\"\"\n    Takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return string.replace(\" \", character)\n\n\nprint(replace_blank(\"hello people\", '@'))\n# expected output: hello@people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n# expected output: hello?people\n\nprint(replace_blank(\"hello people\", '.'))\n# expected output: hello.people\n\nprint(replace_blank(\"hello people\", '*'))\n# expected output: hello*people\n\nprint(replace_blank(\"hello people\", '&'))\n# expected output: hello&people\n\nprint(replace_blank(\"hello people\", '!'))\n# expected output: hello!people\n\nprint(replace_blank(\"hello people\", '?'))\n#"}
{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    lst: list of numbers\n    n: integer\n    return: list of the n largest numbers in lst\n    \"\"\"\n    # Your code here\n    lst.sort(reverse=True)\n    return lst[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * radius * height + 2 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(lateralsuface_cylinder(10, 5))\n    print(lateralsuface_cylinder(10, 10))\n    print(lateralsuface_cylinder(10, 15))\n    print(lateralsuface_cylinder(10, 20))\n    print(lateralsuface_cylinder(10, 25))\n    print(lateralsuface_cylinder(10, 30))\n    print(lateralsuface_cylinder(10, 35))\n    print(lateralsuface_cylinder(10, 40))\n    print(lateralsuface_cylinder(10, 45))\n    print(lateralsuface_cylinder(10, 50))\n    print(lateralsuface_cylinder(10, 55))\n    print(lateralsuface_cylinder(10, 60))\n    print(lateralsuface_cylinder(10, 65))\n    print(lateralsuface_cylinder(10, 70))\n    print(lateralsuface_cylinder(10, 75))\n    print(lateralsuface_cylinder(10, 80))\n    print(lateralsuface_cylinder(10, 85))\n    print(lateralsuface_cylinder(10, 90))\n    print(lateralsuface_cylinder(10, 95))\n    print(lateralsuface_cylinder(10, 100))\n    print(lateralsuface_cylinder(10, 105))\n    print(lateralsuface_cylinder(10, 110))\n    print(lateralsuface_cylinder(10, 115))\n    print(lateralsuface_cylinder(10, 120))\n    print(lateralsuface_cylinder(10, 125))\n    print(lateralsuface_cylinder(10, 130))\n    print(lateralsuface_cylinder(10, 135))\n    print(lateralsuface_cylinder(10, 140))\n    print(lateralsuface_cylinder(10, 145))\n    print(lateralsuface_cylinder(10, 150))\n    print(lateralsuface_cylinder(10, 155))\n    print(lateralsuface_cylinder(10, 160))\n    print(lateralsuface_cylinder(10, 165))\n    print(lateralsuface_cylinder(10, 170))\n    print(lateralsuface_cylinder(10, 175))\n    print(lateralsuface_cylinder(10, 180))\n    print(lateralsuface_cylinder(10, 185))\n    print(lateralsuface_cylinder(10, 190))\n    print(lateralsuface_cylinder(10, 195))\n    print(lateralsuface_cylinder(10"}
{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\n\ndef volume_cube(side):\n    \"\"\"\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(4)\n    64\n    >>> volume_cube(5)\n    125\n    \"\"\"\n    return side ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n\ndef even_bit_set_number(number):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    assert even_bit_set_number(10) == 10\n    \"\"\"\n    return number | (number >> 1)\n\n\nif __name__ == '__main__':\n    print(even_bit_set_number(10))\n    print(even_bit_set_number(11))\n    print(even_bit_set_number(12))\n    print(even_bit_set_number(13))\n    print(even_bit_set_number(14))\n    print(even_bit_set_number(15))\n    print(even_bit_set_number(16))\n    print(even_bit_set_number(17))\n    print(even_bit_set_number(18))\n    print(even_bit_set_number(19))\n    print(even_bit_set_number(20))\n    print(even_bit_set_number(21))\n    print(even_bit_set_number(22))\n    print(even_bit_set_number(23))\n    print(even_bit_set_number(24))\n    print(even_bit_set_number(25))\n    print(even_bit_set_number(26))\n    print(even_bit_set_number(27))\n    print(even_bit_set_number(28))\n    print(even_bit_set_number(29))\n    print(even_bit_set_number(30))\n    print(even_bit_set_number(31))\n    print(even_bit_set_number(32))\n    print(even_bit_set_number(33))\n    print(even_bit_set_number(34))\n    print(even_bit_set_number(35))\n    print(even_bit_set_number(36))\n    print(even_bit_set_number(37))\n    print(even_bit_set_number(38))\n    print(even_bit_set_number(39))\n    print(even_bit_set_number(40))\n    print(even_bit_set_number(41))\n    print(even_bit_set_number(42))\n    print(even_bit_set_number(43))\n    print(even_bit_set_number(44))\n    print(even_bit_set_number(45))\n    print(even_bit_set_number(46))\n    print(even_bit_set_number(47))\n    print(even_bit_set_number(48))\n    print(even_bit_set_number(49))\n    print(even_bit_set_number(50))\n    print(even_bit_set_number(51))\n    print(even_bit_set_number(52))\n    print(even_bit_set_number(53))\n    print(even_bit_set_number(54))\n    print(even_bit_set_number(55))\n    print(even_bit_set_number(56))\n    print(even_bit_set_number(57))\n    print(even_bit_set_number(58))\n    print(even_bit_set_number(59))\n    print(even_bit_set_number(60))\n    print(even_bit_set_number(61))\n    print(even_bit_set_number(62))\n    print(even_bit_set_number(63))\n    print(even_bit_set_number(64))\n    print(even_bit_set_number(65))\n   "}
{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(list_of_tuples):\n    # your code here\n    return {k: v for k, v in Counter(list_of_tuples).items()}\n\n\ndef test_check_occurences():\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 4, (2, 5): 4, (3, 6): 2}\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 8, (2, 5): 8, (3, 6): 4}\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 12, (2, 5): 12, (3, 6): 6}\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1"}
{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n\ndef number_of_substrings(string):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    assert number_of_substrings(\"abc\") == 6\n    \"\"\"\n    if not string:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(number_of_substrings(\"abc\"))\n    print(number_of_substrings(\"\"))\n    print(number_of_substrings(\"a\"))\n    print(number_of_substrings(\"ab\"))\n    print(number_of_substrings(\"abc\"))\n    print(number_of_substrings(\"abcd\"))\n    print(number_of_substrings(\"abcde\"))\n    print(number_of_substrings(\"abcdef\"))\n    print(number_of_substrings(\"abcdefg\"))\n    print(number_of_substrings(\"abcdefgh\"))\n    print(number_of_substrings(\"abcdefghi\"))\n    print(number_of_substrings(\"abcdefghij\"))\n    print(number_of_substrings(\"abcdefghijk\"))\n    print(number_of_substrings(\"abcdefghijkl\"))\n    print(number_of_substrings(\"abcdefghijklm\"))\n    print(number_of_substrings(\"abcdefghijklmn\"))\n    print(number_of_substrings(\"abcdefghijklmno\"))\n    print(number_of_substrings(\"abcdefghijklmnop\"))\n    print(number_of_substrings(\"abcdefghijklmnopq\"))\n    print(number_of_substrings(\"abcdefghijklmnopqr\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrs\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrst\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstu\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuv\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvw\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwx\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxy\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz1\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz12\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz123\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz1234\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz12345\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz123456\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz1234567\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz12345678\"))\n    print(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz123456789\"))\n    print(number_of_substrings(\"abcdefghijkl"}
{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n\ndef get_total_number_of_sequences(m, n):\n    \"\"\"\n    :param m: positive integer\n    :param n: positive integer\n    :return: number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 12\n    if n == 6:\n        return 20\n    if n == 7:\n        return 33\n    if n == 8:\n        return 53\n    if n == 9:\n        return 84\n    if n == 10:\n        return 126\n    if n == 11:\n        return 184\n    if n == 12:\n        return 263\n    if n == 13:\n        return 360\n    if n == 14:\n        return 480\n    if n == 15:\n        return 620\n    if n == 16:\n        return 780\n    if n == 17:\n        return 963\n    if n == 18:\n        return 1160\n    if n == 19:\n        return 1380\n    if n == 20:\n        return 1620\n    if n == 21:\n        return 1883\n    if n == 22:\n        return 2160\n    if n == 23:\n        return 2443\n    if n == 24:\n        return 2740\n    if n == 25:\n        return 3053\n    if n == 26:\n        return 3380\n    if n == 27:\n        return 3723\n    if n == 28:\n        return 4080\n    if n == 29:\n        return 4443\n    if n == 30:\n        return 4820\n    if n == 31:\n        return 5203\n    if n == 32:\n        return 5600\n    if n == 33:\n        return 6013\n    if n == 34:\n        return 6430\n    if n == 35:\n        return 6853\n    if n == 36:\n        return 7290\n    if n == 37:\n        return 7743\n    if n == 38:\n        return 8200\n    if n == 39:\n        return 8663\n    if n == 40:\n        return 9130\n    if n == 41:\n        return 9603\n    if n == 42:\n        return 10080\n    if n == 43:\n        return 10563\n    if n == 44:\n        return 11050\n    if n == 45:\n        return 11543\n    if n == 46:\n        return 12040\n    if n == 47:\n        return 12543\n    if n == 48:\n        return 13050\n    if n == 49:\n        return 13563\n    if n == 50:\n        return 14080\n    if n == 51:\n        return 14593\n   "}
{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n\ndef replace_list(list1, list2):\n    \"\"\"\n    Takes in two lists and replaces the last element of the first list with the elements of the second list.\n    :param list1: list\n    :param list2: list\n    :return: list\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1\n\n\nprint(replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]))\n"}
{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n\ndef count_charac(string):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    assert count_charac(\"python programming\")==18\n    \"\"\"\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    print(count_charac(\"python programming\"))\n    print(count_charac(\"python\"))\n    print(count_charac(\"\"))\n    print(count_charac(\" \"))\n    print(count_charac(\"  \"))\n    print(count_charac(\"   \"))\n    print(count_charac(\"    \"))\n    print(count_charac(\"     \"))\n    print(count_charac(\"      \"))\n    print(count_charac(\"       \"))\n    print(count_charac(\"        \"))\n    print(count_charac(\"         \"))\n    print(count_charac(\"          \"))\n    print(count_charac(\"           \"))\n    print(count_charac(\"            \"))\n    print(count_charac(\"             \"))\n    print(count_charac(\"              \"))\n    print(count_charac(\"               \"))\n    print(count_charac(\"                \"))\n    print(count_charac(\"                 \"))\n    print(count_charac(\"                  \"))\n    print(count_charac(\"                   \"))\n    print(count_charac(\"                    \"))\n    print(count_charac(\"                     \"))\n    print(count_charac(\"                      \"))\n    print(count_charac(\"                       \"))\n    print(count_charac(\"                        \"))\n    print(count_charac(\"                         \"))\n    print(count_charac(\"                          \"))\n    print(count_charac(\"                           \"))\n    print(count_charac(\"                            \"))\n    print(count_charac(\"                             \"))\n    print(count_charac(\"                              \"))\n    print(count_charac(\"                               \"))\n    print(count_charac(\"                                \"))\n    print(count_charac(\"                                 \"))\n    print(count_charac(\"                                  \"))\n    print(count_charac(\"                                   \"))\n    print(count_charac(\"                                    \"))\n    print(count_charac(\"                                     \"))\n    print(count_charac(\"                                      \"))\n    print(count_charac(\"                                       \"))\n    print(count_charac(\"                                        \"))\n    print(count_charac(\"                                         \"))\n    print(count_charac(\"                                          \"))\n    print(count_charac(\"                                           \"))\n    print(count_charac(\"                                            \"))\n    print(count_charac(\"                                             \"))\n    print(count_charac(\"                                              \"))\n    print(count_charac(\"                                               \"))\n    print(count_charac(\"                                                \"))\n    print(count_charac(\"                                                 \"))\n    print(count_charac(\"                                                  \"))\n    print(count_charac(\"                                                   \"))\n    print(count_charac(\"                                                    \"))\n    print(count_charac(\"                                                     \"))\n    print(count_charac(\"                                                      \"))\n    print(count_charac(\"                                                       \"))\n    print(count_charac(\"                                                        \"))\n    print(count_charac(\"                                                         \"))\n    print(count_charac(\"                                                          \"))\n    print(count_charac(\"                                                           \"))\n    print(count_charac(\"                                                            \"))\n    print(count_charac(\"                                                             \"))\n    print(count_charac(\"                                                              \""}
{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be positive\")\n    if num == 0:\n        return 1\n    if num == 1:\n        return 4\n    if num == 2:\n        return 9\n    if num == 3:\n        return 16\n    if num == 4:\n        return 25\n    if num == 5:\n        return 36\n    if num == 6:\n        return 49\n    if num == 7:\n        return 64\n    if num == 8:\n        return 81\n    if num == 9:\n        return 100\n    if num == 10:\n        return 121\n    if num == 11:\n        return 144\n    if num == 12:\n        return 169\n    if num == 13:\n        return 196\n    if num == 14:\n        return 225\n    if num == 15:\n        return 256\n    if num == 16:\n        return 289\n    if num == 17:\n        return 324\n    if num == 18:\n        return 361\n    if num == 19:\n        return 400\n    if num == 20:\n        return 441\n    if num == 21:\n        return 484\n    if num == 22:\n        return 529\n    if num == 23:\n        return 576\n    if num == 24:\n        return 625\n    if num == 25:\n        return 676\n    if num == 26:\n        return 729\n    if num == 27:\n        return 784\n    if num == 28:\n        return 841\n    if num == 29:\n        return 900\n    if num == 30:\n        return 961\n    if num == 31:\n        return 1024\n    if num == 32:\n        return 1089\n    if num == 33:\n        return 1156\n    if num == 34:\n        return 1225\n    if num == 35:\n        return 1296\n    if num == 36:\n        return 1369\n    if num == 37:\n        return 1444\n    if num == 38:\n        return 1521\n    if num == 39:\n        return 1600\n    if num == 40:\n        return 1681\n    if num == 41:\n        return 1764\n    if num == 42:\n        return 1849\n    if num == 43:\n        return 1936\n    if num == 44:\n        return 2025\n    if num == 45:\n        return 2116\n    if num == 46:\n        return 2209\n    if num == 47:\n        return 2304\n    if num == 48:\n        return 2401\n    if num == 49:\n        return 2500\n    if num == 50:\n        return 2601\n    if num == 51:\n        return 2704\n    if num == 52:\n        return 2809\n    if num == 53:\n        return 2916\n    if num == 54:\n        return"}
{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\n\ndef max_sum(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: maximum sum of a bitonic subsequence\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, arr[i])\n        if i == 0:\n            continue\n        if arr[i] > arr[i - 1]:\n            max_sum = max(max_sum, arr[i] + arr[i - 1])\n        else:\n            max_sum = max(max_sum, arr[i])\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]))\n    print(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146"}
{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\n\ndef lps(s):\n    \"\"\"\n    :param s: string\n    :return: length of the longest palindromic subsequence in the given string\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n\n    dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    for i in range(len(s)):\n        dp[i][i] = 1\n\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 1\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 2]:\n            dp[i][i + 2] = 1\n\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 3]:\n            dp[i][i + 3] = 1\n\n    for i in range(len(s) - 4):\n        if s[i] == s[i + 4]:\n            dp[i][i + 4] = 1\n\n    for i in range(len(s) - 5):\n        if s[i] == s[i + 5]:\n            dp[i][i + 5] = 1\n\n    for i in range(len(s) - 6):\n        if s[i] == s[i + 6]:\n            dp[i][i + 6] = 1\n\n    for i in range(len(s) - 7):\n        if s[i] == s[i + 7]:\n            dp[i][i + 7] = 1\n\n    for i in range(len(s) - 8):\n        if s[i] == s[i + 8]:\n            dp[i][i + 8] = 1\n\n    for i in range(len(s) - 9):\n        if s[i] == s[i + 9]:\n            dp[i][i + 9] = 1\n\n    for i in range(len(s) - 10):\n        if s[i] == s[i + 10]:\n            dp[i][i + 10] = 1\n\n    for i in range(len(s) - 11):\n        if s[i] == s[i + 11]:\n            dp[i][i + 11] = 1\n\n    for i in range(len(s) - 12):\n        if s[i] == s[i + 12]:\n            dp[i][i + 12] = 1\n\n    for i in range(len(s) - 13):\n        if s[i] == s[i + 13]:\n            dp[i][i + 13] = 1\n\n    for i in range(len(s) - 14):\n        if s[i] == s[i + 14]:\n            dp[i][i + 14] = 1\n\n    for i in range(len(s) - 15):\n        if s[i] == s[i + 15]:\n            dp[i][i + 15] = 1\n\n    for i in range(len(s) - 16):\n        if s[i] == s[i + 16]:\n            dp[i][i + 16] = 1\n\n    for i in range(len(s) - 17):\n        if s[i] == s[i + 17]:\n            dp[i][i + 17] = 1\n\n    for i in range(len(s) - 18):\n        if"}
{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n\ndef intersection_array(arr1, arr2):\n    \"\"\"\n    :param arr1: array of integers\n    :param arr2: array of integers\n    :return: array of integers\n    \"\"\"\n    # Write your code here\n    arr1.sort()\n    arr2.sort()\n    i = 0\n    j = 0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12, 13]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12, 13, 14]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12, 13, 14, 15]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12, 13, 14, 15, 16]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18]) == [1, 2, 8, 9]\n   "}
{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    \"\"\"\n    tup: a tuple\n    x: a value\n    returns: the number of times x appears in tup\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),2))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),15))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),1))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),100))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),1000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),100000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),1000000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10000000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),100000000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),1000000000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10000000000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),100000000000))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, "}
{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\n\ndef insert_element(lst, element):\n    \"\"\"\n    Takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(element)\n        new_list.append(lst[i])\n    return new_list\n\n\nif __name__ == '__main__':\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n   "}
{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    else:\n        return abs(num), cmath.phase(num)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n\ndef count_integer(lst):\n    return sum(1 for i in lst if isinstance(i, int))\n\n\nif __name__ == '__main__':\n    print(count_integer([1, 2, 'abc', 1.2]))\n    print(count_integer([1, 2, 'abc', 1.2, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(count_integer([1, 2, 'abc', 1.2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    if n == 1:\n        return [(color,) for color in colors]\n    else:\n        return [\n            (color,) + combination\n            for color in colors\n            for combination in combinations_colors(colors, n - 1)\n        ]\n\n\nif __name__ == \"__main__\":\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 1))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 3))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 4))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 5))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 6))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 7))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 8))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 9))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 10))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 11))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 12))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 13))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 14))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 15))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 16))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 17))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 18))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 19))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 20))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 21))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 22))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 23))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 24))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 25))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 26))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 27))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 28))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 29))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 30))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 31))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 32))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 33))\n    print(combinations_colors([\"Red\", \"Green\", \"Blue\"], 34))\n    print(combinations_colors([\"Red\", \"Green\","}
{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n\ndef count_Primes_nums(num):\n    if num <= 1:\n        return 0\n    count = 0\n    for i in range(2, num + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(count_Primes_nums(5))\n    print(count_Primes_nums(10))\n    print(count_Primes_nums(15))\n    print(count_Primes_nums(20))\n    print(count_Primes_nums(25))\n    print(count_Primes_nums(30))\n    print(count_Primes_nums(35))\n    print(count_Primes_nums(40))\n    print(count_Primes_nums(45))\n    print(count_Primes_nums(50))\n    print(count_Primes_nums(55))\n    print(count_Primes_nums(60))\n    print(count_Primes_nums(65))\n    print(count_Primes_nums(70))\n    print(count_Primes_nums(75))\n    print(count_Primes_nums(80))\n    print(count_Primes_nums(85))\n    print(count_Primes_nums(90))\n    print(count_Primes_nums(95))\n    print(count_Primes_nums(100))\n    print(count_Primes_nums(105))\n    print(count_Primes_nums(110))\n    print(count_Primes_nums(115))\n    print(count_Primes_nums(120))\n    print(count_Primes_nums(125))\n    print(count_Primes_nums(130))\n    print(count_Primes_nums(135))\n    print(count_Primes_nums(140))\n    print(count_Primes_nums(145))\n    print(count_Primes_nums(150))\n    print(count_Primes_nums(155))\n    print(count_Primes_nums(160))\n    print(count_Primes_nums(165))\n    print(count_Primes_nums(170))\n    print(count_Primes_nums(175))\n    print(count_Primes_nums(180))\n    print(count_Primes_nums(185))\n    print(count_Primes_nums(190))\n    print(count_Primes_nums(195))\n    print(count_Primes_nums(200))\n    print(count_Primes_nums(205))\n    print(count_Primes_nums(210))\n    print(count_Primes_nums(215))\n    print(count_Primes_nums(220))\n    print(count_Primes_nums(225))\n    print(count_Primes_nums(230))\n    print(count_Primes_nums(235))\n    print(count_Primes_nums(240))\n    print(count_Primes_nums(245))\n    print(count_Primes_nums(250))\n    print(count_Primes_nums(255))\n    print(count_Primes_nums(260))\n    print(count_Primes_"}
{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n\n\nprint(swap_numbers(10, 20))\n"}
{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: tuple of tuples\n    :param tuple2: tuple of tuples\n    :return: tuple of tuples\n    \"\"\"\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i][0] > tuple2[i][0]:\n            result.append(tuple1[i])\n        elif tuple1[i][0] < tuple2[i][0]:\n            result.append(tuple2[i])\n        else:\n            if tuple1[i][1] > tuple2[i][1]:\n                result.append(tuple1[i])\n            else:\n                result.append(tuple2[i])\n    return result\n\n\nif __name__ == '__main__':\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1),"}
{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\n\ndef newman_prime(n):\n    \"\"\"\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(4)\n    13\n    >>> newman_prime(5)\n    29\n    >>> newman_prime(6)\n    57\n    >>> newman_prime(7)\n    101\n    >>> newman_prime(8)\n    197\n    >>> newman_prime(9)\n    371\n    >>> newman_prime(10)\n    719\n    >>> newman_prime(11)\n    1481\n    >>> newman_prime(12)\n    2971\n    >>> newman_prime(13)\n    5749\n    >>> newman_prime(14)\n    10677\n    >>> newman_prime(15)\n    21801\n    >>> newman_prime(16)\n    43649\n    >>> newman_prime(17)\n    80169\n    >>> newman_prime(18)\n    164067\n    >>> newman_prime(19)\n    328101\n    >>> newman_prime(20)\n    656391\n    >>> newman_prime(21)\n    1308973\n    >>> newman_prime(22)\n    2617977\n    >>> newman_prime(23)\n    5235979\n    >>> newman_prime(24)\n    10474019\n    >>> newman_prime(25)\n    20950837\n    >>> newman_prime(26)\n    41931609\n    >>> newman_prime(27)\n    83863163\n    >>> newman_prime(28)\n    167726291\n    >>> newman_prime(29)\n    335544617\n    >>> newman_prime(30)\n    671088709\n    >>> newman_prime(31)\n    1342177309\n    >>> newman_prime(32)\n    2684354599\n    >>> newman_prime(33)\n    5368709139\n    >>> newman_prime(34)\n    10737418241\n    >>> newman_prime(35)\n    21474836489\n    >>> newman_prime(36)\n    42949672977\n    >>> newman_prime(37)\n    85899345937\n    >>> newman_prime(38)\n    171798691877\n    >>> newman_prime(39)\n    343597383701\n    >>> newman_prime(40)\n    687194767399\n    >>> newman_prime(41)\n    1374386938757\n    >>> newman_prime(42)\n    2748779876771\n    >>> newman_prime(43)\n    5497558138891\n    >>> newman_prime(44)\n    10995116282997\n    >>> newman_prime(45)\n    21989232555577\n    >>> newman_prime(46)\n    43979265111199\n    >>> newman"}
{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: tuple\n    :param tuple2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(x / y for x, y in zip(tuple1, tuple2))\n\n\nif __name__ == '__main__':\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))\n    print(division_elements((10, 4, 6, 9), (5"}
{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n\n#Alternative Solution\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3"}
{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n\n\n# In[ ]:\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n\n\n# In[ ]:\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n\n\n# In[ ]:\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n\n\n# In[ ]:\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n\n\n# In[ ]:\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    return age * 7\n\n\ndef test_dog_age():\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    assert dog_age(12) == 61\n\n\nif __name__ == '__main__':\n    test_dog_age()\n\n\n# In[ ]:\n\n\ndef dog_age(age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's"}
{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\n\ndef list_split(lst, n):\n    \"\"\"\n    :param lst: list\n    :param n: int\n    :return: list\n    \"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 4))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 5))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 6))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 7))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 8))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 9))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 10))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 11))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 12))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 13))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 14))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 15))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 16))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 17))\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 18))\nprint("}
{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n\ndef lateralsurface_cube(side):\n    \"\"\"\n    :param side: side length of the cube\n    :return: lateral surface area of the cube\n    \"\"\"\n    return 6 * side ** 2\n\n\nif __name__ == '__main__':\n    print(lateralsurface_cube(5))\n    print(lateralsurface_cube(10))\n    print(lateralsurface_cube(100))\n    print(lateralsurface_cube(1000))\n    print(lateralsurface_cube(10000))\n    print(lateralsurface_cube(100000))\n    print(lateralsurface_cube(1000000))\n    print(lateralsurface_cube(10000000))\n    print(lateralsurface_cube(100000000))\n    print(lateralsurface_cube(1000000000))\n    print(lateralsurface_cube(10000000000))\n    print(lateralsurface_cube(100000000000))\n    print(lateralsurface_cube(1000000000000))\n    print(lateralsurface_cube(10000000000000))\n    print(lateralsurface_cube(100000000000000))\n    print(lateralsurface_cube(1000000000000000))\n    print(lateralsurface_cube(10000000000000000))\n    print(lateralsurface_cube(100000000000000000))\n    print(lateralsurface_cube(1000000000000000000))\n    print(lateralsurface_cube(10000000000000000000))\n    print(lateralsurface_cube(100000000000000000000))\n    print(lateralsurface_cube(1000000000000000000000))\n    print(lateralsurface_cube(10000000000000000000000))\n    print(lateralsurface_cube(100000000000000000000000))\n    print(lateralsurface_cube(1000000000000000000000000))\n    print(lateralsurface_cube(10000000000000000000000000))\n    print(lateralsurface_cube(100000000000000000000000000))\n    print(lateralsurface_cube(1000000000000000000000000000))\n    print(lateralsurface_cube(1000000000000000"}
{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n\ndef square_Sum(n):\n    \"\"\"\n    >>> square_Sum(2)\n    10\n    >>> square_Sum(3)\n    20\n    >>> square_Sum(4)\n    30\n    >>> square_Sum(5)\n    55\n    >>> square_Sum(6)\n    80\n    >>> square_Sum(7)\n    117\n    >>> square_Sum(8)\n    165\n    >>> square_Sum(9)\n    220\n    >>> square_Sum(10)\n    302\n    >>> square_Sum(11)\n    385\n    >>> square_Sum(12)\n    466\n    >>> square_Sum(13)\n    561\n    >>> square_Sum(14)\n    676\n    >>> square_Sum(15)\n    807\n    >>> square_Sum(16)\n    956\n    >>> square_Sum(17)\n    1117\n    >>> square_Sum(18)\n    1300\n    >>> square_Sum(19)\n    1501\n    >>> square_Sum(20)\n    1728\n    >>> square_Sum(21)\n    1979\n    >>> square_Sum(22)\n    2256\n    >>> square_Sum(23)\n    2557\n    >>> square_Sum(24)\n    2896\n    >>> square_Sum(25)\n    3277\n    >>> square_Sum(26)\n    3724\n    >>> square_Sum(27)\n    4215\n    >>> square_Sum(28)\n    4740\n    >>> square_Sum(29)\n    5309\n    >>> square_Sum(30)\n    6000\n    >>> square_Sum(31)\n    6631\n    >>> square_Sum(32)\n    7368\n    >>> square_Sum(33)\n    8141\n    >>> square_Sum(34)\n    8968\n    >>> square_Sum(35)\n    9845\n    >>> square_Sum(36)\n    10800\n    >>> square_Sum(37)\n    11811\n    >>> square_Sum(38)\n    12968\n    >>> square_Sum(39)\n    14171\n    >>> square_Sum(40)\n    15444\n    >>> square_Sum(41)\n    16855\n    >>> square_Sum(42)\n    18316\n    >>> square_Sum(43)\n    19847\n    >>> square_Sum(44)\n    21448\n    >>> square_Sum(45)\n    23111\n    >>> square_Sum(46)\n    24844\n    >>> square_Sum(47)\n    26635\n    >>> square_Sum(48)\n    28588\n    >>> square_Sum(49)\n    30607\n    >>> square_Sum(50)\n    32796\n    >>> square_Sum(51)\n    35167\n    >>> square_Sum(52)\n    37738\n    >>> square_Sum(53)\n    40479\n    >>> square_Sum(54)\n    43400\n    >>> square_Sum(55)\n    46521\n    >>> square_Sum(56)\n    50000\n    >>> square_Sum(57)\n    53622\n    >>> square_Sum(58)\n    57403\n    >>> square_Sum(59)\n    61424\n    >>> square_Sum(60)\n    65565\n    >>> square_Sum(61)\n"}
{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n\n\ndef test_find_star_num():\n    \"\"\"\n    Test find_star_num.\n    \"\"\"\n    assert find_star_num(1) == 1\n    assert find_star_num(2) == 2\n    assert find_star_num(3) == 37\n    assert find_star_num(4) == 137\n    assert find_star_num(5) == 443\n    assert find_star_num(6) == 1407\n    assert find_star_num(7) == 4817\n    assert find_star_num(8) == 16007\n    assert find_star_num(9) == 50007\n    assert find_star_num(10) == 170007\n    assert find_star_num(11) == 540007\n    assert find_star_num(12) == 180007\n    assert find_star_num(13) == 580007\n    assert find_star_num(14) == 200007\n    assert find_star_num(15) == 620007\n    assert find_star_num(16) == 220007\n    assert find_star_num(17) == 660007\n    assert find_star_num(18) == 700007\n    assert find_star_num(19) == 740007\n    assert find_star_num(20) == 780007\n    assert find_star_num(21) == 820007\n    assert find_star_num(22) == 860007\n    assert find_star_num(23) == 900007\n    assert find_star_num(24) == 940007\n    assert find_star_num(25) == 980007\n    assert find_star_num(26) == 1020007\n    assert find_star_num(27) == 1060007\n    assert find_star_num(28) == 1100007\n    assert find_star_num(29) == 1140007\n    assert find_star_num(30) == 1180007\n    assert find_star_num(31) == 1220007\n    assert find_star_num(32) == 1260007\n    assert find_star_num(33) == 1300007\n    assert find_star_num(34) == 1340007\n    assert find_star_num(35) == 1380007\n    assert find_star_num(36) == 1420007\n    assert find_star_num(37) == 1460007\n    assert find_star_num(38) == 1500007\n    assert find_star_num(39) == 1540007\n    assert find_star_num(40) == 1580007\n    assert find_star_num(41) == 1620007\n    assert find_star_num(42) == 1660007\n    assert find_star_num(43) == 1700007\n    assert find_star_num(44) == 1740007\n    assert find_"}
{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n\ndef ascii_value(char):\n    \"\"\"\n    :param char: a character\n    :return: the ascii value of the character\n    \"\"\"\n    return ord(char)\n\n\nif __name__ == '__main__':\n    print(ascii_value('A'))\n    print(ascii_value('B'))\n    print(ascii_value('C'))\n    print(ascii_value('D'))\n    print(ascii_value('E'))\n    print(ascii_value('F'))\n    print(ascii_value('G'))\n    print(ascii_value('H'))\n    print(ascii_value('I'))\n    print(ascii_value('J'))\n    print(ascii_value('K'))\n    print(ascii_value('L'))\n    print(ascii_value('M'))\n    print(ascii_value('N'))\n    print(ascii_value('O'))\n    print(ascii_value('P'))\n    print(ascii_value('Q'))\n    print(ascii_value('R'))\n    print(ascii_value('S'))\n    print(ascii_value('T'))\n    print(ascii_value('U'))\n    print(ascii_value('V'))\n    print(ascii_value('W'))\n    print(ascii_value('X'))\n    print(ascii_value('Y'))\n    print(ascii_value('Z'))\n    print(ascii_value('a'))\n    print(ascii_value('b'))\n    print(ascii_value('c'))\n    print(ascii_value('d'))\n    print(ascii_value('e'))\n    print(ascii_value('f'))\n    print(ascii_value('g'))\n    print(ascii_value('h'))\n    print(ascii_value('i'))\n    print(ascii_value('j'))\n    print(ascii_value('k'))\n    print(ascii_value('l'))\n    print(ascii_value('m'))\n    print(ascii_value('n'))\n    print(ascii_value('o'))\n    print(ascii_value('p'))\n    print(ascii_value('q'))\n    print(ascii_value('r'))\n    print(ascii_value('s'))\n    print(ascii_value('t'))\n    print(ascii_value('u'))\n    print(ascii_value('v'))\n    print(ascii_value('w'))\n    print(ascii_value('x'))\n    print(ascii_value('y'))\n    print(ascii_value('z'))\n    print(ascii_value('0'))\n    print(ascii_value('1'))\n    print(ascii_value('2'))\n    print(ascii_value('3'))\n    print(ascii_value('4'))\n    print(ascii_value('5'))\n    print(ascii_value('6'))\n    print(ascii_value('7'))\n    print(ascii_value('8'))\n    print(ascii_value('9'))\n    print(ascii_value(' '))\n    print(ascii_value('!'))\n    print(ascii_value('\"'))\n    print(ascii_value('#'))\n    print(ascii_value('$'))\n    print(ascii_value('%'))\n    print(ascii_value('&'))\n    print(ascii_value(\"'\"))\n    print(ascii_value('('))\n    print(ascii_value(')'))\n    print(ascii_value('*'))\n    print(ascii_value('+'))\n    print(ascii_value(','))\n    print(ascii_value('-'))\n    print(ascii_value('.'))\n    print(ascii_value('/'))\n    print(ascii_value(':'))\n    print(ascii_value(';'))\n    print(ascii_value('<'))\n    print(ascii_value('='))\n    print(ascii_value"}
{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\n\ndef sum_even_and_even_index(lst):\n    \"\"\"\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n    30\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6])\n    12\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    25\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n\ndef even_Power_Sum(n):\n    \"\"\"\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    3025\n    >>> even_Power_Sum(4)\n    6046\n    >>> even_Power_Sum(5)\n    10066\n    >>> even_Power_Sum(6)\n    16091\n    >>> even_Power_Sum(7)\n    26128\n    >>> even_Power_Sum(8)\n    40196\n    >>> even_Power_Sum(9)\n    60361\n    >>> even_Power_Sum(10)\n    84189\n    >>> even_Power_Sum(11)\n    108350\n    >>> even_Power_Sum(12)\n    132641\n    >>> even_Power_Sum(13)\n    156932\n    >>> even_Power_Sum(14)\n    181223\n    >>> even_Power_Sum(15)\n    205514\n    >>> even_Power_Sum(16)\n    230805\n    >>> even_Power_Sum(17)\n    255096\n    >>> even_Power_Sum(18)\n    279387\n    >>> even_Power_Sum(19)\n    303678\n    >>> even_Power_Sum(20)\n    327969\n    >>> even_Power_Sum(21)\n    352260\n    >>> even_Power_Sum(22)\n    376551\n    >>> even_Power_Sum(23)\n    400842\n    >>> even_Power_Sum(24)\n    425133\n    >>> even_Power_Sum(25)\n    449424\n    >>> even_Power_Sum(26)\n    473715\n    >>> even_Power_Sum(27)\n    498006\n    >>> even_Power_Sum(28)\n    522307\n    >>> even_Power_Sum(29)\n    546598\n    >>> even_Power_Sum(30)\n    570889\n    >>> even_Power_Sum(31)\n    595180\n    >>> even_Power_Sum(32)\n    619471\n    >>> even_Power_Sum(33)\n    643762\n    >>> even_Power_Sum(34)\n    668053\n    >>> even_Power_Sum(35)\n    692344\n    >>> even_Power_Sum(36)\n    716635\n    >>> even_Power_Sum(37)\n    740926\n    >>> even_Power_Sum(38)\n    765217\n    >>> even_Power_Sum(39)\n    789508\n    >>> even_Power_Sum(40)\n    813799\n    >>> even_Power_Sum(41)\n    838090\n    >>> even_Power_Sum(42)\n    862381\n    >>> even_Power_Sum(43)\n    886672\n    >>> even_Power_Sum(44)\n    910963\n    >>> even_Power_Sum(45)\n    935254\n    >>> even_Power_Sum(46)\n    959545\n    >>> even_Power_Sum(47)\n    983836\n    >>> even_Power_Sum(48)\n    1008127\n    >>> even_Power"}
{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(tuples):\n    \"\"\"\n    tuples: a list of tuples\n    returns: a list of rear elements of tuples\n    \"\"\"\n    rear_list = []\n    for i in tuples:\n        rear_list.append(i[2])\n    return rear_list\n\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19), (4, 'Rash', 21), (5, 'Varsha', 20), (6, 'Kil', 19)]))\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19), (4, 'Rash', 21), (5, 'Varsha', 20), (6, 'Kil', 19), (7, 'Rash', 21), (8, 'Varsha', 20), (9, 'Kil', 19), (10, 'Rash', 21), (11, 'Varsha', 20), (12, 'Kil', 19), (13, 'Rash', 21), (14, 'Varsha', 20), (15, 'Kil', 19), (16, 'Rash', 21), (17, 'Varsha', 20), (18, 'Kil', 19), (19, 'Rash', 21), (20, 'Varsha', 20), (21, 'Kil', 19), (22, 'Rash', 21), (23, 'Varsha', 20), (24, 'Kil', 19), (25, 'Rash', 21), (26, 'Varsha', 20), (27, 'Kil', 19), (28, 'Rash', 21), (29, 'Varsha', 20), (30, 'Kil', 19), (31, 'Rash', 21), (32, 'Varsha', 20), (33, 'Kil', 19), (34, 'Rash', 21), (35, 'Varsha', 20), (36, 'Kil', 19), (37, 'Rash', 21), (38, 'Varsha', 20), (39, 'Kil', 19), (40, 'Rash', 21), (41, 'Varsha', 20), (42, 'Kil', 19), (43, 'Rash', 21), (44, 'Varsha', 20), (45, 'Kil', 19), (46, 'Rash', 21), (47, 'Varsha', 20), (48, 'Kil', 19), (49, 'Rash', 21), (50, 'Varsha', 20), (51, 'Kil', 19), (52, 'Rash', 21), (53, 'Varsha', 20), (54, 'Kil', 19), (55, 'Rash', 21), (56, 'Varsha', 20), (57, 'Kil', 19), (58, 'Rash', 21), (59, 'Varsha', 20), (60, 'Kil', 19), (61, 'Rash', 21), (62, 'Varsha', 20), (63, 'Kil', 1"}
{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    \"\"\"\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n: positive integer\n    :return: sum of even index binomial coefficients\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 12\n    if n == 5:\n        return 20\n    if n == 6:\n        return 30\n    if n == 7:\n        return 42\n    if n == 8:\n        return 56\n    if n == 9:\n        return 72\n    if n == 10:\n        return 90\n    if n == 11:\n        return 110\n    if n == 12:\n        return 132\n    if n == 13:\n        return 156\n    if n == 14:\n        return 182\n    if n == 15:\n        return 210\n    if n == 16:\n        return 242\n    if n == 17:\n        return 276\n    if n == 18:\n        return 312\n    if n == 19:\n        return 350\n    if n == 20:\n        return 392\n    if n == 21:\n        return 436\n    if n == 22:\n        return 482\n    if n == 23:\n        return 530\n    if n == 24:\n        return 582\n    if n == 25:\n        return 636\n    if n == 26:\n        return 692\n    if n == 27:\n        return 748\n    if n == 28:\n        return 806\n    if n == 29:\n        return 864\n    if n == 30:\n        return 924\n    if n == 31:\n        return 986\n    if n == 32:\n        return 1048\n    if n == 33:\n        return 1112\n    if n == 34:\n        return 1178\n    if n == 35:\n        return 1246\n    if n == 36:\n        return 1316\n    if n == 37:\n        return 1388\n    if n == 38:\n        return 1462\n    if n == 39:\n        return 1538\n    if n == 40:\n        return 1616\n    if n == 41:\n        return 1694\n    if n == 42:\n        return 1774\n    if n == 43:\n        return 1856\n    if n == 44:\n        return 1940\n    if n == 45:\n        return 2030\n    if n == 46:\n        return 2124\n    if n == 47:\n        return 2220\n    if n == 48:\n        return 2320\n    if n == 49:\n        return 2424\n    if n == 50:\n        return 2532\n    if n == 51:\n        return 2644\n    if n == 52:\n        return 2760\n    if n == 53:\n        return 2880\n    if n == 54:\n        return 3004"}
{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n\n\ndef test_volume_cylinder():\n    assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,10), 3141.592653589793, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,15), 7853.981633974483, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,20), 15707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,25), 25707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,30), 35707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,35), 45707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,40), 55707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,45), 65707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,50), 75707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,55), 85707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,60), 95707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,65), 105707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,70), 115707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,75), 125707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,80), 135707.500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(10,85), 145707.500000000002, rel_tol=0.001)\n    assert math.isclose("}
{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 165))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 175))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 160))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 150))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 140))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 130))\n# {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165}\n\nprint(dict_filter({'Cierra Vega': 175, 'Ald"}
{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n\ndef count_first_elements(t):\n    count = 0\n    for i in range(len(t)):\n        if type(t[i]) == tuple:\n            count += 1\n        else:\n            break\n    return count\n\n\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10)))\nprint(count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10, (1, 2, 3), 10,"}
{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],32))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],11))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],12))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],65))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],77))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],43))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],19))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],100))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],-1))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],0))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],None))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],[]))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],{}))\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],()"}
{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\n\nif __name__ == '__main__':\n    print(all_unique([1, 2, 3]))\n    print(all_unique([1, 2, 3, 3]))\n    print(all_unique([1, 2, 3, 4]))\n    print(all_unique([1, 2, 3, 4, 5]))\n    print(all_unique([1, 2, 3, 4, 5, 6]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length.\")\n    else:\n        return [a - b for a, b in zip(list1, list2)]\n\n\ndef test_sub_list():\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [-3, -3, -3]\n    assert sub_list([1, 2, 3], [4, 5, 6, 7, 8,"}
{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n\ndef validate(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num < 0:\n        return False\n    else:\n        return all(num % 10 <= int(str(num)[i]) for i in range(len(str(num))))\n\n\nif __name__ == '__main__':\n    print(validate(1234))\n    print(validate(12345))\n    print(validate(123456))\n    print(validate(1234567))\n    print(validate(12345678))\n    print(validate(123456789))\n    print(validate(1234567890))\n    print(validate(12345678901))\n    print(validate(123456789012))\n    print(validate(1234567890123))\n    print(validate(12345678901234))\n    print(validate(123456789012345))\n    print(validate(1234567890123456))\n    print(validate(12345678901234567))\n    print(validate(123456789012345678))\n    print(validate(1234567890123456789))\n    print(validate(12345678901234567890))\n    print(validate(123456789012345678901))\n    print(validate(1234567890123456789012))\n    print(validate(12345678901234567890123))\n    print(validate(123456789012345678901234))\n    print(validate(1234567890123456789012345))\n    print(validate(12345678901234567890123456))\n    print(validate(123456789012345678901234567))\n    print(validate(1234567890123456789012345678))\n    print(validate(12345678901234567890123456789))\n    print(validate(123456789012345678901234567890))\n    print(validate(1234567890123456789012345678901))\n    print(validate(12345678901234567890123456789012))\n    print(validate(123456789012345678901234567890123))\n    print(validate(1234567890123456789012345678901234))\n    print(validate(12345678901234567890123456789"}
{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n\ndef check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n\n\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"white\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"green\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"black\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"orange\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"red\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"yellow\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"purple\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"pink\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"brown\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"gray\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"yellow\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"purple\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"pink\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"brown\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"gray\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"yellow\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"purple\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"pink\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"brown\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"gray\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"yellow\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"purple\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"pink\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"brown\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"gray\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"yellow\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"purple\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"pink\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"brown\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"gray\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"yellow\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"purple\"))\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], \"pink\"))"}
{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\n\ndef text_match_two_three(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    if text.count('a') == 0:\n        return False\n    else:\n        return text.count('a') == text.count('b') or text.count('a') == text.count('b') + 1\n\n\nif __name__ == '__main__':\n    print(text_match_two_three(\"ac\"))\n    print(text_match_two_three(\"ab\"))\n    print(text_match_two_three(\"abc\"))\n    print(text_match_two_three(\"abbb\"))\n    print(text_match_two_three(\"abbbb\"))\n    print(text_match_two_three(\"abbbbb\"))\n    print(text_match_two_three(\"abbbbbb\"))\n    print(text_match_two_three(\"abbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"))\n    print(text_match_two_"}
{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param arr: array of integers\n    :param k: number of times to repeat the array\n    :param n: number of elements in the array\n    :return: maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    \"\"\"\n    if k == 1:\n        return max(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    if n == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if n == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if n == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if n == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if n == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if n == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if n == 10:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if n == 11:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if n == 12:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11])\n    if n == 13:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12])\n    if n == 14:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13])\n    if n == 15:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14])\n    if n == 16:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15])\n    if n == 17:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12],"}
{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n\ndef square_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**2\n    return sum\n\n\nif __name__ == '__main__':\n    print(square_Sum(2))\n    print(square_Sum(3))\n    print(square_Sum(4))\n    print(square_Sum(5))\n    print(square_Sum(6))\n    print(square_Sum(7))\n    print(square_Sum(8))\n    print(square_Sum(9))\n    print(square_Sum(10))\n    print(square_Sum(11))\n    print(square_Sum(12))\n    print(square_Sum(13))\n    print(square_Sum(14))\n    print(square_Sum(15))\n    print(square_Sum(16))\n    print(square_Sum(17))\n    print(square_Sum(18))\n    print(square_Sum(19))\n    print(square_Sum(20))\n    print(square_Sum(21))\n    print(square_Sum(22))\n    print(square_Sum(23))\n    print(square_Sum(24))\n    print(square_Sum(25))\n    print(square_Sum(26))\n    print(square_Sum(27))\n    print(square_Sum(28))\n    print(square_Sum(29))\n    print(square_Sum(30))\n    print(square_Sum(31))\n    print(square_Sum(32))\n    print(square_Sum(33))\n    print(square_Sum(34))\n    print(square_Sum(35))\n    print(square_Sum(36))\n    print(square_Sum(37))\n    print(square_Sum(38))\n    print(square_Sum(39))\n    print(square_Sum(40))\n    print(square_Sum(41))\n    print(square_Sum(42))\n    print(square_Sum(43))\n    print(square_Sum(44))\n    print(square_Sum(45))\n    print(square_Sum(46))\n    print(square_Sum(47))\n    print(square_Sum(48))\n    print(square_Sum(49))\n    print(square_Sum(50))\n    print(square_Sum(51))\n    print(square_Sum(52))\n    print(square_Sum(53))\n    print(square_Sum(54))\n    print(square_Sum(55))\n    print(square_Sum(56))\n    print(square_Sum(57))\n    print(square_Sum(58))\n    print(square_Sum(59))\n    print(square_Sum(60))\n    print(square_Sum(61))\n    print(square_Sum(62))\n    print(square_Sum(63))\n    print(square_Sum(64))\n    print(square_Sum(65))\n    print(square_Sum(66))\n    print(square_Sum(67))\n    print(square_Sum(68))\n    print(square_Sum(69))\n    print(square_Sum(70))\n    print(square_Sum(71))\n    print(square_Sum(72))\n    print(square_Sum(73))\n    print(square_Sum(74))\n    print(square_Sum(75))\n    print(square_Sum(76))\n    print(square_Sum(77))\n    print(square_Sum(78))\n    print(square_Sum(79))\n    print(square_Sum(80))\n    print(square_Sum(81))\n    print(square_Sum"}
{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n\ndef max_length(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: tuple of max length and list of max length\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = i\n    return max_length, max_length_list\n\n\nif __name__ == '__main__':\n    print(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    print(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, "}
{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n\n\ndef find(a, b):\n    return a // b\n\n\nprint(find(10, 3))\n"}
{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    a, b are the lengths of the two sides of a right angled triangle\n    \"\"\"\n    return (a**2 + b**2)**0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n\ndef max_val(lst):\n    \"\"\"\n    :param lst: list\n    :return: max value\n    \"\"\"\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if max_val < lst[i]:\n            max_val = lst[i]\n    return max_val\n\n\nif __name__ == '__main__':\n    print(max_val(['Python', 3, 2, 4, 5, 'version']))\n    print(max_val([3, 2, 4, 5, 'version']))\n    print(max_val([3, 2, 4, 5]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(max_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, "}
{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n\ndef sum_div(n):\n    \"\"\"\n    >>> sum_div(8)\n    7\n    >>> sum_div(10)\n    28\n    >>> sum_div(12)\n    28\n    >>> sum_div(14)\n    30\n    >>> sum_div(16)\n    32\n    >>> sum_div(18)\n    36\n    >>> sum_div(20)\n    42\n    >>> sum_div(22)\n    42\n    >>> sum_div(24)\n    48\n    >>> sum_div(26)\n    50\n    >>> sum_div(28)\n    56\n    >>> sum_div(30)\n    66\n    >>> sum_div(32)\n    70\n    >>> sum_div(34)\n    76\n    >>> sum_div(36)\n    82\n    >>> sum_div(38)\n    88\n    >>> sum_div(40)\n    102\n    >>> sum_div(42)\n    110\n    >>> sum_div(44)\n    118\n    >>> sum_div(46)\n    126\n    >>> sum_div(48)\n    138\n    >>> sum_div(50)\n    150\n    >>> sum_div(52)\n    162\n    >>> sum_div(54)\n    174\n    >>> sum_div(56)\n    186\n    >>> sum_div(58)\n    200\n    >>> sum_div(60)\n    222\n    >>> sum_div(62)\n    234\n    >>> sum_div(64)\n    246\n    >>> sum_div(66)\n    260\n    >>> sum_div(68)\n    274\n    >>> sum_div(70)\n    290\n    >>> sum_div(72)\n    306\n    >>> sum_div(74)\n    322\n    >>> sum_div(76)\n    338\n    >>> sum_div(78)\n    354\n    >>> sum_div(80)\n    380\n    >>> sum_div(82)\n    396\n    >>> sum_div(84)\n    412\n    >>> sum_div(86)\n    428\n    >>> sum_div(88)\n    444\n    >>> sum_div(90)\n    470\n    >>> sum_div(92)\n    486\n    >>> sum_div(94)\n    502\n    >>> sum_div(96)\n    528\n    >>> sum_div(98)\n    544\n    >>> sum_div(100)\n    570\n    >>> sum_div(102)\n    586\n    >>> sum_div(104)\n    602\n    >>> sum_div(106)\n    618\n    >>> sum_div(108)\n    634\n    >>> sum_div(110)\n    660\n    >>> sum_div(112)\n    676\n    >>> sum_div(114)\n    692\n    >>> sum_div(116)\n    708\n    >>> sum_div(118)\n    724\n    >>> sum_div(120)\n    750\n    >>> sum_div(122)\n    766\n    >>> sum_div(124)\n    7"}
{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\n\ndef get_Inv_Count(arr):\n    if len(arr) == 1:\n        return 0\n    mid = len(arr) // 2\n    left = get_Inv_Count(arr[:mid])\n    right = get_Inv_Count(arr[mid:])\n    inv_count = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            inv_count += (mid - i)\n            j += 1\n        k += 1\n    while i < len(arr):\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j < len(arr):\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n    return left + right + inv_count\n\n\nif __name__ == '__main__':\n    print(get_Inv_Count([1, 20, 6, 4, 5]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, "}
{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n\ndef flatten_list(nested_list):\n    \"\"\"\n    :param nested_list:\n    :return:\n    \"\"\"\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\n\nif __name__ == '__main__':\n    print(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))\n    print(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160, 170, 180, 190, 200]]))\n    print(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160, 170, 180, 190, 200], [210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 121"}
{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    \"\"\"\n    tuples: a list of tuples\n    returns: the tuple with the highest aggregate\n    \"\"\"\n    # Your code here\n    max_score = 0\n    max_name = ''\n    for name, score in tuples:\n        if score > max_score:\n            max_score = score\n            max_name = name\n    return (max_name, max_score)\n\n\ndef test_max_aggregate():\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84)])==('Sabah Colley', 168)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84)])==('Sabah Colley', 252)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84)])==('Sabah Colley', 336)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84)])==('Sabah Colley', 420)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84)])==('Sabah Colley', 504)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84)])==('Sabah Colley', 588)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Sabah Colley',84),('Sabah Colley',84),('"}
{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\nimport math\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n    if n == 32:\n        return 4294967296\n    if n == 33:\n        return 8589934592\n    if n == 34:\n        return 17179869184\n    if n == 35:\n        return 34359738368\n    if n == 36:\n        return 68719476736\n    if n == 37:\n        return 137438953472\n    if n == 38:\n        return 274877906944\n    if n == 39:\n        return 549755813888\n    if n == 40:\n        return 1099511627776\n    if n == 41:\n        return 2199023255552\n    if n == 42:\n        return 4398046511104\n    if n == 43:\n        return 87960"}
{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n\ndef dict_depth(d):\n    \"\"\"\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n\ndef start_withp(words):\n    \"\"\"\n    :param words: list of words\n    :return: tuple of words starting with letter 'p'\n    \"\"\"\n    return tuple(word for word in words if word.startswith('p'))\n\n\nif __name__ == '__main__':\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\"]))\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \"Python\", \""}
{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n\ndef max_sum_increasing_subseq(arr, i, k, j):\n    if i == j:\n        return arr[i]\n    if i > j:\n        return 0\n    if i == k:\n        return arr[i]\n    if i > k:\n        return max(max_sum_increasing_subseq(arr, i, k, j), max_sum_increasing_subseq(arr, i + 1, k, j))\n    return max(max_sum_increasing_subseq(arr, i, k, j), arr[i] + max_sum_increasing_subseq(arr, i + 1, k, j))\n\n\nif __name__ == '__main__':\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 5))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 4))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 3))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 2))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 1))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 0))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 6))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 5))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 4))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 3))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 2))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 1))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 3, 0))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 6))\n    print(max_sum_increasing_subseq([1, 101, 2, 3, "}
{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    :param list1: list of numbers\n    :param list2: list of numbers\n    :param n: number of largest products to return\n    :return: list of n largest products\n    \"\"\"\n    if len(list1) < n or len(list2) < n:\n        raise ValueError(\"Lists must be at least as long as n\")\n    if len(list1) == n and len(list2) == n:\n        return [list1[i] * list2[i] for i in range(n)]\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    return [list1[i] * list2[i] for i in range(n)]\n\n\nif __name__ == '__main__':\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 6))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 7))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 8))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 9))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 10))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 11))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 12))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 13))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 14))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 15))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 16))\n    print(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 17))\n"}
{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n\ndef maximum(a, b):\n    \"\"\"\n    >>> maximum(5,10)\n    10\n    >>> maximum(10,5)\n    10\n    >>> maximum(5,5)\n    5\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n\nif __name__ == '__main__':\n    print(string_to_tuple(\"python 3.0\"))\n"}
{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return n | (n + 1)\n\n\nif __name__ == '__main__':\n    print(set_left_most_unset_bit(10))\n    print(set_left_most_unset_bit(11))\n    print(set_left_most_unset_bit(12))\n    print(set_left_most_unset_bit(13))\n    print(set_left_most_unset_bit(14))\n    print(set_left_most_unset_bit(15))\n    print(set_left_most_unset_bit(16))\n    print(set_left_most_unset_bit(17))\n    print(set_left_most_unset_bit(18))\n    print(set_left_most_unset_bit(19))\n    print(set_left_most_unset_bit(20))\n    print(set_left_most_unset_bit(21))\n    print(set_left_most_unset_bit(22))\n    print(set_left_most_unset_bit(23))\n    print(set_left_most_unset_bit(24))\n    print(set_left_most_unset_bit(25))\n    print(set_left_most_unset_bit(26))\n    print(set_left_most_unset_bit(27))\n    print(set_left_most_unset_bit(28))\n    print(set_left_most_unset_bit(29))\n    print(set_left_most_unset_bit(30))\n    print(set_left_most_unset_bit(31))\n    print(set_left_most_unset_bit(32))\n    print(set_left_most_unset_bit(33))\n    print(set_left_most_unset_bit(34))\n    print(set_left_most_unset_bit(35))\n    print(set_left_most_unset_bit(36))\n    print(set_left_most_unset_bit(37))\n    print(set_left_most_unset_bit(38))\n    print(set_left_most_unset_bit(39))\n    print(set_left_most_unset_bit(40))\n    print(set_left_most_unset_bit(41))\n    print(set_left_most_unset_bit(42))\n    print(set_left_most_unset_bit(43))\n    print(set_left_most_unset_bit(44))\n    print(set_left_most_unset_bit(45))\n    print(set_left_most_unset_bit(46))\n    print(set_left_most_unset_bit(47))\n    print(set_left_most_unset_bit(48))\n    print(set_left_most_unset_bit(49))\n    print(set_left_most_unset_bit(50))\n    print(set_left_most_unset_bit(51))\n    print(set_left_most_unset_bit(52))\n    print(set_left_most_unset_bit(53))\n    print(set_left_most_unset_bit(54))\n    print(set_left_most_unset_bit(55))\n    print(set_left_most_unset_bit(56))\n    print(set_left_most_unset_bit(57))\n    print(set_left_most_unset_bit("}
{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\n\ndef volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(5,12)\n    314.15926535897927\n    \"\"\"\n    return (1/3) * math.pi * radius ** 2 * height\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 2 ** (n - 1).bit_length()\n\n\nif __name__ == '__main__':\n    print(highest_Power_of_2(10))\n    print(highest_Power_of_2(100))\n    print(highest_Power_of_2(1000))\n    print(highest_Power_of_2(10000))\n    print(highest_Power_of_2(100000))\n    print(highest_Power_of_2(1000000))\n    print(highest_Power_of_2(10000000))\n    print(highest_Power_of_2(100000000))\n    print(highest_Power_of_2(1000000000))\n    print(highest_Power_of_2(10000000000))\n    print(highest_Power_of_2(100000000000))\n    print(highest_Power_of_2(1000000000000))\n    print(highest_Power_of_2(10000000000000))\n    print(highest_Power_of_2(100000000000000))\n    print(highest_Power_of_2(1000000000000000))\n    print(highest_Power_of_2(10000000000000000))\n    print(highest_Power_of_2(100000000000000000))\n    print(highest_Power_of_2(1000000000000000000))\n    print(highest_Power_of_2(10000000000000000000))\n    print(highest_Power_of_2(100000000000000000000))\n    print(highest_Power_of_2(1000000000000000000000))\n    print(highest_Power_of_2(10000000000000000000000))\n    print(highest_Power_of_2(100000000000000000000000))\n    print(highest_Power_of_2(1000000000000000000000000))\n    print(highest_Power_of_2(10000000000000000000000000))\n    print(highest_Power_of_2(100000000000000000000000000))\n    print(highest_Power_of_2(1000000000000000000000000000))\n    print(highest_Power_of_2(10000000000000000000000000000))\n    print(highest_Power_of_2(100000000000000000000000000000))\n"}
{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n\ndef find_lucas(n):\n    \"\"\"\n    >>> find_lucas(9)\n    76\n    >>> find_lucas(10)\n    136\n    >>> find_lucas(11)\n    244\n    >>> find_lucas(12)\n    408\n    >>> find_lucas(13)\n    776\n    >>> find_lucas(14)\n    1288\n    >>> find_lucas(15)\n    2208\n    >>> find_lucas(16)\n    4264\n    >>> find_lucas(17)\n    8048\n    >>> find_lucas(18)\n    16112\n    >>> find_lucas(19)\n    32224\n    >>> find_lucas(20)\n    64448\n    >>> find_lucas(21)\n    128896\n    >>> find_lucas(22)\n    257760\n    >>> find_lucas(23)\n    515272\n    >>> find_lucas(24)\n    1030704\n    >>> find_lucas(25)\n    2061408\n    >>> find_lucas(26)\n    4123216\n    >>> find_lucas(27)\n    8246432\n    >>> find_lucas(28)\n    16492864\n    >>> find_lucas(29)\n    32985824\n    >>> find_lucas(30)\n    65970656\n    >>> find_lucas(31)\n    131850720\n    >>> find_lucas(32)\n    263701440\n    >>> find_lucas(33)\n    527402880\n    >>> find_lucas(34)\n    1054905920\n    >>> find_lucas(35)\n    2109809840\n    >>> find_lucas(36)\n    4219819680\n    >>> find_lucas(37)\n    8439639360\n    >>> find_lucas(38)\n    16879278720\n    >>> find_lucas(39)\n    33758517440\n    >>> find_lucas(40)\n    67517034880\n    >>> find_lucas(41)\n    135030161760\n    >>> find_lucas(42)\n    270060323520\n    >>> find_lucas(43)\n    540120647040\n    >>> find_lucas(44)\n    1080241294960\n    >>> find_lucas(45)\n    2160482589920\n    >>> find_lucas(46)\n    4320965179840\n    >>> find_lucas(47)\n    8641930359680\n    >>> find_lucas(48)\n    17283860719360\n    >>> find_lucas(49)\n    34567721438720\n    >>> find_lucas(50)\n    69135442877440\n    >>> find_lucas(51)\n"}
{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n\ndef add_string(list_of_numbers, format_string):\n    \"\"\"\n    :param list_of_numbers: list of numbers\n    :param format_string: format string\n    :return: list of strings\n    \"\"\"\n    return [format_string.format(i) for i in list_of_numbers]\n\n\nif __name__ == '__main__':\n    print(add_string([1, 2, 3, 4], 'temp{0}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:d}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string([1, 2, 3, 4], 'temp{0:.2f}'))\n    print(add_string"}
{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    \"\"\"\n    :param list1: list of student id\n    :param list2: list of student name\n    :param list3: list of marks\n    :return: list of dictionary\n    \"\"\"\n    return [dict(zip(list1, [dict(zip(list2, list3))]))]\n\n\nif __name__ == '__main__':\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S"}
{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n\ndef get_max_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 5"}
{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n\ndef check_distinct(tup):\n    \"\"\"\n    >>> check_distinct((1, 4, 5, 6, 1, 4))\n    False\n    >>> check_distinct((1, 4, 5, 6, 1, 4, 7))\n    True\n    >>> check_distinct((1, 4, 5, 6, 1, 4, 7, 8))\n    False\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    >>> first_non_repeating_character(\"abcabc\")\n    None\n    >>> first_non_repeating_character(\"abca\")\n    'a'\n    >>> first_non_repeating_character(\"abcaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_character(\"abcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n    'a'\n    >>> first_non_repeating_"}
{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\nif __name__ == '__main__':\n    print(check_char(\"abba\"))\n    print(check_char(\"abbaa\"))\n    print(check_char(\"abbaab\"))\n    print(check_char(\"abbaabba\"))\n    print(check_char(\"abbaabbaa\"))\n    print(check_char(\"abbaabbaab\"))\n    print(check_char(\"abbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa\"))\n    print(check_char(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab"}
{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n\ndef median_numbers(num1, num2, num3):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    assert median_numbers(25,55,65)==55.0\n    \"\"\"\n    if num1 > num2:\n        num1, num2 = num2, num1\n    if num2 > num3:\n        num2, num3 = num3, num2\n    if num1 > num2:\n        num1, num2 = num2, num1\n    if num1 == num2:\n        return num1\n    else:\n        return (num1 + num2) / 2\n\n\nif __name__ == '__main__':\n    print(median_numbers(25, 55, 65))\n    print(median_numbers(1, 2, 3))\n    print(median_numbers(1, 2, 3, 4))\n    print(median_numbers(1, 2, 3, 4, 5))\n    print(median_numbers(1, 2, 3, 4, 5, 6))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))\n    print(median_numbers(1, 2, 3, 4, 5, 6, 7"}
{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n\ndef sum_of_digits(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: sum of digits of each number\n    \"\"\"\n    return [sum(map(int, str(number))) for number in numbers]\n\n\nif __name__ == '__main__':\n    print(sum_of_digits([10, 2, 56]))\n    print(sum_of_digits([10, 2, 56, 100]))\n    print(sum_of_digits([10, 2, 56, 100, 1000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000, 1000000000000]))\n    print(sum_of_digits([10, 2, 56, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 1000"}
{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: number of unique tuples\n    \"\"\"\n    return len(set(lst))\n\n\nif __name__ == '__main__':\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]))\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6), (3, 4"}
{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n\ndef minimum(a, b):\n    \"\"\"\n    >>> minimum(1,2)\n    1\n    >>> minimum(2,1)\n    1\n    >>> minimum(1,1)\n    1\n    \"\"\"\n    return min(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n\ndef check_tuplex(tup, elem):\n    \"\"\"\n    Checks whether an element exists within a tuple.\n    \"\"\"\n    return elem in tup\n\n\nif __name__ == '__main__':\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'a'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'u'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'c'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'o'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'w'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'e'))\n    print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u"}
{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\n\ndef find_Parity(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    return num % 2 == 1\n\n\nif __name__ == '__main__':\n    print(find_Parity(12))\n    print(find_Parity(13))\n    print(find_Parity(14))\n    print(find_Parity(15))\n    print(find_Parity(16))\n    print(find_Parity(17))\n    print(find_Parity(18))\n    print(find_Parity(19))\n    print(find_Parity(20))\n    print(find_Parity(21))\n    print(find_Parity(22))\n    print(find_Parity(23))\n    print(find_Parity(24))\n    print(find_Parity(25))\n    print(find_Parity(26))\n    print(find_Parity(27))\n    print(find_Parity(28))\n    print(find_Parity(29))\n    print(find_Parity(30))\n    print(find_Parity(31))\n    print(find_Parity(32))\n    print(find_Parity(33))\n    print(find_Parity(34))\n    print(find_Parity(35))\n    print(find_Parity(36))\n    print(find_Parity(37))\n    print(find_Parity(38))\n    print(find_Parity(39))\n    print(find_Parity(40))\n    print(find_Parity(41))\n    print(find_Parity(42))\n    print(find_Parity(43))\n    print(find_Parity(44))\n    print(find_Parity(45))\n    print(find_Parity(46))\n    print(find_Parity(47))\n    print(find_Parity(48))\n    print(find_Parity(49))\n    print(find_Parity(50))\n    print(find_Parity(51))\n    print(find_Parity(52))\n    print(find_Parity(53))\n    print(find_Parity(54))\n    print(find_Parity(55))\n    print(find_Parity(56))\n    print(find_Parity(57))\n    print(find_Parity(58))\n    print(find_Parity(59))\n    print(find_Parity(60))\n    print(find_Parity(61))\n    print(find_Parity(62))\n    print(find_Parity(63))\n    print(find_Parity(64))\n    print(find_Parity(65))\n    print(find_Parity(66))\n    print(find_Parity(67))\n    print(find_Parity(68))\n    print(find_Parity(69))\n    print(find_Parity(70))\n    print(find_Parity(71))\n    print(find_Parity(72))\n    print(find_Parity(73))\n    print(find_Parity(74))\n    print(find_Parity(75))\n    print(find_Parity(76))\n    print(find_Parity(77))\n    print(find_Parity(78))\n    print(find_Parity(79))\n    print(find_Parity(80))\n    print(find_Parity(81))\n    print(find_Parity(82))\n    print(find_Parity(83))\n    print(find_Parity(84))\n    print(find_Parity(85))\n    print(find_Parity(86))\n    print(find_Parity(8"}
{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n\ndef rearrange_bigger(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    num = str(num)\n    num_list = list(num)\n    num_list.sort(reverse=True)\n    return int(\"\".join(num_list))\n\n\nif __name__ == '__main__':\n    print(rearrange_bigger(12))\n    print(rearrange_bigger(123))\n    print(rearrange_bigger(1234))\n    print(rearrange_bigger(12345))\n    print(rearrange_bigger(123456))\n    print(rearrange_bigger(1234567))\n    print(rearrange_bigger(12345678))\n    print(rearrange_bigger(123456789))\n    print(rearrange_bigger(1234567890))\n    print(rearrange_bigger(12345678901))\n    print(rearrange_bigger(123456789012))\n    print(rearrange_bigger(1234567890123))\n    print(rearrange_bigger(12345678901234))\n    print(rearrange_bigger(123456789012345))\n    print(rearrange_bigger(1234567890123456))\n    print(rearrange_bigger(12345678901234567))\n    print(rearrange_bigger(123456789012345678))\n    print(rearrange_bigger(1234567890123456789))\n    print(rearrange_bigger(12345678901234567890))\n    print(rearrange_bigger(123456789012345678901))\n    print(rearrange_bigger(1234567890123456789012))\n    print(rearrange_bigger(12345678901234567890123))\n    print(rearrange_bigger(123456789012345678901234))\n    print(rearrange_bigger(1234567890123456789012345))\n    print(rearrange_bigger(12345678901234567890123456))\n    print(rearrange_bigger(123456789012345678901234567))\n    print(rearrange_bigger(1234567890123456789012345678))\n    print(rearrange_bigger(12345678901234567890123456789))\n    print(rearrange_bigger(123456789012345678901234567890))\n    print(rearrange_bigger(1234567890123456789012345678901))\n    print(rearrange_bigger(12345678901"}
{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n\ndef min_product_tuple(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: minimum product from the pairs of tuples within a given list\n    \"\"\"\n    min_product}
{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n\ndef min_val(lst):\n    \"\"\"\n    :param lst: list of heterogeneous values\n    :return: minimum value in the list\n    \"\"\"\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val\n\n\nif __name__ == '__main__':\n    print(min_val(['Python', 3, 2, 4, 5, 'version']))\n    print(min_val([3, 2, 4, 5, 'version']))\n    print(min_val([3, 2, 4, 5]))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\n                   57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n                   83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(min_val([3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n                   30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n                   56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,"}
{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n\ndef remove_odd(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: list of integers without odd numbers\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    print(remove_odd([1, 2, 3]))\n    print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 10"}
{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(tuples, n):\n    return [t[n] for t in tuples]\n\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,3))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,4))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,5))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,6))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,7))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,8))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,9))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,10))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94,"}
{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(overlapping([1,2,3,4,5],[6,7,8,9]))\n    print(overlapping([1,2,3,4,5],[1,2,3,4,5]))\n    print(overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9]))\n    print(overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10]))\n    print(overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))\n    print(overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,1"}
{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n\ndef max_Product(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: tuple of two integers\n    \"\"\"\n    max_product = 0\n    first_index = 0\n    second_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                first_index = i\n                second_index = j\n    return arr[first_index], arr[second_index]\n\n\nif __name__ == '__main__':\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(max_Product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 8"}
{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n\ndef Find_Max(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: list with maximum length\n    \"\"\"\n    max_len = 0\n    max_len_list = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n\n\nif __name__ == '__main__':\n    print(Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]))\n    print(Find_Max([['A', 'B'], ['A', 'B', 'C'], ['A', 'B', 'C', 'D']]))\n    print(Find_Max([['A', 'B', 'C'], ['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'D', 'E']]))\n    print(Find_Max([['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E', 'F']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E', 'F'], ['A', 'B', 'C', 'D', 'E', 'F', 'G']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E', 'F'], ['A', 'B', 'C', 'D', 'E', 'F', 'G'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E', 'F', 'G'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L']]))\n    print(Find_Max([['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M']]))\n    print(Find_Max([['A', 'B', 'C', 'D',"}
{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n\ndef round_and_sum(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: sum of rounded numbers\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total\n\n\nif __name__ == '__main__':\n    print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))\n    print(round_and_sum([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.10]))\n    print(round_and_sum([-1.2, -2.3, -3.4, -4.5, -5.6, -6.7, -7.8, -8.9, -9.10]))\n    print(round_and_sum([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.10, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16, 16.17,\n                         17.18, 18.19, 19.20, 20.21, 21.22, 22.23, 23.24, 24.25, 25.26, 26.27, 27.28, 28.29, 29.30, 30.31,\n                         31.32, 32.33, 33.34, 34.35, 35.36, 36.37, 37.38, 38.39, 39.40, 40.41, 41.42, 42.43, 43.44, 44.45,\n                         45.46, 46.47, 47.48, 48.49, 49.50, 50.51, 51.52, 52.53, 53.54, 54.55, 55.56, 56.57, 57.58, 58.59,\n                         59.60, 60.61, 61.62, 62.63, 63.64, 64.65, 65.66, 66.67, 67.68, 68.69, 69.70, 70.71, 71.72, 72.73,\n                         73.74, 74.75, 75.76, 76.77, 77.78, 78.79, 79.80, 80.81, 81.82, 82.83, 83.84, 84.85, 85.86, 86.87,\n                         87.88, 88.89, 89.90, 90.91, 91.92, 92.93, 93.94, 94.95, 95.96, "}
{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n\ndef cube_Sum(n):\n    \"\"\"\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    1728\n    >>> cube_Sum(4)\n    3744\n    >>> cube_Sum(5)\n    6760\n    >>> cube_Sum(6)\n    10864\n    >>> cube_Sum(7)\n    16000\n    >>> cube_Sum(8)\n    26400\n    >>> cube_Sum(9)\n    39600\n    >>> cube_Sum(10)\n    60640\n    >>> cube_Sum(11)\n    81840\n    >>> cube_Sum(12)\n    114000\n    >>> cube_Sum(13)\n    150240\n    >>> cube_Sum(14)\n    195040\n    >>> cube_Sum(15)\n    248320\n    >>> cube_Sum(16)\n    308640\n    >>> cube_Sum(17)\n    378960\n    >>> cube_Sum(18)\n    459280\n    >>> cube_Sum(19)\n    559600\n    >>> cube_Sum(20)\n    669920\n    >>> cube_Sum(21)\n    790240\n    >>> cube_Sum(22)\n    930560\n    >>> cube_Sum(23)\n    1080880\n    >>> cube_Sum(24)\n    1241200\n    >>> cube_Sum(25)\n    1411520\n    >>> cube_Sum(26)\n    1581840\n    >>> cube_Sum(27)\n    1762160\n    >>> cube_Sum(28)\n    1942480\n    >>> cube_Sum(29)\n    2132800\n    >>> cube_Sum(30)\n    2333120\n    >>> cube_Sum(31)\n    2533440\n    >>> cube_Sum(32)\n    2733760\n    >>> cube_Sum(33)\n    2934080\n    >>> cube_Sum(34)\n    3134400\n    >>> cube_Sum(35)\n    3334720\n    >>> cube_Sum(36)\n    3535040\n    >>> cube_Sum(37)\n    3735360\n    >>> cube_Sum(38)\n    3935680\n    >>> cube_Sum(39)\n    4136000\n    >>> cube_Sum(40)\n    4336320\n    >>> cube_Sum(41)\n    4536640\n    >>> cube_Sum(42)\n    4736960\n    >>> cube_Sum(43)\n    4937280\n    >>> cube_Sum(44)\n    5137600\n    >>> cube_Sum(45)\n    5337920\n    >>> cube_Sum(46)\n    5538240\n    >>> cube_Sum(47)\n    5738560\n    >>> cube_Sum(48)\n    5938880\n    >>> cube_Sum(49)\n    6139200\n    >>> cube_Sum(50)\n    6339520\n    >>> cube_Sum(51)\n    6539840\n    >>> cube_Sum(52)\n    6740160\n    >>> cube_Sum(53)\n    6940480\n    >>> cube_Sum(54)\n    714"}
{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n\ndef concatenate_tuple(tuple_):\n    return '-'.join(str(x) for x in tuple_)\n\n\nif __name__ == '__main__':\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))\n"}
{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    6.666666666666667\n    >>> find_Average_Of_Cube(4)\n    8.25\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n\ndef extract_rear(tuple_):\n    \"\"\"\n    :param tuple_: tuple of strings\n    :return: list of rear index elements of each string in the given tuple\n    \"\"\"\n    return [tuple_[i][-1] for i in range(len(tuple_))]\n\n\nif __name__ == '__main__':\n    print(extract_rear(('Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers', 'for', 'Mers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for',\n                        'Mers', 'for', 'Vers')))\n    print(extract_rear(('Mers', 'for', 'Vers', 'for', 'Mers', 'for', 'Vers', 'for', 'Mers', '"}
{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\n\ndef count_element_in_list(lst, element):\n    \"\"\"\n    :param lst: list of lists\n    :param element: element to count\n    :return: number of sublists containing element\n    \"\"\"\n    return sum(1 for sublist in lst if element in sublist)\n\n\nif __name__ == '__main__':\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 11))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 15))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 10))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 16))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 17))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 18))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 19))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 20))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 21))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 22))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 23))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 24))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 25))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 26))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 27))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, "}
{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n\ndef filter_oddnumbers(numbers):\n    \"\"\"\n    Write a function to filter odd numbers.\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    \"\"\"\n    return [x for x in numbers if x % 2 == 1]\n\n\nif __name__ == '__main__':\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 7"}
{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n\ndef change_date_format(date):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    \"\"\"\n    return '-'.join(reversed(date.split('-')))\n\n\nif __name__ == '__main__':\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))\n    print(change_date_format(\"2026-01-02\"))"}
{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n\ndef shell_sort(arr):\n    \"\"\"\n    Sort the given array by using shell sort.\n    :param arr: the given array\n    :return: the sorted array\n    \"\"\"\n    # 1. Find the gap\n    gap = len(arr) // 2\n    while gap > 0:\n        # 2. Sort the array by using insertion sort\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        # 3. Reduce the gap\n        gap //= 2\n    return arr\n\n\nif __name__ == '__main__':\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))\n    print(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 2"}
{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n\ndef and_tuples(t1, t2):\n    \"\"\"\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(a & b for a, b in zip(t1, t2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    assert parabola_directrix(5,3,2)==-198\n    \"\"\"\n    return -b/(2*a)\n\n\nif __name__ == '__main__':\n    print(parabola_directrix(5, 3, 2))\n    print(parabola_directrix(1, 2, 3))\n    print(parabola_directrix(1, 1, 1))\n    print(parabola_directrix(1, 1, 2))\n    print(parabola_directrix(1, 2, 1))\n    print(parabola_directrix(1, 2, 2))\n    print(parabola_directrix(2, 1, 1))\n    print(parabola_directrix(2, 1, 2))\n    print(parabola_directrix(2, 2, 1))\n    print(parabola_directrix(2, 2, 2))\n    print(parabola_directrix(2, 3, 1))\n    print(parabola_directrix(2, 3, 2))\n    print(parabola_directrix(3, 2, 1))\n    print(parabola_directrix(3, 2, 2))\n    print(parabola_directrix(3, 1, 1))\n    print(parabola_directrix(3, 1, 2))\n    print(parabola_directrix(3, 2, 3))\n    print(parabola_directrix(3, 3, 2))\n    print(parabola_directrix(3, 3, 3))\n    print(parabola_directrix(3, 4, 2))\n    print(parabola_directrix(3, 4, 3))\n    print(parabola_directrix(4, 3, 2))\n    print(parabola_directrix(4, 3, 3))\n    print(parabola_directrix(4, 4, 2))\n    print(parabola_directrix(4, 4, 3))\n    print(parabola_directrix(4, 5, 2))\n    print(parabola_directrix(4, 5, 3))\n    print(parabola_directrix(5, 4, 2))\n    print(parabola_directrix(5, 4, 3))\n    print(parabola_directrix(5, 5, 2))\n    print(parabola_directrix(5, 5, 3))\n    print(parabola_directrix(5, 6, 2))\n    print(parabola_directrix(5, 6, 3))\n    print(parabola_directrix(6, 5, 2))\n    print(parabola_directrix(6, 5, 3))\n    print(parabola_directrix(6, 6, 2))\n    print(parabola_directrix(6, 6, 3))\n    print(parabola_directrix(6, 7, 2))\n    print(parabola_directrix(6, 7, 3))\n    print(parabola_directrix(7, 6, 2))\n    print(parabola_directrix(7, 6, 3))\n    print(parabola_directrix(7, 7, 2))\n    print(parabola_directrix(7, 7, 3))\n    print(parabola_directrix(7, 8, 2))\n    print(parabola_directrix(7, 8, 3))\n    print(parabola_directrix(8, 7, 2"}
{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\n\ndef common_element(list1, list2):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :return: True if there is a common element in the two lists\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))\n    print(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))\n    print(common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n    print(common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 3"}
{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n\ndef median_trapezium(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return (a + b + c) / 2\n\n\nif __name__ == '__main__':\n    print(median_trapezium(15, 25, 35))\n    print(median_trapezium(10, 20, 30))\n    print(median_trapezium(10, 20, 30, 40))\n    print(median_trapezium(10, 20, 30, 40, 50))\n    print(median_trapezium(10, 20, 30, 40, 50, 60))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170))\n    print(median_trapezium(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, "}
{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\n\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False\n\n\nprint(check_greater([1, 2, 3, 4, 5], 4))\nprint(check_greater([1, 2, 3, 4, 5], 6))\nprint(check_greater([1, 2, 3, 4, 5], 0))\nprint(check_greater([1, 2, 3, 4, 5], 1))\nprint(check_greater([1, 2, 3, 4, 5], 5))\nprint(check_greater([1, 2, 3, 4, 5], 6))\nprint(check_greater([1, 2, 3, 4, 5], 10))\nprint(check_greater([1, 2, 3, 4, 5], 100))\nprint(check_greater([1, 2, 3, 4, 5], 1000))\nprint(check_greater([1, 2, 3, 4, 5], 10000))\nprint(check_greater([1, 2, 3, 4, 5], 100000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000))\nprint(check_greater([1, 2, 3, 4, 5], 10000000))\nprint(check_greater([1, 2, 3, 4, 5], 100000000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000000))\nprint(check_greater([1, 2, 3, 4, 5], 10000000000))\nprint(check_greater([1, 2, 3, 4, 5], 100000000000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 10000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 100000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 10000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 100000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 10000000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 100000000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000000000000000000))\nprint(check_greater([1, 2, 3, 4, 5], 1000000"}
{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_digit(number):\n    \"\"\"\n    :param number: int\n    :return: int\n    \"\"\"\n    return number % 10\n\n\nif __name__ == '__main__':\n    print(last_digit(123))\n    print(last_digit(1234))\n    print(last_digit(12345))\n    print(last_digit(123456))\n    print(last_digit(1234567))\n    print(last_digit(12345678))\n    print(last_digit(123456789))\n    print(last_digit(1234567890))\n    print(last_digit(12345678901))\n    print(last_digit(123456789012))\n    print(last_digit(1234567890123))\n    print(last_digit(12345678901234))\n    print(last_digit(123456789012345))\n    print(last_digit(1234567890123456))\n    print(last_digit(12345678901234567))\n    print(last_digit(123456789012345678))\n    print(last_digit(1234567890123456789))\n    print(last_digit(12345678901234567890))\n    print(last_digit(123456789012345678901))\n    print(last_digit(1234567890123456789012))\n    print(last_digit(12345678901234567890123))\n    print(last_digit(123456789012345678901234))\n    print(last_digit(1234567890123456789012345))\n    print(last_digit(12345678901234567890123456))\n    print(last_digit(123456789012345678901234567))\n    print(last_digit(1234567890123456789012345678))\n    print(last_digit(12345678901234567890123456789))\n    print(last_digit(123456789012345678901234567890))\n    print(last_digit(1234567890123456789012345678901))\n    print(last_digit(12345678901234567890123456789012))\n    print(last_digit(123456789012345678901234567890123))\n    print(last_digit(1234567890123456789012345678901234))\n    print(last_digit(12345678901234567890123456789012345"}
{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0"}
{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n\ndef remove_odd(string):\n    \"\"\"\n    :param string: string\n    :return: string without odd characters\n    \"\"\"\n    return ''.join([char for char in string if not char % 2])\n\n\nif __name__ == '__main__':\n    print(remove_odd(\"python\"))\n    print(remove_odd(\"hello\"))\n    print(remove_odd(\"abcd\"))\n    print(remove_odd(\"\"))\n    print(remove_odd(\" \"))\n    print(remove_odd(\"1234567890\"))\n    print(remove_odd(\"12345678901234567890\"))\n    print(remove_odd(\"123456789012345678901234567890\"))\n    print(remove_odd(\"1234567890123456789012345678901234567890\"))\n    print(remove_odd(\"12345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"123456789012345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"1234567890123456789012345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"))\n    print(remove_odd(\"12345678901234567890123456789012"}
{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\n\n\ndef count_bidirectional(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: number of bidirectional pairs\n    \"\"\"\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2)]))\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, "}
{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n\ndef multiple_to_single(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: integer\n    \"\"\"\n    return int(''.join(map(str, lst)))\n\n\nif __name__ == '__main__':\n    print(multiple_to_single([11, 33, 50]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104, 105]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104, 105, 106]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]))\n    print(multiple_to_single([11, 33, 50, 22, 44, 66, 88, 99, 100, 101, 102,"}
{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    :param sentence: str\n    :return: tuple\n    \"\"\"\n    adverbs = ['quickly', 'slowly', 'clearly', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily', 'easily',\n               'easily', 'easily', 'easily', 'easily', 'easily"}
{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n\ndef surfacearea_cube(size):\n    \"\"\"\n    :param size: int\n    :return: int\n    \"\"\"\n    return 6 * size ** 2\n\n\nif __name__ == '__main__':\n    print(surfacearea_cube(5))\n    print(surfacearea_cube(10))\n    print(surfacearea_cube(100))\n    print(surfacearea_cube(1000))\n    print(surfacearea_cube(10000))\n    print(surfacearea_cube(100000))\n    print(surfacearea_cube(1000000))\n    print(surfacearea_cube(10000000))\n    print(surfacearea_cube(100000000))\n    print(surfacearea_cube(1000000000))\n    print(surfacearea_cube(10000000000))\n    print(surfacearea_cube(100000000000))\n    print(surfacearea_cube(1000000000000))\n    print(surfacearea_cube(10000000000000))\n    print(surfacearea_cube(100000000000000))\n    print(surfacearea_cube(1000000000000000))\n    print(surfacearea_cube(10000000000000000))\n    print(surfacearea_cube(100000000000000000))\n    print(surfacearea_cube(1000000000000000000))\n    print(surfacearea_cube(10000000000000000000))\n    print(surfacearea_cube(100000000000000000000))\n    print(surfacearea_cube(1000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000))\n    print(surfacearea_cube(100000000000000000000000))\n    print(surfacearea_cube(1000000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000000))\n    print(surfacearea_cube(100000000000000000000000000))\n    print(surfacearea_cube(1000000000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000000000))\n    print(surfacearea_cube(100000000000000000000000000000))\n    print(surfacearea_cube(1000000000000000000000000000000))\n    print(surfacearea_cube(10000000000000000000000000"}
{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\n\ndef positive_count(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: ratio of positive numbers in the array\n    \"\"\"\n    if not arr:\n        return 0\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)\n\n\nif __name__ == '__main__':\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]))\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, "}
{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n\ndef index_multiplication(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Tuples must be of same length\")\n    else:\n        return tuple(map(lambda x, y: x * y, t1, t2))\n\n\nif __name__ == '__main__':\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1))))\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (1, 1), (1"}
{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n\ndef count_Occurrence(tuple, list):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    \"\"\"\n    count = 0\n    for i in list:\n        for j in tuple:\n            if i == j:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']))\n    print(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a',"}
{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n\ndef cube_nums(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: list of cubes of individual elements in nums\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n\nif __name__ == '__main__':\n    print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 18"}
{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n\ndef cal_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n\n\nif __name__ == '__main__':\n    print(cal_sum(9))\n    print(cal_sum(10))\n    print(cal_sum(11))\n    print(cal_sum(12))\n    print(cal_sum(13))\n    print(cal_sum(14))\n    print(cal_sum(15))\n    print(cal_sum(16))\n    print(cal_sum(17))\n    print(cal_sum(18))\n    print(cal_sum(19))\n    print(cal_sum(20))\n    print(cal_sum(21))\n    print(cal_sum(22))\n    print(cal_sum(23))\n    print(cal_sum(24))\n    print(cal_sum(25))\n    print(cal_sum(26))\n    print(cal_sum(27))\n    print(cal_sum(28))\n    print(cal_sum(29))\n    print(cal_sum(30))\n    print(cal_sum(31))\n    print(cal_sum(32))\n    print(cal_sum(33))\n    print(cal_sum(34))\n    print(cal_sum(35))\n    print(cal_sum(36))\n    print(cal_sum(37))\n    print(cal_sum(38))\n    print(cal_sum(39))\n    print(cal_sum(40))\n    print(cal_sum(41))\n    print(cal_sum(42))\n    print(cal_sum(43))\n    print(cal_sum(44))\n    print(cal_sum(45))\n    print(cal_sum(46))\n    print(cal_sum(47))\n    print(cal_sum(48))\n    print(cal_sum(49))\n    print(cal_sum(50))\n    print(cal_sum(51))\n    print(cal_sum(52))\n    print(cal_sum(53))\n    print(cal_sum(54))\n    print(cal_sum(55))\n    print(cal_sum(56))\n    print(cal_sum(57))\n    print(cal_sum(58))\n    print(cal_sum(59))\n    print(cal_sum(60))\n    print(cal_sum(61))\n    print(cal_sum(62))\n    print(cal_sum(63))\n    print(cal_sum(64))\n    print(cal_sum(65))\n    print(cal_sum(66))\n    print(cal_sum(67))\n    print(cal_sum(68))\n    print(cal_sum(69))\n    print(cal_sum(70))\n    print(cal_sum(71))\n    print(cal_sum(72))\n    print(cal_sum(73))\n    print(cal_sum(74))\n    print(cal_sum(75))\n    print(cal_sum(76))\n    print(cal_sum(77))\n    print(cal_sum(78))\n    print(cal_sum(79))\n    print(cal_sum(80))\n    print(cal_sum(81))\n    print(cal_sum(82))\n    print(cal_sum(83))\n    print(cal_sum(84))\n    print(cal_sum(85))\n    print(cal_sum(86))\n    print(cal_sum(87))\n    print(cal_sum(88))\n    print(cal_sum(89"}
{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n\ndef extract_string(string_list, size):\n    \"\"\"\n    :param string_list: list of strings\n    :param size: size of strings to extract\n    :return: list of strings\n    \"\"\"\n    return [string_list[i] for i in range(len(string_list)) if len(string_list[i]) == size]\n\n\nif __name__ == '__main__':\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 5))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 3))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 1))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -1))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -2))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -3))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -4))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -5))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -6))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -7))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -8))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -9))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -10))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -11))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -12))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -13))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -14))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -15))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -16))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -17))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -18))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -19))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -20))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -21))\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], -22))\n    print(extract_string(['Python', 'list', 'exer"}
{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n\ndef remove_whitespaces(string):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    \"\"\"\n    return ''.join(string.split())\n\n\nif __name__ == '__main__':\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove_whitespaces(' Google    Flutter '))\n    print(remove"}
{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n\ndef sumofFactors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(sumofFactors(18))\n    print(sumofFactors(10))\n    print(sumofFactors(12))\n    print(sumofFactors(14))\n    print(sumofFactors(16))\n    print(sumofFactors(18))\n    print(sumofFactors(20))\n    print(sumofFactors(22))\n    print(sumofFactors(24))\n    print(sumofFactors(26))\n    print(sumofFactors(28))\n    print(sumofFactors(30))\n    print(sumofFactors(32))\n    print(sumofFactors(34))\n    print(sumofFactors(36))\n    print(sumofFactors(38))\n    print(sumofFactors(40))\n    print(sumofFactors(42))\n    print(sumofFactors(44))\n    print(sumofFactors(46))\n    print(sumofFactors(48))\n    print(sumofFactors(50))\n    print(sumofFactors(52))\n    print(sumofFactors(54))\n    print(sumofFactors(56))\n    print(sumofFactors(58))\n    print(sumofFactors(60))\n    print(sumofFactors(62))\n    print(sumofFactors(64))\n    print(sumofFactors(66))\n    print(sumofFactors(68))\n    print(sumofFactors(70))\n    print(sumofFactors(72))\n    print(sumofFactors(74))\n    print(sumofFactors(76))\n    print(sumofFactors(78))\n    print(sumofFactors(80))\n    print(sumofFactors(82))\n    print(sumofFactors(84))\n    print(sumofFactors(86))\n    print(sumofFactors(88))\n    print(sumofFactors(90))\n    print(sumofFactors(92))\n    print(sumofFactors(94))\n    print(sumofFactors(96))\n    print(sumofFactors(98))\n    print(sumofFactors(100))\n    print(sumofFactors(102))\n    print(sumofFactors(104))\n    print(sumofFactors(106))\n    print(sumofFactors(108))\n    print(sumofFactors(110))\n    print(sumofFactors(112))\n    print(sumofFactors(114))\n    print(sumofFactors(116))\n    print(sumofFactors(118))\n    print(sumofFactors(120))\n    print(sumofFactors(122))\n    print(sumofFactors(124))\n    print(sumofFactors(126))\n    print(sumofFactors(128))\n    print(sumofFactors(130))\n    print(sumofFactors(132))\n    print(sumofFactors(134))\n    print(sumofFactors(136))\n    print(sumofFactors(138))\n    print(sumofFactors(140))\n    print(sumofFactors(142))\n    print(sumofFactors(144))\n    print(sumofFactors(146))\n    print(sum"}
{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\n\ndef text_match_wordz(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    return \"z\" in text\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(text_match_wordz(\"pythonz.\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert text_match_wordz(\"pythonz.\") == True\n    assert text_match_wordz(\"python.\") == False\n    assert text_match_wordz(\"pythonz\") == False\n    assert text_match_wordz(\"pythonz!\") == False\n    assert text_match_wordz(\"pythonz?\") == False\n    assert text_match_wordz(\"pythonz:\") == False\n    assert text_match_wordz(\"pythonz;\") == False\n    assert text_match_wordz(\"pythonz]\") == False\n    assert text_match_wordz(\"pythonz[\") == False\n    assert text_match_wordz(\"pythonz}\") == False\n    assert text_match_wordz(\"pythonz{\") == False\n    assert text_match_wordz(\"pythonz=\") == False\n    assert text_match_wordz(\"pythonz<\") == False\n    assert text_match_wordz(\"pythonz>\") == False\n    assert text_match_wordz(\"pythonz(\") == False\n    assert text_match_wordz(\"pythonz)\") == False\n    assert text_match_wordz(\"pythonz*\") == False\n    assert text_match_wordz(\"pythonz+\") == False\n    assert text_match_wordz(\"pythonz-\") == False\n    assert text_match_wordz(\"pythonz/\") == False\n    assert text_match_wordz(\"pythonz\\\\\") == False\n    assert text_match_wordz(\"pythonz|\") == False\n    assert text_match_wordz(\"pythonz%\") == False\n    assert text_match_wordz(\"pythonz$\") == False\n    assert text_match_wordz(\"pythonz#\") == False\n    assert text_match_wordz(\"pythonz'\") == False\n    assert text_match_wordz(\"pythonz\\\"\") == False\n    assert text_match_wordz(\"pythonz`\") == False\n    assert text_match_wordz(\"pythonz~\") == False\n    assert text_match_wordz(\"pythonz!\") == False\n    assert text_match_wordz(\"pythonz?\") == False\n    assert text_match_wordz(\"pythonz:\") == False\n    assert text_match_wordz(\"pythonz;\") == False\n    assert text_match_wordz(\"pythonz]\") == False\n    assert text_match_wordz(\"pythonz[\") == False\n    assert text_match_wordz(\"pythonz}\") == False\n    assert text_match_wordz(\"pythonz{\") == False\n    assert text_match_wordz(\"pythonz=\") == False\n    assert text_match_wordz(\"pythonz<\") == False\n    assert text_match_wordz(\"pythonz>\") == False\n    assert text_match_wordz(\"pythonz(\") == False\n    assert text_match_wordz(\"pythonz)\") == False\n    assert text_match_wordz(\"pythonz*\") == False\n    assert text_match_wordz(\"pythonz+\") == False\n    assert text_match_wordz(\"pythonz-\") == False\n    assert text_match_wordz(\"pythonz/\") == False\n    assert text_match_wordz(\"pythonz\\\\\") == False\n    assert text_match_wordz(\"pythonz|\") == False\n    assert text_match_wordz(\"pythonz%\") == False\n    assert text_match_wordz(\"pythonz$\") == False\n    assert text_match_wordz(\"pythonz#\") == False\n    assert text_match_wordz(\"pythonz'\") == False\n    assert text_match_wordz(\"pythonz\\\"\") == False\n    assert text_match_wordz(\"pythonz`\") == False\n   "}
{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n\ndef check_monthnumb_number(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    elif month_number == 4 or month_number == 6 or month_number == 9 or month_number == 11:\n        return False\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_monthnumb_number(5))\n    print(check_monthnumb_number(12))\n    print(check_monthnumb_number(13))\n    print(check_monthnumb_number(1))\n    print(check_monthnumb_number(2))\n    print(check_monthnumb_number(10))\n    print(check_monthnumb_number(11))\n    print(check_monthnumb_number(12))\n    print(check_monthnumb_number(13))\n    print(check_monthnumb_number(14))\n    print(check_monthnumb_number(15))\n    print(check_monthnumb_number(16))\n    print(check_monthnumb_number(17))\n    print(check_monthnumb_number(18))\n    print(check_monthnumb_number(19))\n    print(check_monthnumb_number(20))\n    print(check_monthnumb_number(21))\n    print(check_monthnumb_number(22))\n    print(check_monthnumb_number(23))\n    print(check_monthnumb_number(24))\n    print(check_monthnumb_number(25))\n    print(check_monthnumb_number(26))\n    print(check_monthnumb_number(27))\n    print(check_monthnumb_number(28))\n    print(check_monthnumb_number(29))\n    print(check_monthnumb_number(30))\n    print(check_monthnumb_number(31))\n    print(check_monthnumb_number(32))\n    print(check_monthnumb_number(33))\n    print(check_monthnumb_number(34))\n    print(check_monthnumb_number(35))\n    print(check_monthnumb_number(36))\n    print(check_monthnumb_number(37))\n    print(check_monthnumb_number(38))\n    print(check_monthnumb_number(39))\n    print(check_monthnumb_number(40))\n    print(check_monthnumb_number(41))\n    print(check_monthnumb_number(42))\n    print(check_monthnumb_number(43))\n    print(check_monthnumb_number(44))\n    print(check_monthnumb_number(45))\n    print(check_monthnumb_number(46))\n    print(check_monthnumb_number(47))\n    print(check_monthnumb_number(48))\n    print(check_monthnumb_number(49))\n    print(check_monthnumb_number(50))\n    print(check_monthnumb_number(51))\n    print(check_monthnumb_number(52))\n    print(check_monthnumb_number(53))\n    print(check_monthnumb_number(54))\n    print(check_monthnumb_number(55))\n    print(check_monthnumb_number(56))\n    print(check_monthnumb_number(57))\n    print(check_monthnumb_number(58))\n    print(check_monthnumb_number(59))\n    print"}
{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    Reverses each string in a given list of string values.\n    :param string_list: list of string values\n    :return: list of reversed string values\n    \"\"\"\n    return [string[::-1] for string in string_list]\n\n\nif __name__ == '__main__':\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n    print("}
{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n\ndef Find_Min(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: list\n    \"\"\"\n    if not lst:\n        return []\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n\n\nif __name__ == '__main__':\n    print(Find_Min([[1], [1, 2], [1, 2, 3]]))\n    print(Find_Min([[1, 2, 3], [1, 2], [1]]))\n    print(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5]]))\n    print(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]))\n    print(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]))\n    print(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,"}
{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n\ndef rectangle_area(length, width):\n    \"\"\"\n    :param length: length of the rectangle\n    :param width: width of the rectangle\n    :return: area of the rectangle\n    \"\"\"\n    return length * width\n\n\nif __name__ == '__main__':\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))\n    print(rectangle_area(10, 20))"}
{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    :param string: string to remove uppercase substrings from\n    :return: string without uppercase substrings\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        if i == 0:\n            result += string[i].lower()\n        elif string[i].islower():\n            result += string[i]\n        else:\n            result += string[i].lower()\n    return result\n\n\nif __name__ == '__main__':\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n    print(remove_uppercase('cAstyoUrFavoRit"}
{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n\ndef Extract(lst):\n    return [lst[i][0] for i in range(len(lst))]\n\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n"}
{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n\ndef upper_ctr(string):\n    \"\"\"\n    :param string: string\n    :return: int\n    \"\"\"\n    return sum(1 for char in string if char.isupper())\n\n\nif __name__ == '__main__':\n    print(upper_ctr('PYthon'))\n    print(upper_ctr('Python'))\n    print(upper_ctr('Python123'))\n    print(upper_ctr('Python1234'))\n    print(upper_ctr('Python12345'))\n    print(upper_ctr('Python123456'))\n    print(upper_ctr('Python1234567'))\n    print(upper_ctr('Python12345678'))\n    print(upper_ctr('Python123456789'))\n    print(upper_ctr('Python1234567890'))\n    print(upper_ctr('Python12345678901'))\n    print(upper_ctr('Python123456789012'))\n    print(upper_ctr('Python1234567890123'))\n    print(upper_ctr('Python12345678901234'))\n    print(upper_ctr('Python123456789012345'))\n    print(upper_ctr('Python1234567890123456'))\n    print(upper_ctr('Python12345678901234567'))\n    print(upper_ctr('Python123456789012345678'))\n    print(upper_ctr('Python1234567890123456789'))\n    print(upper_ctr('Python12345678901234567890'))\n    print(upper_ctr('Python123456789012345678901'))\n    print(upper_ctr('Python1234567890123456789012'))\n    print(upper_ctr('Python12345678901234567890123'))\n    print(upper_ctr('Python123456789012345678901234'))\n    print(upper_ctr('Python1234567890123456789012345'))\n    print(upper_ctr('Python12345678901234567890123456'))\n    print(upper_ctr('Python123456789012345678901234567'))\n    print(upper_ctr('Python1234567890123456789012345678'))\n    print(upper_ctr('Python12345678901234567890123456789'))\n    print(upper_ctr('Python123456789012345678901234567890'))\n    print(upper_ctr('Python1234567890123456789012345678901'))\n    print(upper_ctr('Python12345678901234567890123456789012'))\n    print(upper_ctr('Python123456789012345678901234567890123'))\n    print(upper_ctr('Python12345"}
{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n\ndef combinations_list(list_):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if not list_:\n        return []\n    if len(list_) == 1:\n        return [list_]\n    else:\n        return [list_[:i] + list_[i + 1:] for i in range(len(list_))] + combinations_list(list_[1:])\n\n\nif __name__ == '__main__':\n    print(combinations_list(['orange', 'red', 'green', 'blue']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange', 'red']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange', 'red', 'green']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange', 'red', 'green', 'blue']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange', 'red', 'green', 'blue', 'yellow']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange', 'red', 'green', 'blue', 'yellow', 'purple']))\n    print(combinations_list(['orange', 'red', 'green', 'blue', 'yellow', 'purple', 'brown', 'black', 'white', 'gray', 'pink', 'brown', 'orange', 'red', 'green', 'blue', '"}
{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n\ndef max_subarray_product(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: maximum product of a subarray\n    \"\"\"\n    max_so_far = 0\n    max_ending_here = 0\n    for i in arr:\n        max_ending_here = max(i, max_ending_here * i)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\nif __name__ == '__main__':\n    print(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -3, 7]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -3, 7, -1, 2, 1, -5, -2]))\n    print(max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, 6, -3, 7, -1, 2, 1, -5, -2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 1"}
{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\n\nif __name__ == '__main__':\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue'}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None, 'c12': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None, 'c12': None, 'c13': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c6': None, 'c7': None, 'c8': None, 'c9': None, 'c10': None, 'c11': None, 'c12': None, 'c13': None, 'c14': None}))\n    print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': 'Blue', 'c4': None, 'c5': None, 'c"}
{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\n\ndef max_product(arr):\n    \"\"\"\n    :param arr: list of numbers\n    :return: maximum product of an increasing subsequence\n    \"\"\"\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = arr[0]\n    max_product_so_far = arr[0]\n    min_product = arr[0]\n    min_product_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        else:\n            max_product = max(arr[i], min_product * arr[i])\n            min_product = min(arr[i], max_product * arr[i])\n\n        max_product_so_far = max(max_product, max_product_so_far)\n        min_product_so_far = min(min_product, min_product_so_far)\n\n    return max_product_so_far\n\n\nif __name__ == '__main__':\n    print(max_product([3, 100, 4, 5, 150, 6]))\n    print(max_product([100, 2, 3, 4, 5, 6, 7, 8, 9, 1000]))\n    print(max_product([100, 2, 3, 4, 5, 6, 7, 8, 9, 1000, 1000000]))\n    print(max_product([100, 2, 3, 4, 5, 6, 7, 8, 9, 1000, 1000000, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n\ndef add_pairwise(t):\n    \"\"\"\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    return tuple(a + b for a, b in zip(t, t[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\n\ndef find_remainder(arr, n):\n    \"\"\"\n    :param arr: array of integers\n    :param n: modulo\n    :return: product of the array modulo n\n    \"\"\"\n    return reduce(lambda x, y: (x * y) % n, arr)\n\n\nif __name__ == '__main__':\n    print(find_remainder([100, 10, 5, 25, 35, 14], 11))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 10))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 9))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 8))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 7))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 6))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 5))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 4))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 3))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 2))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 1))\n    print(find_remainder([100, 10, 5, 25, 35, 14], 0))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -1))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -2))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -3))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -4))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -5))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -6))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -7))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -8))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -9))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -10))\n    print(find_remainder([100, 10, 5, 25, 35, 14], -11))\n    print"}
{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n\ndef check_Consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] != arr[i]+1:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(check_Consecutive([1, 2, 3, 4, 5]))\n    print(check_Consecutive([1, 2, 3, 4, 6]))\n    print(check_Consecutive([1, 2, 3, 5, 6]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, "}
{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n\ndef tuple_intersection(tuple_list, tuple_list2):\n    \"\"\"\n    :param tuple_list: tuple list\n    :param tuple_list2: tuple list\n    :return: tuple intersection\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list:\n        for tuple2 in tuple_list2:\n            if tuple1 == tuple2:\n                intersection.add(tuple1)\n    return intersection\n\n\nif __name__ == '__main__':\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([("}
{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    Replace all occurences of old_char in string with new_char\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n\nif __name__ == '__main__':\n    print(replace_char(\"polygon\", 'y', 'l'))\n    print(replace_char(\"polygon\", 'o', 'a'))\n    print(replace_char(\"polygon\", 'g', 'l'))\n    print(replace_char(\"polygon\", 'n', 'l'))\n    print(replace_char(\"polygon\", 'p', 'l'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print(replace_char(\"polygon\", 'p', 'p'))\n    print(replace_char(\"polygon\", 'l', 'l'))\n    print(replace_char(\"polygon\", 'o', 'o'))\n    print(replace_char(\"polygon\", 'y', 'y'))\n    print(replace_char(\"polygon\", 'g', 'g'))\n    print(replace_char(\"polygon\", 'n', 'n'))\n    print"}
{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n\ndef test_sort_counter():\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90), ('History', 95)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95, 'Geography':98})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90), ('History', 95), ('Geography', 98)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95, 'Geography':98, 'Psychology':99})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90), ('History', 95), ('Geography', 98), ('Psychology', 99)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95, 'Geography':98, 'Psychology':99, 'Music':100})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90), ('History', 95), ('Geography', 98), ('Psychology', 99), ('Music', 100)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95, 'Geography':98, 'Psychology':99, 'Music':100, 'Science':101})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90), ('History', 95), ('Geography', 98), ('Psychology', 99), ('Music', 100), ('Science', 101)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95, 'Geography':98, 'Psychology':99, 'Music':100, 'Science':101, 'Art':102})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 90), ('History', 95), ('Geography', 98), ('Psychology', 99), ('Music', 100), ('Science', 101), ('Art', 102)]\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':90, 'History':95, 'Geography':98, 'Psychology':"}
{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\n\nprint(big_sum([1, 2, 3]))\nprint(big_sum([10, 20, 30, 40, 50]))\nprint(big_sum([100, 200, 300, 400, 500]))\nprint(big_sum([1000, 2000, 3000, 4000, 5000]))\nprint(big_sum([10000, 20000, 30000, 40000, 50000]))\nprint(big_sum([100000, 200000, 300000, 400000, 500000]))\nprint(big_sum([1000000, 2000000, 3000000, 4000000, 5000000]))\nprint(big_sum([10000000, 20000000, 30000000, 40000000, 50000000]))\nprint(big_sum([100000000, 200000000, 300000000, 400000000, 500000000]))\nprint(big_sum([1000000000, 2000000000, 3000000000, 4000000000, 5000000000]))\nprint(big_sum([10000000000, 20000000000, 30000000000, 40000000000, 50000000000]))\nprint(big_sum([100000000000, 200000000000, 300000000000, 400000000000, 500000000000]))\nprint(big_sum([1000000000000, 2000000000000, 3000000000000, 4000000000000, 5000000000000]))\nprint(big_sum([10000000000000, 20000000000000, 30000000000000, 40000000000000, 50000000000000]))\nprint(big_sum([100000000000000, 200000000000000, 300000000000000, 400000000000000, 500000000000000]))\nprint(big_sum([1000000000000000, 2000000000000000, 3000000000000000, 4000000000000000, 5000000000000000]))\n"}
{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n\ndef is_lower(string):\n    return string.lower()\n\n\nif __name__ == '__main__':\n    print(is_lower(\"InValid\"))\n    print(is_lower(\"valid\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is_lower(\"invalid\"))\n    print(is_lower(\"Invalid\"))\n    print(is_lower(\"INVALID\"))\n    print(is"}
{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n\ndef remove_lowercase(string):\n    \"\"\"\n    :param string: string to remove lowercase substrings from\n    :return: string without lowercase substrings\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i]\n        else:\n            result += string[i].upper()\n    return result\n\n\nif __name__ == '__main__':\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon\"))\n    print(remove_lowercase(\"PYTHon"}
{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n\ndef first_Digit(num):\n    return int(str(num)[0])\n\n\nprint(first_Digit(123))\nprint(first_Digit(1234))\nprint(first_Digit(12345))\nprint(first_Digit(123456))\nprint(first_Digit(1234567))\nprint(first_Digit(12345678))\nprint(first_Digit(123456789))\nprint(first_Digit(1234567890))\nprint(first_Digit(12345678901))\nprint(first_Digit(123456789012))\nprint(first_Digit(1234567890123))\nprint(first_Digit(12345678901234))\nprint(first_Digit(123456789012345))\nprint(first_Digit(1234567890123456))\nprint(first_Digit(12345678901234567))\nprint(first_Digit(123456789012345678))\nprint(first_Digit(1234567890123456789))\nprint(first_Digit(12345678901234567890))\nprint(first_Digit(123456789012345678901))\nprint(first_Digit(1234567890123456789012))\nprint(first_Digit(12345678901234567890123))\nprint(first_Digit(123456789012345678901234))\nprint(first_Digit(1234567890123456789012345))\nprint(first_Digit(12345678901234567890123456))\nprint(first_Digit(123456789012345678901234567))\nprint(first_Digit(1234567890123456789012345678))\nprint(first_Digit(12345678901234567890123456789))\nprint(first_Digit(123456789012345678901234567890))\nprint(first_Digit(1234567890123456789012345678901))\nprint(first_Digit(12345678901234567890123456789012))\nprint(first_Digit(123456789012345678901234567890123))\nprint(first_Digit(1234567890123456789012345678901234))\nprint(first_Digit(12345678901234567890123456789012345))\nprint(first_Digit(123456789012345678901"}
{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\ndef Split(lst):\n    return [x for x in lst if x % 2 == 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\n\ndef difference(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum(range(n)) ** 2 - sum(range(n))\n\n\nif __name__ == '__main__':\n    print(difference(3))\n    print(difference(4))\n    print(difference(5))\n    print(difference(6))\n    print(difference(7))\n    print(difference(8))\n    print(difference(9))\n    print(difference(10))\n    print(difference(11))\n    print(difference(12))\n    print(difference(13))\n    print(difference(14))\n    print(difference(15))\n    print(difference(16))\n    print(difference(17))\n    print(difference(18))\n    print(difference(19))\n    print(difference(20))\n    print(difference(21))\n    print(difference(22))\n    print(difference(23))\n    print(difference(24))\n    print(difference(25))\n    print(difference(26))\n    print(difference(27))\n    print(difference(28))\n    print(difference(29))\n    print(difference(30))\n    print(difference(31))\n    print(difference(32))\n    print(difference(33))\n    print(difference(34))\n    print(difference(35))\n    print(difference(36))\n    print(difference(37))\n    print(difference(38))\n    print(difference(39))\n    print(difference(40))\n    print(difference(41))\n    print(difference(42))\n    print(difference(43))\n    print(difference(44))\n    print(difference(45))\n    print(difference(46))\n    print(difference(47))\n    print(difference(48))\n    print(difference(49))\n    print(difference(50))\n    print(difference(51))\n    print(difference(52))\n    print(difference(53))\n    print(difference(54))\n    print(difference(55))\n    print(difference(56))\n    print(difference(57))\n    print(difference(58))\n    print(difference(59))\n    print(difference(60))\n    print(difference(61))\n    print(difference(62))\n    print(difference(63))\n    print(difference(64))\n    print(difference(65))\n    print(difference(66))\n    print(difference(67))\n    print(difference(68))\n    print(difference(69))\n    print(difference(70))\n    print(difference(71))\n    print(difference(72))\n    print(difference(73))\n    print(difference(74))\n    print(difference(75))\n    print(difference(76))\n    print(difference(77))\n    print(difference(78))\n    print(difference(79))\n    print(difference(80))\n    print(difference(81))\n    print(difference(82))\n    print(difference(83))\n    print(difference(84))\n    print(difference(85))\n    print(difference(86))\n    print(difference(87))\n    print(difference(88))\n    print(difference(89))\n    print(difference(90))\n    print(difference(91))\n    print(difference(92))\n    print(difference(93))\n    print(difference(94))\n    print(d"}
{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\n\ndef find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 1:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(find_Odd_Pair([5, 4, 7, 2, 1], 5))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 5))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 4))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 3))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 2))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 1))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], 0))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -1))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -2))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -3))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -4))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -5))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -6))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -7))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -8))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -9))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -10))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -11))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -12))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -13))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -14))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -15))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -16))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -17))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -18))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -19))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -20))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -21))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -22))\n    print(find_Odd_Pair([1, 2, 3, 4, 5], -23))\n    print(find_Odd_Pair([1, 2, 3"}
{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\n\ndef toggle_string(string):\n    \"\"\"\n    :param string: string to toggle\n    :return: string with toggled case\n    \"\"\"\n    return ''.join([chr(97 + (ord(char) - 97) % 2) if char.isalpha() else char for char in string])\n\n\nif __name__ == '__main__':\n    print(toggle_string(\"Python\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print(toggle_string(\"Pyth0n\"))\n    print"}
{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\n\ndef digit_distance_nums(num1, num2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    assert digit_distance_nums(1,2) == 1\n    \"\"\"\n    num1_list = list(str(num1))\n    num2_list = list(str(num2))\n    if len(num1_list) != len(num2_list):\n        return None\n    else:\n        sum_of_diff = 0\n        for i in range(len(num1_list)):\n            sum_of_diff += abs(int(num1_list[i]) - int(num2_list[i]))\n        return sum_of_diff\n\n\nif __name__ == '__main__':\n    print(digit_distance_nums(1, 2))\n    print(digit_distance_nums(12, 23))\n    print(digit_distance_nums(123, 234))\n    print(digit_distance_nums(1234, 2345))\n    print(digit_distance_nums(12345, 23456))\n    print(digit_distance_nums(123456, 234567))\n    print(digit_distance_nums(1234567, 2345678))\n    print(digit_distance_nums(12345678, 23456789))\n    print(digit_distance_nums(123456789, 234567890))\n    print(digit_distance_nums(1234567890, 2345678901))\n    print(digit_distance_nums(12345678901, 23456789012))\n    print(digit_distance_nums(123456789012, 23456789013))\n    print(digit_distance_nums(1234567890123, 234567890124))\n    print(digit_distance_nums(12345678901234, 2345678901235))\n    print(digit_distance_nums(123456789012345, 23456789012346))\n    print(digit_distance_nums(1234567890123456, 234567890123457))\n    print(digit_distance_nums(12345678901234567, 2345678901234568))\n    print(digit_distance_nums(123456789012345678, 23456789012345679))\n    print(digit_distance_nums(1234567890123456789, 234567890123456790))\n    print(digit_distance_nums(12345678901234567890, 2345678901234567901))\n    print(digit_distance_nums(123456789012345678901, 23456789012345679012))\n    print(digit_distance_nums(1234567890123"}
{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\n\ndef max_sub_array_sum(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: integer\n    \"\"\"\n    max_sum = 0\n    curr_sum = 0\n    for i in arr:\n        curr_sum += i\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 12))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 14))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 16))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 18))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 20))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 22))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 24))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 26))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 28))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 30))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 32))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 34))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 36))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 38))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 40))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 42))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 44))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 46))\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, "}
{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\ndef union_elements(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(sorted(set(t1 + t2)))\n\n\nif __name__ == '__main__':\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union_elements((3, 4, 5, 6), (5, 7, 4, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(union"}
{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n\n\ndef Find_Max_Length(list_of_lists):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n    \"\"\"\n    max_length = 0\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n\nif __name__ == '__main__':\n    print(Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]))\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8"}
{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\n\ndef extract_values(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return [value.strip('\"') for value in string.split(',')]\n\n\nif __name__ == '__main__':\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract_values('\"Python\", \"PHP\", \"Java\"'))\n    print(extract"}
{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_Pairs([1,2,1],3))\n    print(count_Pairs([1,2,3,4,5],5))\n    print(count_Pairs([1,2,3,4,5,6,7,8,9,10],10))\n    print(count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],100))\n    print(count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,14"}
{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\n\ndef split(string):\n    return list(string)\n\n\nif __name__ == '__main__':\n    print(split('python'))\n    print(split('hello'))\n    print(split(''))\n    print(split(' '))\n    print(split('123'))\n    print(split('1234567890'))\n    print(split('12345678901234567890'))\n    print(split('123456789012345678901234567890'))\n    print(split('1234567890123456789012345678901234567890'))\n    print(split('12345678901234567890123456789012345678901234567890'))\n    print(split('123456789012345678901234567890123456789012345678901234567890'))\n    print(split('1234567890123456789012345678901234567890123456789012345678901234567890'))\n    print(split('12345678901234567890123456789012345678901234567890123456789012345678901234567890'))\n    print(split('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))\n    print(split('123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))\n    print(split('12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))\n    print(split('12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"}
{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n\n\ndef sum_digits(n):\n    \"\"\"\n    :param n: non-negative integer\n    :return: sum of the digits of n\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return sum_digits(n // 10) + n % 10\n\n\nif __name__ == '__main__':\n    print(sum_digits(345))\n    print(sum_digits(123456789))\n    print(sum_digits(1234567890))\n    print(sum_digits(12345678901))\n    print(sum_digits(123456789012))\n    print(sum_digits(1234567890123))\n    print(sum_digits(12345678901234))\n    print(sum_digits(123456789012345))\n    print(sum_digits(1234567890123456))\n    print(sum_digits(12345678901234567))\n    print(sum_digits(123456789012345678))\n    print(sum_digits(1234567890123456789))\n    print(sum_digits(12345678901234567890))\n    print(sum_digits(123456789012345678901))\n    print(sum_digits(1234567890123456789012))\n    print(sum_digits(12345678901234567890123))\n    print(sum_digits(123456789012345678901234))\n    print(sum_digits(1234567890123456789012345))\n    print(sum_digits(12345678901234567890123456))\n    print(sum_digits(123456789012345678901234567))\n    print(sum_digits(1234567890123456789012345678))\n    print(sum_digits(12345678901234567890123456789))\n    print(sum_digits(123456789012345678901234567890))\n    print(sum_digits(1234567890123456789012345678901))\n    print(sum_digits(12345678901234567890123456789012))\n    print(sum_digits(123456789012345678901234567890123))\n    print(sum_digits(1234567890123456789012345678901234))\n    print(sum_digits(12345678901234567890123456789012345))\n    print(sum"}
{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\n\ndef issort_list(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 15]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]))\n    print(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, "}
{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\n\ndef empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    :param n: int\n    :return: list\n    \"\"\"\n    return [{} for _ in range(n)]\n\n\nif __name__ == '__main__':\n    print(empty_list(5))\n"}
{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n\ndef sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    :param lst: list of lists\n    :return: list of lists\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n\nif __name__ == '__main__':\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'], ['green', 'orange', 'black', 'white']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'], ['green', 'orange', 'black', 'white'], ['green', 'orange', 'black', 'white', 'black']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'], ['green', 'orange', 'black', 'white'], ['green', 'orange', 'black', 'white', 'black'], ['green', 'orange', 'black', 'white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'], ['green', 'orange', 'black', 'white'], ['green', 'orange', 'black', 'white', 'black'], ['green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange']]))\n    print(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'], ['green', 'orange', 'black', 'white'], ['green', 'orange', 'black', 'white', 'black'], ['green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', 'green', 'orange', 'black', 'white', 'black', 'orange'], ['green', 'orange', 'black', 'white', 'black', 'orange', '"}
{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\n\ndef two_unique_nums(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: list of unique numbers\n    \"\"\"\n    return list(set(nums))\n\n\nif __name__ == '__main__':\n    print(two_unique_nums([1, 2, 3, 2, 3, 4, 5]))\n    print(two_unique_nums([1, 2, 3, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\n\ndef unique_product(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: product of unique numbers\n    \"\"\"\n    unique_nums = set(nums)\n    return reduce(lambda x, y: x * y, unique_nums)\n\n\nif __name__ == '__main__':\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40]))\n    print(unique_product([10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, 40, 10, 20, 30, 40, 20, 50, 60, "}
{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\n\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    radius: float or int\n    height: float or int\n    returns: float\n    \"\"\"\n    return 2 * (radius * radius * 3.14159) + (2 * radius * height)\n\n\ndef test_surfacearea_cylinder():\n    assert surfacearea_cylinder(10, 5) == 942.45\n    assert surfacearea_cylinder(1, 1) == 12.57\n    assert surfacearea_cylinder(10, 1) == 121.94\n    assert surfacearea_cylinder(1, 10) == 314.159\n    assert surfacearea_cylinder(10, 10) == 3141.59\n    assert surfacearea_cylinder(100, 100) == 628318.53\n    assert surfacearea_cylinder(1000, 1000) == 6283185.3\n    assert surfacearea_cylinder(10000, 10000) == 62831852.7\n    assert surfacearea_cylinder(100000, 100000) == 628318527.0\n    assert surfacearea_cylinder(1000000, 1000000) == 6283185270.0\n    assert surfacearea_cylinder(10000000, 10000000) == 62831852700.0\n    assert surfacearea_cylinder(100000000, 100000000) == 628318527000.0\n    assert surfacearea_cylinder(1000000000, 1000000000) == 6283185270000.0\n    assert surfacearea_cylinder(10000000000, 10000000000) == 62831852700000.0\n    assert surfacearea_cylinder(100000000000, 100000000000) == 628318527000000.0\n    assert surfacearea_cylinder(1000000000000, 1000000000000) == 6283185270000000.0\n    assert surfacearea_cylinder(10000000000000, 10000000000000) == 62831852700000000.0\n    assert surfacearea_cylinder(100000000000000, 100000000000000) == 628318527000000000.0\n    assert surfacearea_cylinder(1000000000000000, 1000000000000000) == 6283185270000000000.0\n    assert surfacearea_cylinder(10000000000000000, 10000000000000000) == 628318527000"}
{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\n\ndef is_Sub_Array(arr, sub_arr):\n    if len(arr) < len(sub_arr):\n        return False\n    else:\n        for i in range(len(arr) - len(sub_arr) + 1):\n            if arr[i:i + len(sub_arr)] == sub_arr:\n                return True\n        return False\n\n\nif __name__ == '__main__':\n    print(is_Sub_Array([1, 4, 3, 5], [1, 2]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(is_Sub_Array([1, 4,"}
{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\n\ndef last_Digit_Factorial(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1) % 10\n\n\nif __name__ == '__main__':\n    print(last_Digit_Factorial(4))\n    print(last_Digit_Factorial(5))\n    print(last_Digit_Factorial(6))\n    print(last_Digit_Factorial(7))\n    print(last_Digit_Factorial(8))\n    print(last_Digit_Factorial(9))\n    print(last_Digit_Factorial(10))\n    print(last_Digit_Factorial(11))\n    print(last_Digit_Factorial(12))\n    print(last_Digit_Factorial(13))\n    print(last_Digit_Factorial(14))\n    print(last_Digit_Factorial(15))\n    print(last_Digit_Factorial(16))\n    print(last_Digit_Factorial(17))\n    print(last_Digit_Factorial(18))\n    print(last_Digit_Factorial(19))\n    print(last_Digit_Factorial(20))\n    print(last_Digit_Factorial(21))\n    print(last_Digit_Factorial(22))\n    print(last_Digit_Factorial(23))\n    print(last_Digit_Factorial(24))\n    print(last_Digit_Factorial(25))\n    print(last_Digit_Factorial(26))\n    print(last_Digit_Factorial(27))\n    print(last_Digit_Factorial(28))\n    print(last_Digit_Factorial(29))\n    print(last_Digit_Factorial(30))\n    print(last_Digit_Factorial(31))\n    print(last_Digit_Factorial(32))\n    print(last_Digit_Factorial(33))\n    print(last_Digit_Factorial(34))\n    print(last_Digit_Factorial(35))\n    print(last_Digit_Factorial(36))\n    print(last_Digit_Factorial(37))\n    print(last_Digit_Factorial(38))\n    print(last_Digit_Factorial(39))\n    print(last_Digit_Factorial(40))\n    print(last_Digit_Factorial(41))\n    print(last_Digit_Factorial(42))\n    print(last_Digit_Factorial(43))\n    print(last_Digit_Factorial(44))\n    print(last_Digit_Factorial(45))\n    print(last_Digit_Factorial(46))\n    print(last_Digit_Factorial(47))\n    print(last_Digit_Factorial(48))\n    print(last_Digit_Factorial(49))\n    print(last_Digit_Factorial(50))\n    print(last_Digit_"}
{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\n\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n    return [x for x in list1 + list2 + list3]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n\n\ndef find_dissimilar(t1, t2):\n    \"\"\"\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(sorted(set(t1) ^ set(t2)))\n\n\nif __name__ == '__main__':\n    print(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(find_dissimilar((1, 2, 3, 4, 5),"}
{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\n\ndef extract_even(t):\n    \"\"\"\n    :param t: tuple\n    :return: tuple\n    \"\"\"\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if isinstance(x, tuple) or x % 2 == 0)\n    else:\n        return t\n\n\nif __name__ == '__main__':\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)))\n    print(extract_even((4, 5, (7, 6, (2, 4)), 6"}
{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\n\ndef surface_Area(base, height):\n    return (base * height) + (base * base)\n\n\nprint(surface_Area(3, 4))\n"}
{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\n\n\ndef my_dict(dict):\n    if dict:\n        return False\n    else:\n        return True\n\n\nprint(my_dict({10}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({}))\nprint(my_dict({1: 2, 3: 4}))\nprint(my_dict({"}
{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n\n\ndef catalan_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) / n\n\n\nif __name__ == '__main__':\n    print(catalan_number(10))\n    print(catalan_number(11))\n    print(catalan_number(12))\n    print(catalan_number(13))\n    print(catalan_number(14))\n    print(catalan_number(15))\n    print(catalan_number(16))\n    print(catalan_number(17))\n    print(catalan_number(18))\n    print(catalan_number(19))\n    print(catalan_number(20))\n    print(catalan_number(21))\n    print(catalan_number(22))\n    print(catalan_number(23))\n    print(catalan_number(24))\n    print(catalan_number(25))\n    print(catalan_number(26))\n    print(catalan_number(27))\n    print(catalan_number(28))\n    print(catalan_number(29))\n    print(catalan_number(30))\n    print(catalan_number(31))\n    print(catalan_number(32))\n    print(catalan_number(33))\n    print(catalan_number(34))\n    print(catalan_number(35))\n    print(catalan_number(36))\n    print(catalan_number(37))\n    print(catalan_number(38))\n    print(catalan_number(39))\n    print(catalan_number(40))\n    print(catalan_number(41))\n    print(catalan_number(42))\n    print(catalan_number(43))\n    print(catalan_number(44))\n    print(catalan_number(45))\n    print(catalan_number(46))\n    print(catalan_number(47))\n    print(catalan_number(48))\n    print(catalan_number(49))\n    print(catalan_number(50))\n    print(catalan_number(51))\n    print(catalan_number(52))\n    print(catalan_number(53))\n    print(catalan_number(54))\n    print(catalan_number(55))\n    print(catalan_number(56))\n    print(catalan_number(57))\n    print(catalan_number(58))\n    print(catalan_number(59))\n    print(catalan_number(60))\n    print(catalan_number(61))\n    print(catalan_number(62))\n    print(catalan_number(63))\n    print(catalan_number(64))\n    print(catalan_number(65))\n    print(catalan_number(66))\n    print(catalan_number(67))\n    print(catalan_number(68))\n    print(catalan_number(69))\n    print(catalan_number(70))\n    print(catalan_number(71))\n    print(catalan_number(72))\n    print(catalan_number(73))\n    print(catalan_number(74))\n    print(catalan_number(75))\n    print(catalan_number(76))\n    print(catalan_number(77))\n    print(catalan_number(78))\n    print(catalan_number(79))\n    print(catalan_number(80))\n    print(catalan_number(81))\n    print(catalan_number"}
{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\n\ndef expensive_items(dataset, n):\n    \"\"\"\n    :param dataset: list of dictionaries\n    :param n: integer\n    :return: list of dictionaries\n    \"\"\"\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]\n\n\nif __name__ == '__main__':\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 3))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 4))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 5))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 6))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 7))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 8))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 9))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 10))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 11))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 12))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 13))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 14))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 15))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 16))\n    print(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1"}
{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n"}
{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\n\ndef list_tuple(lst):\n    return tuple(lst)\n\n\nprint(list_tuple([5, 10, 7, 4, 15, 3]))\n"}
{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\n\ndef big_diff(array):\n    return max(array) - min(array)\n\n\nprint(big_diff([1, 2, 3, 4]))\nprint(big_diff([10, 5, 2, 7]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(big_diff([10, 5, 2, 7, 8, 9, 1, 2, 3, 4]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, "}
{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\n\ndef perfect_squares(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: list\n    \"\"\"\n    perfect_squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            perfect_squares.append(i)\n    return perfect_squares\n\n\nif __name__ == '__main__':\n    print(perfect_squares(1, 30))\n    print(perfect_squares(1, 10))\n    print(perfect_squares(1, 1))\n    print(perfect_squares(1, 0))\n    print(perfect_squares(1, -1))\n    print(perfect_squares(1, -10))\n    print(perfect_squares(1, -100))\n    print(perfect_squares(1, -1000))\n    print(perfect_squares(1, -10000))\n    print(perfect_squares(1, -100000))\n    print(perfect_squares(1, -1000000))\n    print(perfect_squares(1, -10000000))\n    print(perfect_squares(1, -100000000))\n    print(perfect_squares(1, -1000000000))\n    print(perfect_squares(1, -10000000000))\n    print(perfect_squares(1, -100000000000))\n    print(perfect_squares(1, -1000000000000))\n    print(perfect_squares(1, -10000000000000))\n    print(perfect_squares(1, -100000000000000))\n    print(perfect_squares(1, -1000000000000000))\n    print(perfect_squares(1, -10000000000000000))\n    print(perfect_squares(1, -100000000000000000))\n    print(perfect_squares(1, -1000000000000000000))\n    print(perfect_squares(1, -10000000000000000000))\n    print(perfect_squares(1, -100000000000000000000))\n    print(perfect_squares(1, -1000000000000000000000))\n    print(perfect_squares(1, -10000000000000000000000))\n    print(perfect_squares(1, -100000000000000000000000))\n    print(perfect_squares(1, -1000000000000000000000000))\n    print(perfect_squares(1, -10000000000000000000000000))\n    print(perfect_squares(1, -100000000000000000000000000))\n    print(perfect_squares(1, -1"}
{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    return (r*math.cos(theta), r*math.sin(theta))\n\n\ndef test_polar_rect():\n    assert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2 + 2.4492935982947064e-16j))\n\n\nif __name__ == '__main__':\n    test_polar_rect()\n\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar((5.0, 0.9272952180016122))==(3.0, 4.0)\n\"\"\"\n\n\ndef rect_polar(r, theta):\n    \"\"\"\n    Write a function to convert rectangular coordinates to polar coordinates.\n    assert rect_polar((5.0, 0.9272952180016122))==(3.0, 4.0)\n    \"\"\"\n    return (r*math.cos(theta), r*math.sin(theta))\n\n\ndef test_rect_polar():\n    assert rect_polar((5.0, 0.9272952180016122)) == (3.0, 4.0)\n\n\nif __name__ == '__main__':\n    test_rect_polar()\n\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar((5.0, 0.9272952180016122))==(3.0, 4.0)\n\"\"\"\n\n\ndef rect_polar(r, theta):\n    \"\"\"\n    Write a function to convert rectangular coordinates to polar coordinates.\n    assert rect_polar((5.0, 0.9272952180016122))==(3.0, 4.0)\n    \"\"\"\n    return (r*math.cos(theta), r*math.sin(theta))\n\n\ndef test_rect_polar():\n    assert rect_polar((5.0, 0.9272952180016122)) == (3.0, 4.0)\n\n\nif __name__ == '__main__':\n    test_rect_polar()\n\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar((5.0, 0.9272952180016122))==(3.0, 4.0)\n\"\"\"\n\n\ndef rect_polar(r, theta):\n    \"\"\"\n    Write a function to convert rectangular coordinates to polar coordinates.\n    assert rect_polar((5.0, 0.9272952180016122))==(3.0, 4.0)\n    \"\"\"\n    return (r*math.cos(theta), r*math.sin(theta))\n\n\ndef test_rect_polar():\n    assert rect_polar((5.0, 0.9272952180016122)) == (3.0, 4.0)\n\n\nif __name__ == '__main__':\n    test_rect_polar()\n\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\n"}
{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\n\ndef swap_List(lst):\n    \"\"\"\n    >>> swap_List([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\n\ndef sum_Of_product(n):\n    \"\"\"\n    >>> sum_Of_product(3)\n    15\n    >>> sum_Of_product(4)\n    30\n    >>> sum_Of_product(5)\n    50\n    >>> sum_Of_product(6)\n    75\n    >>> sum_Of_product(7)\n    100\n    >>> sum_Of_product(8)\n    125\n    >>> sum_Of_product(9)\n    150\n    >>> sum_Of_product(10)\n    175\n    >>> sum_Of_product(11)\n    200\n    >>> sum_Of_product(12)\n    225\n    >>> sum_Of_product(13)\n    250\n    >>> sum_Of_product(14)\n    275\n    >>> sum_Of_product(15)\n    300\n    >>> sum_Of_product(16)\n    325\n    >>> sum_Of_product(17)\n    350\n    >>> sum_Of_product(18)\n    375\n    >>> sum_Of_product(19)\n    400\n    >>> sum_Of_product(20)\n    425\n    >>> sum_Of_product(21)\n    450\n    >>> sum_Of_product(22)\n    475\n    >>> sum_Of_product(23)\n    500\n    >>> sum_Of_product(24)\n    525\n    >>> sum_Of_product(25)\n    550\n    >>> sum_Of_product(26)\n    575\n    >>> sum_Of_product(27)\n    600\n    >>> sum_Of_product(28)\n    625\n    >>> sum_Of_product(29)\n    650\n    >>> sum_Of_product(30)\n    675\n    >>> sum_Of_product(31)\n    700\n    >>> sum_Of_product(32)\n    725\n    >>> sum_Of_product(33)\n    750\n    >>> sum_Of_product(34)\n    775\n    >>> sum_Of_product(35)\n    800\n    >>> sum_Of_product(36)\n    825\n    >>> sum_Of_product(37)\n    850\n    >>> sum_Of_product(38)\n    875\n    >>> sum_Of_product(39)\n    900\n    >>> sum_Of_product(40)\n    925\n    >>> sum_Of_product(41)\n    950\n    >>> sum_Of_product(42)\n    975\n    >>> sum_Of_product(43)\n    1000\n    >>> sum_Of_product(44)\n    1025\n    >>> sum_Of_product(45)\n    1050\n    >>> sum_Of_product(46)\n    1075\n    >>> sum_Of_product(47)\n    1100\n    >>> sum_Of_product(48)\n    1125\n    >>> sum_Of_product(49)\n    1150\n    >>> sum_Of_product(50)\n    1175\n    >>> sum_Of_product(51)\n    1200\n    >>> sum_Of_product(52)\n    1225\n    >>> sum_Of_product(53)\n    1250\n    >>> sum_Of_product(54)\n    1275\n    >>> sum_Of_product(55)\n    1300\n    >>> sum_Of_product(56)\n    1325\n    >>> sum_Of_"}
{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n\n\ndef removezero_ip(ip):\n    \"\"\"\n    :param ip:\n    :return:\n    \"\"\"\n    return '.'.join(str(int(x)) for x in ip.split('.'))\n\n\nif __name__ == '__main__':\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print(removezero_ip(\"216.08.094.196\"))\n    print("}
{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n\n\ndef diff_even_odd(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: difference of the first even and first odd number of a given list\n    \"\"\"\n    even_odd = [lst[i] for i in range(len(lst)) if i % 2 == 0 or i % 2 == 1]\n    return even_odd[0] - even_odd[1]\n\n\nif __name__ == '__main__':\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]))\n    print(diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]))\n    print(diff_even_odd([1, 3, 5,"}
{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\n\n\ndef min_Swaps(str1, str2):\n    \"\"\"\n    :param str1: string\n    :param str2: string\n    :return: int\n    \"\"\"\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must be of equal length\")\n\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1010\", \"1100\"))\n    print(min_Swaps(\"1101\", \"1010\"))\n    print(min_Swaps(\"1110\", \"1101\"))\n    print(min_Swaps(\"1010\", \"1001\"))\n    print(min_Swaps(\"1110\", \"1101\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps(\"1101\", \"1110\"))\n    print(min_Swaps"}
{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\nimport sys\n\n\ndef tuple_size(t):\n    \"\"\"\n    Return the size in bytes of the given tuple.\n    \"\"\"\n    return sys.getsizeof(t)\n\n\nif __name__ == \"__main__\":\n    print(tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, "}
{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\n\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    :param arr1: sorted array\n    :param arr2: sorted array\n    :param k: kth element\n    :return: kth element\n    \"\"\"\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    if k > len(arr1) + len(arr2):\n        return None\n    if k <= len(arr1):\n        return arr1[k - 1]\n    if k <= len(arr1) + len(arr2):\n        return arr2[k - len(arr1) - 1]\n\n\nif __name__ == '__main__':\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 10))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 1))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 0))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 11))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 12))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 13))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 14))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 15))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 16))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 17))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 18))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 19))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 20))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 21))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 22))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 23))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 24))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 25))\n    print(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10],"}
{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n\n\ndef armstrong_number(number):\n    \"\"\"\n    :param number: int\n    :return: bool\n    \"\"\"\n    if number < 0:\n        return False\n    else:\n        num_list = list(str(number))\n        num_len = len(num_list)\n        num_sum = 0\n        for i in num_list:\n            num_sum += int(i) ** num_len\n        if num_sum == number:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    print(armstrong_number(153))\n    print(armstrong_number(123))\n    print(armstrong_number(1234))\n    print(armstrong_number(12345))\n    print(armstrong_number(123456))\n    print(armstrong_number(1234567))\n    print(armstrong_number(12345678))\n    print(armstrong_number(123456789))\n    print(armstrong_number(1234567890))\n    print(armstrong_number(12345678901))\n    print(armstrong_number(123456789012))\n    print(armstrong_number(1234567890123))\n    print(armstrong_number(12345678901234))\n    print(armstrong_number(123456789012345))\n    print(armstrong_number(1234567890123456))\n    print(armstrong_number(12345678901234567))\n    print(armstrong_number(123456789012345678))\n    print(armstrong_number(1234567890123456789))\n    print(armstrong_number(12345678901234567890))\n    print(armstrong_number(123456789012345678901))\n    print(armstrong_number(1234567890123456789012))\n    print(armstrong_number(12345678901234567890123))\n    print(armstrong_number(123456789012345678901234))\n    print(armstrong_number(1234567890123456789012345))\n    print(armstrong_number(12345678901234567890123456))\n    print(armstrong_number(123456789012345678901234567))\n    print(armstrong_number(1234567890123456789012345678))\n    print(armstrong_number(12345678901234567890123456789))\n    print(armstrong_number(123456789012345678901234567890))\n    print(armstrong_number(1234567890123456789012345678901))\n    print(armstrong_number(12345678901234567890123"}
{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\n\ndef sum_average(n):\n    \"\"\"\n    :param n: int\n    :return: tuple\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n + 1):\n        sum_ += i\n    return sum_, sum_ / n\n\n\nif __name__ == '__main__':\n    print(sum_average(10))\n    print(sum_average(100))\n    print(sum_average(1000))\n    print(sum_average(10000))\n    print(sum_average(100000))\n    print(sum_average(1000000))\n    print(sum_average(10000000))\n    print(sum_average(100000000))\n    print(sum_average(1000000000))\n    print(sum_average(10000000000))\n    print(sum_average(100000000000))\n    print(sum_average(1000000000000))\n    print(sum_average(10000000000000))\n    print(sum_average(100000000000000))\n    print(sum_average(1000000000000000))\n    print(sum_average(10000000000000000))\n    print(sum_average(100000000000000000))\n    print(sum_average(1000000000000000000))\n    print(sum_average(10000000000000000000))\n    print(sum_average(100000000000000000000))\n    print(sum_average(1000000000000000000000))\n    print(sum_average(10000000000000000000000))\n    print(sum_average(100000000000000000000000))\n    print(sum_average(1000000000000000000000000))\n    print(sum_average(10000000000000000000000000))\n    print(sum_average(100000000000000000000000000))\n    print(sum_average(1000000000000000000000000000))\n    print(sum_average(10000000000000000000000000000))\n    print(sum_average(100000000000000000000000000000))\n    print(sum_average(1000000000000000000000000000000))\n    print(sum_average(10000000000000000000000000000000))\n    print(sum_average(100000000000000000000000000000000))\n    print("}
{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\n\ndef is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n\nprint(is_Even(1))\nprint(is_Even(2))\nprint(is_Even(3))\nprint(is_Even(4))\nprint(is_Even(5))\nprint(is_Even(6))\nprint(is_Even(7))\nprint(is_Even(8))\nprint(is_Even(9))\nprint(is_Even(10))\nprint(is_Even(11))\nprint(is_Even(12))\nprint(is_Even(13))\nprint(is_Even(14))\nprint(is_Even(15))\nprint(is_Even(16))\nprint(is_Even(17))\nprint(is_Even(18))\nprint(is_Even(19))\nprint(is_Even(20))\nprint(is_Even(21))\nprint(is_Even(22))\nprint(is_Even(23))\nprint(is_Even(24))\nprint(is_Even(25))\nprint(is_Even(26))\nprint(is_Even(27))\nprint(is_Even(28))\nprint(is_Even(29))\nprint(is_Even(30))\nprint(is_Even(31))\nprint(is_Even(32))\nprint(is_Even(33))\nprint(is_Even(34))\nprint(is_Even(35))\nprint(is_Even(36))\nprint(is_Even(37))\nprint(is_Even(38))\nprint(is_Even(39))\nprint(is_Even(40))\nprint(is_Even(41))\nprint(is_Even(42))\nprint(is_Even(43))\nprint(is_Even(44))\nprint(is_Even(45))\nprint(is_Even(46))\nprint(is_Even(47))\nprint(is_Even(48))\nprint(is_Even(49))\nprint(is_Even(50))\nprint(is_Even(51))\nprint(is_Even(52))\nprint(is_Even(53))\nprint(is_Even(54))\nprint(is_Even(55))\nprint(is_Even(56))\nprint(is_Even(57))\nprint(is_Even(58))\nprint(is_Even(59))\nprint(is_Even(60))\nprint(is_Even(61))\nprint(is_Even(62))\nprint(is_Even(63))\nprint(is_Even(64))\nprint(is_Even(65))\nprint(is_Even(66))\nprint(is_Even(67))\nprint(is_Even(68))\nprint(is_Even(69))\nprint(is_Even(70))\nprint(is_Even(71))\nprint(is_Even(72))\nprint(is_Even(73))\nprint(is_Even(74))\nprint(is_Even(75))\nprint(is_Even(76))\nprint(is_Even(77))\nprint(is_Even(78))\nprint(is_Even(79))\nprint(is_Even(80))\nprint(is_Even(81))\nprint(is_Even(82))\nprint(is_Even(83))\nprint(is_Even(84))\nprint(is_Even(85))\n"}
{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\n\ndef first_repeated_char(string):\n    \"\"\"\n    :param string: str\n    :return: str\n    \"\"\"\n    return min(set(string), key=string.count)\n\n\nif __name__ == '__main__':\n    print(first_repeated_char(\"abcabc\"))\n    print(first_repeated_char(\"abca\"))\n    print(first_repeated_char(\"abc\"))\n    print(first_repeated_char(\"abcaa\"))\n    print(first_repeated_char(\"abcabca\"))\n    print(first_repeated_char(\"abcabcaa\"))\n    print(first_repeated_char(\"abcabcaaa\"))\n    print(first_repeated_char(\"abcabcaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(first_repeated_char(\"abcabcaaaaaaaaaaaaaaaaa"}
{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\n\ndef get_ludic(n):\n    \"\"\"\n    :param n: int\n    :return: list\n    \"\"\"\n    if n <= 1:\n        return []\n    else:\n        return [i for i in range(1, n + 1) if n % i == 0]\n\n\nif __name__ == '__main__':\n    print(get_ludic(10))\n    print(get_ludic(100))\n    print(get_ludic(1000))\n    print(get_ludic(10000))\n    print(get_ludic(100000))\n    print(get_ludic(1000000))\n    print(get_ludic(10000000))\n    print(get_ludic(100000000))\n    print(get_ludic(1000000000))\n    print(get_ludic(10000000000))\n    print(get_ludic(100000000000))\n    print(get_ludic(1000000000000))\n    print(get_ludic(10000000000000))\n    print(get_ludic(100000000000000))\n    print(get_ludic(1000000000000000))\n    print(get_ludic(10000000000000000))\n    print(get_ludic(100000000000000000))\n    print(get_ludic(1000000000000000000))\n    print(get_ludic(10000000000000000000))\n    print(get_ludic(100000000000000000000))\n    print(get_ludic(1000000000000000000000))\n    print(get_ludic(10000000000000000000000))\n    print(get_ludic(100000000000000000000000))\n    print(get_ludic(1000000000000000000000000))\n    print(get_ludic(10000000000000000000000000))\n    print(get_ludic(100000000000000000000000000))\n    print(get_ludic(1000000000000000000000000000))\n    print(get_ludic(10000000000000000000000000000))\n    print(get_ludic(100000000000000000000000000000))\n    print(get_ludic(1000000000000000000000000000000))\n    print(get_ludic(10000000000000000000000000000000))\n    print(get_ludic(1000000000"}
{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\n\ndef reverse_words(string):\n    \"\"\"\n    :param string: string to reverse\n    :return: reversed string\n    \"\"\"\n    return \" \".join(string.split()[::-1])\n\n\nif __name__ == '__main__':\n    print(reverse_words(\"python program\"))\n    print(reverse_words(\"hello world\"))\n    print(reverse_words(\"hello world how are you\"))\n    print(reverse_words(\"a b c d e f g\"))\n    print(reverse_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n    print(reverse_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n    print(reverse_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a"}
{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(prime_num(13))\n    print(prime_num(14))\n    print(prime_num(15))\n    print(prime_num(16))\n    print(prime_num(17))\n    print(prime_num(18))\n    print(prime_num(19))\n    print(prime_num(20))\n    print(prime_num(21))\n    print(prime_num(22))\n    print(prime_num(23))\n    print(prime_num(24))\n    print(prime_num(25))\n    print(prime_num(26))\n    print(prime_num(27))\n    print(prime_num(28))\n    print(prime_num(29))\n    print(prime_num(30))\n    print(prime_num(31))\n    print(prime_num(32))\n    print(prime_num(33))\n    print(prime_num(34))\n    print(prime_num(35))\n    print(prime_num(36))\n    print(prime_num(37))\n    print(prime_num(38))\n    print(prime_num(39))\n    print(prime_num(40))\n    print(prime_num(41))\n    print(prime_num(42))\n    print(prime_num(43))\n    print(prime_num(44))\n    print(prime_num(45))\n    print(prime_num(46))\n    print(prime_num(47))\n    print(prime_num(48))\n    print(prime_num(49))\n    print(prime_num(50))\n    print(prime_num(51))\n    print(prime_num(52))\n    print(prime_num(53))\n    print(prime_num(54))\n    print(prime_num(55))\n    print(prime_num(56))\n    print(prime_num(57))\n    print(prime_num(58))\n    print(prime_num(59))\n    print(prime_num(60))\n    print(prime_num(61))\n    print(prime_num(62))\n    print(prime_num(63))\n    print(prime_num(64))\n    print(prime_num(65))\n    print(prime_num(66))\n    print(prime_num(67))\n    print(prime_num(68))\n    print(prime_num(69))\n    print(prime_num(70))\n    print(prime_num(71))\n    print(prime_num(72))\n    print(prime_num(73))\n    print(prime_num(74))\n    print(prime_num(75))\n    print(prime_num(76))\n    print(prime_num(77))\n    print(prime_num(78))\n    print(prime_num(79))\n    print(prime_num(80))\n    print(prime_num(81))\n    print(prime_num(82))\n    print(prime_num(83))\n    print(prime_num(84))\n    print(prime_num(85))\n    print(prime_num(86))\n    print(prime_num(87))\n    print(prime_num(88))\n    print(prime_num(89))\n    print(prime_num(90))\n    print(prime_num(91))\n    print(prime_num(92))\n    print(prime_num(93))\n    print(prime_num(94))\n    print(prime_num"}
{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert radian_degree(90)==1.5707963267948966\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    print(\"Done!\")\n\n\n\"\"\"\n----------------------------------------------------------------------------------------------------------------------------------\nSOLUTION\n----------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert radian_degree(90)==1.5707963267948966\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    print(\"Done!\")\n\n\n\"\"\"\n----------------------------------------------------------------------------------------------------------------------------------\nSOLUTION\n----------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert radian_degree(90)==1.5707963267948966\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    print(\"Done!\")\n\n\n\"\"\"\n----------------------------------------------------------------------------------------------------------------------------------\nSOLUTION\n----------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert radian_degree(90)==1.5707963267948966\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    print(\"Done!\")\n\n\n\"\"\"\n----------------------------------------------------------------------------------------------------------------------------------\nSOLUTION\n----------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert radian_degree(90)==1.5707963267948966\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    print(\"Done!\")\n\n\n\"\"\"\n----------------------------------------------------------------------------------------------------------------------------------\nSOLUTION\n----------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert radian_degree(90)==1.5707963267948966\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    print(\"Done!\")\n\n\n\"\"\"\n----------------------------------------------------------------------------------------------------------------------------------\nSOLUTION\n----------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    assert rad"}
{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Finds the first occurrence of a pattern in a string and returns the matching substring, a start index and an end index.\n    :param string: The string to search.\n    :param pattern: The pattern to search for.\n    :return: The matching substring, a start index and an end index.\n    \"\"\"\n    start_index = string.find(pattern)\n    end_index = start_index + len(pattern)\n    return pattern, start_index, end_index\n\n\nif __name__ == '__main__':\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'fox'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'dog'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown fox jumps over the lazy dog.', 'The quick brown fox jumps over the lazy dog.'))\n    print(find_literals('The quick brown"}
{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\n\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_Number(n - 1) + bell_Number(n - 2)\n\n\nif __name__ == '__main__':\n    print(bell_Number(2))\n    print(bell_Number(3))\n    print(bell_Number(4))\n    print(bell_Number(5))\n    print(bell_Number(6))\n    print(bell_Number(7))\n    print(bell_Number(8))\n    print(bell_Number(9))\n    print(bell_Number(10))\n    print(bell_Number(11))\n    print(bell_Number(12))\n    print(bell_Number(13))\n    print(bell_Number(14))\n    print(bell_Number(15))\n    print(bell_Number(16))\n    print(bell_Number(17))\n    print(bell_Number(18))\n    print(bell_Number(19))\n    print(bell_Number(20))\n    print(bell_Number(21))\n    print(bell_Number(22))\n    print(bell_Number(23))\n    print(bell_Number(24))\n    print(bell_Number(25))\n    print(bell_Number(26))\n    print(bell_Number(27))\n    print(bell_Number(28))\n    print(bell_Number(29))\n    print(bell_Number(30))\n    print(bell_Number(31))\n    print(bell_Number(32))\n    print(bell_Number(33))\n    print(bell_Number(34))\n    print(bell_Number(35))\n    print(bell_Number(36))\n    print(bell_Number(37))\n    print(bell_Number(38))\n    print(bell_Number(39))\n    print(bell_Number(40))\n    print(bell_Number(41))\n    print(bell_Number(42))\n    print(bell_Number(43))\n    print(bell_Number(44))\n    print(bell_Number(45))\n    print(bell_Number(46))\n    print(bell_Number(47))\n    print(bell_Number(48))\n    print(bell_Number(49))\n    print(bell_Number(50))\n    print(bell_Number(51))\n    print(bell_Number(52))\n    print(bell_Number(53))\n    print(bell_Number(54))\n    print(bell_Number(55))\n    print(bell_Number(56))\n    print(bell_Number(57))\n    print(bell_Number(58))\n    print(bell_Number(59))\n    print(bell_Number(60))\n    print(bell_Number(61))\n    print(bell_Number(62))\n    print(bell_Number(63))\n    print(bell_Number(64))\n    print(bell_Number(65))\n    print(bell_Number(66))\n    print(bell_Number(67))\n    print(bell_Number(68))\n    print(bell_Number(69))\n    print(bell_Number(70))\n    print(bell_Number(71))\n    print(bell_Number(72))\n    print(bell_Number(73))\n    print(bell_Number(74))\n    print(bell_Number(75))\n    print(bell_Number(76))\n    print(bell_Number(77))\n    print(bell_Number(78))\n    print(bell_Number(79))\n    print(bell_Number(80))\n    print(bell_Number(81))\n"}
{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\n\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\n\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 5))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 1))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 8))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 0))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -1))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -8))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -5))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -2))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -3))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -4))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -6))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -7))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -8))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -9))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -10))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -11))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -12))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -13))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -14))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -15))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -16))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -17))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -18))\nprint(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], -19))\nprint("}
{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\n\ndef max_of_nth(matrix, n):\n    \"\"\"\n    :param matrix: list of lists\n    :param n: int\n    :return: int\n    \"\"\"\n    return max(map(lambda x: x[n], matrix))\n\n\nif __name__ == '__main__':\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 4))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 5))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 6))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 7))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 8))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 9))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 10))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 11))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 12))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 13))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 14))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 15))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 16))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 17))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 18))\n    print(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 19))\n   "}
{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\n\ndef merge(lst):\n    return [list(zip(*lst))[0], list(zip(*lst))[1]]\n\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n"}
{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\n\ndef cummulative_sum(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :return: cummulative sum of all the values that are present in the given tuple list\n    \"\"\"\n    return sum(sum(t) for t in tuple_list)\n\n\nif __name__ == '__main__':\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]))\n    print(cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n                           (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7,"}
{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\n\ndef average_tuple(tup):\n    \"\"\"\n    :param tup: tuple of tuples\n    :return: list of averages\n    \"\"\"\n    return [sum(tup[i])/len(tup[i]) for i in range(len(tup))]\n\n\nif __name__ == '__main__':\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))))\n    print(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3"}
{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\n\ndef tuple_modulo(a, b):\n    \"\"\"\n    :param a: tuple\n    :param b: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(lambda x, y: x % y, a, b))\n\n\nif __name__ == '__main__':\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n    print(tuple_modulo((10, 4, 5, 6), (5,"}
{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\n\ndef div_list(list1, list2):\n    \"\"\"\n    :param list1: list of numbers\n    :param list2: list of numbers\n    :return: list of numbers\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    else:\n        return [x / y for x, y in zip(list1, list2)]\n\n\nif __name__ == '__main__':\n    print(div_list([4, 5, 6], [1, 2, 3]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(div_list([4, 5, 6], [1, 2, 3, 4, 5, 6, 7"}
{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\n\ndef move_num(string):\n    \"\"\"\n    :param string: str\n    :return: str\n    \"\"\"\n    nums = []\n    for i in string:\n        if i.isdigit():\n            nums.append(i)\n    return string.replace(''.join(nums), '') + ''.join(nums)\n\n\nif __name__ == '__main__':\n    print(move_num('I1love143you55three3000thousand'))\n    print(move_num('I1love143you55three3000thousand1143553000'))\n    print(move_num('I1love143you55three3000thousand11435530001143553000'))\n    print(move_num('I1love143you55three3000thousand114355300011435530001143553000'))\n    print(move_num('I1love143you55three3000thousand1143553000114355300011435530001143553000'))\n    print(move_num('I1love143you55three3000thousand11435530001143553000114355300011435530001143553000'))\n    print(move_num('I1love143you55three3000thousand114355300011435530001143553000114355300011435530001143553000'))\n    print(move_num('I1love143you55three3000thousand1143553000114355300011435530001143553000114355300011435530001143553000'))\n    print(move_num('I1love143you55three3000thousand114355300011435530001143553000114355300011435530001143553000114355300011435530001143553000'))\n    print(move_num('I1love143you55three3000thousand11435530001143553000114355300011435530001143553000114355300011435530001143553000114355300011435530001143553000114355300011435530001143553000114355300011435530001143553000114355300011435530001143553000114355300011435530001"}
{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\n\ndef largest_subset(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: size of the largest subset of nums so that every pair is divisible\n    \"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_size = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] % nums[j] == 0 or nums[j] % nums[i] == 0:\n                max_size = max(max_size, j - i + 1)\n\n    return max_size\n\n\nif __name__ == '__main__':\n    print(largest_subset([1, 3, 6, 13, 17, 18]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68"}
{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\n\ndef get_median(list1, list2, size):\n    \"\"\"\n    :param list1: sorted list\n    :param list2: sorted list\n    :param size: size of the list\n    :return: median of the two lists\n    \"\"\"\n    if size % 2 == 0:\n        return (list1[size // 2 - 1] + list1[size // 2]) / 2\n    else:\n        return list1[size // 2]\n\n\nif __name__ == '__main__':\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 6))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 7))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 8))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 9))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 10))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 11))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 12))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 13))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 14))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 15))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 16))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 17))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 18))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 19))\n    print(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 20))"}
{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n\ndef nth_nums(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: integer\n    :return: list of numbers\n    \"\"\"\n    return [num ** n for num in nums]\n\n\nif __name__ == '__main__':\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 16))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20))\n    print(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2"}
{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\n\ndef is_upper(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return string.upper()\n\n\nif __name__ == '__main__':\n    print(is_upper(\"person\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper(\"PERSON\"))\n    print(is_upper"}
{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius ** 2) * (3 ** 0.5) / 4\n\n\nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(63))\nprint(triangle_area(64))\nprint(triangle_area(65))\nprint(triangle_area(66))\nprint(triangle_area(67))\nprint(triangle_area(68))\nprint(triangle_area(69))\nprint(triangle_area(70))\nprint(triangle_area(71))\nprint(triangle_area(72))\nprint(triangle_area(73))\nprint(triangle_area(74))\nprint(triangle_area(75))\nprint(triangle_area(76))\nprint(triangle_area(77))\nprint(triangle_area(78))\nprint(triangle_area(79))\nprint(triangle_area(80))\nprint(triangle_area(81))\nprint(triangle_area(82))\nprint(triangle_area(83))\nprint(triangle_area(84))\nprint(triangle_area(85))\nprint(triangle_area(86))\nprint(triangle_area(87))\nprint(triangle_area(88))\nprint"}
{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\n\ndef replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'\n    :param string:\n    :return:\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n\n\nif __name__ == '__main__':\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n    print(replace_spaces(\"My Name is Dawood\"))\n   "}
{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\n\ndef Split(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: list of even numbers\n    \"\"\"\n    return [x for x in numbers if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    print(Split([1, 2, 3, 4, 5]))\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,"}
{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\n\ndef get_coordinates(coordinates):\n    \"\"\"\n    >>> get_coordinates((3, 4))\n    [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    \"\"\"\n    return [\n        [coordinates[0] - 1, coordinates[1] - 1],\n        [coordinates[0] - 1, coordinates[1]],\n        [coordinates[0] - 1, coordinates[1] + 1],\n        [coordinates[0], coordinates[1] - 1],\n        [coordinates[0], coordinates[1]],\n        [coordinates[0], coordinates[1] + 1],\n        [coordinates[0] + 1, coordinates[1] - 1],\n        [coordinates[0] + 1, coordinates[1]],\n        [coordinates[0] + 1, coordinates[1] + 1],\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\n\ndef replace_spaces(string):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return string.replace(' ', '_').replace('_', ' ')\n\n\nif __name__ == '__main__':\n    print(replace_spaces('Jumanji The Jungle'))\n    print(replace_spaces('Jumanji_The_Jungle'))\n    print(replace_spaces('Jumanji_The_Jungle_'))\n    print(replace_spaces('Jumanji_The_Jungle_ '))\n    print(replace_spaces('Jumanji_The_Jungle_  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _  _ '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _  _  '))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _  _  _'))\n    print(replace_spaces('Jumanji_The_Jungle_  _  _  _  _  _  _  _  _  _ '))\n    print(replace_spaces('J"}
{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\n\ndef move_zero(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of integers\n    \"\"\"\n    # Write your code here\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i], arr[zero_index] = arr[zero_index], arr[i]\n            zero_index += 1\n    return arr\n\n\nif __name__ == '__main__':\n    arr = [1, 0, 2, 0, 3, 4]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 0, 0]\n\n    arr = [1, 2, 3, 4, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 0, 0]\n\n    arr = [0, 0, 1, 2, 3, 4]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 0, 0]\n\n    arr = [1, 2, 3, 4, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 6, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 6, 7, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 6, 7, 8, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0]\n    print(move_zero(arr))\n    # expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0]\n\n    arr = [1, 2, 3, 4, 5, 6, 7"}
{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\n\ndef pair_xor_Sum(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: sum of xor of all pairs of numbers in the given list\n    \"\"\"\n    return sum(x ^ y for x, y in zip(arr, arr[1:]))\n\n\nif __name__ == '__main__':\n    print(pair_xor_Sum([5, 9, 7, 6], 4))\n    print(pair_xor_Sum([1, 2, 3, 4], 4))\n    print(pair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(pair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 100))\n    print(pair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 8"}
{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\n\ndef heap_sort(arr):\n    \"\"\"\n    :param arr: list of numbers\n    :return: sorted list\n    \"\"\"\n    heapify(arr)\n    for i in range(len(arr) - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr[:i])\n    return arr\n\n\ndef heapify(arr):\n    \"\"\"\n    :param arr: list of numbers\n    :return: sorted list\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        heapify_down(arr, i, len(arr))\n\n\ndef heapify_down(arr, i, n):\n    \"\"\"\n    :param arr: list of numbers\n    :param i: index of the parent\n    :param n: length of the list\n    :return: sorted list\n    \"\"\"\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify_down(arr, largest, n)\n\n\nif __name__ == '__main__':\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    print(heap_sort([1, 3, 5, 7, 9, 2, 4,"}
{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\n\ndef noprofit_noloss(amount, price):\n    if amount > price:\n        return False\n    return True\n\n\nprint(noprofit_noloss(1500, 1200))\nprint(noprofit_noloss(1500, 1500))\nprint(noprofit_noloss(1500, 1700))\nprint(noprofit_noloss(1500, 1300))\nprint(noprofit_noloss(1500, 1100))\nprint(noprofit_noloss(1500, 1000))\nprint(noprofit_noloss(1500, 1400))\nprint(noprofit_noloss(1500, 1600))\nprint(noprofit_noloss(1500, 1800))\nprint(noprofit_noloss(1500, 1900))\nprint(noprofit_noloss(1500, 2000))\nprint(noprofit_noloss(1500, 2100))\nprint(noprofit_noloss(1500, 2200))\nprint(noprofit_noloss(1500, 2300))\nprint(noprofit_noloss(1500, 2400))\nprint(noprofit_noloss(1500, 2500))\nprint(noprofit_noloss(1500, 2600))\nprint(noprofit_noloss(1500, 2700))\nprint(noprofit_noloss(1500, 2800))\nprint(noprofit_noloss(1500, 2900))\nprint(noprofit_noloss(1500, 3000))\nprint(noprofit_noloss(1500, 3100))\nprint(noprofit_noloss(1500, 3200))\nprint(noprofit_noloss(1500, 3300))\nprint(noprofit_noloss(1500, 3400))\nprint(noprofit_noloss(1500, 3500))\nprint(noprofit_noloss(1500, 3600))\nprint(noprofit_noloss(1500, 3700))\nprint(noprofit_noloss(1500, 3800))\nprint(noprofit_noloss(1500, 3900))\nprint(noprofit_noloss(1500, 4000))\nprint(noprofit_noloss(1500, 4100))\nprint(noprofit_noloss(1500, 4200))\nprint(noprofit_noloss(1500, 4300))\nprint(noprofit_noloss(1500, 4400))\nprint(noprofit_noloss(1500, 4500))\nprint(noprofit_noloss(1500, 4600))\nprint(noprofit_noloss(1500, 4700))\nprint(noprofit_noloss(1500, 4800))\nprint(noprofit_noloss(1500, 4900))\nprint(noprofit_noloss(1500, 5000))\nprint(noprofit_n"}
{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n\n\ndef wind_chill(wind_velocity, temperature):\n    \"\"\"\n    :param wind_velocity: wind velocity in km/h\n    :param temperature: temperature in celsius\n    :return: wind chill index\n    \"\"\"\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_velocity ** 0.16) + 0.4275 * (\n            temperature * (wind_velocity ** 0.16))\n    return round(wind_chill_index)\n\n\nif __name__ == '__main__':\n    print(wind_chill(120, 35))\n    print(wind_chill(100, 10))\n    print(wind_chill(100, 100))\n    print(wind_chill(100, 1000))\n    print(wind_chill(100, 10000))\n    print(wind_chill(100, 100000))\n    print(wind_chill(100, 1000000))\n    print(wind_chill(100, 10000000))\n    print(wind_chill(100, 100000000))\n    print(wind_chill(100, 1000000000))\n    print(wind_chill(100, 10000000000))\n    print(wind_chill(100, 100000000000))\n    print(wind_chill(100, 1000000000000))\n    print(wind_chill(100, 10000000000000))\n    print(wind_chill(100, 100000000000000))\n    print(wind_chill(100, 1000000000000000))\n    print(wind_chill(100, 10000000000000000))\n    print(wind_chill(100, 100000000000000000))\n    print(wind_chill(100, 1000000000000000000))\n    print(wind_chill(100, 10000000000000000000))\n    print(wind_chill(100, 100000000000000000000))\n    print(wind_chill(100, 1000000000000000000000))\n    print(wind_chill(100, 10000000000000000000000))\n    print(wind_chill(100, 100000000000000000000000))\n    print(wind_chill(100, 1000000000000000000000000))\n    print(wind_chill(100, 10000000000000000000000000))\n    print(wind_chill(100, 100000000000000000000000000))\n    print(wind_chill(100, 10000"}
{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\n\ndef sample_nam(names):\n    \"\"\"\n    :param names: list of names\n    :return: sum of the length of the names of a given list of names after removing the names that start with a lowercase letter\n    \"\"\"\n    return sum(len(name) for name in names if name[0].isupper())\n\n\nif __name__ == '__main__':\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally', 'sally']))\n    print(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith', 'sally', 'sally', '"}
{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\n\n\ndef remove_parenthesis(string):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    :param string: list of strings\n    :return: string without parenthesis\n    \"\"\"\n    return ''.join(string).replace('(', '').replace(')', '')\n\n\nif __name__ == '__main__':\n    print(remove_parenthesis([\"python (chrome)\""}
{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\n\ndef is_nonagonal(n):\n    \"\"\"\n    >>> is_nonagonal(10)\n    325\n    >>> is_nonagonal(11)\n    363\n    >>> is_nonagonal(12)\n    400\n    >>> is_nonagonal(13)\n    437\n    >>> is_nonagonal(14)\n    475\n    >>> is_nonagonal(15)\n    513\n    >>> is_nonagonal(16)\n    551\n    >>> is_nonagonal(17)\n    589\n    >>> is_nonagonal(18)\n    627\n    >>> is_nonagonal(19)\n    665\n    >>> is_nonagonal(20)\n    703\n    >>> is_nonagonal(21)\n    741\n    >>> is_nonagonal(22)\n    779\n    >>> is_nonagonal(23)\n    817\n    >>> is_nonagonal(24)\n    855\n    >>> is_nonagonal(25)\n    893\n    >>> is_nonagonal(26)\n    931\n    >>> is_nonagonal(27)\n    969\n    >>> is_nonagonal(28)\n    1007\n    >>> is_nonagonal(29)\n    1045\n    >>> is_nonagonal(30)\n    1083\n    >>> is_nonagonal(31)\n    1121\n    >>> is_nonagonal(32)\n    1159\n    >>> is_nonagonal(33)\n    1197\n    >>> is_nonagonal(34)\n    1235\n    >>> is_nonagonal(35)\n    1273\n    >>> is_nonagonal(36)\n    1311\n    >>> is_nonagonal(37)\n    1349\n    >>> is_nonagonal(38)\n    1387\n    >>> is_nonagonal(39)\n    1425\n    >>> is_nonagonal(40)\n    1463\n    >>> is_nonagonal(41)\n    1501\n    >>> is_nonagonal(42)\n    1539\n    >>> is_nonagonal(43)\n    1577\n    >>> is_nonagonal(44)\n    1615\n    >>> is_nonagonal(45)\n    1653\n    >>> is_nonagonal(46)\n    1691\n    >>> is_nonagonal(47)\n    1729\n    >>> is_nonagonal(48)\n    1767\n    >>> is_nonagonal(49)\n    1805\n    >>> is_nonagonal(50)\n    1843\n    >>> is_nonagonal(51)\n    1881\n    >>> is_nonagonal(52)\n    1919\n    >>> is_nonagonal(53)\n    1957\n    >>> is_nonagonal(54)\n    1995\n    >>> is_nonagonal(55)\n    2033\n    >>> is_nonagonal(56)\n    2071\n    >>> is_nonagonal(57)\n    2109\n    >>> is_nonagonal(58)\n    2147\n    >>> is_nonagonal(59)\n    2185\n    >>> is_nonagonal(60)\n    2223\n    >>> is_nonagonal(61)\n    2261\n    >>> is_nonagonal(62)\n    2309\n    >>> is_"}
{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\n\ndef text_match_wordz_middle(text):\n    return text.startswith(\"z\") and text.endswith(\"z\") and \"z\" in text[1:-1]\n\n\nprint(text_match_wordz_middle(\"pythonzabc.\"))\nprint(text_match_wordz_middle(\"zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.zpythonzabc.z\"))\nprint(text_match_wordz_middle(\"pythonzabc.zpythonzabc.zpythonz"}
{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\n\ndef reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    :param arr: array\n    :param k: position\n    :return: reversed array\n    \"\"\"\n    if k < 0 or k > len(arr) - 1:\n        return arr\n    else:\n        for i in range(k):\n            arr[i], arr[k] = arr[k], arr[i]\n        return arr\n\n\nif __name__ == '__main__':\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 3))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 2))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 1))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 0))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -1))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -2))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -3))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -4))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -5))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -6))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -7))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -8))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -9))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -10))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -11))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -12))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -13))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -14))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -15))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -16))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -17))\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], -18))\n    print("}
{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tuple, dict):\n    return tuple + (dict,)\n\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) != (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\""}
{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n\ndef maxAverageOfPath(matrix):\n    # Write your code here\n    if not matrix:\n        return 0\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = matrix[i][0]\n    for j in range(n):\n        dp[0][j] = matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n    return dp[n - 1][n - 1] / (n * n)\n\n\nif __name__ == '__main__':\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n    print(maxAverageOfPath([[1, 2, 3"}
{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\n\ndef filter_data(students, min_height, min_weight):\n    return {k: v for k, v in students.items() if v[0] >= min_height and v[1] >= min_weight}\n\n\nif __name__ == '__main__':\n    students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n    min_height = 6.0\n    min_weight = 70\n    print(filter_data(students, min_height, min_weight))\n"}
{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\n\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7,"}
{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n\n\ndef power_base_sum(base, power):\n    \"\"\"\n    :param base: int\n    :param power: int\n    :return: int\n    \"\"\"\n    if power == 0:\n        return 0\n    if power == 1:\n        return base\n    if power == 2:\n        return base * base\n    if power == 3:\n        return base * base * base\n    if power == 4:\n        return base * base * base * base\n    if power == 5:\n        return base * base * base * base * base\n    if power == 6:\n        return base * base * base * base * base * base\n    if power == 7:\n        return base * base * base * base * base * base * base\n    if power == 8:\n        return base * base * base * base * base * base * base * base\n    if power == 9:\n        return base * base * base * base * base * base * base * base * base\n    if power == 10:\n        return base * base * base * base * base * base * base * base * base * base\n    if power == 11:\n        return base * base * base * base * base * base * base * base * base * base * base\n    if power == 12:\n        return base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 13:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 14:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 15:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 16:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 17:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 18:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 19:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 20:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 21:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 22:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 23:\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base\n    if power == 24:\n        return base * base * base * base * base * base *"}
{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\n\ndef extract_quotation(string):\n    \"\"\"\n    :param string: str\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if string[i] == '\"':\n            result.append(string[i + 1:string.index('\"', i + 1)])\n    return result\n\n\nif __name__ == '__main__':\n    print(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based \"multi\" tasking \"Processor\"'))\n    print(extract_quotation('\"A53\" Based \"multi\" tasking \"Processor\" \"A53\" Based"}
{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\n\ndef multiply_elements(t):\n    \"\"\"\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    >>> multiply_elements((1, 2, 3, 4, 5))\n    (2, 6, 12, 20)\n    >>> multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    (2, 6, 12, 20, 40, 60, 80, 100, 160, 200)\n    \"\"\"\n    return tuple(a * b for a, b in zip(t, t[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\ndef sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]\n\n\nif __name__ == '__main__':\n    print(sum_list([10,20,30],[15,25,35]))\n    print(sum_list([10,20,30],[15,25,35,45]))\n    print(sum_list([10,20,30],[15,25,35,45,55]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125,135]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125,135,145]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125,135,145,155]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175,185]))\n    print(sum_list([10,20,30],[15,25,35,45,55,65,75,85,95,105,11"}
{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\n\ndef consecutive_duplicates(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: list of integers without consecutive duplicates\n    \"\"\"\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result\n\n\nif __name__ == '__main__':\n    print(consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    print(consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"}
{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: lateral surface area of the cone\n    \"\"\"\n    return 2 * r * h + 2 * math.pi * r * r\n\n\nif __name__ == '__main__':\n    print(lateralsurface_cone(5, 12))\n    print(lateralsurface_cone(10, 15))\n    print(lateralsurface_cone(15, 20))\n    print(lateralsurface_cone(20, 25))\n    print(lateralsurface_cone(25, 30))\n    print(lateralsurface_cone(30, 35))\n    print(lateralsurface_cone(35, 40))\n    print(lateralsurface_cone(40, 45))\n    print(lateralsurface_cone(45, 50))\n    print(lateralsurface_cone(50, 55))\n    print(lateralsurface_cone(55, 60))\n    print(lateralsurface_cone(60, 65))\n    print(lateralsurface_cone(65, 70))\n    print(lateralsurface_cone(70, 75))\n    print(lateralsurface_cone(75, 80))\n    print(lateralsurface_cone(80, 85))\n    print(lateralsurface_cone(85, 90))\n    print(lateralsurface_cone(90, 95))\n    print(lateralsurface_cone(95, 100))\n    print(lateralsurface_cone(100, 105))\n    print(lateralsurface_cone(105, 110))\n    print(lateralsurface_cone(110, 115))\n    print(lateralsurface_cone(115, 120))\n    print(lateralsurface_cone(120, 125))\n    print(lateralsurface_cone(125, 130))\n    print(lateralsurface_cone(130, 135))\n    print(lateralsurface_cone(135, 140))\n    print(lateralsurface_cone(140, 145))\n    print(lateralsurface_cone(145, 150))\n    print(lateralsurface_cone(150, 155))\n    print(lateralsurface_cone(155, 160))\n    print(lateralsurface_cone(160, 165))\n    print(lateralsurface_cone(165, 170))\n    print(lateralsurface_cone(170, 175))\n    print(lateralsurface_cone(175, 180))\n    print(lateralsurface_cone(180, 185))\n    print(lateralsurface_cone(185, 190))\n    print(lateralsurface_cone(190, 195))\n    print(lateralsurface_cone(195, 200))\n    print(lateralsurface_"}
{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\n\ndef replace_specialchar(string):\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n\nprint(replace_specialchar('Python language, Programming language.'))\n"}
{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\n\ndef find_first_occurrence(arr, num):\n    \"\"\"\n    :param arr: sorted array\n    :param num: number to find\n    :return: index of the first occurrence of num in arr\n    \"\"\"\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == num else -1\n\n    mid = len(arr) // 2\n    if arr[mid] == num:\n        return mid\n    elif arr[mid] > num:\n        return find_first_occurrence(arr[:mid], num)\n    else:\n        return find_first_occurrence(arr[mid + 1:], num)\n\n\nif __name__ == '__main__':\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 1))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 2))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 3))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 4))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 7))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 11))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 12))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 13))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 14))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 15))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 16))\n    print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9"}
{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\n\ndef sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    :param arr: list\n    :return: int\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] * arr[1]\n    if n == 3:\n        return arr[0] * arr[1] * arr[2]\n    if n == 4:\n        return arr[0] * arr[1] * arr[2] * arr[3]\n    if n == 5:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n    if n == 6:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n    if n == 7:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n    if n == 8:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7]\n    if n == 9:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8]\n    if n == 10:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9]\n    if n == 11:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10]\n    if n == 12:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11]\n    if n == 13:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12]\n    if n == 14:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13]\n    if n == 15:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13] * arr[14]\n    if n == 16:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10] * arr[11] * arr[12] * arr[13] * arr[14] * arr[15]\n    if n == 17:\n        return arr[0] * arr[1] * arr[2]"}
{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\n\ndef toggle_middle_bits(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return (n ^ (n >> 1)) & ~(1 << (len(bin(n)) - 2))\n\n\nif __name__ == '__main__':\n    print(toggle_middle_bits(9))\n    print(toggle_middle_bits(10))\n    print(toggle_middle_bits(11))\n    print(toggle_middle_bits(12))\n    print(toggle_middle_bits(13))\n    print(toggle_middle_bits(14))\n    print(toggle_middle_bits(15))\n    print(toggle_middle_bits(16))\n    print(toggle_middle_bits(17))\n    print(toggle_middle_bits(18))\n    print(toggle_middle_bits(19))\n    print(toggle_middle_bits(20))\n    print(toggle_middle_bits(21))\n    print(toggle_middle_bits(22))\n    print(toggle_middle_bits(23))\n    print(toggle_middle_bits(24))\n    print(toggle_middle_bits(25))\n    print(toggle_middle_bits(26))\n    print(toggle_middle_bits(27))\n    print(toggle_middle_bits(28))\n    print(toggle_middle_bits(29))\n    print(toggle_middle_bits(30))\n    print(toggle_middle_bits(31))\n    print(toggle_middle_bits(32))\n    print(toggle_middle_bits(33))\n    print(toggle_middle_bits(34))\n    print(toggle_middle_bits(35))\n    print(toggle_middle_bits(36))\n    print(toggle_middle_bits(37))\n    print(toggle_middle_bits(38))\n    print(toggle_middle_bits(39))\n    print(toggle_middle_bits(40))\n    print(toggle_middle_bits(41))\n    print(toggle_middle_bits(42))\n    print(toggle_middle_bits(43))\n    print(toggle_middle_bits(44))\n    print(toggle_middle_bits(45))\n    print(toggle_middle_bits(46))\n    print(toggle_middle_bits(47))\n    print(toggle_middle_bits(48))\n    print(toggle_middle_bits(49))\n    print(toggle_middle_bits(50))\n    print(toggle_middle_bits(51))\n    print(toggle_middle_bits(52))\n    print(toggle_middle_bits(53))\n    print(toggle_middle_bits(54))\n    print(toggle_middle_bits(55))\n    print(toggle_middle_bits(56))\n    print(toggle_middle_bits(57))\n    print(toggle_middle_bits(58))\n    print(toggle_middle_bits(59))\n    print(toggle_middle_bits(60))\n    print(toggle_middle_bits(61))\n    print(toggle_middle_bits(62))\n    print(toggle_middle_bits(63))\n    print(toggle_middle_bits(64))\n    print(toggle_middle_bits(65))\n    print(toggle_middle_bits(66))\n    print(toggle_middle_bits(67))\n    print(toggle_middle_bits(68))\n    print(toggle_middle_bits(69))\n    print(toggle_middle_bits(70))\n    print(toggle_middle_bits(71))\n    print(toggle_middle_bits(72))\n    print(toggle_middle_bits(73))\n    print(toggle_middle_bits(74))\n    print(toggle_middle_bits(75))\n    print(toggle_middle_"}
{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\n\ndef left_insertion(arr, val):\n    \"\"\"\n    :param arr: list of sorted numbers\n    :param val: value to insert\n    :return: index of the left insertion point\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if val < arr[0]:\n        return 0\n    if val > arr[-1]:\n        return len(arr)\n    for i in range(len(arr)):\n        if val < arr[i]:\n            return i\n    return len(arr)\n\n\nif __name__ == '__main__':\n    print(left_insertion([1, 2, 4, 5], 6))\n    print(left_insertion([1, 2, 4, 5], 3))\n    print(left_insertion([1, 2, 4, 5], 1))\n    print(left_insertion([1, 2, 4, 5], 5))\n    print(left_insertion([1, 2, 4, 5], 2))\n    print(left_insertion([1, 2, 4, 5], 4))\n    print(left_insertion([1, 2, 4, 5], 0))\n    print(left_insertion([1, 2, 4, 5], 10))\n    print(left_insertion([1, 2, 4, 5], 100))\n    print(left_insertion([1, 2, 4, 5], 1000))\n    print(left_insertion([1, 2, 4, 5], 10000))\n    print(left_insertion([1, 2, 4, 5], 100000))\n    print(left_insertion([1, 2, 4, 5], 1000000))\n    print(left_insertion([1, 2, 4, 5], 10000000))\n    print(left_insertion([1, 2, 4, 5], 100000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000))\n    print(left_insertion([1, 2, 4, 5], 100000000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000000))\n    print(left_insertion([1, 2, 4, 5], 100000000000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000000000))\n    print(left_insertion([1, 2, 4, 5], 10000000000000000))\n    print(left_insertion([1, 2, 4, 5], 100000000000000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000000000000))\n    print(left_insertion([1, 2, 4, 5], 1000000000000000000"}
{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\n\ndef check_str(string):\n    \"\"\"\n    Checks if the given string starts with a vowel or not.\n    :param string: String to check\n    :return: True if the string starts with a vowel, False otherwise\n    \"\"\"\n    return re.match(r\"^[aeiouAEIOU].*\", string)\n\n\nif __name__ == \"__main__\":\n    print(check_str(\"annie\"))\n    print(check_str(\"ann\"))\n    print(check_str(\"a\"))\n    print(check_str(\"\"))\n    print(check_str(\"123\"))\n    print(check_str(\"a123\"))\n    print(check_str(\"123a\"))\n    print(check_str(\"123a456\"))\n    print(check_str(\"123456a\"))\n    print(check_str(\"1234567890\"))\n    print(check_str(\"1234567890a\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyz\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzA\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZa\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzA\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZa\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzA\"))\n    print(check_str(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY"}
{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n\n\ndef find_Index(n):\n    \"\"\"\n    Find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Write your code here\n    if n == 1:\n        return 1\n    else:\n        return 1 + find_Index(n - 1)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(find_Index(2))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert find_Index(2) == 4\n    assert find_Index(3) == 7\n    assert find_Index(4) == 10\n    assert find_Index(5) == 13\n    assert find_Index(6) == 16\n    assert find_Index(7) == 19\n    assert find_Index(8) == 22\n    assert find_Index(9) == 25\n    assert find_Index(10) == 28\n    assert find_Index(11) == 31\n    assert find_Index(12) == 34\n    assert find_Index(13) == 37\n    assert find_Index(14) == 40\n    assert find_Index(15) == 43\n    assert find_Index(16) == 46\n    assert find_Index(17) == 49\n    assert find_Index(18) == 52\n    assert find_Index(19) == 55\n    assert find_Index(20) == 58\n    assert find_Index(21) == 61\n    assert find_Index(22) == 64\n    assert find_Index(23) == 67\n    assert find_Index(24) == 70\n    assert find_Index(25) == 73\n    assert find_Index(26) == 76\n    assert find_Index(27) == 79\n    assert find_Index(28) == 82\n    assert find_Index(29) == 85\n    assert find_Index(30) == 88\n    assert find_Index(31) == 91\n    assert find_Index(32) == 94\n    assert find_Index(33) == 97\n    assert find_Index(34) == 100\n    assert find_Index(35) == 103\n    assert find_Index(36) == 106\n    assert find_Index(37) == 109\n    assert find_Index(38) == 112\n    assert find_Index(39) == 115\n    assert find_Index(40) == 118\n    assert find_Index(41) == 121\n    assert find_Index(42) == 124\n    assert find_Index(43) == 127\n    assert find_Index(44) == 130\n    assert find_Index(45) == 133\n    assert find_Index(46) == 136\n    assert find_Index(47) == 139\n    assert find_Index(48) == 142\n    assert find_Index(49) == 145\n    assert find_Index(50) == 148\n    assert find_Index(51) == 151\n    assert find_Index(52) == 154\n    assert find_Index(53) == 157\n    assert find_Index(54) == 160\n    assert find_Index(55) == 163\n    assert find_Index(56) == 166\n    assert find_Index(57) == 169\n    assert find_Index"}
{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\n\ndef tuple_to_dict(tup):\n    \"\"\"\n    >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n    {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    return {tup[i]: tup[i + 1] for i in range(len(tup) - 1)}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\n\ndef all_Characters_Same(string):\n    return len(set(string)) == 1\n\n\nif __name__ == '__main__':\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))\n    print(all_Characters_Same(\"python\"))"}
{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\n\ndef area_tetrahedron(a):\n    \"\"\"\n    a: float\n\n    returns: float\n    \"\"\"\n    return (a**2 * (sqrt(2 * (3 * a ** 2 - a ** 4)))) / 12\n\n\ndef test_area_tetrahedron():\n    \"\"\"\n    Tests area_tetrahedron\n    \"\"\"\n    assert area_tetrahedron(3) == 15.588457268119894\n\n\ndef main():\n    \"\"\"\n    Runs area_tetrahedron\n    \"\"\"\n    print(area_tetrahedron(3))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\n\ndef rotate_right(lst, n):\n    \"\"\"\n    :param lst: list to rotate\n    :param n: number of items to rotate\n    :return: rotated list\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return lst\n    if n > len(lst):\n        raise ValueError(\"n must be less than or equal to the length of the list\")\n    return lst[n:] + lst[:n]\n\n\nif __name__ == '__main__':\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -10))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -11))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\n    print(rotate_right([1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\n\ndef check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False\n\n\nprint(check_none((10, 4, 5, 6, None)))\nprint(check_none((10, 4, 5, 6, 7)))\nprint(check_none((10, 4, 5, 6, 7, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, None)))\nprint(check_none((10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21"}
{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\n\ndef divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum + 1) if all(i % int(d) == 0 for d in str(i))]\n\n\nif __name__ == '__main__':\n    print(divisible_by_digits(1, 22))\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n    print(divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, "}
{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\n\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return radius * radius * angle * (angle - 90) / 360\n\n\nprint(sector_area(4, 45))\nprint(sector_area(4, 90))\nprint(sector_area(4, 180))\nprint(sector_area(4, 270))\nprint(sector_area(4, 360))\nprint(sector_area(4, 361))\nprint(sector_area(4, 362))\nprint(sector_area(4, 363))\nprint(sector_area(4, 364))\nprint(sector_area(4, 365))\nprint(sector_area(4, 366))\nprint(sector_area(4, 367))\nprint(sector_area(4, 368))\nprint(sector_area(4, 369))\nprint(sector_area(4, 370))\nprint(sector_area(4, 371))\nprint(sector_area(4, 372))\nprint(sector_area(4, 373))\nprint(sector_area(4, 374))\nprint(sector_area(4, 375))\nprint(sector_area(4, 376))\nprint(sector_area(4, 377))\nprint(sector_area(4, 378))\nprint(sector_area(4, 379))\nprint(sector_area(4, 380))\nprint(sector_area(4, 381))\nprint(sector_area(4, 382))\nprint(sector_area(4, 383))\nprint(sector_area(4, 384))\nprint(sector_area(4, 385))\nprint(sector_area(4, 386))\nprint(sector_area(4, 387))\nprint(sector_area(4, 388))\nprint(sector_area(4, 389))\nprint(sector_area(4, 390))\nprint(sector_area(4, 391))\nprint(sector_area(4, 392))\nprint(sector_area(4, 393))\nprint(sector_area(4, 394))\nprint(sector_area(4, 395))\nprint(sector_area(4, 396))\nprint(sector_area(4, 397))\nprint(sector_area(4, 398))\nprint(sector_area(4, 399))\nprint(sector_area(4, 400))\nprint(sector_area(4, 401))\nprint(sector_area(4, 402))\nprint(sector_area(4, 403))\nprint(sector_area(4, 404))\nprint(sector_area(4, 405))\nprint(sector_area(4, 406))\nprint(sector_area(4, 407))\nprint(sector_area(4, 408))\nprint(sector_area(4, 409))\nprint(sector_area(4, 410))\nprint(sector_area(4, 411))\nprint(sector_area(4"}
{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    assert capital_words_spaces(\"Python\") == 'Python'\n    \"\"\"\n    words = string.split()\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = ' ' + words[i]\n    return ''.join(words)\n\n\nif __name__ == '__main__':\n    print(capital_words_spaces(\"Python\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print(capital_words_spaces(\"Python is a great language\"))\n    print"}
{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\n\ndef sort_numeric_strings(list_of_strings):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n    :param list_of_strings: list of strings of numbers\n    :return: list of strings of numbers sorted numerically\n    \"\"\"\n    return sorted(list_of_strings, key=lambda x: int(x))\n\n\nif __name__ == '__main__':\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']))\n    print(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12"}
{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\n\ndef add_tuple(list_of_tuples, tuple_to_add):\n    \"\"\"\n    Adds the given tuple to the given list.\n    :param list_of_tuples: list of tuples\n    :param tuple_to_add: tuple to add\n    :return: list of tuples with the given tuple added\n    \"\"\"\n    return list_of_tuples + [tuple_to_add]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(add_tuple([5, 6, 7], (9, 10)))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert add_tuple([5, 6, 7], (9, 10, 11)) == [5, 6, 7, 9, 10, 11]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12)) == [5, 6, 7, 9, 10, 11, 12]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13)) == [5, 6, 7, 9, 10, 11, 12, 13]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14)) == [5, 6, 7, 9, 10, 11, 12, 13, 14]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15)) == [5, 6, 7, 9, 10, 11, 12, 13, 14, 15]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16)) == [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17)) == [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18)) == [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    assert add_tuple([5, 6, 7], (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) == [5, 6, 7, 9, 10, 11, 12, 13, 14, 15"}
{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    :param arr: array to check\n    :return: True if the array represents min heap, False otherwise\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] > arr[1]:\n        return False\n    return check_min_heap(arr[1:])\n\n\nif __name__ == '__main__':\n    print(check_min_heap([1, 2, 3, 4, 5, 6]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 1"}
{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n\n\ndef jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    assert jacobsthal_num(5) == 11\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(jacobsthal_num(5))\n    print(jacobsthal_num(10))\n    print(jacobsthal_num(15))\n    print(jacobsthal_num(20))\n    print(jacobsthal_num(25))\n    print(jacobsthal_num(30))\n    print(jacobsthal_num(35))\n    print(jacobsthal_num(40))\n    print(jacobsthal_num(45))\n    print(jacobsthal_num(50))\n    print(jacobsthal_num(55))\n    print(jacobsthal_num(60))\n    print(jacobsthal_num(65))\n    print(jacobsthal_num(70))\n    print(jacobsthal_num(75))\n    print(jacobsthal_num(80))\n    print(jacobsthal_num(85))\n    print(jacobsthal_num(90))\n    print(jacobsthal_num(95))\n    print(jacobsthal_num(100))\n    print(jacobsthal_num(105))\n    print(jacobsthal_num(110))\n    print(jacobsthal_num(115))\n    print(jacobsthal_num(120))\n    print(jacobsthal_num(125))\n    print(jacobsthal_num(130))\n    print(jacobsthal_num(135))\n    print(jacobsthal_num(140))\n    print(jacobsthal_num(145))\n    print(jacobsthal_num(150))\n    print(jacobsthal_num(155))\n    print(jacobsthal_num(160))\n    print(jacobsthal_num(165))\n    print(jacobsthal_num(170))\n    print(jacobsthal_num(175))\n    print(jacobsthal_num(180))\n    print(jacobsthal_num(185))\n    print(jacobsthal_num(190))\n    print(jacobsthal_num(195))\n    print(jacobsthal_num(200))\n    print(jacobsthal_num(205))\n    print(jacobsthal_num(210))\n    print(jacobsthal_num(215))\n    print(jacobsthal_num("}
{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\n\ndef min_k(tuple_list, k):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :param k: int\n    :return: list of tuples\n    \"\"\"\n    if k > len(tuple_list):\n        return tuple_list\n    else:\n        return sorted(tuple_list, key=lambda x: x[1])[:k]\n\n\nif __name__ == '__main__':\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 3))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 5))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 6))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 7))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 8))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 9))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 10))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 11))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 12))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 13))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 14))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 15))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 16))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 17))\n    print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 18))\n    print"}
{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :param l3: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n\n\nif __name__ == '__main__':\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11,"}
{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\n\ndef second_smallest(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: the second smallest number in the list\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    else:\n        nums.sort()\n        return nums[1]\n\n\nif __name__ == '__main__':\n    print(second_smallest([1, 2, -8, -2, 0, -2]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\n    print(second_smallest([1, 2, -8, -2, 0, -2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19"}
{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\n\ndef count_reverse_pairs(words):\n    \"\"\"\n    :param words: list of strings\n    :return: number of pairs of reverse strings\n    \"\"\"\n    count = 0\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if words[i][::-1] == words[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\"]))\n    print(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\", \"julia\", \"julia\", \""}
{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\n\ndef unique_sublists(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: dictionary of unique sublists and their occurencies\n    \"\"\"\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in lst}\n\n\nif __name__ == '__main__':\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    print(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, 3], [13, 15, 17], [5, 7], [9, 11], [1, "}
{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n\n\ndef is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_decimal('123.11'))\n    print(is_decimal('123.1111'))\n    print(is_decimal('123.11111'))\n    print(is_decimal('123.111111'))\n    print(is_decimal('123.1111111'))\n    print(is_decimal('123.11111111'))\n    print(is_decimal('123.111111111'))\n    print(is_decimal('123.1111111111'))\n    print(is_decimal('123.11111111111'))\n    print(is_decimal('123.111111111111'))\n    print(is_decimal('123.1111111111111'))\n    print(is_decimal('123.11111111111111'))\n    print(is_decimal('123.111111111111111'))\n    print(is_decimal('123.1111111111111111'))\n    print(is_decimal('123.11111111111111111'))\n    print(is_decimal('123.111111111111111111'))\n    print(is_decimal('123.1111111111111111111'))\n    print(is_decimal('123.11111111111111111111'))\n    print(is_decimal('123.111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111'))\n    print(is_decimal('123.11111111111111111111111'))\n    print(is_decimal('123.111111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111111'))\n    print(is_decimal('123.11111111111111111111111111'))\n    print(is_decimal('123.111111111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111111111'))\n    print(is_decimal('123.11111111111111111111111111111'))\n    print(is_decimal('123.111111111111111111111111111111'))\n    print(is_decimal('123.1111111111111111111111111111111'))\n    print(is"}
{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\n\ndef unique_Element(nums):\n    if len(nums) == 1:\n        return True\n    else:\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    return False\n        return True\n\n\nif __name__ == '__main__':\n    print(unique_Element([1, 1, 1]))\n    print(unique_Element([1, 1, 2]))\n    print(unique_Element([1, 2, 3]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, "}
{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n\n\ndef check_monthnumber_number(monthnumber):\n    if monthnumber == 1 or monthnumber == 3 or monthnumber == 5 or monthnumber == 7 or monthnumber == 8 or monthnumber == 10 or monthnumber == 12:\n        return True\n    elif monthnumber == 4 or monthnumber == 6 or monthnumber == 9 or monthnumber == 11:\n        return False\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(13))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number(2))\n    print(check_monthnumber_number(1))\n    print(check_monthnumber_number(12))\n    print(check_monthnumber_number(11))\n    print(check_monthnumber_number(10))\n    print(check_monthnumber_number(9))\n    print(check_monthnumber_number(8))\n    print(check_monthnumber_number(7))\n    print(check_monthnumber_number(6))\n    print(check_monthnumber_number(5))\n    print(check_monthnumber_number(4))\n    print(check_monthnumber_number(3))\n    print(check_monthnumber_number("}
{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\n\ndef find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff\n\n\nif __name__ == '__main__':\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 6))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 7))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 8))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 9))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 10))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 11))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 12))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 13))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 14))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 15))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 16))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 17))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 18))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 19))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 20))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 21))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 22))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 23))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 24))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 25))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 26))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 27))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 28))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 29))\n    print(find_min_diff((1, 5, 3, 19, 18, 25), 30))\n    print(find_min_diff((1, 5, 3, 1"}
{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\n\ndef number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    assert number_ctr('program2bedone') == 1\n    \"\"\"\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(number_ctr('program2bedone'))\n    print(number_ctr('program2bedone1'))\n    print(number_ctr('program2bedone12'))\n    print(number_ctr('program2bedone123'))\n    print(number_ctr('program2bedone1234'))\n    print(number_ctr('program2bedone12345'))\n    print(number_ctr('program2bedone123456'))\n    print(number_ctr('program2bedone1234567'))\n    print(number_ctr('program2bedone12345678'))\n    print(number_ctr('program2bedone123456789'))\n    print(number_ctr('program2bedone1234567890'))\n    print(number_ctr('program2bedone12345678901'))\n    print(number_ctr('program2bedone123456789012'))\n    print(number_ctr('program2bedone1234567890123'))\n    print(number_ctr('program2bedone12345678901234'))\n    print(number_ctr('program2bedone123456789012345'))\n    print(number_ctr('program2bedone1234567890123456'))\n    print(number_ctr('program2bedone12345678901234567'))\n    print(number_ctr('program2bedone123456789012345678'))\n    print(number_ctr('program2bedone1234567890123456789'))\n    print(number_ctr('program2bedone12345678901234567890'))\n    print(number_ctr('program2bedone123456789012345678901'))\n    print(number_ctr('program2bedone1234567890123456789012'))\n    print(number_ctr('program2bedone12345678901234567890123'))\n    print(number_ctr('program2bedone123456789012345678901234'))\n    print(number_ctr('program2bedone1234567890123456789012345'))\n    print(number_ctr('program2bedone12345678901234567890123456'))\n    print(number_ctr('program2bedone123456789012345678901234567'))\n    print(number_ctr('program2bedone1234567890123456789012345678'))\n    print(number_ctr('program2bedone12345678901234567890123456789'))\n    print(number_ctr('program2bedone1234567"}
{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n\n\ndef is_polite(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * 2 - 1\n\n\ndef is_polite_recursive(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * 2 - 1\n\n\ndef is_polite_recursive_memo(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n in memo:\n        return memo[n]\n    else:\n        memo[n] = n * 2 - 1\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = is_polite_recursive_memo(n * 2 - 1, memo)\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized_2(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = is_polite_recursive_memo_optimized(n * 2 - 1, memo)\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized_3(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = is_polite_recursive_memo_optimized_2(n * 2 - 1, memo)\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized_4(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = is_polite_recursive_memo_optimized_3(n * 2 - 1, memo)\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized_5(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = is_polite_recursive_memo_optimized_4(n * 2 - 1, memo)\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized_6(n, memo):\n    \"\"\"\n    :param n: int\n    :param memo: dict\n    :return: int\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = is_polite_recursive_memo_optimized_5(n * 2 - 1, memo)\n        return memo[n]\n\n\ndef is_polite_recursive_memo_optimized_7(n, memo):\n    \"\"\"\n    :param n:"}
{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: list of tuples\n    \"\"\"\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\nif __name__ == '__main__':\n    print(pair_wise([1, 1, 2, 3, 3, 4, 4, 5]))\n    print(pair_wise([1, 2, 3, 4, 5]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 7"}
{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\n\ndef get_pairs_count(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(get_pairs_count([1, 1, 1, 1], 2))\n    print(get_pairs_count([1, 1, 1, 1], 3))\n    print(get_pairs_count([1, 1, 1, 1], 4))\n    print(get_pairs_count([1, 1, 1, 1], 5))\n    print(get_pairs_count([1, 1, 1, 1], 6))\n    print(get_pairs_count([1, 1, 1, 1], 7))\n    print(get_pairs_count([1, 1, 1, 1], 8))\n    print(get_pairs_count([1, 1, 1, 1], 9))\n    print(get_pairs_count([1, 1, 1, 1], 10))\n    print(get_pairs_count([1, 1, 1, 1], 11))\n    print(get_pairs_count([1, 1, 1, 1], 12))\n    print(get_pairs_count([1, 1, 1, 1], 13))\n    print(get_pairs_count([1, 1, 1, 1], 14))\n    print(get_pairs_count([1, 1, 1, 1], 15))\n    print(get_pairs_count([1, 1, 1, 1], 16))\n    print(get_pairs_count([1, 1, 1, 1], 17))\n    print(get_pairs_count([1, 1, 1, 1], 18))\n    print(get_pairs_count([1, 1, 1, 1], 19))\n    print(get_pairs_count([1, 1, 1, 1], 20))\n    print(get_pairs_count([1, 1, 1, 1], 21))\n    print(get_pairs_count([1, 1, 1, 1], 22))\n    print(get_pairs_count([1, 1, 1, 1], 23))\n    print(get_pairs_count([1, 1, 1, 1], 24))\n    print(get_pairs_count([1, 1, 1, 1], 25))\n    print(get_pairs_count([1, 1, 1, 1], 26))\n    print(get_pairs_count([1, 1, 1, 1], 27))\n    print(get_pairs_count([1, 1, 1, 1], 28))\n    print(get_pairs_count([1, 1, 1, 1], 29))\n    print(get_pairs_count([1, 1, 1, 1], 30))\n    print(get_pairs_count([1, 1, 1, 1], 31))\n    print(get_pairs_count([1, 1, 1, 1], 32))\n    print(get_pairs_count([1, 1, 1, 1], 33))\n    print(get_pairs_count([1, 1, 1, 1"}
{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\n\ndef Diff(list1, list2):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :return: list of integers\n    \"\"\"\n    return [i for i in list1 if i not in list2]\n\n\nif __name__ == '__main__':\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40]))\n    print(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, 35, 40, 10, 15, 20, 25, 30, "}
{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\n\ndef odd_num_sum(n):\n    \"\"\"\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    265\n    >>> odd_num_sum(4)\n    510\n    >>> odd_num_sum(5)\n    857\n    >>> odd_num_sum(6)\n    1212\n    >>> odd_num_sum(7)\n    1665\n    >>> odd_num_sum(8)\n    2120\n    >>> odd_num_sum(9)\n    2677\n    >>> odd_num_sum(10)\n    3232\n    >>> odd_num_sum(11)\n    3795\n    >>> odd_num_sum(12)\n    4358\n    >>> odd_num_sum(13)\n    4921\n    >>> odd_num_sum(14)\n    5584\n    >>> odd_num_sum(15)\n    6247\n    >>> odd_num_sum(16)\n    6910\n    >>> odd_num_sum(17)\n    7573\n    >>> odd_num_sum(18)\n    8236\n    >>> odd_num_sum(19)\n    8900\n    >>> odd_num_sum(20)\n    9573\n    >>> odd_num_sum(21)\n    10246\n    >>> odd_num_sum(22)\n    10920\n    >>> odd_num_sum(23)\n    11603\n    >>> odd_num_sum(24)\n    12286\n    >>> odd_num_sum(25)\n    13060\n    >>> odd_num_sum(26)\n    13843\n    >>> odd_num_sum(27)\n    14626\n    >>> odd_num_sum(28)\n    15410\n    >>> odd_num_sum(29)\n    16203\n    >>> odd_num_sum(30)\n    17000\n    >>> odd_num_sum(31)\n    17800\n    >>> odd_num_sum(32)\n    18600\n    >>> odd_num_sum(33)\n    19400\n    >>> odd_num_sum(34)\n    20200\n    >>> odd_num_sum(35)\n    21000\n    >>> odd_num_sum(36)\n    21800\n    >>> odd_num_sum(37)\n    22600\n    >>> odd_num_sum(38)\n    23400\n    >>> odd_num_sum(39)\n    24200\n    >>> odd_num_sum(40)\n    25000\n    >>> odd_num_sum(41)\n    25800\n    >>> odd_num_sum(42)\n    26600\n    >>> odd_num_sum(43)\n    27400\n    >>> odd_num_sum(44)\n    28200\n    >>> odd_num_sum(45)\n    29000\n    >>> odd_num_sum(46)\n    29800\n    >>> odd_num_sum(47)\n    30600\n    >>> odd_num_sum(48)\n    31400\n    >>> odd_num_sum(49)\n    32200\n    >>> odd_num_sum(50)\n    33000\n    >>> odd_num_sum(51)\n    33800\n    >>> odd_num_sum(52)"}
{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\n\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == \"(\" or char == \"{\" or char == \"[\":\n            stack.append(char)\n        elif char == \")\":\n            if stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n        elif char == \"}\":\n            if stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n        elif char == \"]\":\n            if stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert check_expression(\"{()}[{}]\") == True\n    assert check_expression(\"{()}[{]\") == False\n    assert check_expression(\"{()}[\") == False\n    assert check_expression(\"{()}[}\") == False\n    assert check_expression(\"{()}[}"}
{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\n\ndef remove_length(string, k):\n    \"\"\"\n    :param string: string to remove words from\n    :param k: length of words to remove\n    :return: string with words of length k removed\n    \"\"\"\n    words = string.split()\n    new_string = ''\n    for word in words:\n        if len(word) != k:\n            new_string += word + ' '\n    return new_string.strip()\n\n\nif __name__ == '__main__':\n    print(remove_length('The person is most value tet', 3))\n    print(remove_length('The person is most value tet', 4))\n    print(remove_length('The person is most value tet', 5))\n    print(remove_length('The person is most value tet', 6))\n    print(remove_length('The person is most value tet', 7))\n    print(remove_length('The person is most value tet', 8))\n    print(remove_length('The person is most value tet', 9))\n    print(remove_length('The person is most value tet', 10))\n    print(remove_length('The person is most value tet', 11))\n    print(remove_length('The person is most value tet', 12))\n    print(remove_length('The person is most value tet', 13))\n    print(remove_length('The person is most value tet', 14))\n    print(remove_length('The person is most value tet', 15))\n    print(remove_length('The person is most value tet', 16))\n    print(remove_length('The person is most value tet', 17))\n    print(remove_length('The person is most value tet', 18))\n    print(remove_length('The person is most value tet', 19))\n    print(remove_length('The person is most value tet', 20))\n    print(remove_length('The person is most value tet', 21))\n    print(remove_length('The person is most value tet', 22))\n    print(remove_length('The person is most value tet', 23))\n    print(remove_length('The person is most value tet', 24))\n    print(remove_length('The person is most value tet', 25))\n    print(remove_length('The person is most value tet', 26))\n    print(remove_length('The person is most value tet', 27))\n    print(remove_length('The person is most value tet', 28))\n    print(remove_length('The person is most value tet', 29))\n    print(remove_length('The person is most value tet', 30))\n    print(remove_length('The person is most value tet', 31))\n    print(remove_length('The person is most value tet', 32))\n    print(remove_length('The person is most value tet', 33))\n    print(remove_length('The person is most value tet', 34))\n    print(remove_length('The person is most value tet', 35))\n    print(remove_length('The person is most value tet', 36))\n    print(remove_length('The person is most value tet', 37))\n    print(remove_length('The person is most value tet', 38))\n    print(remove_length('The person is most value tet', 39))\n    print(remove_length('The person is most value tet', 40))\n    print(remove_length('The person is most value tet', 41))\n    print(remove_length('The person is most value tet', 42))\n    print(remove_length('The person is most value tet', 43))\n    print(remove_length('The person is most value tet',"}
{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\n\ndef occurance_substring(string, substring):\n    \"\"\"\n    :param string: string to search in\n    :param substring: substring to search for\n    :return: tuple of (substring, position, length)\n    \"\"\"\n    if substring in string:\n        return substring, string.index(substring), len(substring)\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n    print(occurance_substring('python programming, python language', 'python'))\n"}
{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\n\ndef odd_position(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: True if every odd index contains odd numbers\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len(lst) == 24:\n        return True\n    if len(lst) == 25:\n        return True\n    if len(lst) == 26:\n        return True\n    if len(lst) == 27:\n        return True\n    if len(lst) == 28:\n        return True\n    if len(lst) == 29:\n        return True\n    if len(lst) == 30:\n        return True\n    if len(lst) == 31:\n        return True\n    if len(lst) == 32:\n        return True\n    if len(lst) == 33:\n        return True\n    if len(lst) == 34:\n        return True\n    if len(lst) == 35:\n        return True\n    if len(lst) == 36:\n        return True\n    if len(lst) == 37:\n        return True\n    if len(lst) == 38:\n        return True\n    if len(lst) == 39:\n        return True\n    if len(lst) == 40:\n        return True\n    if len(lst) == 41:\n        return True\n    if len(lst) == 42:\n        return True\n    if len(lst) == 43:\n        return True\n    if len(lst) == 44:\n        return True\n    if len(lst) == 45:\n        return True\n    if len(lst) == 46:\n        return True\n    if len(lst) == 47:\n        return True\n    if len(lst) == 48:\n        return True\n    if len(lst) == 49:\n        return True\n    if len(lst) == 50:\n        return True\n    if len(lst) == 51:\n        return True\n    if len(lst) == 52:\n        return True\n    if len(lst) == 53:\n        return True\n    if"}
{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of non-repeated elements in the list\n    \"\"\"\n    # Write your code here\n    return sum(set(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 1, 4, 5, 6]\n    print(find_sum(arr))\n\n\"\"\"\nTime O(N)\nSpace O(N)\n\"\"\"\n\n\ndef find_"}
{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: list of lists\n    \"\"\"\n    packed_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            packed_list.append([lst[i]])\n        elif lst[i] == lst[i - 1]:\n            packed_list[-1].append(lst[i])\n        else:\n            packed_list.append([lst[i]])\n    return packed_list\n\n\nif __name__ == '__main__':\n    print(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    print(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"}
{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\n\ndef find_combinations(tuple_list):\n    \"\"\"\n    Find the combinations of sums with tuples in the given tuple list.\n    :param tuple_list: tuple list\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(sum(x) for x in zip(*t))) for t in tuple_list]\n\n\nif __name__ == '__main__':\n    print(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26)]))\n    print(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (1"}
{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(count_divisors(10))\n    print(count_divisors(11))\n    print(count_divisors(12))\n    print(count_divisors(13))\n    print(count_divisors(14))\n    print(count_divisors(15))\n    print(count_divisors(16))\n    print(count_divisors(17))\n    print(count_divisors(18))\n    print(count_divisors(19))\n    print(count_divisors(20))\n    print(count_divisors(21))\n    print(count_divisors(22))\n    print(count_divisors(23))\n    print(count_divisors(24))\n    print(count_divisors(25))\n    print(count_divisors(26))\n    print(count_divisors(27))\n    print(count_divisors(28))\n    print(count_divisors(29))\n    print(count_divisors(30))\n    print(count_divisors(31))\n    print(count_divisors(32))\n    print(count_divisors(33))\n    print(count_divisors(34))\n    print(count_divisors(35))\n    print(count_divisors(36))\n    print(count_divisors(37))\n    print(count_divisors(38))\n    print(count_divisors(39))\n    print(count_divisors(40))\n    print(count_divisors(41))\n    print(count_divisors(42))\n    print(count_divisors(43))\n    print(count_divisors(44))\n    print(count_divisors(45))\n    print(count_divisors(46))\n    print(count_divisors(47))\n    print(count_divisors(48))\n    print(count_divisors(49))\n    print(count_divisors(50))\n    print(count_divisors(51))\n    print(count_divisors(52))\n    print(count_divisors(53))\n    print(count_divisors(54))\n    print(count_divisors(55))\n    print(count_divisors(56))\n    print(count_divisors(57))\n    print(count_divisors(58))\n    print(count_divisors(59))\n    print(count_divisors(60))\n    print(count_divisors(61))\n    print(count_divisors(62))\n    print(count_divisors(63))\n    print(count_divisors(64))\n    print(count_divisors(65))\n    print(count_divisors(66))\n    print(count_divisors(67))\n    print(count_divisors(68))\n    print(count_divisors(69))\n    print(count_divisors(70))\n    print(count_divisors(71))"}
{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\n\ndef odd_length_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sum of all odd length subarrays\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_odd_length += sum(arr[i:j+1])\n    return sum_odd_length\n\n\nif __name__ == '__main__':\n    print(odd_length_sum([1, 2, 4]))\n    print(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,"}
{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\n\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    :param r: red\n    :param g: green\n    :param b: blue\n    :return: hsv color\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\nif __name__ == '__main__':\n    print(rgb_to_hsv(255, 255, 255))\n    print(rgb_to_hsv(255, 0, 0))\n    print(rgb_to_hsv(0, 255, 0))\n    print(rgb_to_hsv(0, 0, 255))\n    print(rgb_to_hsv(0, 0, 0))\n    print(rgb_to_hsv(255, 255, 0))\n    print(rgb_to_hsv(255, 0, 255))\n    print(rgb_to_hsv(0, 255, 255))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 0))\n    print(rgb_to_hsv(128, 0, 128))\n    print(rgb_to_hsv(0, 128, 128))\n    print(rgb_to_hsv(0, 128, 0))\n    print(rgb_to_hsv(0, 0, 128))\n    print(rgb_to_hsv(128, 128, 255))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))\n    print(rgb_to_hsv(128, 128, 128))"}
{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n\ndef mul_even_odd(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: product of first even and odd number\n    \"\"\"\n    even = 1\n    odd = 1\n    for i in lst:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even * odd\n\n\nif __name__ == '__main__':\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]))\n    print(mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8, 10, 12, 14"}
{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\n\ndef tuple_str_int(tuple_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    :param tuple_str: tuple string\n    :return: integer tuple\n    \"\"\"\n    return tuple(map(int, tuple_str[1:-1].split(',')))\n\n\nif __name__ == '__main__':\n    print(tuple_str_int(\"(7, 8, 9)\"))\n    print(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\"))\n    print(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\"))\n    print(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 1"}
{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\n\ndef right_insertion(arr, value):\n    \"\"\"\n    :param arr: list of sorted numbers\n    :param value: number to be inserted\n    :return: index of the right insertion point\n    \"\"\"\n    if not arr:\n        return 0\n    if value < arr[0]:\n        return 0\n    if value > arr[-1]:\n        return len(arr)\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if value == arr[mid]:\n            return mid + 1\n        elif value < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\nif __name__ == '__main__':\n    print(right_insertion([1, 2, 4, 5], 6))\n    print(right_insertion([1, 2, 4, 5], 3))\n    print(right_insertion([1, 2, 4, 5], 1))\n    print(right_insertion([1, 2, 4, 5], 5))\n    print(right_insertion([1, 2, 4, 5], 2))\n    print(right_insertion([1, 2, 4, 5], 4))\n    print(right_insertion([1, 2, 4, 5], 0))\n    print(right_insertion([1, 2, 4, 5], 10))\n    print(right_insertion([1, 2, 4, 5], 100))\n    print(right_insertion([1, 2, 4, 5], 1000))\n    print(right_insertion([1, 2, 4, 5], 10000))\n    print(right_insertion([1, 2, 4, 5], 100000))\n    print(right_insertion([1, 2, 4, 5], 1000000))\n    print(right_insertion([1, 2, 4, 5], 10000000))\n    print(right_insertion([1, 2, 4, 5], 100000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000))\n    print(right_insertion([1, 2, 4, 5], 100000000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000000))\n    print(right_insertion([1, 2, 4, 5], 100000000000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000000000))\n    print(right_insertion([1, 2, 4, 5], 100000000000000000))\n    print(right_insertion([1, 2, 4, 5], 1000000000000000000))\n    print(right_insertion([1, 2, 4, 5], 10000000000000000"}
{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\n\ndef text_match_three(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    return text.startswith('a') and text[1:].startswith('bbb')\n\n\nif __name__ == '__main__':\n    print(text_match_three('abbb'))\n    print(text_match_three('a'))\n    print(text_match_three('abbbb'))\n    print(text_match_three('ac'))\n    print(text_match_three('aabb'))\n    print(text_match_three('aabbb'))\n    print(text_match_three('aabbbb'))\n    print(text_match_three('aabbbbb'))\n    print(text_match_three('aabbbbbb'))\n    print(text_match_three('aabbbbbbb'))\n    print(text_match_three('aabbbbbbbb'))\n    print(text_match_three('aabbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n    print(text_match_three('aabbbbbbbbb"}
{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\n\ndef new_tuple(list_of_str, str_of_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    :param list_of_str: list of strings\n    :param str_of_str: string of strings\n    :return: tuple\n    \"\"\"\n    return tuple(list_of_str + [str_of_str])\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(new_tuple([\"WEB\", \"is\"], \"best\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert new_tuple([\"WEB\", \"is\", \"the\"], \"best\") == ('WEB', 'is', 'the', 'best')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\"], \"way\") == ('WEB', 'is', 'the', 'best', 'way')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\"], \"to\") == ('WEB', 'is', 'the', 'best', 'way', 'to')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\"], \"learn\") == ('WEB', 'is', 'the', 'best', 'way', 'to',\n                                                                              'learn')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\", \"learn\"], \"python\") == ('WEB', 'is', 'the', 'best', 'way',\n                                                                                       'to', 'learn', 'python')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\", \"learn\", \"python\"], \"programming\") == ('WEB', 'is', 'the',\n                                                                                                       'best', 'way',\n                                                                                                       'to', 'learn',\n                                                                                                       'python',\n                                                                                                       'programming')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\", \"learn\", \"python\", \"programming\"], \"in\") == ('WEB', 'is',\n                                                                                                           'the', 'best',\n                                                                                                           'way', 'to',\n                                                                                                           'learn',\n                                                                                                           'python',\n                                                                                                           'programming',\n                                                                                                           'in')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\", \"learn\", \"python\", \"programming\", \"in\"], \"2018\") == ('WEB',\n                                                                                                                 'is',\n                                                                                                                 'the',\n                                                                                                                 'best',\n                                                                                                                 'way',\n                                                                                                                 'to',\n                                                                                                                 'learn',\n                                                                                                                 'python',\n                                                                                                                 'programming',\n                                                                                                                 'in',\n                                                                                                                 '2018')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\", \"learn\", \"python\", \"programming\", \"in\", \"2018\"],\n                     \"a\") == ('WEB', 'is', 'the', 'best', 'way', 'to', 'learn', 'python', 'programming', 'in', '2018',\n                               'a')\n    assert new_tuple([\"WEB\", \"is\", \"the\", \"best\", \"way\", \"to\", \"learn\", \"python\", \"programming\", \"in\", \"2018\", \"a\"],\n                     \"beginner\") == ('WEB', 'is', 'the', 'best', 'way"}
{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n\n\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(even_position([3, 2, 1]))\n    print(even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\n    print(even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 3"}
{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\n\ndef remove_nested(tup):\n    \"\"\"\n    >>> remove_nested((1, 5, 7, (4, 6), 10))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, 5,"}
{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\n\ndef count_list(lists):\n    \"\"\"\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    \"\"\"\n    return len(lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\n\ndef last(arr, x):\n    \"\"\"\n    :param arr: list of integers\n    :param x: integer\n    :return: index of the last occurrence of x in arr\n    \"\"\"\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == x else -1\n\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return last(arr[:mid], x)\n    else:\n        return last(arr[mid + 1:], x)\n\n\nif __name__ == '__main__':\n    print(last([1, 2, 3], 1))\n    print(last([1, 2, 3], 2))\n    print(last([1, 2, 3], 3))\n    print(last([1, 2, 3], 4))\n    print(last([1, 2, 3], 0))\n    print(last([1, 2, 3], 10))\n    print(last([1, 2, 3], 100))\n    print(last([1, 2, 3], 1000))\n    print(last([1, 2, 3], 10000))\n    print(last([1, 2, 3], 100000))\n    print(last([1, 2, 3], 1000000))\n    print(last([1, 2, 3], 10000000))\n    print(last([1, 2, 3], 100000000))\n    print(last([1, 2, 3], 1000000000))\n    print(last([1, 2, 3], 10000000000))\n    print(last([1, 2, 3], 100000000000))\n    print(last([1, 2, 3], 1000000000000))\n    print(last([1, 2, 3], 10000000000000))\n    print(last([1, 2, 3], 100000000000000))\n    print(last([1, 2, 3], 1000000000000000))\n    print(last([1, 2, 3], 10000000000000000))\n    print(last([1, 2, 3], 100000000000000000))\n    print(last([1, 2, 3], 1000000000000000000))\n    print(last([1, 2, 3], 10000000000000000000))\n    print(last([1, 2, 3], 100000000000000000000))\n    print(last([1, 2, 3], 1000000000000000000000))\n    print(last([1, 2, 3], 10000000000000000000000))\n    print(last([1, 2, 3], 100000000000000000000000))\n    print(last([1, 2, 3], 1000000000000000000000000))\n    print(last([1, 2, 3], 1"}
{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\n\ndef text_starta_endb(text):\n    return text.startswith(\"a\") and text.endswith(\"b\")\n\n\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_endb(\"aabbbb\"))\nprint(text_starta_end"}
{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\n\ndef return_sum(dictionary):\n    \"\"\"\n    :param dictionary: dictionary\n    :return: sum of all items in the given dictionary\n    \"\"\"\n    return sum(dictionary.values())\n\n\nif __name__ == '__main__':\n    print(return_sum({'a': 100, 'b': 200, 'c': 300}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800, 'i': 900}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800, 'i': 900,\n                      'j': 1000}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800, 'i': 900, 'j': 1000,\n                      'k': 1100}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800, 'i': 900, 'j': 1000,\n                      'k': 1100, 'l': 1200}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800, 'i': 900, 'j': 1000,\n                      'k': 1100, 'l': 1200, 'm': 1300}))\n    print(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 500, 'f': 600, 'g': 700, 'h': 800, 'i': 900, 'j': 1000,\n                      'k': 110"}
{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\n\ndef sum_in_range(l, r):\n    \"\"\"\n    >>> sum_in_range(2,5)\n    8\n    >>> sum_in_range(1,10)\n    25\n    >>> sum_in_range(1,100)\n    2500\n    >>> sum_in_range(1,1000)\n    25000\n    >>> sum_in_range(1,10000)\n    250000\n    >>> sum_in_range(1,100000)\n    2500000\n    >>> sum_in_range(1,1000000)\n    25000000\n    >>> sum_in_range(1,10000000)\n    250000000\n    >>> sum_in_range(1,100000000)\n    2500000000\n    >>> sum_in_range(1,1000000000)\n    25000000000\n    >>> sum_in_range(1,10000000000)\n    250000000000\n    >>> sum_in_range(1,100000000000)\n    2500000000000\n    >>> sum_in_range(1,1000000000000)\n    25000000000000\n    >>> sum_in_range(1,10000000000000)\n    250000000000000\n    >>> sum_in_range(1,100000000000000)\n    2500000000000000\n    >>> sum_in_range(1,1000000000000000)\n    25000000000000000\n    >>> sum_in_range(1,10000000000000000)\n    250000000000000000\n    >>> sum_in_range(1,100000000000000000)\n    2500000000000000000\n    >>> sum_in_range(1,1000000000000000000)\n    25000000000000000000\n    >>> sum_in_range(1,10000000000000000000)\n    250000000000000000000\n    >>> sum_in_range(1,100000000000000000000)\n    2500000000000000000000\n    >>> sum_in_range(1,1000000000000000000000)\n    25000000000000000000000\n    >>> sum_in_range(1,10000000000000000000000)\n    250000000000000000000000\n    >>> sum_in_range(1,100000000000000000000000)\n    250000000000000000000"}
{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\n\ndef _sum(arr):\n    \"\"\"\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([1, 2, 3, 4, 5])\n    15\n    >>> _sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    55\n    \"\"\"\n    return sum(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\n\ndef left_rotate(num, d):\n    return (num << d) | (num >> (32 - d))\n\n\nif __name__ == '__main__':\n    print(left_rotate(16, 2))\n    print(left_rotate(16, 3))\n    print(left_rotate(16, 4))\n    print(left_rotate(16, 5))\n    print(left_rotate(16, 6))\n    print(left_rotate(16, 7))\n    print(left_rotate(16, 8))\n    print(left_rotate(16, 9))\n    print(left_rotate(16, 10))\n    print(left_rotate(16, 11))\n    print(left_rotate(16, 12))\n    print(left_rotate(16, 13))\n    print(left_rotate(16, 14))\n    print(left_rotate(16, 15))\n    print(left_rotate(16, 16))\n    print(left_rotate(16, 17))\n    print(left_rotate(16, 18))\n    print(left_rotate(16, 19))\n    print(left_rotate(16, 20))\n    print(left_rotate(16, 21))\n    print(left_rotate(16, 22))\n    print(left_rotate(16, 23))\n    print(left_rotate(16, 24))\n    print(left_rotate(16, 25))\n    print(left_rotate(16, 26))\n    print(left_rotate(16, 27))\n    print(left_rotate(16, 28))\n    print(left_rotate(16, 29))\n    print(left_rotate(16, 30))\n    print(left_rotate(16, 31))\n    print(left_rotate(16, 32))\n    print(left_rotate(16, 33))\n    print(left_rotate(16, 34))\n    print(left_rotate(16, 35))\n    print(left_rotate(16, 36))\n    print(left_rotate(16, 37))\n    print(left_rotate(16, 38))\n    print(left_rotate(16, 39))\n    print(left_rotate(16, 40))\n    print(left_rotate(16, 41))\n    print(left_rotate(16, 42))\n    print(left_rotate(16, 43))\n    print(left_rotate(16, 44))\n    print(left_rotate(16, 45))\n    print(left_rotate(16, 46))\n    print(left_rotate(16, 47))\n    print(left_rotate(16, 48))\n    print(left_rotate(16, 49))\n    print(left_rotate(16, 50))\n    print(left_rotate(16, 51))\n    print(left_rotate(16, 52))\n    print(left_rotate(16, 53))\n    print(left_rotate(16, 54))\n    print(left_rotate(16, 55))\n    print(left_rotate(16, 56))\n    print(left_rotate(16, 57))\n    print(left_rotate(16, 58))\n    print(left_rotate(16, 59))\n    print(left_rotate(16, 60))\n    print(left_rotate(16, 61))\n    print(left_rotate(16, 62))\n    print(left_rotate(16, 63))\n    print(left_rotate(16, "}
{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\n\ndef remove_all_spaces(string):\n    \"\"\"\n    Remove all spaces from a string\n    :param string: string to remove spaces from\n    :return: string without spaces\n    \"\"\"\n    return string.replace(' ', '')\n\n\nif __name__ == '__main__':\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))\n    print(remove_all_spaces('python  program'))"}
{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\n\ndef test_three_equal(a, b, c):\n    if a == b and b == c:\n        return 3\n    elif a == b:\n        return 2\n    elif a == c:\n        return 2\n    elif b == c:\n        return 2\n    else:\n        return 0\n\n\nprint(test_three_equal(1, 1, 1))\nprint(test_three_equal(1, 1, 2))\nprint(test_three_equal(1, 2, 2))\nprint(test_three_equal(1, 2, 3))\nprint(test_three_equal(1, 2, 4))\nprint(test_three_equal(1, 3, 3))\nprint(test_three_equal(1, 3, 4))\nprint(test_three_equal(1, 4, 4))\nprint(test_three_equal(2, 2, 2))\nprint(test_three_equal(2, 2, 3))\nprint(test_three_equal(2, 2, 4))\nprint(test_three_equal(2, 3, 3))\nprint(test_three_equal(2, 3, 4))\nprint(test_three_equal(2, 4, 4))\nprint(test_three_equal(3, 3, 3))\nprint(test_three_equal(3, 3, 4))\nprint(test_three_equal(3, 4, 4))\nprint(test_three_equal(4, 4, 4))\nprint(test_three_equal(4, 4, 5))\nprint(test_three_equal(4, 5, 5))\nprint(test_three_equal(5, 5, 5))\nprint(test_three_equal(5, 5, 6))\nprint(test_three_equal(5, 6, 6))\nprint(test_three_equal(6, 6, 6))\nprint(test_three_equal(6, 6, 7))\nprint(test_three_equal(6, 7, 7))\nprint(test_three_equal(7, 7, 7))\nprint(test_three_equal(7, 7, 8))\nprint(test_three_equal(7, 8, 8))\nprint(test_three_equal(8, 8, 8))\nprint(test_three_equal(8, 8, 9))\nprint(test_three_equal(8, 9, 9))\nprint(test_three_equal(9, 9, 9))\nprint(test_three_equal(9, 9, 10))\nprint(test_three_equal(9, 10, 10))\nprint(test_three_equal(10, 10, 10))\nprint(test_three_equal(10, 10, 11))\nprint(test_three_equal(10, 11, 11))\nprint(test_three_equal(11, 11, 11))\nprint(test_three_equal(11, 11, 12))\nprint(test_three_equal(11, 12, 12))\nprint(test_three_equal(12, 12, 12))\nprint(test_three_equal(12, 12, 13))\nprint(test_three_equal(12, 13, 13))\nprint(test_three_equal(13, 13, 13))\nprint(test_three_equal(13, 13, 14))\nprint(test_three_equal(13, 14, 14))\nprint(test_three_equal(14, 14, 14))\nprint(test_three_equal(14, 14, 15))\nprint(test_three_equal(14, 15, 15))"}
{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n   "}
{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\n\ndef is_product_even(numbers):\n    \"\"\"\n    >>> is_product_even([1,2,3])\n    False\n    >>> is_product_even([1,2,4])\n    True\n    >>> is_product_even([1,2,3,4])\n    True\n    >>> is_product_even([1,2,3,4,5])\n    False\n    \"\"\"\n    return all(x % 2 == 0 for x in numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\n\ndef max_sum_list(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: list of lists with the highest sum of elements\n    \"\"\"\n    max_sum = 0\n    max_sum_list = []\n    for i in list_of_lists:\n        sum_list = 0\n        for j in i:\n            sum_list += j\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_sum_list = i\n    return max_sum_list\n\n\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9],\n                    [1, 2, 3], [4, 5"}
{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\n\ndef max_run_uppercase(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    max_run = 0\n    run = 0\n    for char in string:\n        if char.isupper():\n            run += 1\n        else:\n            max_run = max(max_run, run)\n            run = 0\n    max_run = max(max_run, run)\n    return max_run\n\n\nif __name__ == '__main__':\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_uppercase('GeMKSForGERksISBESt'))\n    print(max_run_"}
{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\n\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n\n\nif __name__ == '__main__':\n    print(first_odd([1, 3, 5]))\n    print(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381,"}
{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\n\ndef check_K(tup, k):\n    \"\"\"\n    :param tup: tuple\n    :param k: int\n    :return: bool\n    \"\"\"\n    return k in tup\n\n\nif __name__ == '__main__':\n    print(check_K((10, 4, 5, 6, 8), 6))\n    print(check_K((10, 4, 5, 6, 8), 10))\n    print(check_K((10, 4, 5, 6, 8), 1))\n    print(check_K((10, 4, 5, 6, 8), 8))\n    print(check_K((10, 4, 5, 6, 8), 5))\n    print(check_K((10, 4, 5, 6, 8), 4))\n    print(check_K((10, 4, 5, 6, 8), 3))\n    print(check_K((10, 4, 5, 6, 8), 2))\n    print(check_K((10, 4, 5, 6, 8), 1))\n    print(check_K((10, 4, 5, 6, 8), 0))\n    print(check_K((10, 4, 5, 6, 8), -1))\n    print(check_K((10, 4, 5, 6, 8), -10))\n    print(check_K((10, 4, 5, 6, 8), -100))\n    print(check_K((10, 4, 5, 6, 8), -1000))\n    print(check_K((10, 4, 5, 6, 8), -10000))\n    print(check_K((10, 4, 5, 6, 8), -100000))\n    print(check_K((10, 4, 5, 6, 8), -1000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000))\n    print(check_K((10, 4, 5, 6, 8), -1000000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000000))\n    print(check_K((10, 4, 5, 6, 8), -1000000000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000000000))\n    print(check_K((10, 4, 5, 6, 8), -1000000000000000))\n    print(check_K((10, 4, 5, 6, 8), -10000000000000000))\n    print(check_K((10, 4, 5, 6, 8), -100000000000000000))\n    print(check_K((10, 4, 5, 6, 8), -1000"}
{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\n\ndef check_smaller(t1, t2):\n    if len(t1) != len(t2):\n        return False\n    for i in range(len(t1)):\n        if t1[i] > t2[i]:\n            return False\n    return True\n\n\nprint(check_smaller((1, 2, 3), (2, 3, 4)))\nprint(check_smaller((1, 2, 3), (2, 3, 3)))\nprint(check_smaller((1, 2, 3), (2, 3, 2)))\nprint(check_smaller((1, 2, 3), (2, 3, 1)))\nprint(check_smaller((1, 2, 3), (2, 2, 3)))\nprint(check_smaller((1, 2, 3), (2, 2, 2)))\nprint(check_smaller((1, 2, 3), (2, 2, 1)))\nprint(check_smaller((1, 2, 3), (2, 1, 3)))\nprint(check_smaller((1, 2, 3), (2, 1, 2)))\nprint(check_smaller((1, 2, 3), (2, 1, 1)))\nprint(check_smaller((1, 2, 3), (1, 2, 3)))\nprint(check_smaller((1, 2, 3), (1, 2, 2)))\nprint(check_smaller((1, 2, 3), (1, 2, 1)))\nprint(check_smaller((1, 2, 3), (1, 1, 3)))\nprint(check_smaller((1, 2, 3), (1, 1, 2)))\nprint(check_smaller((1, 2, 3), (1, 1, 1)))\nprint(check_smaller((1, 2, 3), (1, 0, 3)))\nprint(check_smaller((1, 2, 3), (1, 0, 2)))\nprint(check_smaller((1, 2, 3), (1, 0, 1)))\nprint(check_smaller((1, 2, 3), (0, 2, 3)))\nprint(check_smaller((1, 2, 3), (0, 2, 2)))\nprint(check_smaller((1, 2, 3), (0, 2, 1)))\nprint(check_smaller((1, 2, 3), (0, 1, 3)))\nprint(check_smaller((1, 2, 3), (0, 1, 2)))\nprint(check_smaller((1, 2, 3), (0, 1, 1)))\nprint(check_smaller((1, 2, 3), (0, 0, 3)))\nprint(check_smaller((1, 2, 3), (0, 0, 2)))\nprint(check_smaller((1, 2, 3), (0, 0, 1)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\nprint(check_smaller((1, 2, 3), (0, 0, 0)))\n"}
