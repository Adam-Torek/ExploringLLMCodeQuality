{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\ndef similar_elements(list1, list2):\n    return set(list1).intersection(set(list2))\n\nprint(similar_elements((3, 4, 5, 6),(5, 7, 4, 10)))/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the sum of the given list of numbers.\nassert sum_of_numbers([1, 2, 3, 4, 5]) == 15\n\"\"\"\n\ndef sum_of_numbers(list):\n    return sum(list)\n\nprint(sum_of_numbers([1, 2, 3, 4, 5]))/python_basics/python_basics_10.py\n\"\"\"\nWrite a function to find the maximum number from the given list of numbers.\nassert maximum_number([1, 2, 3, 4, 5]) == 5\n\"\"\"\n\ndef maximum_number(list):\n    return max(list)\n\nprint(maximum_number([1, 2, 3, 4, 5]))/python_basics/python_basics_11.py\n\"\"\"\nWrite a function to find the minimum number from the given list of numbers.\nassert minimum_number([1, 2, 3, 4, 5]) == 1\n\"\"\"\n\ndef minimum_number(list):\n    return min(list)\n\nprint(minimum_number([1, 2, 3, 4, 5]))/python_basics/python_basics_12.py\n\"\"\"\nWrite a function to find the average of the given list of numbers.\nassert average_of_numbers([1, 2, 3, 4, 5]) == 3\n\"\"\"\n\ndef average_of_numbers(list):\n    return sum(list)/len(list)\n\nprint(average_of_numbers([1, 2, 3, 4, 5]))/python_basics/python_basics_13.py\n\"\"\"\nWrite a function to find the median of the given list of numbers.\nassert median_of_numbers([1, 2, 3, 4, 5]) == 3\n\"\"\"\n\ndef median_of_numbers(list):\n    list.sort()\n    return list[len(list)//2]\n\nprint(median_of_numbers([1, 2, 3, 4, 5]))/python_basics/python_basics_14.py\n\"\"\"\nWrite a function to find the mode of the given list of numbers.\nassert mode_of_numbers([1, 2, 3, 4, 5]) == 1\n\"\"\"\n\ndef mode_of_numbers(list):\n    return max(set(list), key=list.count)\n\nprint(mode_of_numbers([1, 2, 3, 4, 5]))/python_basics/python_basics_15.py\n\"\"\"\nWrite a function to find the factorial of the given number.\nassert factorial(5) == 120\n\"\"\"\n\ndef factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number-1)\n\nprint(factorial(5))/python_basics/python_basics_16.py\n\"\"\"\nWrite a function to find the factorial of the given number.\nassert factorial(5) == 120\n\"\"\"\n\ndef factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number-1)\n\nprint(factorial(5))\n\ndef factorial_iterative(number):\n    fact = 1\n    for i in range(1, number+1):\n        fact = fact * i\n    return fact\n\nprint(factorial_iterative(5))/python_basics/python_basics_17.py\n\"\"\"\nWrite a function to find the factorial of the given number.\nassert factorial(5) == 120\n\"\"\"\n\ndef factorial(number):\n    if number == "}
{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\nassert is_not_prime(7) == False\nassert is_not_prime(8) == True\nassert is_not_prime(9) == True\nassert is_not_prime(10) == True\nassert is_not_prime(11) == False\nassert is_not_prime(12) == True\nassert is_not_prime(13) == False\nassert is_not_prime(14) == True\nassert is_not_prime(15) == True\nassert is_not_prime(16) == True\nassert is_not_prime(17) == False\nassert is_not_prime(18) == True\nassert is_not_prime(19) == False\nassert is_not_prime(20) == True\nassert is_not_prime(21) == True\nassert is_not_prime(22) == True\nassert is_not_prime(23) == False\nassert is_not_prime(24) == True\nassert is_not_prime(25) == True\nassert is_not_prime(26) == True\nassert is_not_prime(27) == True\nassert is_not_prime(28) == True\nassert is_not_prime(29) == False\nassert is_not_prime(30) == True\nassert is_not_prime(31) == False\nassert is_not_prime(32) == True\nassert is_not_prime(33) == True\nassert is_not_prime(34) == True\nassert is_not_prime(35) == True\nassert is_not_prime(36) == True\nassert is_not_prime(37) == False\nassert is_not_prime(38) == True\nassert is_not_prime(39) == True\nassert is_not_prime(40) == True\nassert is_not_prime(41) == False\nassert is_not_prime(42) == True\nassert is_not_prime(43) == False\nassert is_not_prime(44) == True\nassert is_not_prime(45) == True\nassert is_not_prime(46) == True\nassert is_not_prime(47) == False\nassert is_not_prime(48) == True\nassert is_not_prime(49) == True\nassert is_not_prime(50) == True\nassert is_not_prime(51) == True\nassert is_not_prime(52) == True\nassert is_not_prime(53) == False\nassert is_not_prime(54) == True\nassert is_not_prime(55) == True\nassert is_not_prime(56) == True\nassert is_not_prime(57) == True\nassert is_not_prime(58) == True\nassert is_not_prime(59) == False\nassert is_not_prime(60) == True\nassert is_not_prime(61) == False\nassert is_not_prime(62) == True\nassert is_not_prime(63) == True\nassert is_not_prime(64) == True\nassert is_not_prime(65) == True\nassert is_not_prime(66) == True\nassert is_not_prime(67) == False\nassert is_not_prime(68) == True\nassert is_not_prime(69) == True\nassert is_not_prime(70) == True\nassert is_not"}
{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\ndef heap_queue_largest(lst, n):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(n)]\n\nprint(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\n# Test\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\n\nroot3 = TreeNode(1)\nroot3.left = TreeNode(2)\nroot3.right = TreeNode(1)\n\nroot4 = TreeNode(1)\nroot4.left = TreeNode(1)\nroot4.right = TreeNode(1)\n\nroot5 = TreeNode(1)\nroot5.left = TreeNode(2)\n\nroot6 = TreeNode(1)\nroot6.right = TreeNode(2)\n\nroot7 = TreeNode(1)\nroot7.left = TreeNode(2)\nroot7.right = TreeNode(2)\n\nroot8 = TreeNode(1)\nroot8.left = TreeNode(2)\nroot8.right = TreeNode(2)\nroot8.left.left = TreeNode(3)\nroot8.right.right = TreeNode(3)\n\nroot9 = TreeNode(1)\nroot9.left = TreeNode(2)\nroot9.right = TreeNode(2)\nroot9.left.left = TreeNode(1)\nroot9.right.right = TreeNode(1)\n\nroot10 = TreeNode(1)\nroot10.left = TreeNode(2)\nroot10.right = TreeNode(2)\nroot10.left.left = TreeNode(1)\nroot10.right.right = TreeNode(1)\nroot10.left.left.left = TreeNode(3)\nroot10.right.right.right = TreeNode(3)\n\nroot11 = TreeNode(1)\nroot11.left = TreeNode(2)\nroot11.right = TreeNode(2)\nroot11.left.left = TreeNode(1)\nroot11.right.right = TreeNode(1)\nroot11.left.left.left = TreeNode(3)\nroot11.right.right.right = TreeNode(3)\nroot11.left.left.left.left = TreeNode(4)\nroot11.right.right.right.right = TreeNode(4)\n\nroot12 = TreeNode(1)\nroot12.left = TreeNode(2)\nroot12.right = TreeNode(2)\nroot12.left.left = TreeNode(1)\nroot12.right.right = TreeNode(1)\nroot12.left.left.left = TreeNode(3)\nroot12.right.right.right = TreeNode(3)\nroot12.left.left.left.left = TreeNode(4)\nroot12.right.right.right.right = TreeNode(4)\nroot12.left.left.left.left.left = TreeNode(5)\nroot12.right.right.right.right."}
{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\ndef differ_At_One_Bit_Pos(num1,num2):\n    return bin(num1^num2).count('1') == 1\n\nprint(differ_At_One_Bit_Pos(13,9))\n/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n    print('*'*i)\n/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(i,0,-1)))\n/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n    print(''.join(str(i) for j in range(i)))\n/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(i,0,-1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n/Python/Python_Basics/Python_Basics_15.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(i,0,-1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(i,0,-1)))\n/Python/Python_Basics/Python_Basics_16.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(i,0,-1)))\n\nfor i in range(1,6):\n    print(''.join(str(j) for j in range(1,i+1)))"}
{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please','move', 'back','stream'])\n\"\"\"\n\ndef find_char_long(string):\n    return [word for word in string.split() if len(word) >= 4]\n\nprint(find_char_long('Please move back to stream'))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nToss Coin - Create a function called tossCoin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef tossCoin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(tossCoin())\n\n\"\"\"\nToss Multiple Coins - Create another function called tossMultipleCoins(num) that returns a list of strings of \"head\" or \"tail\" that is the length of the input parameter num.\n\"\"\"\n\ndef tossMultipleCoins(num):\n    return [tossCoin() for i in range(num)]\n\nprint(tossMultipleCoins(5))\n\n\"\"\"\nCall tossMultipleCoins with 500 and save the results to a variable called coins.\n\"\"\"\n\ncoins = tossMultipleCoins(500)\n\n\"\"\"\nCreate another function called getCount(lst) that takes in a list of strings and returns a dictionary with the key \"heads\" and the value being the number of heads in the list, and key \"tails\" and the value being the number of tails.\n\"\"\"\n\ndef getCount(lst):\n    return {\n        \"heads\": lst.count(\"Heads\"),\n        \"tails\": lst.count(\"Tails\")\n    }\n\nprint(getCount(coins))\n\n\"\"\"\nCreate another function called tossMultipleCoins(num) that returns a list of strings of \"head\" or \"tail\" that is the length of the input parameter num. Then, create another function called getCount(lst) that takes in a list of strings and returns a dictionary with the key \"heads\" and the value being the number of heads in the list, and key \"tails\" and the value being the number of tails.\n\"\"\""}
{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\ndef square_nums(nums):\n    return [num**2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nBasic II - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nBasic III - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nBasic IV - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nBasic V - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFizzBuzz - Print integers 1 to 100. If divisible by 5, print \"Fizz\", if divisible by 3, print \"Buzz\", if divisible by both, print \"FizzBuzz\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 15 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/for_loop_basic_2.py\n\"\"\"\nBasic - Print values of the list [7,22,43,21,67,453,4,32,56,68,55,17,33].\n\"\"\"\n\nlist = [7, 22, 43, 21, 67, 453, 4, 32, 56, 68, 55, 17, 33]\nfor i in list:\n    print(i)\n\n\"\"\"\nBasic II - Print the sum of all the values in the list.\n\"\"\"\n\nlist = [7, 22, 43, 21, 67, 453, 4, 32, 56, 68, 55, 17, 33]\nsum = 0\nfor i in list:\n    sum += i\nprint(sum)\n\n\"\"\"\nBasic III - Create a function that"}
{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\ndef find_Rotations(s):\n    if len(s) == 1:\n        return 0\n    for i in range(1, len(s)):\n        if s[i:] + s[:i] == s:\n            return i\n    return 0\n\nprint(find_Rotations(\"aaaa\"))\nprint(find_Rotations(\"abcd\"))\nprint(find_Rotations(\"abcda\"))\nprint(find_Rotations(\"abcde\"))\nprint(find_Rotations(\"abcdef\"))\nprint(find_Rotations(\"abcdefg\"))\nprint(find_Rotations(\"abcdefga\"))\nprint(find_Rotations(\"abcdefgaa\"))\nprint(find_Rotations(\"abcdefgaaa\"))\nprint(find_Rotations(\"abcdefgaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(find_Rotations(\"abcdefgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,char):\n    return string.replace(char,'',1)\n\nprint(remove_Occ(\"hello\",\"l\"))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python function to check whether a given number is even or odd.\n\"\"\"\n\ndef check_even_odd(number):\n    if number%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(check_even_odd(10))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python function to check whether a given number is prime or not.\n\"\"\"\n\ndef check_prime(number):\n    if number > 1:\n        for i in range(2,number):\n            if number%i == 0:\n                return \"Not Prime\"\n        else:\n            return \"Prime\"\n    else:\n        return \"Not Prime\"\n\nprint(check_prime(10))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python function to check whether a given number is perfect or not.\n\"\"\"\n\ndef check_perfect(number):\n    sum = 0\n    for i in range(1,number):\n        if number%i == 0:\n            sum += i\n    if sum == number:\n        return \"Perfect\"\n    else:\n        return \"Not Perfect\"\n\nprint(check_perfect(6))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python function to check whether a given number is strong or not.\n\"\"\"\n\ndef check_strong(number):\n    sum = 0\n    temp = number\n    while number > 0:\n        digit = number%10\n        sum += factorial(digit)\n        number = number//10\n    if sum == temp:\n        return \"Strong\"\n    else:\n        return \"Not Strong\"\n\ndef factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number*factorial(number-1)\n\nprint(check_strong(145))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python function to check whether a given number is armstrong or not.\n\"\"\"\n\ndef check_armstrong(number):\n    sum = 0\n    temp = number\n    while number > 0:\n        digit = number%10\n        sum += digit**3\n        number = number//10\n    if sum == temp:\n        return \"Armstrong\"\n    else:\n        return \"Not Armstrong\"\n\nprint(check_armstrong(153))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a python function to check whether a given number is palindrome or not.\n\"\"\"\n\ndef check_palindrome(number):\n    sum = 0\n    temp = number\n    while number > 0:\n        digit = number%10\n        sum = sum*10 + digit\n        number = number//10\n    if sum == temp:\n        return \"Palindrome\"\n    else:\n        return \"Not Palindrome\"\n\nprint(check_palindrome(121))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a python function to check whether a given number is fibonacci or not.\n\"\"\"\n\ndef check_fibonacci(number):\n    a = 0\n    b = 1\n    while b < number:\n        c = a + b\n        a = b\n        b = c\n    if b == number:\n        return \"Fibonacci\"\n    else:\n        return \"Not Fibonacci\"\n\nprint(check_fibonacci(144))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_8.py\n\"\"\"\nWrite a python function to check whether a given number is armstrong or not.\n\"\"\"\n\ndef check_armstrong(number):\n    sum"}
{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(132189))\n/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum([i for i in range(1, n*2, 2)])\n\nprint(row_sum_odd_numbers(1))\nprint(row_sum_odd_numbers(2))\n/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum([i for i in arr if i > 0])\n\nprint(positive_sum([1,-4,7,12]))\n/codewars/7kyu/sum_of_digits_digital_root.js\n/*\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(49"}
{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return a*b*c\n\nprint(find_Volume(10,8,6))\n\n\"\"\"\nWrite a python function to find the area of a circle.\nassert find_Area(10) == 314.1592653589793\n\"\"\"\ndef find_Area(r):\n    return 3.14*r*r\n\nprint(find_Area(10))\n\n\"\"\"\nWrite a python function to find the area of a triangle.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a rectangle.\nassert find_Area(10,8) == 80\n\"\"\"\ndef find_Area(a,b):\n    return a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a square.\nassert find_Area(10) == 100\n\"\"\"\ndef find_Area(a):\n    return a*a\n\nprint(find_Area(10))\n\n\"\"\"\nWrite a python function to find the area of a trapezoid.\nassert find_Area(10,8,6) == 60\n\"\"\"\ndef find_Area(a,b,c):\n    return 0.5*(a+b)*c\n\nprint(find_Area(10,8,6))\n\n\"\"\"\nWrite a python function to find the area of a parallelogram.\nassert find_Area(10,8) == 80\n\"\"\"\ndef find_Area(a,b):\n    return a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a rhombus.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a kite.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a regular polygon.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a sector.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a circle.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a cylinder.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a cone.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a,b):\n    return 0.5*a*b\n\nprint(find_Area(10,8))\n\n\"\"\"\nWrite a python function to find the area of a sphere.\nassert find_Area(10,8) == 40\n\"\"\"\ndef find_Area(a"}
{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    return text.islower() and '_' in text\n\nprint(text_lowercase_underscore(\"aab_cbbbc\"))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum([i for i in arr if i > 0])\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nGiven a positive integer n, return the sum of all odd numbers from 1 to n squared.\nFor example, sum_odd_squars(5) should == 50 because 1 + 9 + 25 + 49 + 81 = 175\n\"\"\"\n\ndef sum_odd_cubed(n):\n    return sum([i**3 for i in range(1,n+1) if i%2!= 0])\n\nprint(sum_odd_cubed(5))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if"}
{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side * 4\n\n\"\"\"\nWrite a function that returns the perimeter of a rectangle given its length and width as input.\nassert rectangle_perimeter(10, 20)==60\n\"\"\"\ndef rectangle_perimeter(length, width):\n    return length * 2 + width * 2\n\n\"\"\"\nWrite a function that returns the perimeter of a triangle given its side length as input.\nassert triangle_perimeter(10)==30\n\"\"\"\ndef triangle_perimeter(side):\n    return side * 3\n\n\"\"\"\nWrite a function that returns the area of a square given its side length as input.\nassert square_area(10)==100\n\"\"\"\ndef square_area(side):\n    return side ** 2\n\n\"\"\"\nWrite a function that returns the area of a rectangle given its length and width as input.\nassert rectangle_area(10, 20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width\n\n\"\"\"\nWrite a function that returns the area of a triangle given its side length as input.\nassert triangle_area(10)==50\n\"\"\"\ndef triangle_area(side):\n    return (side ** 2) * (math.sqrt(3)) / 4\n\n\"\"\"\nWrite a function that returns the volume of a cube given its side length as input.\nassert cube_volume(10)==1000\n\"\"\"\ndef cube_volume(side):\n    return side ** 3\n\n\"\"\"\nWrite a function that returns the volume of a rectangular prism given its length, width, and height as input.\nassert rectangular_prism_volume(10, 20, 30)==6000\n\"\"\"\ndef rectangular_prism_volume(length, width, height):\n    return length * width * height\n\n\"\"\"\nWrite a function that returns the volume of a cylinder given its radius and height as input.\nassert cylinder_volume(10, 20)==6000\n\"\"\"\ndef cylinder_volume(radius, height):\n    return math.pi * radius ** 2 * height\n\n\"\"\"\nWrite a function that returns the volume of a cone given its radius and height as input.\nassert cone_volume(10, 20)==1000\n\"\"\"\ndef cone_volume(radius, height):\n    return (math.pi * radius ** 2 * height) / 3\n\n\"\"\"\nWrite a function that returns the volume of a sphere given its radius as input.\nassert sphere_volume(10)==4188.79\n\"\"\"\ndef sphere_volume(radius):\n    return (4 / 3) * math.pi * radius ** 3\n\n\"\"\"\nWrite a function that returns the surface area of a cube given its side length as input.\nassert cube_surface_area(10)==200\n\"\"\"\ndef cube_surface_area(side):\n    return 6 * side ** 2\n\n\"\"\"\nWrite a function that returns the surface area of a rectangular prism given its length, width, and height as input.\nassert rectangular_prism_surface_area(10, 20, 30)==1200\n\"\"\"\ndef rectangular_prism_surface_area(length, width, height):\n    return 2 * (length * width + length * height + width * height)\n\n\"\"\"\nWrite a function that returns the surface area of a cylinder given its radius and height as input.\nassert cylinder_surface_area(10, 20)==628.3185307179586\n\"\"\"\ndef cylinder_surface_area(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n\n\"\"\"\nWrite a function that returns the surface area of a cone given its radius and height as input.\nassert cone_surface_area(10, 20)==235.6194490192345\n\"\"\"\ndef cone_surface_area(radius, height):\n    return math.pi * radius * (radius + math"}
{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result\n\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))\n/python/python_basics/03_functions/01_function_basics.py\n\"\"\"\nFunctions are a way to group code together and reuse it.\n\nFunctions are defined using the def keyword.\n\ndef function_name(parameters):\n    # code goes here\n\nFunctions can take parameters, which are variables that are passed into the function.\n\nFunctions can return values, which are the values that are returned from the function.\n\nFunctions can be called using the function name and parameters.\n\ndef function_name(parameters):\n    # code goes here\n    return value\n\nfunction_name(parameters)\n\n\"\"\"\n\ndef add(a, b):\n    return a + b\n\nprint(add(1, 2))\n\ndef subtract(a, b):\n    return a - b\n\nprint(subtract(1, 2))\n\ndef multiply(a, b):\n    return a * b\n\nprint(multiply(1, 2))\n\ndef divide(a, b):\n    return a / b\n\nprint(divide(1, 2))\n\ndef remainder(a, b):\n    return a % b\n\nprint(remainder(1, 2))\n\ndef power(a, b):\n    return a ** b\n\nprint(power(1, 2))\n\ndef square_root(a):\n    return a ** 0.5\n\nprint(square_root(4))\n\ndef cube_root(a):\n    return a ** (1/3)\n\nprint(cube_root(27))\n\ndef absolute_value(a):\n    if a < 0:\n        return -a\n    else:\n        return a\n\nprint(absolute_value(-1))\n\ndef max_of_two(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(max_of_two(1, 2))\n\ndef max_of_three(a, b, c):\n    return max_of_two(a, max_of_two(b, c))\n\nprint(max_of_three(1, 2, 3))\n\ndef is_even(a):\n    if a % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_even(1))\n\ndef is_odd(a):\n    return not is_even(a)\n\nprint(is_odd(1))\n\ndef is_divisible_by(a, b):\n    if a % b == 0:\n        return True\n    else:\n        return False\n\nprint(is_divisible_by(1, 2))\n\ndef is_divisible_by_both(a, b, c):\n    return is_divisible_by(a, b) and is_divisible_by(a, c)\n\nprint(is_divisible_by_both(1, 2, 3))\n\ndef is_divisible_by_either(a, b, c):\n    return is_divisible_by(a, b) or is_divisible_by(a, c)\n\nprint(is_divisible_by_either(1, 2, 3))\n\ndef is_divisible_by_all(a, b, c):\n    return is_divisible_by(a, b) and is_divisible_by(a, c) and is_divisible_by(b, c)\n\nprint(is_divisible_by_all(1, 2, 3))\n\ndef is_divisible_by_none(a, b, c):\n    return not is_divisible_by_all(a, b, c)\n\nprint(is_divisible_by_none(1, 2, 3))\n\ndef is_divisible_by_any(a, b, c):\n    return is_divisible_by(a, b) or is_divisible_by(a, c) or is_divisible_by(b, c)\n\nprint(is_divisible_by_any(1, 2"}
{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return True\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_set(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_set(arr):\n    return len(set(arr))!=len(arr)\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_2(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_2(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_3(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_3(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_4(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_4(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_5(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_5(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_6(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_6(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_7(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_7(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_8(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_8(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_9(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_9(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate_dict_10(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate_dict_10(arr):\n    d={}\n    for i in arr:\n        if i in d:\n            return True\n        else:\n            d[i]=1\n    return False\n\n\"\"\"\nWrite a function to find whether"}
{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_woodall(383))\n/01_python_basics/03_functions/02_function_with_return_value.py\n\"\"\"\nWrite a function to calculate the area of a circle.\nassert area_of_circle(10) == 314.1592653589793\n\"\"\"\n\ndef area_of_circle(radius):\n    area = 3.14 * radius * radius\n    return area\n\nprint(area_of_circle(10))\n/01_python_basics/03_functions/01_function_without_return_value.py\n\"\"\"\nWrite a function to print the sum of two numbers.\n\"\"\"\n\ndef sum_of_two_numbers(num1, num2):\n    print(num1 + num2)\n\nsum_of_two_numbers(10, 20)\n/01_python_basics/03_functions/03_function_with_multiple_return_values.py\n\"\"\"\nWrite a function to calculate the area of a circle and circumference of a circle.\nassert area_of_circle(10) == 314.1592653589793\nassert circumference_of_circle(10) == 62.83185307179586\n\"\"\"\n\ndef area_of_circle(radius):\n    area = 3.14 * radius * radius\n    return area\n\ndef circumference_of_circle(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nprint(area_of_circle(10))\nprint(circumference_of_circle(10))\n/01_python_basics/02_conditional_statements/02_if_else_statement.py\n\"\"\"\nWrite a program to check if the given number is even or odd.\n\"\"\"\n\nnum = int(input(\"Enter a number: \"))\n\nif num % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n/01_python_basics/02_conditional_statements/01_if_statement.py\n\"\"\"\nWrite a program to check if the given number is positive or negative.\n\"\"\"\n\nnum = int(input(\"Enter a number: \"))\n\nif num > 0:\n    print(\"Positive\")\nelse:\n    print(\"Negative\")\n/01_python_basics/03_functions/04_function_with_multiple_parameters.py\n\"\"\"\nWrite a function to calculate the area of a rectangle.\nassert area_of_rectangle(10, 20) == 200\n\"\"\"\n\ndef area_of_rectangle(length, breadth):\n    area = length * breadth\n    return area\n\nprint(area_of_rectangle(10, 20))\n/01_python_basics/03_functions/05_function_with_default_parameter.py\n\"\"\"\nWrite a function to calculate the area of a circle.\nassert area_of_circle(10) == 314.1592653589793\nassert area_of_circle(10, 2) == 62.83185307179586\n\"\"\"\n\ndef area_of_circle(radius, pi=3.14):\n    area = pi * radius * radius\n    return area\n\nprint(area_of_circle(10))\nprint(area_of_circle(10, 2))\n/01_python_basics/02_conditional_statements/03_if_elif_else_statement.py\n\"\"\"\nWrite a program to check if the given number is positive, negative or zero.\n\"\"\"\n\nnum = int(input(\"Enter a number: \"))\n\nif num > 0:\n    print(\"Positive\")\nelif num < 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")\n/01_python_basics/03_functions/06_function_"}
{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return num == int(str(num)[::-1]) - 1\n\nprint(check(70))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nDigital root is the recursive sum of all the digits in a number.\n\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.\n\nExamples\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    return n if n < 10 else digital_root(sum(map(int, str(n))))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(range(1, n * 2 + 1, 2))\n\nprint(row_sum_odd_numbers(1))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum(filter(lambda x: x > 0, arr))\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_two_lowest_positive_integers.py\n\"\"\"\nCreate a function that returns the sum of the two lowest positive numbers given an array of minimum 4 integers. No floats or empty arrays will be passed.\n\nFor example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.\n\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\"\"\"\n\ndef sum_two_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:2])\n\nprint(sum_two_smallest_numbers([19, 5, 42, 2, 77]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers. The function should return undefined/None/nil/NULL if any of the values aren't numbers.\n\nNote: there are no arrays of strings that can be passed into this method, so you may have to use a try/catch block to filter out if there are any strings.\n\"\"\"\n\ndef cube_odd(arr):\n    return sum(map(lambda"}
{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\ndef find_Max_Num(list_of_digits):\n    list_of_digits.sort(reverse=True)\n    return int(\"\".join(map(str,list_of_digits)))\n\nprint(find_Max_Num([1,2,3]))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3]) == 6\n\"\"\"\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3]) == 6\n\"\"\"\n\ndef sum_of_list(list_of_numbers):\n    sum_of_numbers = 0\n    for number in list_of_numbers:\n        sum_of_numbers += number\n    return sum_of_numbers\n\nprint(sum_of_list([1,2,3]))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3]) == 6\n\"\"\"\n\ndef sum_of_list(list_of_numbers):\n    sum_of_numbers = 0\n    for number in list_of_numbers:\n        sum_of_numbers += number\n    return sum_of_numbers\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n/python_basics/python_basics_4.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3]) == 6\n\"\"\"\n\ndef sum_of_list(list_of_numbers):\n    sum_of_numbers = 0\n    for number in list_of_numbers:\n        sum_of_numbers += number\n    return sum_of_numbers\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_of_numbers)\n\nprint(sum_of_list([1,2,3]))\n\ndef sum_of_list(list_of_numbers):\n    return sum(list_"}
{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    return a*b < 0\n\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(1,2) == False\nassert opposite_Signs(-1,-2) == False\nassert opposite_Signs(-1,2) == True\nassert opposite_Signs(0,2) == False\nassert opposite_Signs(0,-2) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(1,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(-1,0) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(-1,-1) == False\nassert opposite_Signs(1,1) == False\nassert opposite_Signs(-1,1) == True\nassert opposite_Signs(1,-1) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(1,0) == False\nassert opposite_Signs(-1,0) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(-1,-1) == False\nassert opposite_Signs(1,1) == False\nassert opposite_Signs(-1,1) == True\nassert opposite_Signs(1,-1) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(1,0) == False\nassert opposite_Signs(-1,0) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(-1,-1) == False\nassert opposite_Signs(1,1) == False\nassert opposite_Signs(-1,1) == True\nassert opposite_Signs(1,-1) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(1,0) == False\nassert opposite_Signs(-1,0) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(-1,-1) == False\nassert opposite_Signs(1,1) == False\nassert opposite_Signs(-1,1) == True\nassert opposite_Signs(1,-1) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(1,0) == False\nassert opposite_Signs(-1,0) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(-1,-1) == False\nassert opposite_Signs(1,1) == False\nassert opposite_Signs(-1,1) == True\nassert opposite_Signs(1,-1) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(1,0) == False\nassert opposite_Signs(-1,0) == False\nassert opposite_Signs(0,-1) == False\nassert opposite_Signs(-1,-1) == False\nassert opposite_Signs(1,1) == False\nassert opposite_Signs(-1,1) == True\nassert opposite_Signs(1,-1) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(0,0) == False\nassert opposite_Signs(0,1) == False\nassert opposite_Signs(0,-1)"}
{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return (8*n**2 - 24*n + 17) ** 0.5 == int((8*n**2 - 24*n + 17) ** 0.5)\n\ndef nth_octagonal(n):\n    i = 1\n    while True:\n        if is_octagonal(i):\n            if i == n:\n                return i\n            i += 1\n        else:\n            i += 1\n\nprint(nth_octagonal(100))\n/project_euler/problem_001.py\n\"\"\"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\n\ndef sum_multiples(n):\n    return sum([i for i in range(n) if i % 3 == 0 or i % 5 == 0])\n\nprint(sum_multiples(1000))\n/project_euler/problem_002.py\n\"\"\"\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_even_fibonacci(n):\n    return sum([fibonacci(i) for i in range(n) if fibonacci(i) % 2 == 0])\n\nprint(sum_even_fibonacci(4000000))\n/project_euler/problem_003.py\n\"\"\"\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143?\n\"\"\"\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef largest_prime_factor(n):\n    for i in range(n, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\nprint(largest_prime_factor(600851475143))\n/project_euler/problem_004.py\n\"\"\"\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\"\"\"\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(n):\n    return max([i*j for i in range(100, 1000) for j in range(100, 1000) if is_palindrome(i*j)])\n\nprint(largest_palindrome(3))\n/project_euler/problem_005.py\n\"\"\"\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\"\"\"\n\ndef is_divisible(n):\n    return all([n % i == 0 for i in range(1, 21)])\n\ndef smallest_divisible(n):\n    i"}
{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n\ndef count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(map(int, string[i:j+1])) == len(string[i:j+1]):\n                count += 1\n    return count\n\nprint(count_Substrings('112112'))\n/Python/CodeWars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum(map(int, str(n))))\n\nprint(digital_root(132189))\n/Python/CodeWars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(range(1, n*2+1, 2))\n\nprint(row_sum_odd_numbers(1))\n/Python/CodeWars/7kyu/sum_of_digits_digital_root.js\n/*\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n*/\n\nfunction digital_root(n) {\n  if (n < 10) {\n    return n;\n  } else {\n    return digital_root(n.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b)));\n  }\n}\n\nconsole.log(digital_root(132189));\n/Python/CodeWars/7kyu/sum_of"}
{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(list):\n    smallest = list[0]\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nprint(smallest_num([10, 20, 1, 45, 99]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all values in a list\nWrite a function that takes a list and prints all values in the list.\n\"\"\"\n\ndef print_list(list):\n    for i in list:\n        print(i)\n\nprint_list([1, 2, 3, 4, 5])\n/python/python_fundamentals/for_loop_basic1.py\n\"\"\"\nBasic - Print integers from 0 to 150\nWrite a function that would print all the numbers from 0 to 150.\n\"\"\"\n\ndef print_integers():\n    for i in range(151):\n        print(i)\n\nprint_integers()\n/python/python_fundamentals/for_loop_basic3.py\n\"\"\"\nBasic - Print the Values in a List with For Loop\nWrite a function that takes a list and prints the values,\nbut prints 'ooo' instead of the actual value at the 3rd index.\n\"\"\"\n\ndef print_list(list):\n    for i in list:\n        if list.index(i) == 2:\n            print('ooo')\n        else:\n            print(i)\n\nprint_list([1, 2, 3, 4, 5])\n/python/python_fundamentals/for_loop_basic4.py\n\"\"\"\nBasic - Iterate Through a List with Index\nWrite a function that prints the values of a list.\nBut this time, the output should be:\n\nThe 0th value is 1\nThe 1st value is 2\nThe 2nd value is 3\nThe 3rd value is 4\nThe 4th value is 5\n\"\"\"\n\ndef print_list(list):\n    for i in range(len(list)):\n        print(f'The {i}th value is {list[i]}')\n\nprint_list([1, 2, 3, 4, 5])\n/python/python_fundamentals/for_loop_basic5.py\n\"\"\"\nBasic - Multiples of Five\nPrint values 5 - 500000 using a for loop.\n\"\"\"\n\ndef print_multiples_of_five():\n    for i in range(5, 500001, 5):\n        print(i)\n\nprint_multiples_of_five()\n/python/python_fundamentals/for_loop_basic6.py\n\"\"\"\nBasic - Countdown by Fours\nPrint positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\ndef print_countdown_by_fours():\n    for i in range(2018, 0, -4):\n        print(i)\n\nprint_countdown_by_fours()\n/python/python_fundamentals/for_loop_basic7.py\n\"\"\"\nBasic - Flexible Counter\nWrite a function that accepts start and end parameters\nthat specify a range.\nHave it print all the values in that range,\nwith the \"low to high\" or \"high to low\",\ndepending on the logic of your program.\n\"\"\"\n\ndef print_range(start, end):\n    if start < end:\n        for i in range(start, end + 1):\n            print(i)\n    else:\n        for i in range(start, end - 1, -1):\n            print(i)\n\nprint_range(1, 10)\nprint_range(10, 1)\n/python/python_fundamentals/for_loop_basic8.py\n\"\"\"\nBasic - List of Multiples\nWrite a function that returns the multiplication table\nof a given number.\n\"\"\"\n\ndef print_multiplication_table(num):\n    for i in range(1, 11):"}
{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: max difference between available pairs\n    \"\"\"\n    max_diff = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            if abs(list_of_tuples[i][0] - list_of_tuples[j][0]) > max_diff:\n                max_diff = abs(list_of_tuples[i][0] - list_of_tuples[j][0])\n    return max_diff\n\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: single number\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_depth(root):\n    \"\"\"\n    :param root: root node of the binary tree\n    :return: maximum depth of the binary tree\n    \"\"\"\n    if root is None:\n        return 0\n    return max(max_depth(root.left), max_depth(root.right)) + 1\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(max_depth(root))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_same_tree(p, q):\n    \"\"\"\n    :param p: root node of the first binary tree\n   "}
{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))\n/python_basics/01_python_basics/01_python_basics.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\nSample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output :\n\nTwinkle, twinkle, little star,\n\tHow I wonder what you are! \n\t\tUp above the world so high,   \t\t\n\t\tLike a diamond in the sky. \nTwinkle, twinkle, little star, \n\tHow I wonder what you are\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n/python_basics/03_python_basics/03_python_basics.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\n\nimport sys\n\nprint(sys.version)\n/python_basics/02_python_basics/02_python_basics.py\n\"\"\"\nWrite a Python program to display the current date and time.\nSample Output :\nCurrent date and time :\n2014-07-05 14:34:14\n\"\"\"\n\nimport datetime\n\nprint(datetime.datetime.now())\n/python_basics/04_python_basics/04_python_basics.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\n\nimport math\n\nradius = float(input(\"Enter the radius of the circle: \"))\n\nprint(\"Area of the circle is: \", math.pi * radius * radius)\n/python_basics/05_python_basics/05_python_basics.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\n\nprint(last_name + \" \" + first_name)\n/python_basics/06_python_basics/06_python_basics.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\n\nnumbers = input(\"Enter comma separated numbers: \")\n\nlist = numbers.split(\",\")\ntuple = tuple(list)\n\nprint(\"List: \", list)\nprint(\"Tuple: \", tuple)\n/python_basics/07_python_basics/07_python_basics.py\n\"\"\"\nWrite a Python program to accept a filename from the user and print the extension of that.\n\"\"\"\n\nfilename = input(\"Enter the filename: \")\n\nprint(\"Extension of the file is: \", filename.split(\".\")[-1])\n/python_basics/08_python_basics/08_python_basics.py\n\"\"\"\nWrite a Python program to display the first and last colors from the following list.\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\n\"\"\"\n\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\n\nprint(\"First color: \", color_list[0])\nprint(\"Last color: \", color_list[-1])\n/python_basics/09_python_basics/09_python_basics.py\n\"\"\"\nWrite a Python program to display the examination schedule. (extract the date from exam_st_date"}
{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list):\n    sum = 0\n    for i in list:\n        if type(i) == list:\n            sum += recursive_list_sum(i)\n        else:\n            sum += i\n    return sum\n\nprint(recursive_list_sum(([1, 2, [3,4],[5,6]]))==21)\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0,151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5,1001,5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1,101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0,500001,2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018,0,-4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum,highNum+1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0,1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list.\nWhere n is the number of coins to be tossed.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    list = []\n    for i in range(n):\n        list.append(toss_coin())\n    return list\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_win() that returns a string - \"Heads\" or \"Tails\"\nHave the function print the number of tosses it took to toss a head.\n\"\"\"\n\ndef toss_coin_to_win():\n    count = 0\n    while True:\n        count += 1\n        if toss_coin() == \"Heads\":\n            return count\n\nprint(toss_coin_to_win())\n/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0,1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss"}
{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\nprint(pos_count([1,-2,3,-4]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0,151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5,1001,5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1,101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0,500001,2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018,0,-4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum,highNum+1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1,5001):\n        toss = random.randint(0,1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n/python/python_fundamentals/coin_tosses2.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print the number of heads and tails. Return the percentage of head/tails as a two-tuple. In other words, return the percentage of heads and the percentage of tails. If the side that is chosen is head, have the function return \"head\". If the side that is chosen is tail, have the function return \"tail\".\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1,5001):\n        toss = random.randint(0,1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n    return (heads/5000, tails/5000)\n\nprint(coin_tosses())\n/python/python_fundamentals/coin_tosses3.py\n\"\"\"\nWrite a function that simulates tossing a pair of dice 5,000 times. Your function should print each instance of the dice roll (ex. \"You rolled a 4 and a 6\").\n\"\"\"\n\nimport random\n\ndef dice_roll():\n    for i"}
{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    >>> bell_number(2)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + sum(bell_number(k) for k in range(n-1))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/README.md\n# CS61A\n\nThis is a repository for my work in CS61A, a course on computer science and programming in Python.\n\n## Course Description\n\nThis course is an introduction to the Python programming language. It covers the basics of programming, including variables, expressions, functions, conditionals, iteration, and lists. It also covers the basics of object-oriented programming, including classes, methods, and inheritance.\n\n## Course Outcomes\n\nBy the end of the course, students will be able to:\n\n- Write programs that use variables, expressions, and functions.\n- Write programs that use conditionals and iteration.\n- Write programs that use lists and list operations.\n- Write programs that use classes and objects.\n- Write programs that use inheritance.\n- Write programs that use recursion.\n- Write programs that use higher-order functions.\n- Write programs that use the Python standard library.\n- Write programs that use the Python interpreter.\n- Write programs that use the Python debugger.\n- Write programs that use the Python unit testing framework.\n- Write programs that use the Python documentation system.\n- Write programs that use the Python package manager.\n- Write programs that use the Python virtual environment.\n- Write programs that use the Python version control system.\n- Write programs that use the Python build system.\n- Write programs that use the Python packaging system.\n- Write programs that use the Python deployment system.\n- Write programs that use the Python testing system.\n- Write programs that use the Python continuous integration system.\n- Write programs that use the Python continuous deployment system.\n- Write programs that use the Python continuous testing system.\n- Write programs that use the Python continuous monitoring system.\n- Write programs that use the Python continuous improvement system.\n- Write programs that use the Python continuous learning system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use the Python continuous refactoring system.\n- Write programs that use"}
{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    else:\n        if arr[0] <= arr[1]:\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    return False\n            return True\n        else:\n            for i in range(len(arr)-1):\n                if arr[i] < arr[i+1]:\n                    return False\n            return True\n\nprint(is_Monotonic([6, 5, 4, 4]))\nprint(is_Monotonic([1, 1, 1, 3, 3]))\nprint(is_Monotonic([1, 2, 3, 4]))\nprint(is_Monotonic([1, 1, 1, 1]))\nprint(is_Monotonic([1, 1, 2, 2]))\nprint(is_Monotonic([1, 1, 2, 3]))\nprint(is_Monotonic([1, 1, 2, 3, 4]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(is_Monotonic([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1"}
{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1,list2):\n    for i in range(len(list1)):\n        if list1[i]==list2[0]:\n            if list1[i:i+len(list2)]==list2:\n                return True\n    return False\n\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[3,7])=="}
{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\ndef get_equal(tuples):\n    return len(set(len(x) for x in tuples)) == 1\n\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22, 33), (44, 55, 66, 77)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121)]) == True\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141)]) == True\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141), (151, 161)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141), (151, 161), (171, 181)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141), (151, 161), (171, 181), (191, 201)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141), (151, 161), (171, 181), (191, 201), (211, 221)]) == True\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141), (151, 161), (171, 181), (191, 201), (211, 221), (231, 241)]) == True\nassert get_equal([(11, 22, 33), (44, 55, 66, 77), (88, 99), (100, 111, 121), (131, 141), (151, 161), (171, 181), (191, 201), (211, 221), (231, 241), (251, 261)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66, 7"}
{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    return lst\n\nprint(comb_sort([5, 15, 37, 25, 79]))\n/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        node = Node(data)\n        node.next = self.head\n        self.head = node\n\n    def insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data)\n            return\n        node = self.head\n        while node.next:\n            node = node.next\n        node.next = Node(data)\n\n    def insert_after_node(self, prev_node, data):\n        if not prev_node:\n            print(\"Previous node is not in list\")\n            return\n        node = Node(data)\n        node.next = prev_node.next\n        prev_node.next = node\n\n    def delete_node(self, key):\n        if self.head is None:\n            return\n        if self.head.data == key:\n            self.head = self.head.next\n            return\n        node = self.head\n        while node.next:\n            if node.next.data == key:\n                node.next = node.next.next\n                return\n            node = node.next\n\n    def print_list(self):\n        node = self.head\n        while node:\n            print(node.data)\n            node = node.next\n\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.insert_at_beginning(1)\n    ll.insert_at_beginning(2)\n    ll.insert_at_beginning(3)\n    ll.insert_at_end(4)\n    ll.insert_at_end(5)\n    ll.insert_after_node(ll.head.next, 6)\n    ll.print_list()\n    ll.delete_node(3)\n    ll.print_list()\n/python/data_structures/stack/stack.py\n\"\"\"\nStack\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, data):\n        self.stack.append(data)\n\n    def pop(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack.pop()\n\n    def peek(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack[-1]\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\n    def size(self):\n        return len(self.stack)\n\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    print(stack.pop())\n    print(stack.peek())\n    print(stack.is_empty())\n    print(stack.size())\n/python/data_structures/queue/queue.py\n\"\"\"\nQueue\n\"\"\"\n\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, data):\n        self.queue.append(data)\n\n    def dequeue(self):\n        if len(self.queue) == 0:\n            return None\n        return self.queue.pop(0)\n\n    def peek(self):\n        if len(self.queue) == 0:\n            return None\n        return self.queue[0]\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def size(self):\n        return len(self.queue)\n\nif __name__ == \"__main__\":\n    queue = Queue()\n    queue.enqueue(1)\n    queue"}
{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    for i in range(num+1):\n        for j in range(num+1):\n            if i**2 - j**2 == num:\n                return True\n    return False\n\nprint(dif_Square(5))\n/Python/Python_Basics/03_Python_Basics/03_02_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n    print(\"*\"*i)\n/Python/Python_Basics/03_Python_Basics/03_03_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_01_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_04_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_05_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_06_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_07_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_08_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_09_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_10_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_11_Python_Basics.py\n\"\"\"\nWrite a python program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n    print(str(i)*i)\n/Python/Python_Basics/03_Python_Basics/03_"}
{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\ndef is_samepatterns(patterns, sequence):\n    # your code here\n    return False\n\n# Test Cases\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"c\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c"}
{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\ndef find_tuples(list_of_tuples, k):\n    return [tuple for tuple in list_of_tuples if all(element % k == 0 for element in tuple)]\n\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))/Python/Python_Basics/03_Strings/02_String_Slicing.py\n\"\"\"\nString Slicing\n\"\"\"\n\n# Slicing a string\n\nstring = \"Hello World\"\n\nprint(string[0])\nprint(string[1])\nprint(string[2])\nprint(string[3])\nprint(string[4])\nprint(string[5])\nprint(string[6])\nprint(string[7])\nprint(string[8])\nprint(string[9])\nprint(string[10])\nprint(string[11])\n\n# Slicing a string with a range\n\nprint(string[0:5])\nprint(string[6:11])\nprint(string[11:12])\n\n# Slicing a string with a step\n\nprint(string[0:12:2])\nprint(string[0:12:3])\n\n# Slicing a string with a negative step\n\nprint(string[::-1])\nprint(string[::-2])\n\n# Slicing a string with a negative step and a range\n\nprint(string[::-1][0:5])\nprint(string[::-1][6:11])\nprint(string[::-1][11:12])\n\n# Slicing a string with a negative step and a range with a step\n\nprint(string[::-1][0:12:2])\nprint(string[::-1][0:12:3])\n\n# Slicing a string with a negative step and a range with a negative step\n\nprint(string[::-1][::-1])\nprint(string[::-1][::-2])\n\n# Slicing a string with a negative step and a range with a negative step and a step\n\nprint(string[::-1][::-1][0:5])\nprint(string[::-1][::-1][6:11])\nprint(string[::-1][::-1][11:12])\n\nprint(string[::-1][::-1][0:12:2])\nprint(string[::-1][::-1][0:12:3])\n\n# Slicing a string with a negative step and a range with a negative step and a negative step\n\nprint(string[::-1][::-1][::-1])\nprint(string[::-1][::-1][::-2])\n\n# Slicing a string with a negative step and a range with a negative step and a negative step and a step\n\nprint(string[::-1][::-1][::-1][0:5])\nprint(string[::-1][::-1][::-1][6:11])\nprint(string[::-1][::-1][::-1][11:12])\n\nprint(string[::-1][::-1][::-1][0:12:2])\nprint(string[::-1][::-1][::-1][0:12:3])\n\n# Slicing a string with a negative step and a range with a negative step and a negative step and a negative step\n\nprint(string[::-1][::-1][::-1][::-1])\nprint(string[::-1][::-1][::-1][::-2])\n\n# Slicing a string with a negative step and a range with a negative step and a negative step and a negative step and a step\n\nprint(string[::-1][::-1][::-1][::-1][0:5])\nprint(string[::-1][::-1][::-1][::-1][6:11])\nprint(string[::-1][::-1][::-1][::-1][11:12])\n\nprint(string[::-1][::-1][::-1][::-1][0:12:2])\nprint(string[::-1][::-1][::-1][::-1][0:"}
{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    return num % 11 == 0\n\nassert is_Diff(12345) == False\nassert is_Diff(123456) == True\nassert is_Diff(1234567) == False\nassert is_Diff(12345678) == True\nassert is_Diff(123456789) == False\nassert is_Diff(1234567890) == True\nassert is_Diff(12345678901) == False\nassert is_Diff(123456789012) == True\nassert is_Diff(1234567890123) == False\nassert is_Diff(12345678901234) == True\nassert is_Diff(123456789012345) == False\nassert is_Diff(1234567890123456) == True\nassert is_Diff(12345678901234567) == False\nassert is_Diff(123456789012345678) == True\nassert is_Diff(1234567890123456789) == False\nassert is_Diff(12345678901234567890) == True\nassert is_Diff(123456789012345678901) == False\nassert is_Diff(1234567890123456789012) == True\nassert is_Diff(12345678901234567890123) == False\nassert is_Diff(123456789012345678901234) == True\nassert is_Diff(1234567890123456789012345) == False\nassert is_Diff(12345678901234567890123456) == True\nassert is_Diff(123456789012345678901234567) == False\nassert is_Diff(1234567890123456789012345678) == True\nassert is_Diff(12345678901234567890123456789) == False\nassert is_Diff(123456789012345678901234567890) == True\nassert is_Diff(1234567890123456789012345678901) == False\nassert is_Diff(12345678901234567890123456789012) == True\nassert is_Diff(123456789012345678901234567890123) == False\nassert is_Diff(1234567890123456789012345678901234) == True\nassert is_Diff(12345678901234567890123456789012345) == False\nassert is_Diff(1234567890123456789012"}
{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Python\") == True\nassert word_len(\"Java\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C#\") == True\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\") == True\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == True\nassert word_len(\"C#\")"}
{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) * (n + 3) / 24\n\nprint tetrahedral_number(5)\n/python/0001-1000/0031-0100/0077-0080/0078-0080/0079-0080/0079.py\n\"\"\"\nhttps://projecteuler.net/problem=79\n\nA common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.\n\nThe text file, keylog.txt, contains fifty successful login attempts.\n\nGiven that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.\n\"\"\"\n\nfrom collections import defaultdict\n\ndef solve():\n    with open('0079.txt') as f:\n        data = f.read().splitlines()\n\n    # build graph\n    graph = defaultdict(list)\n    for line in data:\n        for i in range(len(line) - 1):\n            graph[line[i]].append(line[i + 1])\n\n    # topological sort\n    result = []\n    while graph:\n        for node in graph:\n            if not graph[node]:\n                result.append(node)\n                del graph[node]\n                break\n        else:\n            return 'No solution'\n\n    return ''.join(result)\n\nprint solve()\n/python/0001-1000/0001-0100/0001-0010/0008-0010/0009.py\n\"\"\"\nhttps://projecteuler.net/problem=9\n\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\na^2 + b^2 = c^2\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n\"\"\"\n\ndef solve():\n    for a in range(1, 1000):\n        for b in range(a + 1, 1000):\n            c = 1000 - a - b\n            if a ** 2 + b ** 2 == c ** 2:\n                return a * b * c\n\nprint solve()\n/python/0001-1000/0001-0100/0001-0010/0001-0010/0001.py\n\"\"\"\nhttps://projecteuler.net/problem=1\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\n\ndef solve():\n    return sum(i for i in range(1000) if i % 3 == 0 or i % 5 == 0)\n\nprint solve()\n/python/0001-1000/0001-0100/0001-0010/0003-0010/0004.py\n\"\"\"\nhttps://projecteuler.net/problem=4\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\"\"\"\n\ndef is_pal"}
{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n/02_python_fundamentals/02_python_fundamentals_exercises/02_02_01_string_methods.py\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n/02_python_fundamentals/02_python_fundamentals_exercises/02_02_02_string_methods.py\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string.\nassert count_words(\"Hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nassert count_words(\"Hello world\") == 2\n\n\"\"\"\nWrite a function that takes a string as input and returns the number of words in the string"}
{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    sum = 0\n    for i in string:\n        sum += ord(i)\n    return chr(sum % 26 + 97)\n\nprint(get_Char(\"abc\"))\n/Python/Python_Basics/02_Variables/02_Variables.py\n\"\"\"\nWrite a python program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n/Python/Python_Basics/05_Operators/05_Operators.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)\nprint(a % b)\nprint(a // b)\nprint(a ** b)\n/Python/Python_Basics/03_Data_Types/03_Data_Types.py\n\"\"\"\nWrite a python program to print the data type of the following variables.\n\"\"\"\n\na = 10\nb = 10.5\nc = \"Hello\"\nd = True\ne = 1 + 2j\n\nprint(type(a))\nprint(type(b))\nprint(type(c))\nprint(type(d))\nprint(type(e))\n/Python/Python_Basics/04_Input_Output/04_Input_Output.py\n\"\"\"\nWrite a python program to print the sum of two numbers entered by the user.\n\"\"\"\n\na = int(input(\"Enter a number: \"))\nb = int(input(\"Enter another number: \"))\n\nprint(a + b)\n/Python/Python_Basics/06_Conditional_Statements/06_Conditional_Statements.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a < b:\n    print(\"a is less than b\")\nelse:\n    print(\"a is equal to b\")\n/Python/Python_Basics/07_Loops/07_Loops.py\n\"\"\"\nWrite a python program to print the sum of the first 10 natural numbers.\n\"\"\"\n\nsum = 0\nfor i in range(1, 11):\n    sum += i\n\nprint(sum)\n/Python/Python_Basics/08_Functions/08_Functions.py\n\"\"\"\nWrite a python function to print the sum of the first 10 natural numbers.\n\"\"\"\n\ndef sum_of_first_10_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum\n\nprint(sum_of_first_10_natural_numbers())\n/Python/Python_Basics/09_Lists/09_Lists.py\n\"\"\"\nWrite a python program to print the sum of the first 10 natural numbers.\n\"\"\"\n\ndef sum_of_first_10_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum\n\nprint(sum_of_first_10_natural_numbers())\n\n\"\"\"\nWrite a python program to print the sum of the first 10 natural numbers.\n\"\"\"\n\ndef sum_of_first_10_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum\n\nprint(sum_of_first_10_natural_numbers())\n\n\"\"\"\nWrite a python program to print the sum of the first 10 natural numbers.\n\"\"\"\n\ndef sum_of_first_10_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum\n\nprint(sum_of_first_10_natural_numbers())\n\n\"\"\"\nWrite a python program to print the sum of the first 10 natural numbers.\n\"\"\"\n\ndef sum_of_first_10"}
{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nprint(sequence(10))\n/python/recursion/fibonacci.py\n\"\"\"\nWrite a function to find the nth number in the fibonacci sequence.\nassert fibonacci(10) == 55\n\"\"\"\n\ndef fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n/python/recursion/factorial.py\n\"\"\"\nWrite a function to find the factorial of a number.\nassert factorial(5) == 120\n\"\"\"\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n/python/recursion/sum_of_digits.py\n\"\"\"\nWrite a function to find the sum of the digits of a number.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(n):\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n\nprint(sum_of_digits(123))\n/python/recursion/reverse_string.py\n\"\"\"\nWrite a function to reverse a string.\nassert reverse_string(\"hello\") == \"olleh\"\n\"\"\"\n\ndef reverse_string(s):\n    if len(s) == 1:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n\nprint(reverse_string(\"hello\"))\n/python/recursion/palindrome.py\n\"\"\"\nWrite a function to check if a string is a palindrome.\nassert palindrome(\"racecar\") == True\n\"\"\"\n\ndef palindrome(s):\n    if len(s) <= 1:\n        return True\n    else:\n        return s[0] == s[-1] and palindrome(s[1:-1])\n\nprint(palindrome(\"racecar\"))\n/python/recursion/sum_of_numbers.py\n\"\"\"\nWrite a function to find the sum of the numbers in a list.\nassert sum_of_numbers([1, 2, 3]) == 6\n\"\"\"\n\ndef sum_of_numbers(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + sum_of_numbers(l[1:])\n\nprint(sum_of_numbers([1, 2, 3]))\n/python/recursion/sum_of_squares.py\n\"\"\"\nWrite a function to find the sum of the squares of the numbers in a list.\nassert sum_of_squares([1, 2, 3]) == 14\n\"\"\"\n\ndef sum_of_squares(l):\n    if len(l) == 1:\n        return l[0] ** 2\n    else:\n        return l[0] ** 2 + sum_of_squares(l[1:])\n\nprint(sum_of_squares([1, 2, 3]))\n/python/recursion/sum_of_odds.py\n\"\"\"\nWrite a function to find the sum of the odd numbers in a list.\nassert sum_of_odds([1, 2, 3]) == 4\n\"\"\"\n\ndef sum_of_odds(l):\n    if len(l) == 1:\n        return l[0] if l[0] % 2 == 1 else 0\n    else:\n        return l[0] if l[0] % 2 == 1 else 0 + sum_of_odds(l[1:])\n\nprint(sum_of_odds([1, 2, 3]))\n/python/recursion/sum_of_evens.py\n\"\"\"\nWrite a function to find the sum of the even numbers in a list.\nassert sum_of"}
{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n/python/0000_python_basics/0000_python_basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Print the following string:\nprint(\"Hello World!\")\n\n# 2. Print the following string:\nprint(\"Hello World! \\nHello World!\")\n\n# 3. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World!\")\n\n# 4. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 5. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 6. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 7. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 8. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 9. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 10. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 11. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 12. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 13. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 14. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 15. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World!\")\n\n# 16. Print the following string:\nprint(\"Hello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World! \\nHello World"}
{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return (n**2 + n + 2) * 6 - 6\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/0001-0100/0031-next-permutation.py\n\"\"\"\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\n\nThe replacement must be in-place and use only constant extra memory.\n\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n\n1,2,3 \u2192 1,3,2\n3,2,1 \u2192 1,2,3\n1,1,5 \u2192 1,5,1\n\"\"\"\n\nclass Solution:\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if len(nums) <= 1:\n            return\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        self.reverse(nums, i + 1)\n\n    def reverse(self, nums, start):\n        i, j = start, len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 2, 3]\n    s.nextPermutation(nums)\n    print(nums)\n    nums = [3, 2, 1]\n    s.nextPermutation(nums)\n    print(nums)\n    nums = [1, 1, 5]\n    s.nextPermutation(nums)\n    print(nums)\n/python/leetcode/0001-0100/0054-spiral-matrix.py\n\"\"\"\nGiven a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nFor example,\nGiven the following matrix:\n\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nYou should return [1,2,3,6,9,8,7,4,5].\n\"\"\"\n\nclass Solution:\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        res = []\n        while m > 0 and n > 0:\n            if m == 1:\n                res += matrix[0][:n]\n                break\n            if n == 1:\n                for i in range(m):\n                    res.append(matrix[i][0])\n                break\n            res += matrix[0][:n]\n            for i in range(1, m - 1):\n                res.append(matrix[i][n - 1])\n            res += matrix[m - 1][n - 1::-1]\n            for i in range(m - 2, 0, -1):\n                res.append(matrix[i][0])\n            res += matrix[0][1:n]\n            matrix = matrix[1:m - 1]\n            m, n"}
{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n\nprint(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/functions_intermediate_1.py\n\"\"\"\nCountdown - Create a function that accepts a number as an input. Return a new list that counts down by one, from the number (as the 0th element) down to 0 (as the last element).\nassert countdown(5)==[5,4,3,2,1,0]\n\"\"\"\n\ndef countdown(num):\n    new_list = []\n    for i in range(num, -1, -1):\n        new_list.append(i)\n    return new_list\n\nprint(countdown(5))\n\n\"\"\"\nPrint and Return - Create a function that will receive a list with two numbers. Print the first value and return the second.\nassert print_and_return([1,2])==2\n\"\"\"\n\ndef print_and_return(list):\n    print(list[0])\n    return list[1]\n\nprint(print_and_return([1,2]))\n\n\"\"\"\nFirst Plus Length - Create a function that accepts a list and returns the sum of the first value in the list plus the list's length.\nassert first_plus_length([1,2,3,4,5])==6\n\"\"\"\n\ndef first_plus_length(list):\n    return list[0] + len(list)\n\nprint(first_plus_length([1,2,3,4,5]))\n\n\"\"\"\nValues Greater than Second - Write a function that accepts a list and creates a"}
{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\ndef freq_count(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]))\n/python/python_basics/001_python_basics/001_python_basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Write a Python program to print the following string in a specific format (see the output).\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n\n# 2. Write a Python program to get the Python version you are using.\nimport sys\nprint(\"Python version\")\nprint(sys.version)\nprint(\"Version info.\")\nprint(sys.version_info)\n\n# 3. Write a Python program to display the current date and time.\nimport datetime\nnow = datetime.datetime.now()\nprint(\"Current date and time: \")\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n# 4. Write a Python program which accepts the radius of a circle from the user and compute the area.\nfrom math import pi\nr = float(input(\"Input the radius of the circle : \"))\nprint(\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n\n# 5. Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\nfirst_name = input(\"Input your First Name : \")\nlast_name = input(\"Input your Last Name : \")\nprint (last_name + \" \" + first_name)\n\n# 6. Write a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\nvalues = input(\"Input some comma seprated numbers : \")\nlist = values.split(\",\")\ntuple = tuple(list)\nprint('List : ',list)\nprint('Tuple : ',tuple)\n\n# 7. Write a Python program to display the first and last colors from the following list.\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\nprint(color_list[0],color_list[-1])\n\n# 8. Write a Python program to display the examination schedule. (extract the date from exam_st_date).\nexam_st_date = (11, 12, 2014)\nprint(\"The examination will start from : %i / %i / %i\"%exam_st_date)\n\n# 9. Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.\na = int(input(\"Input an integer : \"))\nn1 = int(\"%s\" % a)\nn2 = int(\"%s%s\" % (a,a))\nn3 = int(\"%s%s%s\" % (a,a,a))\nprint(n1+n2+n3)\n\n# 10. Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s).\nprint(abs.__doc__)\n\n# 11. Write a Python program to print the calendar of a given month and year.\n# Note : Use 'calendar' module.\nimport calendar\nyy = int(input(\"Input the year : \"))\nmm = int(input(\"Input the month : \"))\nprint(calendar.month(yy,mm))\n\n# 12. Write a Python program to print the following here document.\nprint(\"\"\"a string"}
{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 0\n\nprint(closest_num(11))\n/python/leetcode/easy/1002_find_common_characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\nExample 1:\n\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\nExample 2:\n\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\nclass Solution:\n    def commonChars(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if not A:\n            return []\n        if len(A) == 1:\n            return list(A[0])\n        res = []\n        for i in range(len(A[0])):\n            char = A[0][i]\n            for j in range(1, len(A)):\n                if char not in A[j]:\n                    break\n                if A[j].count(char) < A[0].count(char):\n                    char = A[j][A[j].index(char)]\n            res.append(char)\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.commonChars([\"bella\",\"label\",\"roller\"]))\n    print(s.commonChars([\"cool\",\"lock\",\"cook\"]))\n/python/leetcode/easy/1009_complement_of_base_10_integer.py\n\"\"\"\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n\n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\nclass Solution:\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 1\n        res = 0\n        i = 0\n        while N > 0:\n            if N % 2 == 0:\n                res += 2 ** i\n            i += 1\n            N //= 2\n        return res\n\nif __name__ == '__main__':\n   "}
{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):"}
{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings,substring):\n    for i in list_of_strings:\n        if substring in i:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"red\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"orange\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"blue\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"\")==False\nassert find_substring([\"red\", \"black\","}
{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\ndef is_undulating(num):\n    num = str(num)\n    for i in range(len(num)-1):\n        if num[i] == num[i+1]:\n            return False\n    return True\n\nprint(is_undulating(1212121))\n/python/001-100/002_sum_of_digits.py\n\"\"\"\nWrite a function that takes a number and returns the sum of its digits.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(num):\n    sum = 0\n    for i in str(num):\n        sum += int(i)\n    return sum\n\nprint(sum_of_digits(123))\n/python/001-100/007_is_prime.py\n\"\"\"\nWrite a function that takes a number and returns True if it's prime.\nassert is_prime(7) == True\n\"\"\"\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))\n/python/001-100/008_is_palindrome.py\n\"\"\"\nWrite a function that takes a number and returns True if it's palindrome.\nassert is_palindrome(12321) == True\n\"\"\"\n\ndef is_palindrome(num):\n    num = str(num)\n    for i in range(len(num)//2):\n        if num[i]!= num[-i-1]:\n            return False\n    return True\n\nprint(is_palindrome(12321))\n/python/001-100/003_is_even.py\n\"\"\"\nWrite a function that takes a number and returns True if it's even.\nassert is_even(123) == False\n\"\"\"\n\ndef is_even(num):\n    return num % 2 == 0\n\nprint(is_even(123))\n/python/001-100/006_is_armstrong.py\n\"\"\"\nWrite a function that takes a number and returns True if it's armstrong.\nassert is_armstrong(153) == True\n\"\"\"\n\ndef is_armstrong(num):\n    sum = 0\n    for i in str(num):\n        sum += int(i)**len(str(num))\n    return sum == num\n\nprint(is_armstrong(153))\n/python/001-100/004_is_odd.py\n\"\"\"\nWrite a function that takes a number and returns True if it's odd.\nassert is_odd(123) == True\n\"\"\"\n\ndef is_odd(num):\n    return num % 2!= 0\n\nprint(is_odd(123))\n/python/001-100/005_is_divisible.py\n\"\"\"\nWrite a function that takes two numbers and returns True if the first number is divisible by the second one.\nassert is_divisible(12, 3) == True\n\"\"\"\n\ndef is_divisible(num1, num2):\n    return num1 % num2 == 0\n\nprint(is_divisible(12, 3))\n/python/001-100/009_is_perfect.py\n\"\"\"\nWrite a function that takes a number and returns True if it's perfect.\nassert is_perfect(6) == True\n\"\"\"\n\ndef is_perfect(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum == num\n\nprint(is_perfect(6))\n/python/001-100/010_is_abundant.py\n\"\"\"\nWrite a function that takes a number and returns True if it's abundant.\nassert is_abundant(12) == True\n\"\"\"\n\ndef is_abundant(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum > num"}
{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    return a**b\n\nprint(power(3,4))\n/python/python_basics/02_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# Variables are created when you assign a value to it.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python is a dynamically typed language, so you do not need to specify the type of a variable.\n\n# This example assigns an integer value to a variable named x:\n\nx = 5\nprint(x)\n\n# This example assigns a string value to a variable named y:\n\ny = \"John\"\nprint(y)\n\n# This example assigns a floating point value to a variable named z:\n\nz = 20.5\nprint(z)\n\n# This example assigns a boolean value to a variable named a:\n\na = True\nprint(a)\n\n# This example assigns a complex number value to a variable named b:\n\nb = 3 + 5j\nprint(b)\n\n# This example assigns a list value to a variable named c:\n\nc = [1, 2, 3]\nprint(c)\n\n# This example assigns a tuple value to a variable named d:\n\nd = (1, 2, 3)\nprint(d)\n\n# This example assigns a set value to a variable named e:\n\ne = {1, 2, 3}\nprint(e)\n\n# This example assigns a frozen set value to a variable named f:\n\nf = frozenset({1, 2, 3})\nprint(f)\n\n# This example assigns a dictionary value to a variable named g:\n\ng = {\"name\": \"John\", \"age\": 36}\nprint(g)\n\n# This example assigns a range value to a variable named h:\n\nh = range(6)\nprint(h)\n\n# This example assigns a bytes value to a variable named i:\n\ni = b\"Hello\"\nprint(i)\n\n# This example assigns a byte array value to a variable named j:\n\nj = bytearray(5)\nprint(j)\n\n# This example assigns a memoryview value to a variable named k:\n\nk = memoryview(bytes(5))\nprint(k)\n\n# This example assigns a None value to a variable named l:\n\nl = None\nprint(l)\n\n# This example assigns a class value to a variable named m:\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nm = Person(\"John\", 36)\nprint(m)\n\n# This example assigns a function value to a variable named n:\n\ndef my_function():\n    print(\"Hello from a function\")\n\nn = my_function\nprint(n)\n\n# This example assigns a lambda value to a variable named o:\n\no = lambda a, b: a + b\nprint(o)\n\n# This example assigns a generator value to a variable named p:\n\np = (x * 2 for x in range(10))\nprint(p)\n\n# This example assigns a module value to a variable named q:\n\nq = __name__\nprint(q)\n\n# This example assigns a built-in function value to a variable named r:\n\nr = abs\nprint(r)\n\n# This example assigns a built-in method value to a variable named s:\n\ns = dir\nprint(s)\n\n# This example assigns a built-in class value to a variable named t:\n\nt = dict\nprint(t)\n\n# This example assigns a built-in type value to a variable named u:\n\nu = type\nprint(u)\n\n# This example assigns a built-in property value to a variable named v:\n\nv = property\nprint(v)\n\n# This example assigns a built-in class method value to a variable named w:\n\nw = object.__init__\nprint(w)\n\n# This example assigns a built-in class attribute value to a variable named x:\n\nx = object.__doc__\nprint(x)\n\n"}
{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the smallest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the largest second value.\nassert index_maximum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Manjeet'\n\"\"\"\n\ndef index_maximum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the largest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the smallest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the largest second value.\nassert index_maximum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Manjeet'\n\"\"\"\n\ndef index_maximum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the largest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the smallest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the largest second value.\nassert index_maximum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Manjeet'\n\"\"\"\n\ndef index_maximum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the largest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the smallest second value\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the largest second value.\nassert index_maximum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Manjeet'\n\"\"\"\n\ndef index_maximum(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: first value of the tuple with the largest second value\n    \"\"\"\n    # TODO: Write your code here"}
{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(list_of_lists):\n    min_length}
{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(15))\n/python/0001-1000/0047-find-all-divisors-of-a-given-integer.py\n\"\"\"\nWrite a python function to find all divisors of a given integer.\nassert divisors(15) == [1, 3, 5, 15]\n\"\"\"\n\ndef divisors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nprint(divisors(15))\n/python/0001-1000/0011-find-the-largest-number-in-a-list.py\n\"\"\"\nWrite a python function to find the largest number in a list.\nassert largest([1, 2, 3, 4, 5]) == 5\n\"\"\"\n\ndef largest(l):\n    return max(l)\n\nprint(largest([1, 2, 3, 4, 5]))\n/python/0001-1000/0012-find-the-smallest-number-in-a-list.py\n\"\"\"\nWrite a python function to find the smallest number in a list.\nassert smallest([1, 2, 3, 4, 5]) == 1\n\"\"\"\n\ndef smallest(l):\n    return min(l)\n\nprint(smallest([1, 2, 3, 4, 5]))\n/python/0001-1000/0013-find-the-second-largest-number-in-a-list.py\n\"\"\"\nWrite a python function to find the second largest number in a list.\nassert second_largest([1, 2, 3, 4, 5]) == 4\n\"\"\"\n\ndef second_largest(l):\n    return sorted(l)[-2]\n\nprint(second_largest([1, 2, 3, 4, 5]))\n/python/0001-1000/0014-find-the-second-smallest-number-in-a-list.py\n\"\"\"\nWrite a python function to find the second smallest number in a list.\nassert second_smallest([1, 2, 3, 4, 5]) == 2\n\"\"\"\n\ndef second_smallest(l):\n    return sorted(l)[1]\n\nprint(second_smallest([1, 2, 3, 4, 5]))\n/python/0001-1000/0007-find-the-sum-of-all-numbers-in-a-list.py\n\"\"\"\nWrite a python function to find the sum of all numbers in a list.\nassert sum([1, 2, 3, 4, 5]) == 15\n\"\"\"\n\ndef sum(l):\n    return sum(l)\n\nprint(sum([1, 2, 3, 4, 5]))\n/python/0001-1000/0008-find-the-average-of-all-numbers-in-a-list.py\n\"\"\"\nWrite a python function to find the average of all numbers in a list.\nassert average([1, 2, 3, 4, 5]) == 3\n\"\"\"\n\ndef average(l):\n    return sum(l) / len(l)\n\nprint(average([1, 2, 3, 4, 5]))\n/python/0001-1000/0009-find-the-product-of-all-numbers-in-a-list.py"}
{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    d = {}\n    for i in lst:\n        for j in i:\n            d[j] = d.get(j, 0) + 1\n    return d\n\nprint(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n/python/python_basics/01_python_basics/01_python_basics.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\nassert largest([1, 2, 3, 4, 0]) == 4\n\"\"\"\n\ndef largest(lst):\n    return max(lst)\n\nprint(largest([1, 2, 3, 4, 0]))\n/python/python_basics/02_python_basics_2/02_python_basics_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1, 2, 3, 4, 0]) == 0\n\"\"\"\n\ndef smallest(lst):\n    return min(lst)\n\nprint(smallest([1, 2, 3, 4, 0]))\n/python/python_basics/03_python_basics_3/03_python_basics_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\nassert second_largest([1, 2, 3, 4, 0]) == 3\n\"\"\"\n\ndef second_largest(lst):\n    lst.sort()\n    return lst[-2]\n\nprint(second_largest([1, 2, 3, 4, 0]))\n/python/python_basics/04_python_basics_4/04_python_basics_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest([1, 2, 3, 4, 0]) == 1\n\"\"\"\n\ndef second_smallest(lst):\n    lst.sort()\n    return lst[1]\n\nprint(second_smallest([1, 2, 3, 4, 0]))\n/python/python_basics/05_python_basics_5/05_python_basics_5.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest([1, 2, 3, 4, 0]) == 1\n\"\"\"\n\ndef second_smallest(lst):\n    lst.sort()\n    return lst[1]\n\nprint(second_smallest([1, 2, 3, 4, 0]))\n/python/python_basics/06_python_basics_6/06_python_basics_6.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest([1, 2, 3, 4, 0]) == 1\n\"\"\"\n\ndef second_smallest(lst):\n    lst.sort()\n    return lst[1]\n\nprint(second_smallest([1, 2, 3, 4, 0]))\n/python/python_basics/07_python_basics_7/07_python_basics_7.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest([1, 2, 3, 4, 0]) == 1\n\"\"\"\n\ndef second_smallest(lst):\n    lst.sort()\n    return lst[1]\n\nprint(second_smallest([1, 2, 3, 4, 0]))\n/python/python_basics/"}
{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\ndef multiply_num(list):\n    return sum(list)/len(list)\n\nprint(multiply_num((8, 2, 3, -1, 7)))\n\n\"\"\"\nWrite a function to calculate the sum of the digits of a number.\nassert sum_digits(1234) == 10\nassert sum_digits(9999) == 36\n\"\"\"\n\ndef sum_digits(num):\n    return sum([int(i) for i in str(num)])\n\nprint(sum_digits(1234))\nprint(sum_digits(9999))\n\n\"\"\"\nWrite a function to calculate the factorial of a number.\nassert factorial(5) == 120\nassert factorial(3) == 6\n\"\"\"\n\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(5))\nprint(factorial(3))\n\n\"\"\"\nWrite a function to check whether a number is prime or not.\nassert is_prime(7) == True\nassert is_prime(4) == False\n\"\"\"\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\nprint(is_prime(7))\nprint(is_prime(4))\n\n\"\"\"\nWrite a function to check whether a number is perfect or not.\nassert is_perfect(6) == True\nassert is_perfect(28) == True\nassert is_perfect(29) == False\n\"\"\"\n\ndef is_perfect(num):\n    if num == 1:\n        return False\n    else:\n        sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                sum += i\n        if sum == num:\n            return True\n        else:\n            return False\n\nprint(is_perfect(6))\nprint(is_perfect(28))\nprint(is_perfect(29))\n\n\"\"\"\nWrite a function to check whether a number is amstrong or not.\nassert is_armstrong(153) == True\nassert is_armstrong(123) == False\n\"\"\"\n\ndef is_armstrong(num):\n    sum = 0\n    for i in str(num):\n        sum += int(i) ** len(str(num))\n    if sum == num:\n        return True\n    else:\n        return False\n\nprint(is_armstrong(153))\nprint(is_armstrong(123))\n\n\"\"\"\nWrite a function to check whether a number is a fibonacci number or not.\nassert is_fibonacci(144) == True\nassert is_fibonacci(100) == False\n\"\"\"\n\ndef is_fibonacci(num):\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    else:\n        a = 0\n        b = 1\n        while b < num:\n            a, b = b, a+b\n            if b == num:\n                return True\n        return False\n\nprint(is_fibonacci(144))\nprint(is_fibonacci(100))\n\n\"\"\"\nWrite a function to check whether a number is a palindrome or not.\nassert is_palindrome(121) == True\nassert is_palindrome(123) == False\n\"\"\"\n\ndef is_palindrome(num):\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n\nprint(is_palindrome(121))\nprint(is_palindrome(123))\n\n\"\"\"\nWrite a function to check whether a number is a perfect square or not.\nassert is_perfect_square(16) == True\nassert is_perfect_square(15) == False\n\"\"\"\n\ndef is_perfect_square(num):\n    if num == 1:\n        return True\n    else:\n        for i in range(1, num):\n            if i * i == num:\n                return True\n        return False\n"}
{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    if n == 0:\n        return '0'\n    result = ''\n    while n > 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n\nprint(decimal_to_binary(8))\n/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\np = TreeNode(1)\np.left = TreeNode(2)\np.right = TreeNode(3)\n\nq = TreeNode(1)\nq.left = TreeNode(2)\nq.right = TreeNode(3)\n\ns = Solution()\nprint(s.isSameTree(p, q))\n/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return True\n        return self.isSymmetricHelper(root.left, root.right)\n\n    def isSymmetricHelper(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isSymmetricHelper(left.left, right.right) and self.isSymmetricHelper(left.right, right.left)\n\ns = Solution()\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(2)\nroot.left.left = TreeNode(3)\nroot.left.right = TreeNode(4)\nroot.right.left = TreeNode(4)\nroot.right.right = TreeNode(3)\n\nprint(s.isSymmetric(root))\n/leetcode/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of"}
{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    n = str(n)\n    if n == n[::-1]:\n        return int(n) + 1\n    else:\n        return int(n) + 1\n\nprint(next_smallest_palindrome(99))\n/python/leetcode/easy/1002_find_common_characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\nExample 1:\n\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\nExample 2:\n\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\nclass Solution:\n    def commonChars(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(A[0])):\n            char = A[0][i]\n            for j in range(1, len(A)):\n                if char not in A[j]:\n                    break\n                if char in A[j]:\n                    if A[j].count(char) < A[0].count(char):\n                        char = A[j][A[j].index(char)]\n            res.append(char)\n        return res\n\nprint(Solution().commonChars([\"bella\",\"label\",\"roller\"]))\n/python/leetcode/easy/1009_complement_of_base_10_integer.py\n\"\"\"\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n\n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\nclass Solution:\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 1\n        res = 0\n        i = 0\n        while N > 0:\n            if N % 2 == 0:\n                res += 2 ** i\n            i += 1\n            N //= 2\n        return res\n\nprint(Solution().bitwiseComplement(10))\n/python/leetcode/easy/1013_partition_array_into_three_parts_with_equal_sum.py\n\"\"\"\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\n\nFormally, we can partition the array if we can find indexes i+1 <"}
{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\ndef kth_element(arr, k):\n    return arr[k-1]\n\nprint(kth_element([12,3,5,7,19], 2))\n/python/leetcode/easy/1365.py\n\"\"\"\nGiven an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.\n\nExample 1:\n\nInput: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n\nExample 2:\n\nInput: arr = [1,2]\nOutput: false\n\nExample 3:\n\nInput: arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true\n\nConstraints:\n\n1 <= arr.length <= 1000\n-1000 <= arr[i] <= 1000\n\"\"\"\n\ndef unique_occurrences(arr):\n    return len(set(arr)) == len(set(arr.count(i) for i in arr))\n\nprint(unique_occurrences([1,2,2,1,1,3]))\nprint(unique_occurrences([1,2]))\nprint(unique_occurrences([-3,0,1,-3,1,1,1,-3,10,0]))\n/python/leetcode/easy/1431.py\n\"\"\"\nGiven the array candies and the integer extraCandies, where candies[i] represents the number of candies that the ith kid has.\n\nFor each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.\n\nExample 1:\n\nInput: candies = [2,3,5,1,3], extraCandies = 3\nOutput: [true,true,true,false,true] \nExplanation: \nKid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. \nKid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. \nKid 3 has 5 candies and this is already the greatest number of candies among the kids. \nKid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. \nKid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. \n\nExample 2:\n\nInput: candies = [4,2,1,1,2], extraCandies = 1\nOutput: [true,false,false,false,false] \nExplanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.\n\nExample 3:\n\nInput: candies = [12,1,12], extraCandies = 10\nOutput: [true,false,true]\n\nConstraints:\n\n2 <= candies.length <= 100\n1 <= candies[i] <= 100\n1 <= extraCandies <= 50\n\"\"\"\n\ndef kids_with_candies(candies, extra_candies):\n    max_candies = max(candies)\n    return [True if candies[i] + extra_candies >= max_candies else False for i in range(len(candies))]\n\nprint(kids_with_candies([2,3,5,1,3], 3))\nprint(kids_with_candies([4,"}
{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join([x.capitalize() if x!='_' else '' for x in s.split('_')])\n\nprint(snake_to_camel('python_program'))\n/python/leetcode/1001-1100/1009.complement-of-base-10-integer.py\n\"\"\"\n1009. Complement of Base 10 Integer\nEasy\n\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n \n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n \n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\nclass Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        return int(''.join(['1' if x=='0' else '0' for x in bin(N)[2:]]), 2)\n/python/leetcode/1001-1100/1003.check-if-word-is-valid-after-substitutions.py\n\"\"\"\n1003. Check If Word Is Valid After Substitutions\nMedium\n\nGiven a string s, determine if it is valid.\n\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\n\nInsert string \"abc\" into any position in t.  More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright.  Note that tleft and tright may be empty.\n\nReturn true if s is a valid string, otherwise, return false.\n\n \n\nExample 1:\n\nInput: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.\nExample 2:\n\nInput: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.\nExample 3:\n\nInput: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.\nExample 4:\n\nInput: s = \"cababc\"\nOutput: false\nExplanation: It is impossible to get \"cababc\" using the operation.\n \n\nConstraints:\n\n1 <= s.length <= 2 * 104\ns consists of lowercase English letters.\n\"\"\"\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        while 'abc' in s:\n            s = s.replace('abc', '')\n        return s==''\n/python/leetcode/1001-1100/1007.minimum-domino-rotations-for-equal-row.py\n\"\"\"\n1007. Minimum Domino Rotations For Equal Row\nMedium\n\nIn a"}
{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(3, 2) == 12\n    assert eulerian_num(3, 3) == 36\n    assert eulerian_num(4, 1) == 10\n    assert eulerian_num(4, 2) == 60\n    assert eulerian_num(4, 3) == 240\n    assert eulerian_num(4, 4) == 960\n    assert eulerian_num(5, 1) == 20\n    assert eulerian_num(5, 2) == 180\n    assert eulerian_num(5, 3) == 1080\n    assert eulerian_num(5, 4) == 5040\n    assert eulerian_num(5, 5) == 20160\n\nif __name__ == '__main__':\n    test_eulerian_num()\n/leetcode/1000-1099/1038.py\n\"\"\"\n1038. Binary Search Tree to Greater Sum Tree\nMedium\n\nGiven the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.\n\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n \n\nExample 1:\n\n\nInput: [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\nExample 2:\n\nInput: root = [0,null,1]\nOutput: [1,null,1]\nExample 3:\n\nInput: root = [1,0,2]\nOutput: [3,3,2]\nExample 4:\n\nInput: root = [3,2,4,1]\nOutput: [7,9,4,10]\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-104 <= Node.val <= 104\nAll the values in the tree are unique.\nroot is guaranteed to be a valid binary search tree.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstToGst(self, root: TreeNode) -> TreeNode:\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def dfs(node):\n            if node is None:\n                return 0\n            right = dfs(node.right)\n            node.val += right\n            left = dfs(node.left)\n            return node.val + left\n        dfs(root)\n        return root\n/leetcode/100-199/142.py\n\"\"\"\n142. Linked List Cycle II\nMedium\n\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return null.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuous"}
{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst\n\nprint(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list.\nWhere n is the number of coins to be tossed.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    lst = []\n    for i in range(n):\n        lst.append(toss_coin())\n    return lst\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_win() that returns a string - \"Heads\" or \"Tails\"\nHave the function print the number of tosses it took to toss a head.\n\"\"\"\n\ndef toss_coin_to_win():\n    count = 0\n    while True:\n        count += 1\n        if toss_coin() == \"Heads\":\n            return count\n\nprint(toss_coin_to_win())\n/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list.\nWhere n is the number of coins to be tossed.\n\"\"\"\n\n"}
{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\nprint(count([True,False,True]))\n/python/python_basics/01_variables/02_variables.py\n\"\"\"\nWrite a python program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n/python/python_basics/03_conditionals/01_conditionals.py\n\"\"\"\nWrite a python program to check if the given number is even or odd.\n\"\"\"\n\nnum = 10\n\nif num % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n/python/python_basics/02_loops/01_loops.py\n\"\"\"\nWrite a python program to print the numbers from 1 to 10.\n\"\"\"\n\nfor i in range(1,11):\n    print(i)\n/python/python_basics/04_functions/01_functions.py\n\"\"\"\nWrite a python function to print the sum of two numbers.\n\"\"\"\n\ndef sum(a,b):\n    return a + b\n\nprint(sum(10,20))\n/python/python_basics/05_lists/01_lists.py\n\"\"\"\nWrite a python program to print the sum of all the numbers in the given list.\n\"\"\"\n\nlst = [10,20,30,40]\n\nsum = 0\nfor i in lst:\n    sum += i\n\nprint(sum)\n/python/python_basics/05_lists/02_lists.py\n\"\"\"\nWrite a python program to print the sum of all the even numbers in the given list.\n\"\"\"\n\nlst = [10,20,30,40]\n\nsum = 0\nfor i in lst:\n    if i % 2 == 0:\n        sum += i\n\nprint(sum)\n/python/python_basics/05_lists/03_lists.py\n\"\"\"\nWrite a python program to print the sum of all the odd numbers in the given list.\n\"\"\"\n\nlst = [10,20,30,40]\n\nsum = 0\nfor i in lst:\n    if i % 2!= 0:\n        sum += i\n\nprint(sum)\n/python/python_basics/05_lists/04_lists.py\n\"\"\"\nWrite a python program to print the sum of all the even numbers in the given list.\n\"\"\"\n\nlst = [10,20,30,40]\n\nsum = 0\nfor i in lst:\n    if i % 2 == 0:\n        sum += i\n\nprint(sum)\n\n# using list comprehension\n\nlst = [10,20,30,40]\n\nsum = sum([i for i in lst if i % 2 == 0])\n\nprint(sum)\n/python/python_basics/05_lists/05_lists.py\n\"\"\"\nWrite a python program to print the sum of all the odd numbers in the given list.\n\"\"\"\n\nlst = [10,20,30,40]\n\nsum = 0\nfor i in lst:\n    if i % 2!= 0:\n        sum += i\n\nprint(sum)\n\n# using list comprehension\n\nlst = [10,20,30,40]\n\nsum = sum([i for i in lst if i % 2!= 0])\n\nprint(sum)\n/python/python_basics/05_lists/06_lists.py\n\"\"\"\nWrite a python program to print the sum of all the even numbers in the given list.\n\"\"\"\n\nlst = [10,20,30,40]\n\nsum = 0\nfor i in lst:\n    if i % 2 == 0:\n        sum += i\n\nprint(sum)\n\n# using list comprehension\n\nlst = [10,2"}
{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, tuple1):\n    return tuple1 + tuple(list1)\n\nprint(add_lists([5, 6, 7], (9, 10)))\n/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\nassert largest([1, 2, 3, 4, 0]) == 4\n\"\"\"\n\ndef largest(list1):\n    return max(list1)\n\nprint(largest([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1, 2, 3, 4, 0]) == 0\n\"\"\"\n\ndef smallest(list1):\n    return min(list1)\n\nprint(smallest([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\nassert second_largest([1, 2, 3, 4, 0]) == 3\n\"\"\"\n\ndef second_largest(list1):\n    return sorted(list1)[-2]\n\nprint(second_largest([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest([1, 2, 3, 4, 0]) == 1\n\"\"\"\n\ndef second_smallest(list1):\n    return sorted(list1)[1]\n\nprint(second_smallest([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the average (mean) of all the numbers in the list.\nassert average([1, 2, 3, 4, 0]) == 2\n\"\"\"\n\ndef average(list1):\n    return sum(list1) / len(list1)\n\nprint(average([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the median of all the numbers in the list.\nassert median([1, 2, 3, 4, 0]) == 2\n\"\"\"\n\ndef median(list1):\n    return sorted(list1)[len(list1) // 2]\n\nprint(median([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_7.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the mode of all the numbers in the list.\nassert mode([1, 2, 3, 4, 0]) == 0\n\"\"\"\n\ndef mode(list1):\n    return max(set(list1), key=list1.count)\n\nprint(mode([1, 2, 3, 4, 0]))\n/python_basics/python_basics_1/python_basics_1_8.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the range of all the numbers in"}
{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n\nprint(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nToss Coin - Create a function called tossCoin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef tossCoin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(tossCoin())\n\n\"\"\"\nToss Multiple Coins - Create another function called tossMultipleCoins(num) that returns a list of strings of \"head\" or \"tails\" that is the length of the input num.\n\"\"\"\n\ndef tossMultipleCoins(num):\n    return [tossCoin() for i in range(num)]\n\nprint(tossMultipleCoins(5))\n\n\"\"\"\nCall tossMultipleCoins(x) and store the value in a variable called coins.\n\"\"\"\n\ncoins = tossMultipleCoins(5)\nprint(coins)\n\n\"\"\"\nIf you actually got more heads than tails, print \"You got more heads!\" If you got the same number of heads and tails, print \"You got the same number of heads and tails!\" If you got more tails than heads, print \"You got"}
{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary,n):\n    binary = binary * n\n    count = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            count += 1\n    return count\n\nprint(odd_Equivalent(\"011001\",6))/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice"}
{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    :param nested_list: list of lists\n    :return: set of common elements\n    \"\"\"\n    return set.intersection(*map(set, nested_list))\n\n\nif __name__ == '__main__':\n    print(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))\n/python/python_101/001_basics/001_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are used to store data.\n# Variables are created when you assign a value to it.\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python is a dynamically typed language.\n# This means that you do not need to specify the type of a variable when you create it.\n# Python will automatically assign the type.\n\n# Variables can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).\n# Rules for Python variables:\n# A variable name must start with a letter or the underscore character\n# A variable name cannot start with a number\n# A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Assign Value to a Variable\n# Python variables do not need explicit declaration to reserve memory space.\n# The declaration happens automatically when you assign a value to a variable.\n\n# The equal sign (=) is used to assign values to variables.\n\n# Example\n# Create a variable called \"x\" and assign an integer value to it:\nx = 5\n\n# Create a variable called \"y\" and assign a string value to it:\ny = \"John\"\n\n# Create a variable called \"z\" and assign a float value to it:\nz = 5.5\n\n# Create a variable called \"a\" and assign a boolean value to it:\na = True\n\n# Create a variable called \"b\" and assign a complex value to it:\nb = 3+5j\n\n# Create a variable called \"c\" and assign a list value to it:\nc = [1, 2, 3, 4, 5]\n\n# Create a variable called \"d\" and assign a tuple value to it:\nd = (1, 2, 3, 4, 5)\n\n# Create a variable called \"e\" and assign a set value to it:\ne = {1, 2, 3, 4, 5}\n\n# Create a variable called \"f\" and assign a dictionary value to it:\nf = {\"name\": \"John\", \"age\": 36}\n\n# Create a variable called \"g\" and assign a frozenset value to it:\ng = frozenset({\"apple\", \"banana\", \"cherry\"})\n\n# Create a variable called \"h\" and assign a range value to it:\nh = range(6)\n\n# Create a variable called \"i\" and assign a bytes value to it:\ni = bytes(5)\n\n# Create a variable called \"j\" and assign a bytearray value to it:\nj = bytearray(5)\n\n# Create a variable called \"k\" and assign a memoryview value to it:\nk = memoryview(bytes(5))\n\n# Create a variable called \"l\" and assign a None value to it:\nl = None\n\n# Create a variable called \"m\" and assign a"}
{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a float or not.\nassert check_float(\"python\")==False\n\"\"\"\ndef check_float(string):\n    try:\n        float(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a boolean or not.\nassert check_boolean(\"python\")==False\n\"\"\"\ndef check_boolean(string):\n    try:\n        bool(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a list or not.\nassert check_list(\"python\")==False\n\"\"\"\ndef check_list(string):\n    try:\n        list(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a dictionary or not.\nassert check_dict(\"python\")==False\n\"\"\"\ndef check_dict(string):\n    try:\n        dict(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a tuple or not.\nassert check_tuple(\"python\")==False\n\"\"\"\ndef check_tuple(string):\n    try:\n        tuple(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a set or not.\nassert check_set(\"python\")==False\n\"\"\"\ndef check_set(string):\n    try:\n        set(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a frozenset or not.\nassert check_frozenset(\"python\")==False\n\"\"\"\ndef check_frozenset(string):\n    try:\n        frozenset(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a complex number or not.\nassert check_complex(\"python\")==False\n\"\"\"\ndef check_complex(string):\n    try:\n        complex(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a byte string or not.\nassert check_byte_string(\"python\")==False\n\"\"\"\ndef check_byte_string(string):\n    try:\n        bytes(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a byte array or not.\nassert check_byte_array(\"python\")==False\n\"\"\"\ndef check_byte_array(string):\n    try:\n        bytearray(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a memoryview or not.\nassert check_memoryview(\"python\")==False\n\"\"\"\ndef check_memoryview(string):\n    try:\n        memoryview(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a range or not.\nassert check_range(\"python\")==False\n\"\"\"\ndef check_range(string):\n    try:\n        range(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a slice or not.\nassert check_slice(\"python\")==False\n\"\"\"\ndef check_slice(string):\n    try:\n        slice(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a slice object or not.\nassert check_slice_object(\"python\")==False\n\"\"\"\ndef check_slice_object(string):\n    try:\n        slice_object(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a generator or not.\nassert check_generator(\"python\")==False\n\"\"\"\ndef check_generator(string):\n    try:\n        generator(string)\n        return True\n    except:\n        return False\n\n\"\"\"\nWrite a function to check if a string represents a coroutine or not.\nassert check_coroutine(\"python\")==False\n\"\"\"\ndef check_coroutine(string):\n    try:\n        coroutine(string)\n        return True\n    except:\n        return False\n"}
{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dit):\n    for dit in list_of_dit:\n        if dit:\n            return False\n    return True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},"}
{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2,3)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n\nprint(tuple_to_int((1,2"}
{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\n\ndef list_to_float(list_of_lists):\n    return [tuple(map(float, sublist)) for sublist in list_of_lists]\n\nprint(list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]))\n/python/list_to_dict.py\n\"\"\"\nWrite a function to convert a list of lists to a dictionary.\nassert list_to_dict([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) == {\"a\": 1, \"b\": 2, \"c\": 3}\n\"\"\"\n\ndef list_to_dict(list_of_lists):\n    return {key: value for key, value in list_of_lists}\n\nprint(list_to_dict([[\"a\", 1], [\"b\", 2], [\"c\", 3]]))\n/python/list_to_string.py\n\"\"\"\nWrite a function to convert a list of strings to a single string.\nassert list_to_string([\"a\", \"b\", \"c\"]) == \"abc\"\n\"\"\"\n\ndef list_to_string(list_of_strings):\n    return \"\".join(list_of_strings)\n\nprint(list_to_string([\"a\", \"b\", \"c\"]))\n/python/list_to_tuple.py\n\"\"\"\nWrite a function to convert a list of lists to a tuple of tuples.\nassert list_to_tuple([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) == ((\"a\", 1), (\"b\", 2), (\"c\", 3))\n\"\"\"\n\ndef list_to_tuple(list_of_lists):\n    return tuple(tuple(sublist) for sublist in list_of_lists)\n\nprint(list_to_tuple([[\"a\", 1], [\"b\", 2], [\"c\", 3]]))\n/python/list_to_set.py\n\"\"\"\nWrite a function to convert a list to a set.\nassert list_to_set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\"\"\"\n\ndef list_to_set(list_of_numbers):\n    return set(list_of_numbers)\n\nprint(list_to_set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n/python/list_to_list.py\n\"\"\"\nWrite a function to convert a list of lists to a list of tuples.\nassert list_to_list([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) == [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n\"\"\"\n\ndef list_to_list(list_of_lists):\n    return [tuple(sublist) for sublist in list_of_lists]\n\nprint(list_to_list([[\"a\", 1], [\"b\", 2], [\"c\", 3]]))\n/python/list_to_string_with_join.py\n\"\"\"\nWrite a function to convert a list of strings to a single string using join.\nassert list_to_string_with_join([\"a\", \"b\", \"c\"]) == \"abc\"\n\"\"\"\n\ndef list_to_string_with_join(list_of_strings):\n    return \"\".join(list_of_strings)\n\nprint(list_to_string_with_join([\"a\", \"b\", \"c\"]))\n/python/list_to_string_with_join_and_map.py\n\"\"\"\nWrite a function to convert a list of strings to a single string using join and map.\nassert list_to_string_with_join_and"}
{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n\nprint(string_to_list(\"python programming\"))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))\n\n\"\"\"\nWrite a function to convert a list of strings to a string split on the space character.\nassert list_to_string(['python','programming'])==\"python programming\"\n\"\"\"\ndef list_to_string(list):\n    return \" \".join(list)\n\nprint(list_to_string(['python','programming']))"}
{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\ndef search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[:mid])\n    else:\n        return search(arr[mid:])\n\nprint(search([1,1,2,2,3]))\n/leetcode/100.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/leetcode/101.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/leetcode/104.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if root is None:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n/leetcode/102.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right,"}
{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: max product of tuples\n    \"\"\"\n    return max(map(lambda x: x[0] * x[1], lst))\n\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return n if n < 10 else digital_root(sum(map(int, str(n))))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n\"\"\"\n\ndef cube_odd(arr):\n    \"\"\"\n    :param arr: list of ints\n    :return: sum of odd numbers cubed\n    \"\"\"\n    return sum(map(lambda x: x ** 3, filter(lambda x: x % 2, arr)))\n\nprint(cube_odd([1, 2, 3, 4]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.js\n/*\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n*/\n\nfunction cubeOdd(arr) {\n    return arr.filter(x => x % 2).map(x => x ** 3).reduce((a, b) => a + b);\n}\n\nconsole.log(cubeOdd([1, 2, 3, 4]));\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.c\n/*\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint cube_odd(int *arr, size_t arr_size) {\n    int sum = 0;\n    for (size_t i = 0; i < arr_size; i++) {\n        if (arr[i] % 2) {\n            sum += arr[i] * arr[i] * arr[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3,"}
{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    >>> amicable_numbers_sum(999)\n    504\n    \"\"\"\n    return sum(amicable_numbers(n))\n\ndef amicable_numbers(n):\n    \"\"\"\n    >>> amicable_numbers(999)\n    [220, 284]\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return amicable_numbers\n\ndef is_amicable(n):\n    \"\"\"\n    >>> is_amicable(220)\n    True\n    >>> is_amicable(284)\n    True\n    >>> is_amicable(100)\n    False\n    \"\"\"\n    return sum(proper_divisors(n)) == n and sum(proper_divisors(sum(proper_divisors(n)))) == n and n!= sum(proper_divisors(n))\n\ndef proper_divisors(n):\n    \"\"\"\n    >>> proper_divisors(220)\n    [1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110]\n    >>> proper_divisors(284)\n    [1, 2, 4, 71, 142]\n    \"\"\"\n    proper_divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            proper_divisors.append(i)\n    return proper_divisors\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/project_euler/problem_001.py\n\"\"\"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\n\ndef multiples_sum(n):\n    \"\"\"\n    >>> multiples_sum(10)\n    23\n    >>> multiples_sum(1000)\n    233168\n    \"\"\"\n    return sum(multiples(n))\n\ndef multiples(n):\n    \"\"\"\n    >>> multiples(10)\n    [3, 5, 6, 9]\n    >>> multiples(1000)\n    [3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30, 33, 35, 36, 39, 40, 42, 45, 48, 50, 51, 54, 55, 57, 60, 63, 65, 66, 69, 70, 72, 75, 78, 80, 81, 84, 85, 87, 90, 93, 95, 96, 99, 100, 102, 105, 108, 110, 111, 114, 115, 117, 120, 123, 125, 126, 129, 130, 132, 135, 138, 140, 141, 144, 145, 147, 150, 153, 155, 156, 159, 160, 162, 165, 168, 170, 171, 174, 175, 177, 180, 183,"}
{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\ndef angle_complex(x, y):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.4142135623730951, rel_tol=0.001)\n\"\"\"\n\ndef distance_points(p1, p2):\n    pass\n\n\"\"\"\nWrite a function to get the distance between two points.\nassert math.isclose(distance_points((0,0), (1,1)), 1.414213562"}
{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\ndef find_length(binary_string):\n    \"\"\"\n    :param binary_string: str\n    :return: int\n    \"\"\"\n    # TODO: Write your code here\n    pass\n/src/main/python/com/leetcode/easy/array/find_pivot_index.py\n\"\"\"\nGiven an array of integers nums, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\nReturn the leftmost pivot index. If no such index exists, return -1.\n\nExample 1:\nInput: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n\nExample 2:\nInput: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.\n\nExample 3:\nInput: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n\nConstraints:\n1 <= nums.length <= 104\n-1000 <= nums[i] <= 1000\n\"\"\"\n\ndef find_pivot_index(nums):\n    \"\"\"\n    :param nums: List[int]\n    :return: int\n    \"\"\"\n    # TODO: Write your code here\n    pass\n/src/main/python/com/leetcode/easy/array/find_numbers_with_even_number_of_digits.py\n\"\"\"\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\nExample 1:\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\n\nExample 2:\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation:\nOnly 1771 contains an even number of digits.\n\nConstraints:\n1 <= nums.length <= 500\n1 <= nums[i] <= 10^5\n\"\"\"\n\ndef find_numbers_with_even_number_of_digits(nums):\n    \"\"\"\n    :param nums: List[int]\n    :return: int\n    \"\"\"\n    # TODO: Write your code here\n    pass\n/src/main/python/com/leetcode/easy/array/find_numbers_with_even_number_of_digits.py\n\"\"\"\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\nExample 1:\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\n\nExample 2:\nInput: nums = [555,901,482,177"}
{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a,b):\n    \"\"\"\n    >>> sum_common_divisors(10,15)\n    6\n    \"\"\"\n    return sum(common_divisors(a,b))\n\ndef common_divisors(a,b):\n    \"\"\"\n    >>> common_divisors(10,15)\n    [1, 5]\n    \"\"\"\n    return [x for x in range(1,min(a,b)+1) if a%x==0 and b%x==0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_101/01_basics/01_hello_world.py\n\"\"\"\nWrite a python function to print \"Hello World\"\n\"\"\"\n\ndef hello_world():\n    \"\"\"\n    >>> hello_world()\n    Hello World\n    \"\"\"\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_101/01_basics/04_sum_of_digits.py\n\"\"\"\nWrite a python function to find the sum of digits of a given number.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(n):\n    \"\"\"\n    >>> sum_of_digits(123)\n    6\n    \"\"\"\n    return sum([int(x) for x in str(n)])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_101/01_basics/02_sum_of_numbers.py\n\"\"\"\nWrite a python function to find the sum of numbers from 1 to n.\nassert sum_of_numbers(10) == 55\n\"\"\"\n\ndef sum_of_numbers(n):\n    \"\"\"\n    >>> sum_of_numbers(10)\n    55\n    \"\"\"\n    return sum(range(1,n+1))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_101/01_basics/03_sum_of_odd_numbers.py\n\"\"\"\nWrite a python function to find the sum of odd numbers from 1 to n.\nassert sum_of_odd_numbers(10) == 25\n\"\"\"\n\ndef sum_of_odd_numbers(n):\n    \"\"\"\n    >>> sum_of_odd_numbers(10)\n    25\n    \"\"\"\n    return sum(range(1,n+1,2))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_101/01_basics/05_sum_of_digits_of_a_number.py\n\"\"\"\nWrite a python function to find the sum of digits of a given number.\nassert sum_of_digits_of_a_number(123) == 6\n\"\"\"\n\ndef sum_of_digits_of_a_number(n):\n    \"\"\"\n    >>> sum_of_digits_of_a_number(123)\n    6\n    \"\"\"\n    return sum([int(x) for x in str(n)])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_101/01_basics/06_sum_of_digits_of_a_number_using_recursion.py\n\"\"\"\nWrite a python function to find the sum of digits of a given number.\nassert sum_of_digits_of_a_number_using_recursion(123) == 6\n\"\"\"\n\ndef sum_of_digits_of_a_number_using_recursion(n):\n    \"\"\"\n    >>> sum_of_digits_of_a_number_using_recursion(123)\n    6\n    \"\"\"\n    if n < 10:\n        return n\n    return n%10 + sum_of_digits_of_a_number_using_recursion(n//10)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_10"}
{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\nprint(multiply_int(10,20))\n\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\n"}
{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\nprint(long_words(3,\"python is a programming language\"))\n\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python"}
{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    # Your code here\n    return False\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nDigital root is the recursive sum of all the digits in a number.\n\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.\n\nExamples\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    # Your code here\n    return n\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    # Your code here\n    return n\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    # Your code here\n    return 0\n/python/codewars/7kyu/sum_of_two_lowest_positive_integers.py\n\"\"\"\nCreate a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\n\nFor example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.\n\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\"\"\"\n\ndef sum_two_smallest_numbers(numbers):\n    # Your code here\n    return 0\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers. The function should return undefined/None/null/Nil if any of the values aren't numbers.\n\nNote: there are no arrays of strings that can be passed to the function.\n\"\"\"\n\ndef cube_odd(arr):\n    # Your code here\n    return None\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers. The function should return undefined/None/null/Nil if any of the values aren't numbers.\n\nNote: there are no arrays of strings that can be passed to the function.\n\"\"\"\n\ndef cube_odd(arr):\n    # Your code here\n    return None"}
{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    2\n    \"\"\"\n    return max(set(lst), key=lst.count)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python}
{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    vowels = \"aeiou\"\n    vowels_list = []\n    for char in string:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list.reverse()\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += vowels_list.pop()\n        else:\n            new_string += char\n    return new_string\n\nprint(reverse_vowels(\"Python\"))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nGiven a positive integer n, return the sum of all odd numbers from 1 to n squared.\n\nFor example, sum_odd_squars(5) should return 50, because 1 + 9 + 25 = 35.\n\"\"\"\n\ndef sum_odd_cubed(n):\n    return sum([i**3 for i in range(1, n+1) if i % 2!= 0])\n\nprint(sum_odd_cubed(5))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum([i for i in range(1, n*2, 2)])\n\nprint(row_sum_odd_numbers(1))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 +"}
{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n\n\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([1, 3, 5, 7, 9])== (1, 3, 5, 7, 9)\n\"\"\"\ndef list_tuple(lst):\n    return tuple(lst)\n\n\"\"\"\nWrite a function to compute the net amount of a bank account based a transaction log from console input.\nThe transaction log format is shown as following:\nD 100\nW 200\n\nD means deposit while W means withdrawal.\n\nSuppose the following input is supplied to the function:\nD 300\nD 300\nW 200\nD 100\nThen, the output should be:\n500\n\"\"\"\ndef bank_account():\n    total = 0\n    while True:\n        try:\n            transaction = input()\n            if transaction == '':\n                break\n            else:\n                transaction = transaction.split()\n                if transaction[0] == 'D':\n                    total += int(transaction[1])\n                elif transaction[0] == 'W':\n                    total -= int(transaction[1])\n                else:\n                    print('Invalid transaction')\n        except:\n            print('Invalid transaction')\n    return total\n\n\"\"\"\nWrite a function to compute the hypotenuse of a right angled triangle.\n\"\"\"\ndef hypotenuse(a, b):\n    return (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to compute the distance between two points.\n\"\"\"\ndef distance(x1, y1, x2, y2):\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5\n\n\"\"\"\nWrite a function to compute the area of a circle.\n\"\"\"\ndef circle_area(r):\n    return 3.14*r**2\n\n\"\"\"\nWrite a function to compute the area of a rectangle.\n\"\"\"\ndef rectangle_area(l, w):\n    return l*w\n\n\"\"\"\nWrite a function to compute the area of a triangle.\n\"\"\"\ndef triangle_area(b, h):\n    return 0.5*b*h\n\n\"\"\"\nWrite a function to compute the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n    return 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to compute the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n    return 3.14*r**2*h\n\n\"\"\"\nWrite a function to compute the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n    return 1/3*3.14*r**2*h\n\n\"\"\"\nWrite a function to compute the volume of a pyramid.\n\"\"\"\ndef pyramid_volume(b, h):\n    return 1/3*b*h\n\n\"\"\"\nWrite a function to compute the volume of a cube.\n\"\"\"\ndef cube_volume(s):\n    return s**3\n\n\"\"\"\nWrite a function to compute the volume of a tetrahedron.\n\"\"\"\ndef tetrahedron_volume(s):\n    return 1/6*s**3\n\n\"\"\"\nWrite a function to compute the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n    return 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to compute the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n    return 3.14*r**2*h\n\n\"\"\"\nWrite a function to compute the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n    return 1/3*3.14*r**2*h\n\n\"\"\"\nWrite a function to compute the volume of a pyramid.\n\"\"\"\ndef pyramid_volume(b, h):\n    return 1/3*b*h\n\n\"\"\"\nWrite a function to compute the volume of a cube.\n\"\"\"\ndef cube_volume(s):\n    return s**"}
{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(list):\n    sum = 0\n    for i in list:\n        if i < 0:\n            sum += i\n    return sum\n\nprint(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/002_print_name.py\n\"\"\"\nWrite a program that prints your name on screen.\n\"\"\"\n\nprint(\"\")\n/python/python_basics/003_print_name_and_age.py\n\"\"\"\nWrite a program that prints your name and age on screen.\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\n/python/python_basics/004_print_name_and_age_in_one_line.py\n\"\"\"\nWrite a program that prints your name and age in one line.\n\"\"\"\n\nprint(\"\", \"25\")\n/python/python_basics/005_print_name_and_age_in_one_line_with_separator.py\n\"\"\"\nWrite a program that prints your name and age in one line with a separator.\n\"\"\"\n\nprint(\"\", \"25\", sep=\" \")\n/python/python_basics/006_print_name_and_age_in_one_line_with_separator_and_end.py\n\"\"\"\nWrite a program that prints your name and age in one line with a separator and end.\n\"\"\"\n\nprint(\"\", \"25\", sep=\" \", end=\" \")\n/python/python_basics/007_print_name_and_age_in_one_line_with_separator_and_end_and_new_line.py\n\"\"\"\nWrite a program that prints your name and age in one line with a separator, end and new line.\n\"\"\"\n\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"))\n/python/python_basics/008_print_name_and_age_in_one_line_with_separator_and_end_and_new_line_and_file.py\n\"\"\"\nWrite a program that prints your name and age in one line with a separator, end, new line and file.\n\"\"\"\n\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"))\n/python/python_basics/009_print_name_and_age_in_one_line_with_separator_and_end_and_new_line_and_file_and_flush.py\n\"\"\"\nWrite a program that prints your name and age in one line with a separator, end, new line, file and flush.\n\"\"\"\n\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"), flush=True)\n/python/python_basics/010_print_name_and_age_in_one_line_with_separator_and_end_and_new_line_and_file_and_flush_and_close.py\n\"\"\"\nWrite a program that prints your name and age in one line with a separator, end, new line, file, flush and close.\n\"\"\"\n\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"), flush=True)\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"), flush=True)\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"), flush=True)\nprint(\"\", \"25\", sep=\" \", end=\" \", file=open(\"output.txt\", \"w\"), flush=True)\nprint(\"\", \"25"}
{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\nprint(hexagonal_num(10))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum(int(i) for i in str(n)))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(i for i in range(1, n * 2, 2))\n\nprint(row_sum_odd_numbers(1))\nprint(row_sum_odd_numbers(2))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum(i for i in arr if i > 0)\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes [1, 8, 27, 64].\n\nCan you do this in one line?\n\"\"\"\n\ndef cube_odd(arr):\n    return sum(i ** 3 for i in arr if i % 2!= 0)\n\nprint(cube_odd([1, 2, 3, 4]))\n/python/codewars/7kyu/sum_of_two_lowest_positive_integers.py\n\"\"\"\nCreate a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\n\nFor example, when an array is passed like [19, 5, 42, 2,"}
{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count / len(arr)\n\nprint(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = ''.join(c for c in s if c.isalnum())\n    return s == s[::-1]\n\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))\nprint(is_palindrome(\"race a car\"))\n/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_depth(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if root is None:\n        return 0\n    return max(max_depth(root.left), max_depth(root.right)) + 1\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(max_depth(root))\n/python/leetcode/easy/107_binary_tree_level_order_traversal_2.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self"}
{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Write your code here\n    pass\n\n# Test Cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(11) == False\nassert is_Sum_Of_Powers_Of_Two(12) == True\nassert is_Sum_Of_Powers_Of_Two(13) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\nassert is_Sum_Of_Powers_Of_Two(15) == False\nassert is_Sum_Of_Powers_Of_Two(16) == True\nassert is_Sum_Of_Powers_Of_Two(17) == False\nassert is_Sum_Of_Powers_Of_Two(18) == True\nassert is_Sum_Of_Powers_Of_Two(19) == False\nassert is_Sum_Of_Powers_Of_Two(20) == True\nassert is_Sum_Of_Powers_Of_Two(21) == False\nassert is_Sum_Of_Powers_Of_Two(22) == True\nassert is_Sum_Of_Powers_Of_Two(23) == False\nassert is_Sum_Of_Powers_Of_Two(24) == True\nassert is_Sum_Of_Powers_Of_Two(25) == False\nassert is_Sum_Of_Powers_Of_Two(26) == True\nassert is_Sum_Of_Powers_Of_Two(27) == False\nassert is_Sum_Of_Powers_Of_Two(28) == True\nassert is_Sum_Of_Powers_Of_Two(29) == False\nassert is_Sum_Of_Powers_Of_Two(30) == True\nassert is_Sum_Of_Powers_Of_Two(31) == False\nassert is_Sum_Of_Powers_Of_Two(32) == True\nassert is_Sum_Of_Powers_Of_Two(33) == False\nassert is_Sum_Of_Powers_Of_Two(34) == True\nassert is_Sum_Of_Powers_Of_Two(35) == False\nassert is_Sum_Of_Powers_Of_Two(36) == True\nassert is_Sum_Of_Powers_Of_Two(37) == False\nassert is_Sum_Of_Powers_Of_Two(38) == True\nassert is_Sum_Of_Powers_Of_Two(39) == False\nassert is_Sum_Of_Powers_Of_Two(40) == True\nassert is_Sum_Of_Powers_Of_Two(41) == False\nassert is_Sum_Of_Powers_Of_Two(42) == True\nassert is_Sum_Of_Powers_Of_Two(43) == False\nassert is_Sum_Of_Powers_Of_Two(44) == True\nassert is_Sum_Of_Powers_Of_Two(45) == False\nassert is_Sum_Of_Powers_Of_Two(46) == True\nassert is_Sum_Of_Powers_Of_Two(47) == False\nassert is_Sum_Of_Powers_Of_Two(48) == True\nassert is_Sum_Of_Powers_Of_Two(49) == False\nassert is_Sum_Of_Powers_Of_Two(50) == True\nassert is_Sum_Of_Powers_Of_Two(51) == False\nassert is_Sum_Of_Powers_Of_Two(52) == True\nassert is_Sum_Of_Powers_Of_Two(53) == False\nassert is_Sum_Of_Powers_Of_Two(54) == True\nassert is_Sum_Of_Powers_Of_Two(55) == False\nassert is"}
{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n/python/python_basics/02_variables/01_variables.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))\n/python/python_basics/03_strings/01_strings.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))\n/python/python_basics/04_lists/01_lists.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))\n/python/python_basics/01_numbers/01_numbers.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))\n/python/python_basics/05_dictionaries/01_dictionaries.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))\n/python/python_basics/06_functions/01_functions.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))\n/python/python_basics/07_modules/01_modules.py\n\"\"\"\nWrite a program that prints the following:\n\nHello, my name is.\nI am 25 years old.\nI am 6'2\" tall.\n\"\"\"\n\nimport my_module\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"Hello, my name is {}.\".format(name))\nprint(\"I am {} years old.\".format(age))\nprint(\"I am {}' tall.\".format(height))"}
{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\ndef extract_singly(list_of_lists):\n    \"\"\"\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [3, 4, 5, 7, 1]\n    \"\"\"\n    return [item for sublist in list_of_lists for item in sublist]\n\n\"\"\"\nWrite a function to flatten the list of lists into a single list of tuples.\nassert extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)]) == [(3, 4, 5), (4, 5, 7), (1, 4)]\n\"\"\"\n\ndef extract_tuples(list_of_lists):\n    \"\"\"\n    >>> extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [(3, 4, 5), (4, 5, 7), (1, 4)]\n    \"\"\"\n    return list_of_lists\n\n\"\"\"\nWrite a function to flatten the list of lists into a single list of tuples.\nassert extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)]) == [(3, 4, 5), (4, 5, 7), (1, 4)]\n\"\"\"\n\ndef extract_tuples(list_of_lists):\n    \"\"\"\n    >>> extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [(3, 4, 5), (4, 5, 7), (1, 4)]\n    \"\"\"\n    return list_of_lists\n\n\"\"\"\nWrite a function to flatten the list of lists into a single list of tuples.\nassert extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)]) == [(3, 4, 5), (4, 5, 7), (1, 4)]\n\"\"\"\n\ndef extract_tuples(list_of_lists):\n    \"\"\"\n    >>> extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [(3, 4, 5), (4, 5, 7), (1, 4)]\n    \"\"\"\n    return list_of_lists\n\n\"\"\"\nWrite a function to flatten the list of lists into a single list of tuples.\nassert extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)]) == [(3, 4, 5), (4, 5, 7), (1, 4)]\n\"\"\"\n\ndef extract_tuples(list_of_lists):\n    \"\"\"\n    >>> extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [(3, 4, 5), (4, 5, 7), (1, 4)]\n    \"\"\"\n    return list_of_lists\n\n\"\"\"\nWrite a function to flatten the list of lists into a single list of tuples.\nassert extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)]) == [(3, 4, 5), (4, 5, 7), (1, 4)]\n\"\"\"\n\ndef extract_tuples(list_of_lists):\n    \"\"\"\n    >>> extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [(3, 4, 5), (4, 5, 7), (1, 4)]\n    \"\"\"\n    return list_of_lists\n\n\"\"\"\nWrite a function to flatten the list of lists into a single list of tuples.\nassert extract_tuples([(3, 4, 5), (4, 5, 7), (1, 4)]) == [(3, 4, 5), (4, 5, 7), (1, 4)]\n\"\"\"\n\ndef extract_tuples(list_of_lists):\n    \"\"\"\n    >>> extract_tuples([(3, 4,"}
{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    for i in range(len(lst)):\n        max_index = lst.index(max(lst[i:]))\n        if max_index!= i:\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n            lst[i+1:] = lst[i+1:][::-1]\n    return lst\n\nprint(pancake_sort([15, 79, 25, 38, 69]))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_depth(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if not root:\n        return 0\n    return max(max_depth(root.left), max_depth(root.right)) + 1\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(max_depth(root))\n/python/leetcode/easy/121_best_time_to_buy_and_sell_stock.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\nNote that you cannot sell a stock before you buy one.\n\nExample 1:\n\nInput: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\nExample 2:\n\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\"\"\"\n\ndef max_profit(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    if len(prices) < 2:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit\n\nprint(max_profit([7,1,5,3,6,4]))\n/python/leetcode/easy/10"}
{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nTossing Coins - Write a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n\n\"\"\"\nCreating a Coin Class - Create a class Coin that has two attributes: side and value. The side attribute should be either 'heads' or 'tails'. The value attribute should be either 1 or 0.\n\"\"\"\n\nclass Coin:\n    def __init__(self):\n        self.side = \"heads\"\n        self.value = 1\n\n    def flip(self):\n        if self.value == 1:\n            self.side = \"heads\"\n        else:\n            self.side = \"tails\"\n        self.value = random.randint(0, 1)\n\ncoin = Coin()\ncoin.flip()\nprint(coin.side)\nprint(coin.value)\n/python/python_fundamentals/functions_intermediate1.py\n\"\"\"\nUpdate Values in Dictionary and List - Write a function that takes a dictionary and a key, and returns the value of that key (if the"}
{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])) == 3\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16])) == 4\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20])) == 5\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24])) == 6\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28])) == 7\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32])) == 8\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36])) == 9\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40])) == 10\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, "}
{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n\nprint(max_Abs_Diff((2,1,5,3)))\n/python/leetcode/easy/141_linked_list_cycle.py\n\"\"\"\nGiven a linked list, determine if it has a cycle in it.\n\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\n\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\nFollow up:\nCan you solve it using O(1) (i.e. constant) memory?\n\"\"\"\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow!= fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if root is None:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\nOutput: true\n\nExample 2:\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\nOutput: false\n\nExample 3:\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:"}
{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\ndef find_solution(a, b, n):\n    x = 0\n    y = 0\n    while x < n:\n        if (a * x + b * y) == n:\n            return (x, y)\n        elif (a * x + b * y) > n:\n            y += 1\n        else:\n            x += 1\n    return None\n\nprint(find_solution(2, 3, 7))\n/python/python_practice/python_practice_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\nassert largest([1, 2, 3, 4]) == 4\n\"\"\"\n\ndef largest(list):\n    largest = list[0]\n    for i in list:\n        if i > largest:\n            largest = i\n    return largest\n\nprint(largest([1, 2, 3, 4]))\n/python/python_practice/python_practice_10.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1, 2, 3, 4]) == 1\n\"\"\"\n\ndef smallest(list):\n    smallest = list[0]\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nprint(smallest([1, 2, 3, 4]))\n/python/python_practice/python_practice_12.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\nassert second_largest([1, 2, 3, 4]) == 3\n\"\"\"\n\ndef second_largest(list):\n    largest = list[0]\n    second_largest = list[0]\n    for i in list:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return second_largest\n\nprint(second_largest([1, 2, 3, 4]))\n/python/python_practice/python_practice_11.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest([1, 2, 3, 4]) == 2\n\"\"\"\n\ndef second_smallest(list):\n    smallest = list[0]\n    second_smallest = list[0]\n    for i in list:\n        if i < smallest:\n            second_smallest = smallest\n            smallest = i\n        elif i < second_smallest:\n            second_smallest = i\n    return second_smallest\n\nprint(second_smallest([1, 2, 3, 4]))\n/python/python_practice/python_practice_14.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nassert sum_list([1, 2, 3, 4]) == 10\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1, 2, 3, 4]))\n/python/python_practice/python_practice_13.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the average (mean) of the numbers.\nassert average([1, 2, 3, 4]) == 2.5\n\"\"\"\n\ndef average(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum / len(list)\n\nprint(average([1, 2, 3, 4]))\n/python/python_practice/python_practice_15.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the product of the numbers.\nassert product([1, 2, 3, 4]) == 24\n\"\"\"\n\ndef product(list):\n    product = 1\n    for i in list:\n        product *= i\n    return product\n\nprint(product([1, 2, 3, 4]))\n/python/python_practice/python_practice_16.py"}
{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))\n/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\nSample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output :\n\nTwinkle, twinkle, little star,\n\tHow I wonder what you are! \n\t\tUp above the world so high,   \t\t\n\t\tLike a diamond in the sky. \nTwinkle, twinkle, little star, \n\tHow I wonder what you are\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\nassert sum_three(1, 2, 3) == 6\nassert sum_three(3, 3, 3) == 9\n\"\"\"\n\ndef sum_three(a, b, c):\n    if a == b == c:\n        return 3 * (a + b + c)\n    else:\n        return a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\nassert new_string('Is') == 'Is'\nassert new_string('Array') == 'Is Array'\n\"\"\"\n\ndef new_string(string):\n    if string[:2] == 'Is':\n        return string\n    else:\n        return 'Is'+ string\n\nprint(new_string('Is'))\nprint(new_string('Array'))\n/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\nassert string_copies('abc', 2) == 'abcabc'\nassert string_copies('abc', 3) == 'abcabcabc'\n\"\"\"\n\ndef string_copies(string, n):\n    return string * n\n\nprint(string_copies('abc', 2))\nprint(string_copies('abc', 3))\n/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user.\n\"\"\"\n\nnumber = int(input(\"Enter a number: \"))\n\nif number % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")\n/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to test whether a passed letter is a vowel or not.\n\"\"\"\n\nletter = input(\"Enter a letter: \")\n\nif letter in ['a', 'e', 'i', 'o', 'u']:\n    print(\"The letter is a vowel\")\nelse:\n    print(\"The letter is not a vowel\")\n/python/python_basics/python_basics_"}
{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\ndef sum_series(n):\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum\n\nprint(sum_series(6))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            result.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        return result[::-1]\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    / "}
{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\n\ndef are_equivalent(a, b):\n    return sum(divisors(a)) == sum(divisors(b))\n\ndef divisors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nprint(are_equivalent(36, 57))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    return n if n < 10 else digital_root(sum(map(int, str(n))))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(range(1, n*2+1, 2))\n\nprint(row_sum_odd_numbers(1))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum(filter(lambda x: x > 0, arr))\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n"}
{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == \"a\"[i]:\n            count += 1\n    return count\n\nprint(count_char_position(\"xbcefg\"))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nGiven a positive integer n, return the sum of all odd cubed numbers up to n, inclusive.\n\nExample\n\nsum_odd_cubed(4) # should return 27, because 1^3 + 3^3 + 5^3 = 1 + 27 + 125 = 153\n\"\"\"\n\ndef sum_odd_cubed(n):\n    return sum([i**3 for i in range(1, n+1) if i%2!= 0])\n\nprint(sum_odd_cubed(4))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum([i for i in range(1, n*2, 2)])\n\nprint(row_sum_odd_numbers(2))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 +"}
{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\ndef find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\nprint(find_even_pair([5, 4, 7, 2, 1]))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_same_tree(p, q):\n    \"\"\"\n    :type p: TreeNode\n    :type q: TreeNode\n    :rtype: bool\n    \"\"\"\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n\ndef is_same_tree_iterative(p, q):\n    \"\"\"\n    :type p: TreeNode\n    :type q: TreeNode\n    :rtype: bool\n    \"\"\"\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    stack = [(p, q)]\n    while stack:\n        p, q = stack.pop()\n        if p is None and q is None:\n            continue\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        stack.append((p.left, q.left))\n        stack.append((p.right, q.right))\n    return True\n\ndef is_same_tree_recursive(p, q):\n    \"\"\"\n    :type p: TreeNode\n    :type q: TreeNode\n    :rtype: bool\n    \"\"\"\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree_recursive(p.left, q.left) and is_same_tree_recursive(p.right, q.right)\n\ndef is_same_tree_recursive_2(p, q):\n    \"\"\"\n    :type p: TreeNode\n    :type q: TreeNode\n    :rtype: bool\n    \"\"\"\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n   "}
{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n\ndef next_power_of_2(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()\n\nprint(next_power_of_2(0))\nprint(next_power_of_2(1))\nprint(next_power_of_2(2))\nprint(next_power_of_2(3))\nprint(next_power_of_2(4))\nprint(next_power_of_2(5))\nprint(next_power_of_2(6))\nprint(next_power_of_2(7))\nprint(next_power_of_2(8))\nprint(next_power_of_2(9))\nprint(next_power_of_2(10))\nprint(next_power_of_2(11))\nprint(next_power_of_2(12))\nprint(next_power_of_2(13))\nprint(next_power_of_2(14))\nprint(next_power_of_2(15))\nprint(next_power_of_2(16))\nprint(next_power_of_2(17))\nprint(next_power_of_2(18))\nprint(next_power_of_2(19))\nprint(next_power_of_2(20))\nprint(next_power_of_2(21))\nprint(next_power_of_2(22))\nprint(next_power_of_2(23))\nprint(next_power_of_2(24))\nprint(next_power_of_2(25))\nprint(next_power_of_2(26))\nprint(next_power_of_2(27))\nprint(next_power_of_2(28))\nprint(next_power_of_2(29))\nprint(next_power_of_2(30))\nprint(next_power_of_2(31))\nprint(next_power_of_2(32))\nprint(next_power_of_2(33))\nprint(next_power_of_2(34))\nprint(next_power_of_2(35))\nprint(next_power_of_2(36))\nprint(next_power_of_2(37))\nprint(next_power_of_2(38))\nprint(next_power_of_2(39))\nprint(next_power_of_2(40))\nprint(next_power_of_2(41))\nprint(next_power_of_2(42))\nprint(next_power_of_2(43))\nprint(next_power_of_2(44))\nprint(next_power_of_2(45))\nprint(next_power_of_2(46))\nprint(next_power_of_2(47))\nprint(next_power_of_2(48))\nprint(next_power_of_2(49))\nprint(next_power_of_2(50))\nprint(next_power_of_2(51))\nprint(next_power_of_2(52))\nprint(next_power_of_2(53))\nprint(next_power_of_2(54))\nprint(next_power_of_2(55))\nprint(next_power_of_2(56))\nprint(next_power_of_2(57))\nprint(next_power_of_2(58))\nprint(next_power_of_2(59))\nprint(next_power_of_2(60))\nprint(next_power_of_2(61))\nprint(next_power_of_2(62))\nprint(next_power_of_2(63))\nprint(next_power_of_2(64))\nprint(next_power_of_2(65))\nprint("}
{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\ndef frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count\n\nprint(frequency([1,2,3], 4))\n/python/0000_python_basics/0000_python_basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Print the following string:\n# \"Hello World\"\nprint(\"Hello World\")\n\n# 2. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 3. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 4. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 5. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 6. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 7. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 8. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 9. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 10. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\n\n# 11. Print the following string:\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\n# \"Hello World\"\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")\nprint(\"Hello World\")"}
{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\ndef sum_range_list(list, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += list[i]\n    return sum\n\nprint(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10))\n/python/python_basics/02_variables/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are used to store data\n\n# Variables are declared using the keyword \"var\"\n\n# Variables are case sensitive\n\n# Variables can be declared without a value\n\n# Variables can be declared with a value\n\n# Variables can be declared with a value and type\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned\n\n# Variables can be declared with a value and type and can be reassigned"}
{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\ndef perimeter_pentagon(side):\n    return side * 5\n\nprint(perimeter_pentagon(5))\n/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a function that prints \"Hello World!\"\n\"\"\"\n\ndef hello_world():\n    print(\"Hello World!\")\n\nhello_world()\n/python/python_basics/05_sum_of_numbers.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nassert sum_of_numbers([1, 2, 3, 4]) == 10\n\"\"\"\n\ndef sum_of_numbers(numbers):\n    return sum(numbers)\n\nprint(sum_of_numbers([1, 2, 3, 4]))\n/python/python_basics/03_sum_of_numbers_in_range.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers.\nassert sum_of_numbers_in_range(1, 4) == 10\n\"\"\"\n\ndef sum_of_numbers_in_range(start, end):\n    return sum(range(start, end + 1))\n\nprint(sum_of_numbers_in_range(1, 4))\n/python/python_basics/02_sum_of_numbers_in_range_2.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers.\nassert sum_of_numbers_in_range(4, 1) == 10\n\"\"\"\n\ndef sum_of_numbers_in_range(start, end):\n    return sum(range(start, end + 1))\n\nprint(sum_of_numbers_in_range(4, 1))\n/python/python_basics/04_sum_of_numbers_in_range_3.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers.\nassert sum_of_numbers_in_range(4, 4) == 0\n\"\"\"\n\ndef sum_of_numbers_in_range(start, end):\n    return sum(range(start, end + 1))\n\nprint(sum_of_numbers_in_range(4, 4))\n/python/python_basics/06_sum_of_numbers_in_range_4.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers.\nassert sum_of_numbers_in_range(4, 4) == 0\n\"\"\"\n\ndef sum_of_numbers_in_range(start, end):\n    return sum(range(start, end + 1))\n\nprint(sum_of_numbers_in_range(4, 4))\n/python/python_basics/07_sum_of_numbers_in_range_5.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers.\nassert sum_of_numbers_in_range(4, 4) == 0\n\"\"\"\n\ndef sum_of_numbers_in_range(start, end):\n    return sum(range(start, end + 1))\n\nprint(sum_of_numbers_in_range(4, 4))\n/python/python_basics/08_sum_of_numbers_in_range_6.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers.\nassert sum_of_numbers_in_range(4, 4) == 0\n\"\"\"\n\ndef sum_of_numbers_in_range(start, end):\n    return sum(range(start, end + 1))\n\nprint(sum_of_numbers_in_range(4, 4))\n/python/python_basics/09_sum_of_numbers_in_range_7.py\n\"\"\"\nWrite a function that takes two numbers and returns the sum of all numbers between the two numbers"}
{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nprint(count_occurance(\"letstdlenstdporstd\"))\n\n\"\"\"\nWrite a function to count the number of occurence of the string'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return"}
{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n    return all(type(t[0]) == type(i) for i in t)\n\nprint(check_type((5, 6, 7, 3, 5, 6)))\n/Python/Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python"}
{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 2) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 5) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 6) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 7) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 8) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 9) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 11) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 12) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 13) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 14) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 15) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 16) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 17) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 18) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 19) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 20) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 21) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 22) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 23) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 24"}
{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nprint(count_Set_Bits(2))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if root is None:\n            return []\n        queue = [root]\n        result = []"}
{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return string[::2]\n\nprint(odd_values_string('abcdef'))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a python program to print \"Hello World\"\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/005_string_length.py\n\"\"\"\nWrite a python function to find the length of the string \"refrigerator\"\n\"\"\"\n\ndef string_length(string):\n    return len(string)\n\nprint(string_length(\"refrigerator\"))\n/python/python_basics/003_string_reverse.py\n\"\"\"\nWrite a python function to reverse a string \"refrigerator\"\n\"\"\"\n\ndef string_reverse(string):\n    return string[::-1]\n\nprint(string_reverse(\"refrigerator\"))\n/python/python_basics/002_string_concatenation.py\n\"\"\"\nWrite a python function to concatenate two strings \"refrigerator\" and \"machine\"\n\"\"\"\n\ndef string_concatenation(string1, string2):\n    return string1 + string2\n\nprint(string_concatenation(\"refrigerator\", \"machine\"))\n/python/python_basics/004_string_slice.py\n\"\"\"\nWrite a python function to slice a string \"refrigerator\" from index 2 to 6\n\"\"\"\n\ndef string_slice(string):\n    return string[2:6]\n\nprint(string_slice(\"refrigerator\"))\n"}
{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(10,20,0))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and"}
{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    # Write your code here.\n    i = 0\n    j = 0\n    while i < n and j < len(arr):\n        if arr[j] < 0:\n            arr.insert(i, arr.pop(j))\n            i += 1\n        else:\n            j += 1\n    return arr\n\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\n/python/leetcode/100.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/101.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/python/leetcode/102.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [1"}
{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(string,char):\n    new_string = \"\"\n    for i in string:\n        if i == \" \":\n            new_string += char\n        else:\n            new_string += i\n    return new_string\n\nprint(replace_blank(\"hello people\",'@'))/python_practice/python_practice_2019/python_practice_2019_03/python_practice_2019_03_15/python_practice_2019_03_15_01.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the sum of the numbers.\nassert sum_list([1,2,3,4,5])==15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))/python_practice/python_practice_2019/python_practice_2019_03/python_practice_2019_03_15/python_practice_2019_03_15_02.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the average of the numbers.\nassert average([1,2,3,4,5])==3\n\"\"\"\n\ndef average(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum/len(list)\n\nprint(average([1,2,3,4,5]))/python_practice/python_practice_2019/python_practice_2019_03/python_practice_2019_03_15/python_practice_2019_03_15_03.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the largest number in the list.\nassert largest([1,2,3,4,5])==5\n\"\"\"\n\ndef largest(list):\n    largest = list[0]\n    for i in list:\n        if i > largest:\n            largest = i\n    return largest\n\nprint(largest([1,2,3,4,5]))/python_practice/python_practice_2019/python_practice_2019_03/python_practice_2019_03_15/python_practice_2019_03_15_04.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\n\ndef smallest(list):\n    smallest = list[0]\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nprint(smallest([1,2,3,4,5]))/python_practice/python_practice_2019/python_practice_2019_03/python_practice_2019_03_15/python_practice_2019_03_15_05.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns a new list with the numbers in reverse order.\nassert reverse([1,2,3,4,5])==[5,4,3,2,1]\n\"\"\"\n\ndef reverse(list):\n    new_list = []\n    for i in range(len(list)-1,-1,-1):\n        new_list.append(list[i])\n    return new_list\n\nprint(reverse([1,2,3,4,5]))/python_practice/python_practice_2019/python_practice_2019_03/python_practice_2019_03_15/python_practice_2019_03_15_06.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns a new list with the numbers in reverse order.\nassert reverse([1,2,3,4"}
{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\ndef larg_nnum(l,n):\n    l.sort()\n    return l[-n:]\n\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the largest number in the list.\nassert largest([10,20,50,70,90,20,50,40,60,80,100])==100\n\"\"\"\n\ndef largest(l):\n    return max(l)\n\nprint(largest([10,20,50,70,90,20,50,40,60,80,100]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the smallest number in the list.\nassert smallest([10,20,50,70,90,20,50,40,60,80,100])==10\n\"\"\"\n\ndef smallest(l):\n    return min(l)\n\nprint(smallest([10,20,50,70,90,20,50,40,60,80,100]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the second largest number in the list.\nassert second_largest([10,20,50,70,90,20,50,40,60,80,100])==90\n\"\"\"\n\ndef second_largest(l):\n    l.sort()\n    return l[-2]\n\nprint(second_largest([10,20,50,70,90,20,50,40,60,80,100]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the second smallest number in the list.\nassert second_smallest([10,20,50,70,90,20,50,40,60,80,100])==20\n\"\"\"\n\ndef second_smallest(l):\n    l.sort()\n    return l[1]\n\nprint(second_smallest([10,20,50,70,90,20,50,40,60,80,100]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the second smallest number in the list.\nassert second_smallest([10,20,50,70,90,20,50,40,60,80,100])==20\n\"\"\"\n\ndef second_smallest(l):\n    l.sort()\n    return l[1]\n\nprint(second_smallest([10,20,50,70,90,20,50,40,60,80,100]))\n"}
{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\ndef lateralsuface_cylinder(r,h):\n    return 2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\nassert math.isclose(volume_cylinder(10,5), 1570.7963267948966, rel_tol=0.001)\n\"\"\"\n\ndef volume_cylinder(r,h):\n    return math.pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\nassert math.isclose(surface_cone(10,5), 235.6194490192345, rel_tol=0.001)\n\"\"\"\n\ndef surface_cone(r,h):\n    return math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\nassert math.isclose(lateralsuface_cone(10,5), 157.07963267948966, rel_tol=0.001)\n\"\"\"\n\ndef lateralsuface_cone(r,h):\n    return math.pi*r*math.sqrt(h**2+r**2)\n\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(10,5), 88.53981633974483, rel_tol=0.001)\n\"\"\"\n\ndef volume_cone(r,h):\n    return math.pi*r**2*h/3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surface_sphere(10), 1256.6370614359172, rel_tol=0.001)\n\"\"\"\n\ndef surface_sphere(r):\n    return 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\nassert math.isclose(lateralsuface_sphere(10), 484.1315912425771, rel_tol=0.001)\n\"\"\"\n\ndef lateralsuface_sphere(r):\n    return 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\ndef volume_sphere(r):\n    return 4*math.pi*r**3/3\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\nassert math.isclose(surface_hemisphere(10), 785.3981633974483, rel_tol=0.001)\n\"\"\"\n\ndef surface_hemisphere(r):\n    return 3*math.pi*r**2\n\n\"\"\"\nWrite a function to find the lateral surface area of a hemisphere.\nassert math.isclose(lateralsuface_hemisphere(10), 392.69908169872414, rel_tol=0.001)\n\"\"\"\n\ndef lateralsuface_hemisphere(r):\n    return 2*math.pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\nassert math.isclose(volume_hemisphere(10), 2680.413786007867, rel_tol=0.001)\n\"\"\"\n\ndef volume_hemisphere(r):\n    return math.pi*r**3/"}
{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n\nprint(volume_cube(3))\n\n\"\"\"\nWrite a function to find the volume of a sphere given its radius.\nassert volume_sphere(3)==113.097\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3)*3.14*radius**3\n\nprint(volume_sphere(3))\n\n\"\"\"\nWrite a function to find the volume of a cylinder given its radius and height.\nassert volume_cylinder(3, 5)==141.371\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14*radius**2*height\n\nprint(volume_cylinder(3, 5))\n\n\"\"\"\nWrite a function to find the volume of a cone given its radius and height.\nassert volume_cone(3, 5)==47.12389\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 3.14*radius**2*height/3\n\nprint(volume_cone(3, 5))\n\n\"\"\"\nWrite a function to find the volume of a pyramid given its base and height.\nassert volume_pyramid(3, 5)==7.5\n\"\"\"\n\ndef volume_pyramid(base, height):\n    return base*height/3\n\nprint(volume_pyramid(3, 5))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism given its length, width, and height.\nassert volume_rectangular_prism(3, 5, 7)==105\n\"\"\"\n\ndef volume_rectangular_prism(length, width, height):\n    return length*width*height\n\nprint(volume_rectangular_prism(3, 5, 7))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism given its base, height, and length.\nassert volume_triangular_prism(3, 5, 7)==105\n\"\"\"\n\ndef volume_triangular_prism(base, height, length):\n    return base*height*length/2\n\nprint(volume_triangular_prism(3, 5, 7))\n\n\"\"\"\nWrite a function to find the volume of a sphere given its radius.\nassert volume_sphere(3)==113.097\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3)*3.14*radius**3\n\nprint(volume_sphere(3))\n\n\"\"\"\nWrite a function to find the volume of a cylinder given its radius and height.\nassert volume_cylinder(3, 5)==141.371\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14*radius**2*height\n\nprint(volume_cylinder(3, 5))\n\n\"\"\"\nWrite a function to find the volume of a cone given its radius and height.\nassert volume_cone(3, 5)==47.12389\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 3.14*radius**2*height/3\n\nprint(volume_cone(3, 5))\n\n\"\"\"\nWrite a function to find the volume of a pyramid given its base and height.\nassert volume_pyramid(3, 5)==7.5\n\"\"\"\n\ndef volume_pyramid(base, height):\n    return base*height/3\n\nprint(volume_pyramid(3, 5))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism given its length, width, and height.\nassert volume_rectangular_prism(3, 5, 7)==105\n\"\"\"\n\ndef volume_rectangular_prism(length, width, height):\n    return length*width*height\n\nprint(volume_rectangular_prism(3, 5, 7))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism given its base, height, and length.\nassert volume"}
{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    return num | 0b10101010101010101010101010101010\n\nprint(even_bit_set_number(10))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n\nprint(Solution().singleNumber([2,2,1]))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\np = TreeNode(1)\np.left = TreeNode(2)\np.right = TreeNode(3)\n\nq = TreeNode(1)\nq.left = TreeNode(2)\nq.right = TreeNode(3)\n\nprint(Solution().isSameTree(p, q))\n/python/leetcode/easy/121_best_time_to_buy_and_sell_stock.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\nNote that you cannot sell a stock before you buy one.\n\nExample 1:\n\nInput: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\nExample 2:\n\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\"\"\"\n\nclass Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices:"}
{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(list_of_tuples):\n    # your code here\n    return {}\n\n# test your code\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1)]) == {(1, 3): 3, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3)]) == {(1, 3): 4, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3)]) == {(1, 3): 5, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3), (1, 3)]) == {(1, 3): 6, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3), (1, 3), (1, 3)]) == {(1, 3): 7, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3)]) == {(1, 3): 8, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3)]) == {(1, 3): 9, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3)]) == {(1, 3): 10, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3)]) == {(1"}
{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n\nprint(number_of_substrings(\"abc\"))\n/python/leetcode/easy/1365_how_many_numbers_are_smaller_than_the_current_number.py\n\"\"\"\nGiven the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j!= i and nums[j] < nums[i].\n\nReturn the answer in an array.\n\nExample 1:\n\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation:\nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).\nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1).\nFor nums[3]=2 there exist one smaller number than it (1).\nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\nExample 2:\n\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n\nExample 3:\n\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n\nConstraints:\n\n2 <= nums.length <= 500\n0 <= nums[i] <= 100\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        count = [0] * 101\n        for num in nums:\n            count[num] += 1\n        for i in range(1, 101):\n            count[i] += count[i-1]\n        return [count[num] for num in nums]\n\nprint(Solution().smallerNumbersThanCurrent([8,1,2,2,3]))\nprint(Solution().smallerNumbersThanCurrent([6,5,4,8]))\nprint(Solution().smallerNumbersThanCurrent([7,7,7,7]))\n/python/leetcode/easy/1295_find_numbers_with_even_number_of_digits.py\n\"\"\"\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\nExample 1:\n\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\n\nExample 2:\n\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation:\nOnly 1771 contains an even number of digits.\n\nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 10^5\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for num in nums:\n            if len(str(num)) % 2 == 0:\n                count += 1\n        return count\n\nprint(Solution().findNumbers([12,345,2,6,7896]))\nprint(Solution().findNumbers([555,901,482,1771]))\n/python/leetcode/"}
{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n\nprint(get_total_number_of_sequences(10, 4))\n/recursion/get_permutations.py\n\"\"\"\nWrite a function that takes in a string of unique characters and returns a list of all permutations of those characters.\nassert get_permutations(\"a\") == [\"a\"]\nassert get_permutations(\"ab\") == [\"ab\", \"ba\"]\nassert get_permutations(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n\"\"\"\n\ndef get_permutations(string):\n    if len(string) == 1:\n        return [string]\n    else:\n        permutations = []\n        for i in range(len(string)):\n            first_char = string[i]\n            remaining_chars = string[:i] + string[i+1:]\n            for permutation in get_permutations(remaining_chars):\n                permutations.append(first_char + permutation)\n        return permutations\n\nprint(get_permutations(\"abc\"))\n/recursion/get_powerset.py\n\"\"\"\nWrite a function that takes in a set of unique integers and returns its powerset.\nassert get_powerset([1, 2]) == [[], [1], [2], [1, 2]]\nassert get_powerset([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n\"\"\"\n\ndef get_powerset(array):\n    if len(array) == 0:\n        return [[]]\n    else:\n        powerset = []\n        for i in range(len(array)):\n            first_element = array[i]\n            remaining_elements = array[:i] + array[i+1:]\n            for subset in get_powerset(remaining_elements):\n                powerset.append([first_element] + subset)\n        return powerset\n\nprint(get_powerset([1, 2, 3]))\n/recursion/get_subsets.py\n\"\"\"\nWrite a function that takes in a set of unique integers and returns its powerset.\nassert get_subsets([1, 2]) == [[], [1], [2], [1, 2]]\nassert get_subsets([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n\"\"\"\n\ndef get_subsets(array):\n    if len(array) == 0:\n        return [[]]\n    else:\n        subsets = []\n        for i in range(len(array)):\n            first_element = array[i]\n            remaining_elements = array[:i] + array[i+1:]\n            for subset in get_subsets(remaining_elements):\n                subsets.append([first_element] + subset)\n        return subsets\n\nprint(get_subsets([1, 2, 3]))\n/recursion/get_all_subsets.py\n\"\"\"\nWrite a function that takes in a set of unique integers and returns its powerset.\nassert get_all_subsets([1, 2]) == [[], [1], [2], [1, 2]]\nassert get_all_subsets([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n\"\"\"\n\ndef get_all_subsets(array):\n    if len(array) == 0:\n        return [[]]\n    else:\n        subsets = []\n        for i in range(len(array)):\n           "}
{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    list1[-len(list2):] = list2\n    return list1\n\nprint(replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nTossing Coins - Write a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n\n\"\"\"\nCreating a Coin Class - Create a class Coin that has a side attribute. Create a function flipping a coin 100 times and return the number of heads and tails.\n\"\"\"\n\nimport random\n\nclass Coin:\n    def __init__(self):\n        self.side = \"\"\n\n    def flip(self):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            self.side = \"heads\"\n        else:\n            self.side = \"tails\"\n        return self.side\n\ncoin = Coin()\nheads = 0\ntails = 0\nfor i in range(1, 101):\n    coin.flip()\n    if coin.side == \"heads\":\n        heads += 1\n    else:\n        tails += 1\nprint(\"Heads: \" + str(heads))\nprint(\"Tails: \" + str(tails))\n/python/python_fundamentals/functions_intermediate1.py\n\"\"\"\nCountdown - Create a function that accepts a number as an input. Return a"}
{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count=0\n    for i in string:\n        count+=1\n    return count\nprint(count_charac(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of words in a string.\nassert count_words(\"python programming\")==2\n\"\"\"\ndef count_words(string):\n    count=0\n    for i in string.split():\n        count+=1\n    return count\nprint(count_words(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of digits in a string.\nassert count_digits(\"python programming\")==0\n\"\"\"\ndef count_digits(string):\n    count=0\n    for i in string:\n        if i.isdigit():\n            count+=1\n    return count\nprint(count_digits(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of alphabets in a string.\nassert count_alphabets(\"python programming\")==12\n\"\"\"\ndef count_alphabets(string):\n    count=0\n    for i in string:\n        if i.isalpha():\n            count+=1\n    return count\nprint(count_alphabets(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of alphabets and digits in a string.\nassert count_alphabets_digits(\"python programming\")==12\n\"\"\"\ndef count_alphabets_digits(string):\n    count=0\n    for i in string:\n        if i.isalnum():\n            count+=1\n    return count\nprint(count_alphabets_digits(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of vowels in a string.\nassert count_vowels(\"python programming\")==5\n\"\"\"\ndef count_vowels(string):\n    count=0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\nprint(count_vowels(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of vowels and consonants in a string.\nassert count_vowels_consonants(\"python programming\")==10\n\"\"\"\ndef count_vowels_consonants(string):\n    count=0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\nprint(count_vowels_consonants(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of vowels and consonants in a string.\nassert count_vowels_consonants(\"python programming\")==10\n\"\"\"\ndef count_vowels_consonants(string):\n    count=0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\nprint(count_vowels_consonants(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of vowels and consonants in a string.\nassert count_vowels_consonants(\"python programming\")==10\n\"\"\"\ndef count_vowels_consonants(string):\n    count=0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\nprint(count_vowels_consonants(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of vowels and consonants in a string.\nassert count_vowels_consonants(\"python programming\")==10\n\"\"\"\ndef count_vowels_consonants(string):\n    count=0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\nprint(count_vowels_consonants(\"python programming\"))\n\n\"\"\"\nWrite a function to count the total number of vowels and consonants in a string.\nassert count_vowels_consonants(\"python programming\")==10\n\"\"\"\ndef count_vowels_consonants(string):\n    count=0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\nprint(count_vowels_conson"}
{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return -1\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 4\n    if num == 3:\n        return 9\n    if num == 4:\n        return 16\n    if num == 5:\n        return 25\n    if num == 6:\n        return 36\n    if num == 7:\n        return 49\n    if num == 8:\n        return 64\n    if num == 9:\n        return 81\n    if num == 10:\n        return 100\n    if num == 11:\n        return 121\n    if num == 12:\n        return 144\n    if num == 13:\n        return 169\n    if num == 14:\n        return 196\n    if num == 15:\n        return 225\n    if num == 16:\n        return 256\n    if num == 17:\n        return 289\n    if num == 18:\n        return 324\n    if num == 19:\n        return 361\n    if num == 20:\n        return 400\n    if num == 21:\n        return 441\n    if num == 22:\n        return 484\n    if num == 23:\n        return 529\n    if num == 24:\n        return 576\n    if num == 25:\n        return 625\n    if num == 26:\n        return 676\n    if num == 27:\n        return 729\n    if num == 28:\n        return 784\n    if num == 29:\n        return 841\n    if num == 30:\n        return 900\n    if num == 31:\n        return 961\n    if num == 32:\n        return 1024\n    if num == 33:\n        return 1089\n    if num == 34:\n        return 1156\n    if num == 35:\n        return 1225\n    if num == 36:\n        return 1296\n    if num == 37:\n        return 1369\n    if num == 38:\n        return 1444\n    if num == 39:\n        return 1521\n    if num == 40:\n        return 1600\n    if num == 41:\n        return 1681\n    if num == 42:\n        return 1764\n    if num == 43:\n        return 1849\n    if num == 44:\n        return 1936\n    if num == 45:\n        return 2025\n    if num == 46:\n        return 2116\n    if num == 47:\n        return 2209\n    if num == 48:\n        return 2304\n    if num == 49:\n        return 2401\n    if num == 50:\n        return 2500\n    if num == 51:\n        return 2601\n    if num == 52:\n        return 2704\n    if num == 53:\n        return 2809\n    if num == 54:\n        return 2916\n    if num == 55:\n        return 3025\n    if num == 56:\n        return 3136\n    if num == 57:\n        return 3249\n    if num == 58:\n        return 3364\n    if num == 59:\n        return 3481\n    if num == 60:\n        return 3600\n    if num == 61:\n        return 3721\n    if num == 62:\n        return 3844\n    if num == 63:\n        return 3969\n    if num == "}
{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\ndef max_sum(arr):\n    \"\"\"\n    :param arr: list\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/tests/test_001_050/test_010_019/test_010_011.py\nfrom problems.problem_010_019.problem_010_011 import *\nfrom tests.test_001_050.test_010_019.test_010_019 import *\n\n\nclass TestProblem010011(TestProblem010019):\n    def test_010_011(self):\n        self.assertEqual(1, 1)\n/problems/problem_001_050/problem_001_009/problem_001_003.py\n\"\"\"\nWrite a function that takes a string and returns the number of vowels in the string.\nassert count_vowels(\"hello\") == 2\n\"\"\"\n\ndef count_vowels(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_008.py\n\"\"\"\nWrite a function that takes a string and returns the number of words in the string.\nassert count_words(\"hello world\") == 2\n\"\"\"\n\ndef count_words(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_006.py\n\"\"\"\nWrite a function that takes a string and returns the number of characters in the string.\nassert count_characters(\"hello\") == 5\n\"\"\"\n\ndef count_characters(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_004.py\n\"\"\"\nWrite a function that takes a string and returns the number of spaces in the string.\nassert count_spaces(\"hello world\") == 1\n\"\"\"\n\ndef count_spaces(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_005.py\n\"\"\"\nWrite a function that takes a string and returns the number of digits in the string.\nassert count_digits(\"hello123\") == 3\n\"\"\"\n\ndef count_digits(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_002.py\n\"\"\"\nWrite a function that takes a string and returns the number of letters in the string.\nassert count_letters(\"hello\") == 5\n\"\"\"\n\ndef count_letters(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_001.py\n\"\"\"\nWrite a function that takes a string and returns the number of newlines in the string.\nassert count_newlines(\"hello\\nworld\") == 1\n\"\"\"\n\ndef count_newlines(string):\n    \"\"\"\n    :param string: str\n    :return: int\n    \"\"\"\n    # TODO: Implement me\n    pass\n/problems/problem_001_050/problem_001_009/problem_001_007."}
{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\ndef lps(s):\n    \"\"\"\n    :param s: string\n    :return: int\n    \"\"\"\n    pass\n/src/test/java/com/github/hcsp/algorithm/Solution.java\npackage com.github.hcsp.algorithm;\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(sort(new int[] {1, 5, 6, 3, 2, 3, 6, 4, 1})));\n    }\n\n    /**\n     * \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u6309\u987a\u5e8f\u6253\u5370\u51fa\u5143\u7d20\u3002\n     *\n     * <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a[1, 5, 6, 3, 2, 3, 6, 4, 1]\uff0c\u6253\u5370\u51fa[1, 2, 3, 4, 5, 6, 6, 3, 1]\u3002\n     *\n     * @param arr \u7ed9\u5b9a\u7684\u6570\u7ec4\n     * @return \u6253\u5370\u7ed3\u679c\n     */\n    public static int[] sort(int[] arr) {\n        // \u8bf7\u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\n        return null;\n    }\n}\n/src/main/java/com/github/hcsp/algorithm/Solution.java\npackage com.github.hcsp.algorithm;\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(sort(new int[] {1, 5, 6, 3, 2, 3, 6, 4, 1})));\n    }\n\n    /**\n     * \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u6309\u987a\u5e8f\u6253\u5370\u51fa\u5143\u7d20\u3002\n     *\n     * <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a[1, 5, 6, 3, 2, 3, 6, 4, 1]\uff0c\u6253\u5370\u51fa[1, 2, 3, 4, 5, 6, 6, 3, 1]\u3002\n     *\n     * @param arr \u7ed9\u5b9a\u7684\u6570\u7ec4\n     * @return \u6253\u5370\u7ed3\u679c\n     */\n    public static int[] sort(int[] arr) {\n        // \u8bf7\u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\n        return null;\n    }\n}\n/src/main/java/com/github/hcsp/algorithm/Solution.java\npackage com.github.hcsp.algorithm;\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(sort(new int[] {1, 5, 6, 3, 2, 3, 6, 4, 1})));\n    }\n\n    /**\n     * \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u6309\u987a\u5e8f\u6253\u5370\u51fa\u5143\u7d20\u3002\n     *\n     * <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a[1, 5, 6, 3, 2, 3, 6, 4, 1]\uff0c\u6253\u5370\u51fa[1, 2, 3, 4, 5, 6, 6, 3, 1]\u3002\n     *\n     * @param arr \u7ed9\u5b9a\u7684\u6570\u7ec4\n     * @return \u6253\u5370\u7ed3\u679c\n     */\n    public static int[] sort(int[] arr) {\n        // \u8bf7\u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\n        return null;\n    }\n}\n/src/main/java/com/github/hcsp/algorithm/Solution.java\npackage com.github.hcsp.algorithm;\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(sort(new int[] {1, 5, 6, 3, 2, 3, 6, 4, 1})));\n    }\n\n    /**\n     * \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u6309\u987a\u5e8f\u6253\u5370\u51fa\u5143\u7d20\u3002\n     *\n     * <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a[1, 5, 6, 3, 2, 3, 6, 4, 1]\uff0c\u6253\u5370\u51fa[1, 2, 3, 4, 5, 6, 6, 3, 1]\u3002\n     *\n     * @param arr \u7ed9\u5b9a\u7684\u6570\u7ec4"}
{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a,b):\n    return list(set(a).intersection(set(b)))\n\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]))\n/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\n\ndef largest_number(numbers):\n    return max(numbers)\n\nprint(largest_number([1,2,3,4,5,6,7,8,9,10]))\n/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\n\ndef smallest_number(numbers):\n    return min(numbers)\n\nprint(smallest_number([1,2,3,4,5,6,7,8,9,10]))\n/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\n\ndef second_largest_number(numbers):\n    return sorted(numbers)[-2]\n\nprint(second_largest_number([1,2,3,4,5,6,7,8,9,10]))\n/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n\"\"\"\n\ndef second_smallest_number(numbers):\n    return sorted(numbers)[1]\n\nprint(second_smallest_number([1,2,3,4,5,6,7,8,9,10]))\n/python/python_basics/python_basics_5.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n\"\"\"\n\ndef second_smallest_number(numbers):\n    return sorted(numbers)[1]\n\nprint(second_smallest_number([1,2,3,4,5,6,7,8,9,10]))\n/python/python_basics/python_basics_6.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n\"\"\"\n\ndef second_smallest_number(numbers):\n    return sorted(numbers)[1]\n\nprint(second_smallest_number([1,2,3,4,5,6,7,8,9,10]))\n"}
{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 2\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),5) == 2\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),2) == 2\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),15) == 1\n\n\"\"\"\nWrite a python function that takes in a tuple and returns a new tuple with the elements in reverse order.\nassert reverse_tuple((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)) == (2, 8, 5, 10, 8, 15, 10, 8, 5, 8, 10, 5)\n\"\"\"\n\ndef reverse_tuple(tup):\n    return tup[::-1]\n\nassert reverse_tuple((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)) == (2, 8, 5, 10, 8, 15, 10, 8, 5, 8, 10, 5)\n\n\"\"\"\nWrite a python function that takes in a tuple and returns a new tuple with the elements in reverse order.\nassert reverse_tuple((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)) == (2, 8, 5, 10, 8, 15, 10, 8, 5, 8, 10, 5)\n\"\"\"\n\ndef reverse_tuple(tup):\n    return tup[::-1]\n\nassert reverse_tuple((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)) == (2, 8, 5, 10, 8, 15, 10, 8, 5, 8, 10, 5)\n\n\"\"\"\nWrite a python function that takes in a tuple and returns a new tuple with the elements in reverse order.\nassert reverse_tuple((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)) == (2, 8, 5, 10, 8, 15, 10, 8, 5, 8, 10, 5)\n\"\"\"\n\ndef reverse_tuple(tup):\n    return tup[::-1]\n\nassert reverse_tuple((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, "}
{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'],'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(500001):\n    if i % 2!= 0:\n        sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list. Each element in the list should be a string of \"Heads\" or \"Tails\" randomly, based on the input parameter n.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    list = []\n    for i in range(n):\n        list.append(toss_coin())\n    return list\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_win() that returns a string of \"Heads\" or \"Tails\", depending on the toss. If it's \"Heads\", return \"Heads\", otherwise return \"Tails\".\n\"\"\"\n\ndef toss_coin_to_win():\n    if toss_coin() == \"Heads\":\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin_to_win())\n\n\"\"\"\nCreate a function called toss_multiple_coins_to_win(n) that returns a string of \"Heads\" or \"Tails\", depending on the toss. If it's \"Heads\", return \"Heads\", otherwise return \"Tails\".\n\"\"\"\n\ndef toss_multiple_coins_to_win(n):\n    list = []\n    for i in range(n):\n        list.append(toss_coin"}
{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)\n\nprint(convert(1))\nprint(convert(1+1j))\nprint(convert(1+2j))\nprint(convert(1+3j))\nprint(convert(1+4j))\nprint(convert(1+5j))\nprint(convert(1+6j))\nprint(convert(1+7j))\nprint(convert(1+8j))\nprint(convert(1+9j))\nprint(convert(1+10j))\nprint(convert(1+11j))\nprint(convert(1+12j))\nprint(convert(1+13j))\nprint(convert(1+14j))\nprint(convert(1+15j))\nprint(convert(1+16j))\nprint(convert(1+17j))\nprint(convert(1+18j))\nprint(convert(1+19j))\nprint(convert(1+20j))\nprint(convert(1+21j))\nprint(convert(1+22j))\nprint(convert(1+23j))\nprint(convert(1+24j))\nprint(convert(1+25j))\nprint(convert(1+26j))\nprint(convert(1+27j))\nprint(convert(1+28j))\nprint(convert(1+29j))\nprint(convert(1+30j))\nprint(convert(1+31j))\nprint(convert(1+32j))\nprint(convert(1+33j))\nprint(convert(1+34j))\nprint(convert(1+35j))\nprint(convert(1+36j))\nprint(convert(1+37j))\nprint(convert(1+38j))\nprint(convert(1+39j))\nprint(convert(1+40j))\nprint(convert(1+41j))\nprint(convert(1+42j))\nprint(convert(1+43j))\nprint(convert(1+44j))\nprint(convert(1+45j))\nprint(convert(1+46j))\nprint(convert(1+47j))\nprint(convert(1+48j))\nprint(convert(1+49j))\nprint(convert(1+50j))\nprint(convert(1+51j))\nprint(convert(1+52j))\nprint(convert(1+53j))\nprint(convert(1+54j))\nprint(convert(1+55j))\nprint(convert(1+56j))\nprint(convert(1+57j))\nprint(convert(1+58j))\nprint(convert(1+59j))\nprint(convert(1+60j))\nprint(convert(1+61j))\nprint(convert(1+62j))\nprint(convert(1+63j))\nprint(convert(1+64j))\nprint(convert(1+65j))\nprint(convert(1+66j))\nprint(convert(1+67j))\nprint(convert(1+68j))\nprint(convert(1+69j))\nprint(convert(1+70j))\nprint(convert(1+71j))\nprint(convert(1+72j))\nprint(convert(1+73j))\nprint(convert(1+74j))\nprint(convert(1+75j))\nprint(convert(1+76j))\nprint(convert(1+77j))\nprint(convert(1+78j))\nprint(convert(1+79j))\nprint(convert(1+80j))\nprint(convert(1+81j))\nprint(convert(1+82j))\nprint(convert(1+83j))\nprint(convert(1+84j))"}
{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n\n\"\"\"\nWrite a python function that returns the number of integer elements"}
{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(list,n):\n    return list(itertools.combinations_with_replacement(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(list,n):\n    return list(itertools.combinations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef permutations_colors(list,n):\n    return list(itertools.permutations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all permutations (without repetition) of the elements of the list and returns a list with a tuple for each permutation.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef permutations_colors(list,n):\n    return list(itertools.permutations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(list,n):\n    return list(itertools.combinations_with_replacement(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(list,n):\n    return list(itertools.combinations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef permutations_colors(list,n):\n    return list(itertools.permutations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all permutations (without repetition) of the elements of the list and returns a list with a tuple for each permutation.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef permutations_colors(list,n):\n    return list(itertools.permutations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(list,n):\n    return list(itertools.combinations_with_replacement(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(list,n):\n    return list(itertools.combinations(list,n))\n\n\"\"\"\nWrite a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\nassert combinations"}
{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    if num < 2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= num:\n        for y in range(3,x,2):\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    print(primes)\n    return len(primes)\n\nprint(count_Primes_nums(100))\n/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python"}
{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    return (b,a)\n\nprint(swap_numbers(10,20))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],s[-1])\n\nprint(first_last(\"hello\"))\n\n\"\"\"\nWrite a function that takes in a string and returns a tuple with the first character and the last character.\nassert first_last(\"hello\")==('h','o')\n\"\"\"\n\ndef first_last(s):\n    return (s[0],"}
{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    # TODO: Write your code here\n    return tuple1\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/001_python_basics/001_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/002_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/003_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/004_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/005_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/006_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/007_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/008_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print_pattern()\n/python/001_python_basics/009_python_basics.py\n\"\"\"\nWrite a function to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\n\"\"\"\n\ndef print_pattern():\n    # TODO: Write your code here\n    pass\n\n# Do not change anything below this line\n\nif __name__ == '__main__':\n    print"}
{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(4)\n    11\n    >>> newman_prime(5)\n    17\n    >>> newman_prime(6)\n    29\n    >>> newman_prime(7)\n    41\n    >>> newman_prime(8)\n    59\n    >>> newman_prime(9)\n    71\n    >>> newman_prime(10)\n    97\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return newman_prime(n-1) + 2 * newman_prime(n-2) - 1\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/hw03/hw03.py\n\"\"\"\nHomework 3\n\"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef nth_prime(n):\n    \"\"\"\n    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n    11\n    >>> nth_prime(6)\n    13\n    >>> nth_prime(7)\n    17\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(9)\n    23\n    >>> nth_prime(10)\n    29\n    \"\"\"\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef prime_factors(n):\n    \"\"\"\n    >>> prime_factors(10)\n    [2, 5]\n    >>> prime_factors(14)\n    [2, 7]\n    >>> prime_factors(15)\n    [3, 5]\n    >>> prime_factors(21)\n    [3, 7]\n    >>> prime_factors(25)\n    [5, 5]\n    >>> prime_factors(27)\n    [3, 3, 3]\n    >>> prime_factors(100)\n    [2, 2, 5, 5]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_palindrome(n):\n    \"\"\"\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(1001)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef nth_palindromic_prime(n):\n    \"\"\"\n    >>> nth_palindromic_prime(1)\n    2\n    >>> nth_palindromic_prime(2)\n    11\n    >>> nth_palindromic_prime(3)\n    101\n    >>> nth_palindromic_prime(4)\n    131\n    >>> nth_palindromic_prime(5)\n    1001\n    >>> nth_palindromic_prime(6)\n    10301\n    >>> nth_palindromic_prime(7)\n    100001\n    >>> nth_palindromic_prime(8)\n    1030301\n    >>> nth_palindromic_prime(9)\n    100000001\n    >>> nth_palindromic_prime(10)\n    10030"}
{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple(x/y for x, y in zip(tuple1, tuple2))\n\nprint(division_elements((10, 4, 6, 9),(5, 2, 3, 3)))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the largest number in the list.\nassert largest_number([1, 2, 3, 4, 5]) == 5\n\"\"\"\n\ndef largest_number(list):\n    return max(list)\n\nprint(largest_number([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the smallest number in the list.\nassert smallest_number([1, 2, 3, 4, 5]) == 1\n\"\"\"\n\ndef smallest_number(list):\n    return min(list)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the average of the numbers.\nassert average([1, 2, 3, 4, 5]) == 3\n\"\"\"\n\ndef average(list):\n    return sum(list)/len(list)\n\nprint(average([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the sum of all the numbers.\nassert sum_numbers([1, 2, 3, 4, 5]) == 15\n\"\"\"\n\ndef sum_numbers(list):\n    return sum(list)\n\nprint(sum_numbers([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns the sum of all the even numbers in the list.\nassert sum_even_numbers([1, 2, 3, 4, 5]) == 6\n\"\"\"\n\ndef sum_even_numbers(list):\n    return sum(x for x in list if x % 2 == 0)\n\nprint(sum_even_numbers([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns a new list containing only the even numbers.\nassert even_numbers([1, 2, 3, 4, 5]) == [2, 4]\n\"\"\"\n\ndef even_numbers(list):\n    return [x for x in list if x % 2 == 0]\n\nprint(even_numbers([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns a new list containing only the odd numbers.\nassert odd_numbers([1, 2, 3, 4, 5]) == [1, 3, 5]\n\"\"\"\n\ndef odd_numbers(list):\n    return [x for x in list if x % 2!= 0]\n\nprint(odd_numbers([1, 2, 3, 4, 5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_8.py\n\"\"\"\nWrite a function that takes in a list of numbers and returns a new list containing only the positive numbers.\nassert"}
{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/004_print_numbers.py\n\"\"\"\nWrite a program that prints the numbers 1 to 100 to the screen.\n\"\"\"\n\nfor i in range(1, 101):\n    print(i)\n/python/python_basics/003_print_odd_numbers.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100 to the screen.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/002_print_even_numbers.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100 to the screen.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/005_print_odd_numbers_between_0_and_100.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100 to the screen.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/006_print_even_numbers_between_0_and_100.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100 to the screen.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/007_print_numbers_divisible_by_7_between_0_and_100.py\n\"\"\"\nWrite a program that prints the numbers from 0 to 100 that are divisible by 7.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 7 == 0:\n        print(i)\n/python/python_basics/008_print_numbers_divisible_by_7_and_5_between_0_and_100.py\n\"\"\"\nWrite a program that prints the numbers from 0 to 100 that are divisible by 7 and 5.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 7 == 0 and i % 5 == 0:\n        print(i)\n/python/python_basics/009_print_numbers_divisible_by_7_or_5_between_0_and_100.py\n\"\"\"\nWrite a program that prints the numbers from 0 to 100 that are divisible by 7 or 5.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 7 == 0 or i % 5 == 0:\n        print(i)\n/python/python_basics/010_print_numbers_divisible_by_7_or_5_and_not_divisible_by_3_between_0_and_100.py\n\"\"\"\nWrite a program that prints the numbers from 0 to 100 that are divisible by 7 or 5 but not 3.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 7 == 0 or i % 5 == 0:\n        if i % 3!="}
{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    return age * 7\n\nprint(dog_age(12))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of hours.\nassert seconds_in_hours(1)==3600\n\"\"\"\n\ndef seconds_in_hours(hours):\n    return hours * 3600\n\nprint(seconds_in_hours(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of minutes.\nassert seconds_in_minutes(1)==60\n\"\"\"\n\ndef seconds_in_minutes(minutes):\n    return minutes * 60\n\nprint(seconds_in_minutes(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of days.\nassert seconds_in_days(1)==86400\n\"\"\"\n\ndef seconds_in_days(days):\n    return days * 86400\n\nprint(seconds_in_days(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of weeks.\nassert seconds_in_weeks(1)==604800\n\"\"\"\n\ndef seconds_in_weeks(weeks):\n    return weeks * 604800\n\nprint(seconds_in_weeks(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of years.\nassert seconds_in_years(1)==31536000\n\"\"\"\n\ndef seconds_in_years(years):\n    return years * 31536000\n\nprint(seconds_in_years(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of months.\nassert seconds_in_months(1)==2628000\n\"\"\"\n\ndef seconds_in_months(months):\n    return months * 2628000\n\nprint(seconds_in_months(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of seconds.\nassert seconds_in_seconds(1)==1\n\"\"\"\n\ndef seconds_in_seconds(seconds):\n    return seconds\n\nprint(seconds_in_seconds(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of milliseconds.\nassert seconds_in_milliseconds(1)==0.001\n\"\"\"\n\ndef seconds_in_milliseconds(milliseconds):\n    return milliseconds / 1000\n\nprint(seconds_in_milliseconds(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of microseconds.\nassert seconds_in_microseconds(1)==0.000001\n\"\"\"\n\ndef seconds_in_microseconds(microseconds):\n    return microseconds / 1000000\n\nprint(seconds_in_microseconds(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of nanoseconds.\nassert seconds_in_nanoseconds(1)==0.000000001\n\"\"\"\n\ndef seconds_in_nanoseconds(nanoseconds):\n    return nanoseconds / 1000000000\n\nprint(seconds_in_nanoseconds(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of picoseconds.\nassert seconds_in_picoseconds(1)==0.000000000001\n\"\"\"\n\ndef seconds_in_picoseconds(picoseconds):\n    return picoseconds / 1000000000000\n\nprint(seconds_in_picoseconds(1))\n\n\"\"\"\nWrite a function to calculate the number of seconds in a given number of femtoseconds.\nassert seconds_in_femtoseconds(1)==0.000000000000001\n\"\"\"\n\n"}
{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'],3)==[['a', 'd', 'g', 'j','m'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(lst,n):\n    return [lst[i:i+n] for i in range(0,len(lst),n)]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist.\nassert list_ends(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])==['a', 'n', 'c','m', 'e', 'l', 'g', 'n']\n\"\"\"\ndef list_ends(lst):\n    return [lst[0],lst[-1]]\n\n\"\"\"\nWrite a function that takes in a list and returns a list of the first and last elements of each sublist"}
{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side):\n    return 6*side**2\n\nprint(lateral_surface_cube(5))\n\n\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(5)==125\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n\nprint(volume_cube(5))\n\n\"\"\"\nWrite a function to find the surface area of a sphere given its radius.\nassert surface_area_sphere(5)==314.1592653589793\n\"\"\"\n\ndef surface_area_sphere(radius):\n    return 4*3.14*radius**2\n\nprint(surface_area_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere given its radius.\nassert volume_sphere(5)==523.5987755982989\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4/3*3.14*radius**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder given its radius and height.\nassert lateralsurface_cylinder(5, 10)==314.1592653589793\n\"\"\"\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*3.14*radius*height\n\nprint(lateral_surface_cylinder(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder given its radius and height.\nassert volume_cylinder(5, 10)==1570.7963267948966\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14*radius**2*height\n\nprint(volume_cylinder(5, 10))\n\n\"\"\"\nWrite a function to find the surface area of a cone given its radius and height.\nassert surface_area_cone(5, 10)==235.6194490192345\n\"\"\"\n\ndef surface_area_cone(radius, height):\n    return 3.14*radius*(radius+((radius**2+height**2)**0.5))\n\nprint(surface_area_cone(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a cone given its radius and height.\nassert volume_cone(5, 10)==88.40944267887299\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 1/3*3.14*radius**2*height\n\nprint(volume_cone(5, 10))\n\n\"\"\"\nWrite a function to find the surface area of a pyramid given its base side length and height.\nassert surface_area_pyramid(5, 10)==157.07963267948966\n\"\"\"\n\ndef surface_area_pyramid(base, height):\n    return 1/2*base*height\n\nprint(surface_area_pyramid(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a pyramid given its base side length and height.\nassert volume_pyramid(5, 10)==25.0\n\"\"\"\n\ndef volume_pyramid(base, height):\n    return 1/3*base*height\n\nprint(volume_pyramid(5, 10))\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism given its length, width, and height.\nassert surface_area_rectangular_prism(5, 10, 15)==1500\n\"\"\"\n\ndef surface_area_rectangular_prism(length, width,"}
{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nprint(square_Sum(2))\n/python/python_basics/02_variables/01_variables.py\n\"\"\"\nWrite a python program that prints the following:\n\nMy name is \nI am 25 years old\nI am 6'2\" tall\n\"\"\"\n\nname = \"\"\nage = 25\nheight = 6.2\n\nprint(\"My name is \" + name)\nprint(\"I am \" + str(age) + \" years old\")\nprint(\"I am \" + str(height) + \" tall\")\n/python/python_basics/03_conditionals/02_conditionals.py\n\"\"\"\nWrite a python program that takes in a number and prints out whether it is positive, negative, or zero.\n\"\"\"\n\nnum = int(input(\"Enter a number: \"))\n\nif num > 0:\n    print(\"Positive\")\nelif num < 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")\n/python/python_basics/04_loops/01_loops.py\n\"\"\"\nWrite a python program that prints out the numbers 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    print(i)\n/python/python_basics/03_conditionals/01_conditionals.py\n\"\"\"\nWrite a python program that takes in a number and prints out whether it is odd or even.\n\"\"\"\n\nnum = int(input(\"Enter a number: \"))\n\nif num % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n/python/python_basics/05_functions/01_functions.py\n\"\"\"\nWrite a python function that takes in a number and returns the square of that number.\nassert square(2) == 4\n\"\"\"\n\ndef square(num):\n    return num**2\n\nprint(square(2))\n/python/python_basics/06_lists/01_lists.py\n\"\"\"\nWrite a python program that takes in a list of numbers and prints out the sum of the numbers.\nassert sum_List([1, 2, 3]) == 6\n\"\"\"\n\ndef sum_List(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\nprint(sum_List([1, 2, 3]))\n/python/python_basics/06_lists/02_lists.py\n\"\"\"\nWrite a python program that takes in a list of numbers and returns the average of the numbers.\nassert average_List([1, 2, 3]) == 2\n\"\"\"\n\ndef average_List(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum / len(nums)\n\nprint(average_List([1, 2, 3]))\n/python/python_basics/06_lists/03_lists.py\n\"\"\"\nWrite a python program that takes in a list of numbers and returns the largest number in the list.\nassert largest_List([1, 2, 3]) == 3\n\"\"\"\n\ndef largest_List(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\nprint(largest_List([1, 2, 3]))\n/python/python_basics/05_functions/02_functions.py\n\"\"\"\nWrite a python function that takes in a number and returns the square root of that number.\nassert square_Root(4) == 2\n\"\"\"\n\ndef square_Root(num):\n    return num**0.5\n\nprint(square_Root(4))\n/python/python_basics/06_lists/04_lists.py\n\"\"\"\nWrite a python program that takes in a list of numbers and returns the smallest number in the list.\nassert smallest_List([1, 2, 3]) == 1\n\"\"\"\n\ndef smallest_List(nums):\n    smallest = nums[0]\n    for num in nums"}
{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find then'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) * 10 + 37\n\nprint(find_star_num(3))\n/python/leetcode/1001-1100/1008.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res\n/python/leetcode/1001-1100/1003.py\n\"\"\"\nGiven a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.\n\nIf possible, output any possible result.  If not possible, return the empty string.\n\nExample 1:\n\nInput: S = \"aab\"\nOutput: \"aba\"\nExample 2:\n\nInput: S = \"aaab\"\nOutput: \"\"\nNote:\n\nS will consist of lowercase letters and have length in range [1, 500].\n\"\"\"\n\nclass Solution:\n    def reorganizeString(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return \"\"\n        count = collections.Counter(S)\n        max_count = max(count.values())\n        if max_count > (len(S) + 1) // 2:\n            return \"\"\n        res = []\n        for c in count:\n            res.extend([c] * count[c])\n        res = res[::-1]\n        res = \"\".join(res)\n        return res\n/python/leetcode/1-100/10.py\n\"\"\"\nGiven an integer (signed 32 bits), write a function to check whether it is a power of 4.\n\nExample 1:\n\nInput: 16\nOutput: true\nExample 2:\n\nInput: 5\nOutput: false\nFollow up: Could you solve it without loops/recursion?\n\"\"\"\n\nclass Solution:\n    def isPowerOfFour(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num <= 0:\n            return False\n        while num % 4 == 0:\n            num /= 4\n        return num == 1\n/python/leetcode/1-100/10.py\n\"\"\"\nGiven an integer (signed 32 bits), write a function to check whether it is a power of 4.\n\nExample 1:\n\nInput: 16\nOutput: true\nExample 2:\n\nInput: 5\nOutput: false\nFollow up: Could you solve it without loops/recursion?\n\"\"\"\n\nclass Solution:\n    def isPowerOfFour(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num <= 0:\n            return False\n        while num % 4 == 0:\n            num /= 4\n        return num == 1\n\nclass Solution:\n    def isPowerOfFour(self, num):\n        \"\"\"\n        :type num: int"}
{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\nprint(ascii_value('A'))\n\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')"}
{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        sum += lst[i]\n    return sum\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 0\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 16\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 32\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 44\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 60\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 84\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 120\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,"}
{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n\nprint(even_Power_Sum(2))\n/Python/Python_Fundamentals/Functions_Intermediate_I/Functions_Intermediate_I.py\n\"\"\"\nFunctions Intermediate I\n\"\"\"\n\n\"\"\"\n1. Update Values in Dictionaries and Lists\nx = [ [5,2,3], [10,8,9] ] \nstudents = [\n     {'first_name':  'Michael', 'last_name' : 'Jordan'},\n     {'first_name' : 'John', 'last_name' : 'Rosales'}\n]\nsports_directory = {\n    'basketball' : ['Kobe', 'Jordan', 'James', 'Curry'],\n   'soccer' : ['Messi', 'Ronaldo', 'Rooney']\n}\nz = [ {'x': 10, 'y': 20} ]\n\nx[1][0] = 15\nstudents[0]['last_name'] = 'Bryant'\nsports_directory['soccer'][0] = 'Andres'\nz[0]['y'] = 30\n\nprint(x)\nprint(students)\nprint(sports_directory)\nprint(z)\n\"\"\"\n\n\"\"\"\n2. Iterate Through a List of Dictionaries\nstudents = [\n         {'first_name':  'Michael', 'last_name' : 'Jordan'},\n         {'first_name' : 'John', 'last_name' : 'Rosales'},\n         {'first_name' : 'Mark', 'last_name' : 'Guillen'},\n         {'first_name' : 'KB', 'last_name' : 'Tonel'}\n    ]\n\ndef iterateDictionary(students):\n    for i in range(len(students)):\n        print(f\"{i+1} - {students[i]['first_name']} {students[i]['last_name']}\")\n\niterateDictionary(students)\n\"\"\"\n\n\"\"\"\n3. Get Values From a List of Dictionaries\nstudents = [\n         {'first_name':  'Michael', 'last_name' : 'Jordan'},\n         {'first_name' : 'John', 'last_name' : 'Rosales'},\n         {'first_name' : 'Mark', 'last_name' : 'Guillen'},\n         {'first_name' : 'KB', 'last_name' : 'Tonel'}\n    ]\n\ndef iterateDictionary2(key_name, some_list):\n    for i in range(len(some_list)):\n        print(some_list[i][key_name])\n\niterateDictionary2('first_name', students)\niterateDictionary2('last_name', students)\n\"\"\"\n\n\"\"\"\n4. Iterate Through a Dictionary with List Values\ndojo = {\n   'locations': ['San Jose', 'Seattle', 'Dallas', 'Chicago', 'Tulsa', 'DC', 'Burbank'],\n   'instructors': ['Michael', 'Amy', 'Eduardo', 'Josh', 'Graham', 'Patrick', 'Minh', 'Devon']\n}\n\ndef printInfo(some_dict):\n    for key in some_dict:\n        print(f\"{key.upper()}:\")\n        for i in range(len(some_dict[key])):\n            print(f\"{i+1} - {some_dict[key][i]}\")\n\nprintInfo(dojo)\n\"\"\"\n/Python/Python_Fundamentals/Functions_Basic_II/Functions_Basic_II.py\n\"\"\"\nFunctions Basic II\n\"\"\"\n\n\"\"\"\n1. Countdown\nCreate a function that accepts a number as an input. Return a new list that counts down by one, from the number (as the 0th element) down to 0 (as the last element).\nExample: countdown(5) should return [5,4,3,2,1,0]\n\"\"\"\n\ndef countdown(num):\n    new_list = []\n    for i in range(num, -1, -1):\n        new_list.append"}
{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(list_of_tuples):\n    return [x[-1] for x in list_of_tuples]\n\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))\n/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is a way to create a list in a single line of code.\n\"\"\"\n\n# Example 1\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1, 11)]\nprint(list2)\n\n# Example 2\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1, 11) if i % 2 == 0]\nprint(list2)\n\n# Example 3\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n    else:\n        list1.append(i * 2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i if i % 2 == 0 else i * 2 for i in range(1, 11)]\nprint(list2)\n\n# Example 4\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n    else:\n        list1.append(i * 2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i if i % 2 == 0 else i * 2 for i in range(1, 11)]\nprint(list2)\n\n# Example 5\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n    else:\n        list1.append(i * 2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i if i % 2 == 0 else i * 2 for i in range(1, 11)]\nprint(list2)\n\n# Example 6\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n    else:\n        list1.append(i * 2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i if i % 2 == 0 else i * 2 for i in range(1, 11)]\nprint(list2)\n\n# Example 7\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n    else:\n        list1.append(i * 2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i if i % 2 == 0 else i * 2 for i in range(1, 11)]\nprint(list2)\n\n# Example 8\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n    else:\n        list1.append(i * 2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i if i % 2 == 0 else i * 2 for i"}
{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\nprint(substract_elements((10, 4, 5), (2, 5, 18)))\n/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b\n\ndef add(a, b):\n    return a + b"}
{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0,n+1):\n        sum += binomial_Coeff(n,i)\n    return sum\n\ndef binomial_Coeff(n,k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nprint(even_binomial_Coeff_Sum(4))\n/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice"}
{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.141592653589793 * radius * radius * height\n\nprint(volume_cylinder(10,5))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of vowels in the string.\nassert count_vowels(\"What a wonderful day it is\") == 7\n\"\"\"\n\ndef count_vowels(string):\n    count = 0\n    for i in string:\n        if i in \"aeiou\":\n            count += 1\n    return count\n\nprint(count_vowels(\"What a wonderful day it is\"))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of words in the string.\nassert count_words(\"What a wonderful day it is\") == 7\n\"\"\"\n\ndef count_words(string):\n    return len(string.split())\n\nprint(count_words(\"What a wonderful day it is\"))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of characters in the string.\nassert count_characters(\"What a wonderful day it is\") == 31\n\"\"\"\n\ndef count_characters(string):\n    return len(string)\n\nprint(count_characters(\"What a wonderful day it is\"))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of vowels to the power of the number of consonants in the string.\nassert vowels_to_consonants(\"What a wonderful day it is\") == 243890\n\"\"\"\n\ndef vowels_to_consonants(string):\n    vowels = 0\n    consonants = 0\n    for i in string:\n        if i in \"aeiou\":\n            vowels += 1\n        else:\n            consonants += 1\n    return vowels ** consonants\n\nprint(vowels_to_consonants(\"What a wonderful day it is\"))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of vowels to the power of the number of consonants in the string.\nassert vowels_to_consonants(\"What a wonderful day it is\") == 243890\n\"\"\"\n\ndef vowels_to_consonants(string):\n    vowels = 0\n    consonants = 0\n    for i in string:\n        if i in \"aeiou\":\n            vowels += 1\n        else:\n            consonants += 1\n    return vowels ** consonants\n\nprint(vowels_to_consonants(\"What a wonderful day it is\"))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of vowels to the power of the number of consonants in the string.\nassert vowels_to_consonants(\"What a wonderful day it is\") == 243890\n\"\"\"\n\ndef vowels_to_consonants(string):\n    vowels = 0\n    consonants = 0\n    for i in string:\n        if i in \"aeiou\":\n            vowels += 1\n        else:\n            consonants += 1\n    return vowels ** consonants\n\nprint(vowels_to_consonants(\"What a wonderful day it is\"))\n\n\"\"\"\nWrite a function that takes in a string and returns the number of vowels to the power of the number of consonants in the string.\nassert vowels_to_consonants(\"What a wonderful day it is\") == 243890\n\"\"\"\n\ndef vowels_to_consonants(string):\n    vowels = 0\n    consonants = 0\n    for i in string:\n        if i in \"aeiou\":\n            vowels += 1\n        else:\n            consonants += 1\n    return vowels ** consonants"}
{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary, n):\n    new_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list. Each element in the list should be a string of \"Heads\" or \"Tails\" randomly, based on the input parameter n.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    coins = []\n    for i in range(n):\n        coins.append(toss_coin())\n    return coins\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_win() that returns a string of \"head\" or \"tail\", and prints \"It took 5 tosses to get heads!\" If the coin is heads, return heads. Otherwise, return tails.\n\"\"\"\n\ndef toss_coin_to_win():\n    tosses = 0\n    while True:\n        tosses += 1\n        if toss_coin() == \"Heads\":\n            print(\"It took {} tosses to get heads!\".format(tosses))\n            return \"Heads\""}
{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(t):\n    count = 0\n    for i in t:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11)) == 4\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12)) == 5\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13)) == 6\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14)) == 7\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15)) == 8\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16)) == 9\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17)) == 10\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18)) == 11\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) == 12\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 13\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)) == 14\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)) == 15\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)) == 16\nassert count_first_elements((1, 5, 7, (4, 6), 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, "}
{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return (10*n**2 - 10*n + 21) % 30 == 0\n\ndef nth_decagonal(n):\n    if is_num_decagonal(n):\n        return (10*n**2 - 10*n + 21) // 30\n    else:\n        return None\n\ndef test_nth_decagonal():\n    assert nth_decagonal(1) == 1\n    assert nth_decagonal(2) == 10\n    assert nth_decagonal(3) == 27\n    assert nth_decagonal(4) == 58\n    assert nth_decagonal(5) == 95\n    assert nth_decagonal(6) == 138\n    assert nth_decagonal(7) == 187\n    assert nth_decagonal(8) == 242\n    assert nth_decagonal(9) == 303\n    assert nth_decagonal(10) == 370\n    assert nth_decagonal(11) == 443\n    assert nth_decagonal(12) == 522\n    assert nth_decagonal(13) == 607\n    assert nth_decagonal(14) == 698\n    assert nth_decagonal(15) == 795\n    assert nth_decagonal(16) == 900\n    assert nth_decagonal(17) == 1011\n    assert nth_decagonal(18) == 1128\n    assert nth_decagonal(19) == 1251\n    assert nth_decagonal(20) == 1380\n    assert nth_decagonal(21) == 1515\n    assert nth_decagonal(22) == 1656\n    assert nth_decagonal(23) == 1803\n    assert nth_decagonal(24) == 1956\n    assert nth_decagonal(25) == 2115\n    assert nth_decagonal(26) == 2280\n    assert nth_decagonal(27) == 2451\n    assert nth_decagonal(28) == 2628\n    assert nth_decagonal(29) == 2811\n    assert nth_decagonal(30) == 3000\n    assert nth_decagonal(31) == 3195\n    assert nth_decagonal(32) == 3396\n    assert nth_decagonal(33) == 3603\n    assert nth_decagonal(34) == 3816\n    assert nth_decagonal(35) == 4035\n    assert nth_decagonal(36) == 4260\n    assert nth_decagonal(37) == 4491\n    assert nth_decagonal(38) == 4728\n    assert nth_decagonal(39) == 4971\n    assert nth_decagonal(40) == 5220\n    assert nth_decagonal(41) == 5475\n    assert nth_decagonal(42) == 5736\n    assert nth_decagonal(43) == 6003\n    assert nth_decagonal(44) == 6276\n    assert nth_decagonal(45) == 6555\n    assert nth_decagonal(46) == 6840\n    assert nth_decagonal(47) == 7131\n    assert nth_decagonal(48) == 7428\n    assert nth_decagonal(4"}
{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31))\n/python/recursion/factorial.py\n\"\"\"\nWrite a function that takes in a number and returns the factorial of that number.\nassert factorial(5) == 120\n\"\"\"\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))\n/python/recursion/fibonacci.py\n\"\"\"\nWrite a function that takes in a number and returns the nth number of the fibonacci sequence.\nassert fibonacci(5) == 5\n\"\"\"\n\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5))\n/python/recursion/reverse_string.py\n\"\"\"\nWrite a function that takes in a string and returns a new string with the characters in reverse order.\nassert reverse_string(\"hello\") == \"olleh\"\n\"\"\"\n\ndef reverse_string(string):\n    if len(string) == 1:\n        return string\n    return reverse_string(string[1:]) + string[0]\n\nprint(reverse_string(\"hello\"))\n/python/recursion/power.py\n\"\"\"\nWrite a function that takes in a base and an exponent and returns the power of the base to the exponent.\nassert power(2,3) == 8\n\"\"\"\n\ndef power(base, exponent):\n    if exponent == 0:\n        return 1\n    return base * power(base, exponent-1)\n\nprint(power(2,3))\n/python/recursion/palindrome.py\n\"\"\"\nWrite a function that takes in a string and returns a boolean indicating whether or not the input string is a palindrome.\nassert palindrome(\"racecar\") == True\n\"\"\"\n\ndef palindrome(string):\n    if len(string) == 1:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return palindrome(string[1:-1])\n\nprint(palindrome(\"racecar\"))\n/python/recursion/sum_array.py\n\"\"\"\nWrite a function that takes in an array of numbers and returns the sum of all the numbers in the array.\nassert sum_array([1,2,3,4]) == 10\n\"\"\"\n\ndef sum_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + sum_array(arr[1:])\n\nprint(sum_array([1,2,3,4]))\n/python/recursion/sum_digits.py\n\"\"\"\nWrite a function that takes in a number and returns the sum of all the digits in the number.\nassert sum_digits(123) == 6\n\"\"\"\n\ndef sum_digits(n):\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n\nprint(sum_digits(123))\n/python/recursion/product_array.py\n\"\"\"\nWrite a function that takes in an array of numbers and returns the product of all the numbers in the array.\nassert product_array([1,2,3,4]) == 24\n\"\"\"\n\ndef product_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] * product_array(arr[1:])\n\nprint(product_array([1,2,3,4]))\n/python/recursion/reverse_array.py\n\"\"\"\nWrite a function that takes in an array of numbers and returns a new array where the elements are in reverse order.\nassert reverse_array([1"}
{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\nprint(all_unique([1,2,3]))\nprint(all_unique([1,2,3,1]))\n/python/001_python_basics/001_python_basics.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\nTwinkle, twinkle, little star,\n    How I wonder what you are!\n        Up above the world so high,\n        Like a diamond in the sky.\n\nTwinkle, twinkle, little star,\n    How I wonder what you are\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\")\n/python/002_python_basics_2/001_python_basics_2.py\n\"\"\"\nWrite a python program to get the Python version you are using.\n\"\"\"\n\nimport sys\n\nprint(sys.version)\n/python/002_python_basics_2/003_python_basics_2.py\n\"\"\"\nWrite a python program to display the current date and time.\n\"\"\"\n\nimport datetime\n\nprint(datetime.datetime.now())\n/python/002_python_basics_2/002_python_basics_2.py\n\"\"\"\nWrite a python program to display the current time.\n\"\"\"\n\nimport time\n\nprint(time.ctime())\n/python/002_python_basics_2/004_python_basics_2.py\n\"\"\"\nWrite a python program to get the name of the host on which the routine is running.\n\"\"\"\n\nimport socket\n\nprint(socket.gethostname())\n/python/002_python_basics_2/005_python_basics_2.py\n\"\"\"\nWrite a python program to get the name of the current module.\n\"\"\"\n\nimport sys\n\nprint(sys.modules[__name__])\n/python/002_python_basics_2/006_python_basics_2.py\n\"\"\"\nWrite a python program to get the names of built-in modules.\n\"\"\"\n\nimport sys\n\nprint(sys.builtin_module_names)\n/python/002_python_basics_2/007_python_basics_2.py\n\"\"\"\nWrite a python program to get the documentation of python built-in functions.\n\"\"\"\n\nimport sys\n\nprint(sys.builtin_functions)\n/python/002_python_basics_2/008_python_basics_2.py\n\"\"\"\nWrite a python program to get the copyright information.\n\"\"\"\n\nimport sys\n\nprint(sys.copyright)\n/python/002_python_basics_2/009_python_basics_2.py\n\"\"\"\nWrite a python program to get the command line arguments in a list.\n\"\"\"\n\nimport sys\n\nprint(sys.argv)\n/python/002_python_basics_2/010_python_basics_2.py\n\"\"\"\nWrite a python program to get the size of an object in bytes.\n\"\"\"\n\nimport sys\n\nprint(sys.getsizeof(1))\n/python/002_python_basics_2/011_python_basics_2.py\n\"\"\"\nWrite a python program to get the current value of the recursion limit.\n\"\"\"\n\nimport sys\n\nprint(sys.getrecursionlimit())\n/python/002_python_basics_2/012_python_basics_2.py\n\"\"\"\nWrite a python program to list all the modules in the current python package.\n\"\"\"\n\nimport sys\n\nprint(sys.modules)\n/python/002_python_basics_2/013_python_basics_2.py\n\"\"\"\n"}
{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1,list2):\n    return [list1[i]-list2[i] for i in range(len(list1))]\n\nprint(sub_list([1,2,3],[4,5,6]))\n/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is a way to create a list based on a given iterable.\n\"\"\"\n\n# Example 1\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1,11)]\nprint(list2)\n\n# Example 2\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1,11) if i%2==0]\nprint(list2)\n\n# Example 3\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    list1.append(i**2)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 for i in range(1,11)]\nprint(list2)\n\n# Example 4\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 for i in range(1,11) if i%2==0]\nprint(list2)\n\n# Example 5\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 6\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 7\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 8\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 9\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2"}
{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    num = str(num)\n    for i in num:\n        if num.count(i) > int(i):\n            return False\n    return True\n\nprint(validate(1234))\n/python/python_practice/practice_1.py\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n/python/python_practice/practice_4.py\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function takes in a list of integers and returns the sum of the integers in the list.\n"}
{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list,element):\n    for i in list:\n        if i!=element:\n            return False\n    return True\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the first element in the list.\nassert count_first_element([\"green\", \"orange\", \"black\", \"white\"],'green')==1\n\"\"\"\ndef count_first_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the last element in the list.\nassert count_last_element([\"green\", \"orange\", \"black\", \"white\"],'white')==1\n\"\"\"\ndef count_last_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the first element in the list.\nassert count_first_element([\"green\", \"orange\", \"black\", \"white\"],'green')==1\n\"\"\"\ndef count_first_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the last element in the list.\nassert count_last_element([\"green\", \"orange\", \"black\", \"white\"],'white')==1\n\"\"\"\ndef count_last_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the first element in the list.\nassert count_first_element([\"green\", \"orange\", \"black\", \"white\"],'green')==1\n\"\"\"\ndef count_first_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the last element in the list.\nassert count_last_element([\"green\", \"orange\", \"black\", \"white\"],'white')==1\n\"\"\"\ndef count_last_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the first element in the list.\nassert count_first_element([\"green\", \"orange\", \"black\", \"white\"],'green')==1\n\"\"\"\ndef count_first_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the last element in the list.\nassert count_last_element([\"green\", \"orange\", \"black\", \"white\"],'white')==1\n\"\"\"\ndef count_last_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the first element in the list.\nassert count_first_element([\"green\", \"orange\", \"black\", \"white\"],'green')==1\n\"\"\"\ndef count_first_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the last element in the list.\nassert count_last_element([\"green\", \"orange\", \"black\", \"white\"],'white')==1\n\"\"\"\ndef count_last_element(list,element):\n    count=0\n    for i in list:\n        if i==element:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function that takes in a list and returns the number of elements that are equal to the first element in the list"}
{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\ndef text_match_two_three(text):\n    if text.count(\"a\") == 1 and text.count(\"b\") == 2 or text.count(\"b\") == 3:\n        return True\n    else:\n        return False\n\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"abc\")==(True)\nassert text_match_two_three(\"abbc\")==(True)\nassert text_match_two_three(\"abbb\")==(True)\nassert text_match_two_three(\"abbbb\")==(False)\nassert text_match_two_three(\"b\")==(False)\nassert text_match_two_three(\"b\")==(False)\nassert text_match_two_three(\"bb\")==(False)\nassert text_match_two_three(\"bb\")==(False)\nassert text_match_two_three(\"bbb\")==(False)\nassert text_match_two_three(\"bbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")==(False)\nassert text_match_two_three(\"bbbbb\")"}
{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    if k == 1:\n        return max(arr)\n    if k > n:\n        return max(arr) * n\n    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(k):\n            sum += arr[i]\n        max_sum = max(max_sum, sum)\n    return max_sum\n\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))\n/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_same_tree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\n\nprint(is_same_tree(root1, root2))\n/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_symmetric(root):\n    if root is None:\n        return True\n    return is_symmetric_helper(root.left, root.right)\n\ndef is_symmetric_helper(left, right):\n    if left is None and right is None:\n        return True\n    if left is None or right is None:\n        return False\n    if left.val!= right.val:\n        return False\n    return is_symmetric_helper(left.left, right.right) and is_symmetric_helper(left.right, right.left)\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(2)\nroot.left.left = TreeNode(3)\nroot.left.right = TreeNode(4)\nroot.right.left = TreeNode(4)\nroot.right.right = TreeNode(3)\n\nprint(is_symmetric(root))\n/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef level_order(root):\n    if root is None:\n        return []\n    result = []\n    queue = [root]\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(level)\n    return result\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(level_order(root))\n/leetcode/103_binary_tree_zigzag_level_order_traversal.py\n\"\"\""}
{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n\nprint(square_Sum(2))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the sum of all the numbers.\nassert sum_List([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_List(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_List([1,2,3,4,5]))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the average of all the numbers.\nassert average_List([1,2,3,4,5]) == 3\n\"\"\"\n\ndef average_List(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum/len(list)\n\nprint(average_List([1,2,3,4,5]))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the largest number.\nassert largest_Number([1,2,3,4,5]) == 5\n\"\"\"\n\ndef largest_Number(list):\n    largest = list[0]\n    for i in list:\n        if i > largest:\n            largest = i\n    return largest\n\nprint(largest_Number([1,2,3,4,5]))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the smallest number.\nassert smallest_Number([1,2,3,4,5]) == 1\n\"\"\"\n\ndef smallest_Number(list):\n    smallest = list[0]\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nprint(smallest_Number([1,2,3,4,5]))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the second largest number.\nassert second_Largest_Number([1,2,3,4,5]) == 4\n\"\"\"\n\ndef second_Largest_Number(list):\n    largest = list[0]\n    second_largest = list[0]\n    for i in list:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return second_largest\n\nprint(second_Largest_Number([1,2,3,4,5]))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the second smallest number.\nassert second_Smallest_Number([1,2,3,4,5]) == 2\n\"\"\"\n\ndef second_Smallest_Number(list):\n    smallest = list[0]\n    second_smallest = list[0]\n    for i in list:\n        if i < smallest:\n            second_smallest = smallest\n            smallest = i\n        elif i < second_smallest:\n            second_smallest = i\n    return second_smallest\n\nprint(second_Smallest_Number([1,2,3,4,5]))/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a python function takes in a list of numbers and returns the second largest number.\nassert second_Largest_Number([1,2,3,4,5]) == 4\n\"\"\"\n\ndef second_Largest_Number(list):\n    largest = list[0]\n    second_largest = list[0]\n    for i in list:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i"}
{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_len, max_list\n\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n/python_basics/02_data_types/02_01_numbers.py\n\"\"\"\nNumbers\n\"\"\"\n\n# Integer\nprint(1)\nprint(1000)\nprint(-1000)\n\n# Float\nprint(1.0)\nprint(1.1)\nprint(-1.1)\n\n# Complex\nprint(1j)\nprint(1 + 1j)\nprint(1j * 1j)\n\n# Boolean\nprint(True)\nprint(False)\n\n# None\nprint(None)\n/python_basics/02_data_types/02_02_strings.py\n\"\"\"\nStrings\n\"\"\"\n\n# String\nprint(\"Hello World\")\nprint('Hello World')\nprint(\"\"\"Hello World\"\"\")\nprint('''Hello World''')\n\n# String concatenation\nprint(\"Hello\" + \" World\")\n\n# String repetition\nprint(\"Hello\" * 3)\n\n# String indexing\nprint(\"Hello\"[0])\nprint(\"Hello\"[1])\nprint(\"Hello\"[2])\nprint(\"Hello\"[3])\nprint(\"Hello\"[4])\n\n# String slicing\nprint(\"Hello\"[0:2])\nprint(\"Hello\"[0:3])\nprint(\"Hello\"[0:4])\nprint(\"Hello\"[0:5])\nprint(\"Hello\"[0:6])\n\n# String slicing with step\nprint(\"Hello\"[0:5:2])\nprint(\"Hello\"[0:5:3])\nprint(\"Hello\"[0:5:4])\nprint(\"Hello\"[0:5:5])\nprint(\"Hello\"[0:5:6])\n\n# String slicing with negative step\nprint(\"Hello\"[-1:-6:-1])\nprint(\"Hello\"[-1:-6:-2])\nprint(\"Hello\"[-1:-6:-3])\nprint(\"Hello\"[-1:-6:-4])\nprint(\"Hello\"[-1:-6:-5])\nprint(\"Hello\"[-1:-6:-6])\n\n# String slicing with negative step\nprint(\"Hello\"[-1:-6:-1])\nprint(\"Hello\"[-1:-6:-2])\nprint(\"Hello\"[-1:-6:-3])\nprint(\"Hello\"[-1:-6:-4])\nprint(\"Hello\"[-1:-6:-5])\nprint(\"Hello\"[-1:-6:-6])\n\n# String slicing with negative step\nprint(\"Hello\"[-1:-6:-1])\nprint(\"Hello\"[-1:-6:-2])\nprint(\"Hello\"[-1:-6:-3])\nprint(\"Hello\"[-1:-6:-4])\nprint(\"Hello\"[-1:-6:-5])\nprint(\"Hello\"[-1:-6:-6])\n\n# String slicing with negative step\nprint(\"Hello\"[-1:-6:-1])\nprint(\"Hello\"[-1:-6:-2])\nprint(\"Hello\"[-1:-6:-3])\nprint(\"Hello\"[-1:-6:-4])\nprint(\"Hello\"[-1:-6:-5])\nprint(\"Hello\"[-1:-6:-6])\n\n# String slicing with negative step\nprint(\"Hello\"[-1:-6:-1])\nprint(\"Hello\"[-1:-6:-2])\nprint(\"Hello\"[-1:-6:-3])\nprint(\"Hello\"[-1:-6:-4])\nprint(\"Hello\"[-1:-6:-5])\nprint(\"Hello\"[-1:-6:-6])\n\n# String slicing with negative step\nprint(\"Hello\"[-1:-6:-1])\nprint(\"Hello\"[-1:-6:-2])\nprint(\"Hello\"[-1:-6:-3])\nprint(\"Hello\"[-1:-6:-4])\nprint(\"Hello\"[-1:-6:-5"}
{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a//b\n\nprint(find(10,3))\n/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a python program to print \"Hello World\"\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/05_print_even_numbers.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in range(1,101):\n    if i%2 == 0:\n        print(i)\n/python/python_basics/04_print_odd_numbers.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1,101):\n    if i%2!= 0:\n        print(i)\n/python/python_basics/03_print_numbers.py\n\"\"\"\nWrite a python program to print numbers between 1 to 100\n\"\"\"\n\nfor i in range(1,101):\n    print(i)\n/python/python_basics/02_print_even_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in range(1,101):\n    if i%2 == 0:\n        print(i)\n/python/python_basics/06_print_odd_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1,101):\n    if i%2!= 0:\n        print(i)\n/python/python_basics/07_print_numbers_between_1_to_100_in_reverse_order.py\n\"\"\"\nWrite a python program to print numbers between 1 to 100 in reverse order\n\"\"\"\n\nfor i in range(100,0,-1):\n    print(i)\n/python/python_basics/08_print_even_numbers_between_1_to_100_in_reverse_order.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100 in reverse order\n\"\"\"\n\nfor i in range(100,0,-1):\n    if i%2 == 0:\n        print(i)\n/python/python_basics/09_print_odd_numbers_between_1_to_100_in_reverse_order.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100 in reverse order\n\"\"\"\n\nfor i in range(100,0,-1):\n    if i%2!= 0:\n        print(i)\n"}
{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5\n\nassert otherside_rightangle(7,8)==10.63014581273465\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle(a,b):\n    c=a**2+b**2\n    return c**0.5*a*b/2\n\nassert area_rightangle(7,8)==24.0\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\nassert area_rightangle(7,8)==24.0\n\"\"\"\ndef area_rightangle"}
{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5,'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    \"\"\"\n    >>> max_val(['Python', 3, 2, 4, 5,'version'])\n    5\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day02/01_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the\nelements of the first list in reverse order.\n\n>>> reverse([1, 2, 3, 4])\n[4, 3, 2, 1]\n\"\"\"\n\ndef reverse(lst):\n    \"\"\"\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    return lst[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day02/02_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the\nelements of the first list in reverse order.\n\n>>> reverse([1, 2, 3, 4])\n[4, 3, 2, 1]\n\"\"\"\n\ndef reverse(lst):\n    \"\"\"\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    return [i for i in lst[::-1]]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day02/03_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the\nelements of the first list in reverse order.\n\n>>> reverse([1, 2, 3, 4])\n[4, 3, 2, 1]\n\"\"\"\n\ndef reverse(lst):\n    \"\"\"\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    return [lst[i] for i in range(len(lst)-1, -1, -1)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day02/04_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the\nelements of the first list in reverse order.\n\n>>> reverse([1, 2, 3, 4])\n[4, 3, 2, 1]\n\"\"\"\n\ndef reverse(lst):\n    \"\"\"\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    return [lst[i] for i in range(len(lst)-1, -1, -1)]\n\ndef reverse_2(lst):\n    \"\"\"\n    >>> reverse_2([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    return [lst[i] for i in range(len(lst)-1, -1, -1)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day02/05_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the\nelements of the first list in reverse order.\n\n>>> reverse([1, 2, 3, 4])\n[4, 3, 2, 1]\n\"\"\"\n\ndef reverse(lst):\n    \"\"\"\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    return [lst[i] for i in range(len(lst)-1, -1, -1)]\n\ndef reverse_2(lst):\n    \"\"\"\n    >>> reverse_"}
{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    return sum\n\nprint(sum_div(8))\n/python/python_basics/02_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Variables are created when you assign a value to it.\n\n# Python has no command for declaring a variable.\n\n# A variable is created the moment you first assign a value to it.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Variables store data of any type.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Variables store data of any type.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names can not be any of Python's reserved words.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with"}
{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\ndef get_Inv_Count(arr):\n    if len(arr) == 1:\n        return 0\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    inv_count = 0\n    inv_count += get_Inv_Count(left)\n    inv_count += get_Inv_Count(right)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            inv_count += len(left) - i\n            j += 1\n        k += 1\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n    return inv_count\n\nprint(get_Inv_Count([1,20,6,4,5]))\n/Python/Algorithms/Sorting/merge_sort.py\n\"\"\"\nMerge Sort\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nmerge_sort(arr)\nprint(arr)\n/Python/Algorithms/Sorting/quick_sort.py\n\"\"\"\nQuick Sort\n\"\"\"\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\narr = [10, 7, 8, 9, 1, 5]\nquick_sort(arr, 0, len(arr) - 1)\nprint(arr)\n/Python/Algorithms/Sorting/insertion_sort.py\n\"\"\"\nInsertion Sort\n\"\"\"\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n\narr = [12, 11, 13, 5, 6]\ninsertion_sort(arr)\nprint(arr)\n/Python/Algorithms/Sorting/bubble_sort.py\n\"\"\"\nBubble Sort\n\"\"\"\n\ndef bubble_sort(arr):\n    for i in range(len"}
{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\nprint(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))\n/python/leetcode/easy/1480_running_sum_of_1d_array.py\n\"\"\"\nGiven an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]\u2026nums[i]).\nReturn the running sum of nums.\n\nExample 1:\nInput: nums = [1,2,3,4]\nOutput: [1,3,6,10]\nExplanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\n\nExample 2:\nInput: nums = [1,1,1,1,1]\nOutput: [1,2,3,4,5]\nExplanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].\n\nExample 3:\nInput: nums = [3,1,2,10,1]\nOutput: [3,4,6,16,17]\n\nConstraints:\n1 <= nums.length <= 1000\n-10^6 <= nums[i] <= 10^6\n\"\"\"\n\ndef running_sum(nums):\n    running_sum = []\n    for i in range(len(nums)):\n        if i == 0:\n            running_sum.append(nums[i])\n        else:\n            running_sum.append(running_sum[i-1] + nums[i])\n    return running_sum\n\nprint(running_sum([1,2,3,4]))\nprint(running_sum([1,1,1,1,1]))\nprint(running_sum([3,1,2,10,1]))\n/python/leetcode/easy/1365_how_many_numbers_are_smaller_than_the_current_number.py\n\"\"\"\nGiven the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j!= i and nums[j] < nums[i].\nReturn the answer in an array.\n\nExample 1:\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation:\nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).\nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1).\nFor nums[3]=2 there exist one smaller number than it (1).\nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\nExample 2:\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n\nExample 3:\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n\nConstraints:\n2 <= nums.length <= 500\n0 <= nums[i] <= 100\n\"\"\"\n\ndef smaller_numbers_than_current(nums):\n    sorted_nums = sorted(nums)\n    sorted_nums"}
{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(list_of_tuples):\n    max_value = 0\n    max_name = ''\n    for name, value in list_of_tuples:\n        if value > max_value:\n            max_value = value\n            max_name = name\n    return max_name, max_value\n\nprint(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]))\n/week_02/day_03/01_list_to_dict.py\n\"\"\"\nWrite a function that converts a list of tuples into a dictionary.\nassert list_to_dict([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])=={'': 90, '': 88, '': 7, '': 122, '': 84}\n\"\"\"\n\ndef list_to_dict(list_of_tuples):\n    dict_of_tuples = {}\n    for name, value in list_of_tuples:\n        dict_of_tuples[name] = value\n    return dict_of_tuples\n\nprint(list_to_dict([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]))\n/week_02/day_03/02_dict_to_list.py\n\"\"\"\nWrite a function that converts a dictionary into a list of tuples.\nassert dict_to_list({'': 90, '': 88, '': 7, '': 122, '': 84})==[('', 90), ('', 88), ('', 7), ('', 122), ('', 84)]\n\"\"\"\n\ndef dict_to_list(dict_of_tuples):\n    list_of_tuples = []\n    for name, value in dict_of_tuples.items():\n        list_of_tuples.append((name, value))\n    return list_of_tuples\n\nprint(dict_to_list({'': 90, '': 88, '': 7, '': 122, '': 84}))\n/week_02/day_03/03_dict_to_list_of_tuples.py\n\"\"\"\nWrite a function that converts a dictionary into a list of tuples.\nassert dict_to_list_of_tuples({'': 90, '': 88, '': 7, '': 122, '': 84})==[('', 90), ('', 88), ('', 7), ('', 122), ('', 84)]\n\"\"\"\n\ndef dict_to_list_of_tuples(dict_of_tuples):\n    list_of_tuples = []\n    for name, value in dict_of_tuples.items():\n        list_of_tuples.append((name, value))\n    return list_of_tuples\n\nprint(dict_to_list_of_tuples({'': 90, '': 88, '': 7, '': 122, '': 84}))\n/week_02/day_03/04_list_of_tuples_to_dict.py\n\"\"\"\nWrite a function that converts a list of tuples into a dictionary.\nassert list_of_tuples_to_dict([('Juan Whelan',90"}
{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\ndef count_binary_seq(n):\n    # TODO: Write your code here\n    return 0\n/src/main/python/com/thealgorithms/python/maths/is_prime.py\n\"\"\"\nThis module contains functions for checking if a number is prime.\n\"\"\"\n\nfrom math import sqrt\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_fastest(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_fastestest(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_fastestestest(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_fastestestestest(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_fastestestestestest(n: int) -> bool:\n    \"\"\"\n    Checks if"}
{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if not d:\n        return 0\n    return 1 + max(dict_depth(d[k]) for k in d)\n\nprint(dict_depth({'a':1, 'b': {'c': {'d': {}}}}))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nif __name__ == '__main__':\n    s = Solution()\n    p = TreeNode(1)\n    p.left = TreeNode(2)\n    p.right = TreeNode(3)\n    q = TreeNode(1)\n    q.left = TreeNode(2)\n    q.right = TreeNode(3)\n    print(s.isSameTree(p, q))\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n\nif __name__ == '__main__':\n    s = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(2)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(4)\n    root.right.right = TreeNode(3)\n    print(s.isSymmetric(root))\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree"}
{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n\ndef start_withp(words):\n    for word in words"}
{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, i, j):\n    if i == j:\n        return arr[i]\n    if k == j:\n        return arr[k]\n    if k > j:\n        return arr[i]\n    if k < i:\n        return arr[j]\n    return max(max_sum_increasing_subseq(arr, k, i, j-1), max_sum_increasing_subseq(arr, k, i+1, j), arr[k])\n\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))\n/leetcode/1302.py\n\"\"\"\nGiven the root of a binary tree, return the length of the diameter of the tree.\n\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n\nThe length of a path between two nodes is represented by the number of edges between them.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        self.ans = 0\n        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            self.ans = max(self.ans, left + right)\n            return max(left, right) + 1\n        dfs(root)\n        return self.ans\n/leetcode/1304.py\n\"\"\"\nGiven an integer n, return any array containing n unique integers such that they add up to 0.\n\"\"\"\n\nclass Solution:\n    def sumZero(self, n: int) -> List[int]:\n        return list(range(1, n)) + list(range(-n+1, 0))\n/leetcode/1305.py\n\"\"\"\nGiven the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return []\n        ans = []\n        q = [root]\n        while q:\n            ans.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        return ans\n/leetcode/1306.py\n\"\"\"\nGiven an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.\n\nReturn that integer.\n\"\"\"\n\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        for i in range(n):\n            if arr[i]!= arr[i+n//4]:\n                continue\n            if arr[i]!= arr[i+n//2]:\n                continue\n            if arr[i]!= arr[i+3*n//4]:\n                continue\n            return arr[i]\n/leetcode/1307.py\n\"\"\"\nGiven two strings word1 and word2, return true if the two strings are anagrams. Otherwise, return false.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\"\"\"\n\nclass Solution:\n    def isAnagram(self, word1: str, word2: str) ->"}
{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2,n):\n    list1.sort()\n    list2.sort()\n    list1.reverse()\n    list2.reverse()\n    list3=[]\n    for i in range(n):\n        list3.append(list1[i]*list2[i])\n    return list3\n\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\nassert largest([1,2,3,4,5])==5\n\"\"\"\ndef largest(list):\n    list.sort()\n    return list[-1]\n\nprint(largest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2,3,4,5])==1\n\"\"\"\ndef smallest(list):\n    list.sort()\n    return list[0]\n\nprint(smallest([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_5.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1,2"}
{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\nassert maximum(5,10) == 10\nassert maximum(10,5) == 10\nassert maximum(10,10) == 10\nassert maximum(5,5) == 5\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\nassert maximum(5,10,15) == 15\n\"\"\"\n\ndef maximum(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nassert maximum(5,10,15) == 15\nassert maximum(10,5,15) == 15\nassert maximum(10,15,5) == 15\nassert maximum(5,5,15) == 15\nassert maximum(5,15,5) == 15\nassert maximum(15,5,5) == 15\nassert maximum(5,5,5) == 5\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\nassert maximum(5,10,15,20) == 20\n\"\"\"\n\ndef maximum(a,b,c,d):\n    if a > b and a > c and a > d:\n        return a\n    elif b > a and b > c and b > d:\n        return b\n    elif c > a and c > b and c > d:\n        return c\n    else:\n        return d\n\nassert maximum(5,10,15,20) == 20\nassert maximum(10,5,15,20) == 20\nassert maximum(10,15,5,20) == 20\nassert maximum(10,15,20,5) == 20\nassert maximum(5,5,15,20) == 20\nassert maximum(5,15,5,20) == 20\nassert maximum(5,15,20,5) == 20\nassert maximum(5,5,5,20) == 20\nassert maximum(5,5,20,5) == 20\nassert maximum(5,20,5,5) == 20\nassert maximum(20,5,5,5) == 20\nassert maximum(5,5,5,5) == 5\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\nassert maximum(5,10,15,20,25) == 25\n\"\"\"\n\ndef maximum(a,b,c,d,e):\n    if a > b and a > c and a > d and a > e:\n        return a\n    elif b > a and b > c and b > d and b > e:\n        return b\n    elif c > a and c > b and c > d and c > e:\n        return c\n    elif d > a and d > b and d > c and d > e:\n        return d\n    else:\n        return e\n\nassert maximum(5,10,15,20,25) == 25\nassert maximum(10,5,15,20,25) == 25\nassert maximum(10,15,5,20,25) == 25\nassert maximum(10,15,20,5,25) == 25\nassert maximum(10,15,20,25,5) == 25\nassert maximum(5,5,15,20,25) == 25\nassert maximum(5,15,5,20,25) == 25\nassert maximum(5,15,20,5,25) == 25\nassert maximum(5,15,20,25,5) == 25\nassert maximum(5,5,5,20,25) == 25\n"}
{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string)\n\nprint(string_to_tuple(\"python 3.0\"))\n\n\"\"\"\nWrite a function to convert a given tuple of characters to a string.\nassert tuple_to_string(('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'))==\"python 3.0\"\n\"\"\"\ndef tuple_to_string(tuple):\n    return ''.join(tuple)\n\nprint(tuple_to_string(('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')))\n\n\"\"\"\nWrite a function to convert a given string to a list of characters.\nassert string_to_list(\"python 3.0\")==['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']\n\"\"\"\ndef string_to_list(string):\n    return list(string)\n\nprint(string_to_list(\"python 3.0\"))\n\n\"\"\"\nWrite a function to convert a given list of characters to a string.\nassert list_to_string(['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'])==\"python 3.0\"\n\"\"\"\ndef list_to_string(list):\n    return ''.join(list)\n\nprint(list_to_string(['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']))\n\n\"\"\"\nWrite a function to convert a given string to a set of characters.\nassert string_to_set(\"python 3.0\")=={'0', '3','', 'n', 'y', 'h', 'o', 't', 'p'}\n\"\"\"\ndef string_to_set(string):\n    return set(string)\n\nprint(string_to_set(\"python 3.0\"))\n\n\"\"\"\nWrite a function to convert a given set of characters to a string.\nassert set_to_string({'0', '3','', 'n', 'y', 'h', 'o', 't', 'p'})==\"python 3.0\"\n\"\"\"\ndef set_to_string(set):\n    return ''.join(set)\n\nprint(set_to_string({'0', '3','', 'n', 'y', 'h', 'o', 't', 'p'}))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary of characters and their counts.\nassert string_to_dict(\"python 3.0\")=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1, '3': 1, '.': 1, '0': 1}\n\"\"\"\ndef string_to_dict(string):\n    return {char: string.count(char) for char in string}\n\nprint(string_to_dict(\"python 3.0\"))\n\n\"\"\"\nWrite a function to convert a given dictionary of characters and their counts to a string.\nassert dict_to_string({'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1, '3': 1, '.': 1, '0': 1})==\"python 3.0\"\n\"\"\"\ndef dict_to_string(dict):\n    return ''.join(dict.keys()) * dict.get('p')\n\nprint(dict_to_string({'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1, '3': 1, '.': 1, '0': 1}))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary of characters and their counts.\nassert string_to_dict(\"python 3.0\")=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1, '3': 1, '.': 1, '0"}
{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    return num | (num + 1)\n\nprint(set_left_most_unset_bit(10))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            result.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        return result[::-1]\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary"}
{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\ndef volume_cone(r,h):\n    return (1/3)*math.pi*r**2*h\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n/python/python_basics/01_variables/01_variables.py\n\"\"\"\nWrite a program that prints the following:\n\nMy name is \nMy age is 35\nMy yearly salary is 1000000\n\"\"\"\n\nprint(\"My name is \")\nprint(\"My age is 35\")\nprint(\"My yearly salary is 1000000\")\n/python/python_basics/02_data_types/02_data_types.py\n\"\"\"\nWrite a program that prints the following:\n\nMy name is \nMy age is 35\nMy yearly salary is 1000000\n\"\"\"\n\nname = \"\"\nage = 35\nsalary = 1000000\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n/python/python_basics/03_operators/03_operators.py\n\"\"\"\nWrite a program that prints the following:\n\nMy name is \nMy age is 35\nMy yearly salary is 1000000\n\"\"\"\n\nname = \"\"\nage = 35\nsalary = 1000000\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\nprint(\"My yearly salary is \" + str(salary))\n\nprint(\"My name is \" + name)\nprint(\"My age is \" + str(age))\n"}
{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return 2 ** (n.bit_length() - 1)\n\nprint(highest_Power_of_2(10))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\nclass Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = s.lower()\n        s = ''.join(c for c in s if c.isalnum())\n        return s == s[::-1]\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n/python/leetcode/easy/107_binary_tree_level_order_traversal_2.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            result.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        return result[::-1]\n/python/leetcode/easy/118_pascals_triangle.py\n\"\"\"\nGiven a non-negative integer numRows, generate the first numRows of Pas"}
{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find then'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(9))\n/python/recursion/sum_of_digits.py\n\"\"\"\nWrite a function that takes in a non-negative integer and returns the sum of its digits.\nassert sum_of_digits(123) == 6\nassert sum_of_digits(0) == 0\n\"\"\"\n\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n\nprint(sum_of_digits(123))\n/python/recursion/reverse_string.py\n\"\"\"\nWrite a function that takes in a string and returns a new string with the characters in reverse order.\nassert reverse_string(\"abcd\") == \"dcba\"\nassert reverse_string(\"a\") == \"a\"\nassert reverse_string(\"\") == \"\"\n\"\"\"\n\ndef reverse_string(s):\n    if len(s) == 0:\n        return \"\"\n    else:\n        return s[-1] + reverse_string(s[:-1])\n\nprint(reverse_string(\"abcd\"))\n/python/recursion/factorial.py\n\"\"\"\nWrite a function that takes in a non-negative integer and returns the factorial of that number.\nassert factorial(5) == 120\nassert factorial(0) == 1\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n/python/recursion/product_of_array.py\n\"\"\"\nWrite a function that takes in a non-empty array of numbers and returns the product of all the numbers in the array.\nassert product_of_array([1, 2, 3]) == 6\nassert product_of_array([1, 2, 3, 10]) == 60\n\"\"\"\n\ndef product_of_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] * product_of_array(arr[1:])\n\nprint(product_of_array([1, 2, 3]))\n/python/recursion/power.py\n\"\"\"\nWrite a function that takes in a base and an exponent and returns the power of the base to the exponent.\nassert power(2, 3) == 8\nassert power(3, 2) == 9\nassert power(2, 0) == 1\n\"\"\"\n\ndef power(base, exp):\n    if exp == 0:\n        return 1\n    else:\n        return base * power(base, exp-1)\n\nprint(power(2, 3))\n/python/recursion/fibonacci.py\n\"\"\"\nWrite a function that takes in a number and returns the nth number of the fibonacci sequence.\nassert fibonacci(0) == 0\nassert fibonacci(1) == 1\nassert fibonacci(2) == 1\nassert fibonacci(3) == 2\nassert fibonacci(4) == 3\nassert fibonacci(5) == 5\nassert fibonacci(6) == 8\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n/python/recursion/reverse_array.py\n\"\"\"\nWrite a function that takes in an array of numbers and returns a new array where the elements are in reverse order.\nassert reverse_array([1, 2, 3]) == [3, 2, 1]\nassert reverse_array([1, 2, 3, 10]) == [10, 3, 2, 1]\n\"\"\"\n\ndef reverse_array(arr):\n    if len(arr) == 1:"}
{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst,format):\n    return [format.format(i) for i in lst]\n\nprint(add_string([1,2,3,4],'temp{0}'))\n/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\n\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\n\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\nNote:\n\nAll given inputs are in lowercase letters a-z.\n\"\"\"\n\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1,len(strs)):\n        while strs[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n/python_practice/python_practice_2.py\n\"\"\"\nGiven a string, find the length of the longest substring without repeating characters.\n\nExample 1:\n\nInput: \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\n\nInput: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\n\nInput: \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\n             Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\"\"\"\n\ndef lengthOfLongestSubstring(s):\n    if not s:\n        return 0\n    max_len = 1\n    cur_len = 1\n    for i in range(1,len(s)):\n        if s[i] not in s[i-cur_len:i]:\n            cur_len += 1\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n            cur_len = i - s[i-cur_len:i].index(s[i])\n    if cur_len > max_len:\n        max_len = cur_len\n    return max_len\n\nprint(lengthOfLongestSubstring(\"abcabcbb\"))\nprint(lengthOfLongestSubstring(\"bbbbb\"))\nprint(lengthOfLongestSubstring(\"pwwkew\"))\n/python_practice/python_practice_3.py\n\"\"\"\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\"\"\"\n\ndef longestPalindrome(s):\n    if not s:\n        return \"\"\n    max_len = 1\n    max_str = s[0]\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                if j-i+1 > max_len:\n                    max_len = j-i+1\n                    max_str = s[i:j+1]\n    return max_str\n\nprint(longestPalindrome(\"babad\"))\nprint(longestPalindrome(\"cbbd\"))\n/python_practice/python_practice_4.py\n\"\"\"\nGiven a string, find the length of the longest substring without repeating characters.\n\nExample 1:\n\nInput: \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\n\nInput: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:"}
{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1,list2,list3):\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    for i in range(len(list1)):\n        dict1[list1[i]] = list2[i]\n        dict2[list1[i]] = list3[i]\n    dict3[dict1] = dict2\n    return dict3\n\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],[85, 98, 89, 92]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a function to calculate the sum of the two given integers. If the two values are the same, then return triple their sum.\nassert sum_of_two(3, 2) == 5\nassert sum_of_two(3, 3) == 18\n\"\"\"\n\ndef sum_of_two(a,b):\n    if a == b:\n        return (a+b)*3\n    else:\n        return a+b\n\nprint(sum_of_two(3,2))\nprint(sum_of_two(3,3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a function to check whether a given integer is within 100 of 1000.\nassert near_thousand(1000) == True\nassert near_thousand(900) == True\nassert near_thousand(800) == False\n\"\"\"\n\ndef near_thousand(n):\n    return (abs(1000-n) <= 100)\n\nprint(near_thousand(1000))\nprint(near_thousand(900))\nprint(near_thousand(800))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a function to check whether a given positive number is a multiple of 3 or a multiple of 7.\nassert multiple_of_three_or_seven(9) == True\nassert multiple_of_three_or_seven(8) == False\n\"\"\"\n\ndef multiple_of_three_or_seven(n):\n    return (n%3 == 0 or n%7 == 0)\n\nprint(multiple_of_three_or_seven(9))\nprint(multiple_of_three_or_seven(8))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\nassert sum_of_cubes(3) == 27\nassert sum_of_cubes(5) == 225\n\"\"\"\n\ndef sum_of_cubes(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n\nprint(sum_of_cubes(3))\nprint(sum_of_cubes(5))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\nassert sum_of_cubes(3) == 27\nassert sum_of_cubes(5) == 225\n\"\"\"\n\ndef sum_"}
{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif"}
{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6, 1, 5)) == True\nassert check_distinct((1, 4, 5, 6, 1, 6)) == True\nassert check_distinct((1, 4, 5, 6, 1, 7)) == True\nassert check_distinct((1, 4, 5, 6, 1, 8)) == True\nassert check_distinct((1, 4, 5, 6, 1, 9)) == True\nassert check_distinct((1, 4, 5, 6, 1, 10)) == True\nassert check_distinct((1, 4, 5, 6, 1, 11)) == True\nassert check_distinct((1, 4, 5, 6, 1, 12)) == True\nassert check_distinct((1, 4, 5, 6, 1, 13)) == True\nassert check_distinct((1, 4, 5, 6, 1, 14)) == True\nassert check_distinct((1, 4, 5, 6, 1, 15)) == True\nassert check_distinct((1, 4, 5, 6, 1, 16)) == True\nassert check_distinct((1, 4, 5, 6, 1, 17)) == True\nassert check_distinct((1, 4, 5, 6, 1, 18)) == True\nassert check_distinct((1, 4, 5, 6, 1, 19)) == True\nassert check_distinct((1, 4, 5, 6, 1, 20)) == True\nassert check_distinct((1, 4, 5, 6, 1, 21)) == True\nassert check_distinct((1, 4, 5, 6, 1, 22)) == True\nassert check_distinct((1, 4, 5, 6, 1, 23)) == True\nassert check_distinct((1, 4, 5, 6, 1, 24)) == True\nassert check_distinct((1, 4, 5, 6, 1, 25)) == True\nassert check_distinct((1, 4, 5, 6, 1, 26)) == True\nassert check_distinct((1, 4, 5, 6, 1, 27)) == True\nassert check_distinct((1, 4, 5, 6, 1, 28)) == True\nassert check_distinct((1, 4, 5, 6, 1, 29)) == True\nassert check_distinct((1, 4, 5, 6, 1, 30)) == True\nassert check_distinct((1, 4, 5, 6, 1, 31)) == True\nassert check_distinct((1, 4, 5, 6, 1, 32)) == True\nassert check_distinct((1, 4, 5, 6, 1, 33)) == True\nassert check_distinct((1, 4, 5, 6, 1, 34)) == True\nassert check_distinct((1, 4, 5, 6, 1, 35)) == True\nassert check_distinct((1, 4, 5, 6,"}
{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    # TODO: Write your code here\n    pass\n/python/data_structures/linked_list/linked_list.py\n\"\"\"\nImplement a linked list.\n\nThe linked list should have the following methods:\n\ninsert(value) - insert a new node with the given value at the beginning of the list\nremove(value) - remove the first node with the given value\nsearch(value) - search for a node with the given value and return the node\n\"\"\"\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, value):\n        # TODO: Write your code here\n        pass\n\n    def remove(self, value):\n        # TODO: Write your code here\n        pass\n\n    def search(self, value):\n        # TODO: Write your code here\n        pass\n/python/data_structures/queue/queue.py\n\"\"\"\nImplement a queue.\n\nThe queue should have the following methods:\n\nenqueue(value) - insert a new value at the end of the queue\ndequeue() - remove the first value from the queue\n\"\"\"\n\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, value):\n        # TODO: Write your code here\n        pass\n\n    def dequeue(self):\n        # TODO: Write your code here\n        pass\n/python/data_structures/stack/stack.py\n\"\"\"\nImplement a stack.\n\nThe stack should have the following methods:\n\npush(value) - insert a new value at the top of the stack\npop() - remove the top value from the stack\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, value):\n        # TODO: Write your code here\n        pass\n\n    def pop(self):\n        # TODO: Write your code here\n        pass\n/python/data_structures/binary_tree/binary_tree.py\n\"\"\"\nImplement a binary tree.\n\nThe binary tree should have the following methods:\n\ninsert(value) - insert a new node with the given value at the appropriate location in the tree\nsearch(value) - search for a node with the given value and return the node\n\"\"\"\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        # TODO: Write your code here\n        pass\n\n    def search(self, value):\n        # TODO: Write your code here\n        pass\n/python/data_structures/hash_table/hash_table.py\n\"\"\"\nImplement a hash table.\n\nThe hash table should have the following methods:\n\ninsert(key, value) - insert a new key-value pair at the appropriate location in the hash table\nremove(key) - remove the key-value pair with the given key from the hash table\nsearch(key) - search for a key-value pair with the given key and return the value\n\"\"\"\n\nclass HashTable:\n    def __init__(self):\n        self.table = []\n\n    def insert(self, key, value):\n        # TODO: Write your code here\n        pass\n\n    def remove(self, key):\n        # TODO: Write your code here\n        pass\n\n    def search(self, key):\n        # TODO: Write your code here\n        pass\n/python/data_structures/binary_search_tree/binary_search_tree.py\n\"\"\"\nImplement a binary search tree.\n\nThe binary search tree should have the following methods:\n\ninsert(value) - insert a new node with the given value at the appropriate location in the tree\nsearch(value) - search for a node with the given value"}
{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"ab"}
{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(25,55,65))\n\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55"}
{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(lst):\n    sum=0\n    for i in lst:\n        while i>0:\n            sum+=i%10\n            i=i//10\n    return sum\n\nprint(sum_of_digits([10,2,56]))\n/python/python_basics/02_variables.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na=10\nb=20\nprint(a+b)\n/python/python_basics/03_variables.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers.\n\na=10\nb=20\nprint(a+b)\n\n#Write a program to print the sum of two numbers"}
{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    \"\"\"\n    >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n    3\n    \"\"\"\n    return len(set(lst))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_fundamentals/for_loop_basic_2.py\n\"\"\"\n1. Biggie Size - Given a list, write a function that changes all positive numbers in the list to \"big\".\nExample: biggie_size([-1, 3, 5, -5]) returns that same list, but whose values are now [-1, \"big\", \"big\", -5]\n\"\"\"\n\ndef biggie_size(lst):\n    \"\"\"\n    >>> biggie_size([-1, 3, 5, -5])\n    [-1, 'big', 'big', -5]\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            lst[i] = 'big'\n    return lst\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\n1. Print all integers from 0 to 150.\n\"\"\"\n\ndef print_int():\n    \"\"\"\n    >>> print_int()\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    32\n    33\n    34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    51\n    52\n    53\n    54\n    55\n    56\n    57\n    58\n    59\n    60\n    61\n    62\n    63\n    64\n    65\n    66\n    67\n    68\n    69\n    70\n    71\n    72\n    73\n    74\n    75\n    76\n    77\n    78\n    79\n    80\n    81\n    82\n    83\n    84\n    85\n    86\n    87\n    88\n    89\n    90\n    91\n    92\n    93\n    94\n    95\n    96\n    97\n    98\n    99\n    100\n    101\n    102\n    103\n    104\n    105\n    106\n    107\n    108\n    109\n    110\n    111\n    112\n    113\n    114\n    115\n    116\n    117\n    118\n    119\n    120\n    121\n    122\n    123\n    124\n    125\n    126\n    127\n    128\n    129\n    130\n    131\n    132\n    133\n    134\n    135\n    136\n    137\n    138\n    139\n    140\n    141\n    142\n    143\n    144\n    145\n    146\n    147\n    148\n    149\n    150\n    \"\"\"\n    for i in range(151):\n        print(i)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_fundamentals/for_loop_basic_3.py\n\"\"\"\n3. Countdown - Given a number x, print countdown from x to 1.\nExample: countdown(5) should print 5, 4, 3, 2, 1\n\"\"\"\n\ndef countdown(x):\n    \"\"\"\n    >>> countdown(5)\n    5\n    4\n    3\n    2\n    1\n    \"\"\"\n    for i in range(x, 0, -1):\n        print(i)\n\nif __name__ =="}
{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\nassert minimum(1,2) == 1\nassert minimum(2,1) == 1\nassert minimum(1,1) == 1\n\n\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(1,2) == 2\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\nassert maximum(1,2) == 2\nassert maximum(2,1) == 2\nassert maximum(1,1) == 1\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\nassert maximum(1,2,3) == 3\n\"\"\"\n\ndef maximum(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nassert maximum(1,2,3) == 3\nassert maximum(3,2,1) == 3\nassert maximum(1,1,1) == 1\n\n\"\"\"\nWrite a python function to find the minimum of three numbers.\nassert minimum(1,2,3) == 1\n\"\"\"\n\ndef minimum(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nassert minimum(1,2,3) == 1\nassert minimum(3,2,1) == 1\nassert minimum(1,1,1) == 1\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\nassert maximum(1,2,3,4) == 4\n\"\"\"\n\ndef maximum(a,b,c,d):\n    if a > b and a > c and a > d:\n        return a\n    elif b > a and b > c and b > d:\n        return b\n    elif c > a and c > b and c > d:\n        return c\n    else:\n        return d\n\nassert maximum(1,2,3,4) == 4\nassert maximum(4,3,2,1) == 4\nassert maximum(1,1,1,1) == 1\n\n\"\"\"\nWrite a python function to find the minimum of four numbers.\nassert minimum(1,2,3,4) == 1\n\"\"\"\n\ndef minimum(a,b,c,d):\n    if a < b and a < c and a < d:\n        return a\n    elif b < a and b < c and b < d:\n        return b\n    elif c < a and c < b and c < d:\n        return c\n    else:\n        return d\n\nassert minimum(1,2,3,4) == 1\nassert minimum(4,3,2,1) == 1\nassert minimum(1,1,1,1) == 1\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\nassert maximum(1,2,3,4,5) == 5\n\"\"\"\n\ndef maximum(a,b,c,d,e):\n    if a > b and a > c and a > d and a > e:\n        return a\n    elif b > a and b > c and b > d and b > e:\n        return b\n    elif c > a and c > b and c > d and c > e:\n        return c\n    elif d > a and d > b and d > c and d > e:\n        return d\n    else:\n        return e\n\nassert maximum(1,2,3,4,5) == 5\nassert maximum(5,4,3,2,1) == 5\nassert maximum(1,1,1,1,1) == 1\n\n\"\"\"\nWrite a python function to find the minimum of five numbers.\nassert minimum(1,2,3,4,5) == 1\n\"\"\"\n\ndef minimum(a,b,c,d,e):\n    if a < b and a < c and a < d and a < e:\n        return a\n    elif b < a and b < c and b < d and b < e:\n        return b\n    elif c < a and c < b and c"}
{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, x):\n    if x in tuplex:\n        return True\n    else:\n        return False\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'z')==False\n\n\"\"\"\nWrite a function to convert a list to a tuple.\nassert convert_listx([1, 3, 5, 7, 9])== (1, 3, 5, 7, 9)\n\"\"\"\n\ndef convert_listx(listx):\n    return tuple(listx)\n\nassert convert_listx([1, 3, 5, 7, 9])== (1, 3, 5, 7, 9)\n\n\"\"\"\nWrite a function to remove an item from a tuple.\nassert remove_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==(\"w\", 3, \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\n\"\"\"\n\ndef remove_tuplex(tuplex, x):\n    tuplex = list(tuplex)\n    tuplex.remove(x)\n    return tuple(tuplex)\n\nassert remove_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==(\"w\", 3, \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\n\n\"\"\"\nWrite a function to slice a tuple.\nassert slice_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),2,6)==(\"r\", \"e\", \"s\", \"o\")\n\"\"\"\n\ndef slice_tuplex(tuplex, x, y):\n    return tuplex[x:y]\n\nassert slice_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),2,6)==(\"r\", \"e\", \"s\", \"o\")\n\n\"\"\"\nWrite a function to find the length of a tuple.\nassert length_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"))==10\n\"\"\"\n\ndef length_tuplex(tuplex):\n    return len(tuplex)\n\nassert length_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"))==10\n\n\"\"\"\nWrite a function to find the minimum and maximum values in a tuple.\nassert min_max_tuplex((4, 6, 2, 1, 7, 9))== (1, 9)\n\"\"\"\n\ndef min_max_tuplex(tuplex):\n    return (min(tuplex), max(tuplex))\n\nassert min_max_tuplex((4, 6, 2, 1, 7, 9))== (1, 9)\n\n\"\"\"\nWrite a function to find the product of all items in a tuple.\nassert product_tuplex((4, 6, 2, 1, 7, 9))== 3024\n\"\"\"\n\ndef product_tuplex(tuplex):\n    return reduce(lambda x, y: x*y, tuplex)\n\nassert product_tuplex((4, 6, 2, 1, 7, 9))== 3024\n\n\"\"\"\nWrite a function to find the sum of all items in a tuple.\nassert sum_tuplex((4, 6, 2, 1, 7, 9))== 28\n\"\"\"\n\ndef sum_tuplex(tuplex):\n    return reduce(lambda x, y: x+y, tuplex)\n\n"}
{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_4.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_5.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_6.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_7.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_8.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_9.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_10.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(12))\n/python_basics/python_basics_11.py\n\"\"\"\nWrite a python function to find whether the given number is even or odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity"}
{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    for j in range(len(n)-1, i-1, -1):\n        if n[j] > n[i-1]:\n            break\n    n = n[:i-1] + n[j] + n[i-1:j] + n[i] + n[j+1:]\n    return int(n)\n\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(123456789))\nprint(rearrange_bigger(123456798))\nprint(rearrange_bigger(12345678))\nprint(rearrange_bigger(1234567))\nprint(rearrange_bigger(123456))\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(123))\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(1))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(59884848459873))\nprint(rearrange_bigger(111))\nprint(rearrange_bigger(531))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(20))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(121))\nprint(rearrange_bigger(123456789))\nprint(rearrange_bigger(123456798))\nprint(rearrange_bigger(12345678))\nprint(rearrange_bigger(1234567))\nprint(rearrange_bigger(123456))\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(123))\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(1))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(59884848459873))\nprint(rearrange_bigger(111))\nprint(rearrange_bigger(531))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(20))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(121))\nprint(rearrange_bigger(123456789))\nprint(rearrange_bigger(123456798))\nprint(rearrange_bigger(12345678))\nprint(rearrange_bigger(1234567))\nprint(rearrange_bigger(123456))\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(123))\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(1))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(59884848459873))\nprint(rearrange_bigger(111))\nprint(rearrange_bigger(531))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(20))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(121))\nprint(rearrange_bigger(123456789))\nprint(rearrange_"}
{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    return min(lst, key=lambda x: x[0] * x[1])[0] * min(lst, key=lambda x: x[0] * x[1])[1]\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum(map(int, str(n))))\n\nassert digital_root(16) == 7\nassert digital_root(942) == 6\nassert digital_root(132189) == 6\nassert digital_root(493193) == 2\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n\"\"\"\n\ndef cube_odd(arr):\n    return sum(i**3 for i in arr if i % 2!= 0)\n\nassert cube_odd([1, 2, 3, 4]) == 27\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.js\n/*\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n*/\n\nfunction cubeOdd(arr) {\n  return arr.filter(x => x % 2!== 0).map(x => x ** 3).reduce((a, b) => a + b);\n}\n\nconsole.log(cubeOdd([1, 2, 3, 4]));\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.rb\n# Find the sum of the odd numbers within an array, after cubing the initial integers.\n# For example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n\ndef cube_odd(arr)\n  arr.select { |x| x.odd? }.map { |x| x ** 3 }.reduce(:+)\nend\n\np cube_odd([1, 2, "}
{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5,'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"\n    >>> min_val(['Python', 3, 2, 4, 5,'version'])\n    2\n    \"\"\"\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/02_functions/02_03_01_function_with_default_argument.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nIf the list is empty, the function should return 0.\n\"\"\"\n\ndef sum_of_numbers(lst):\n    \"\"\"\n    >>> sum_of_numbers([1, 2, 3])\n    6\n    >>> sum_of_numbers([])\n    0\n    \"\"\"\n    sum_of_numbers = 0\n    for i in lst:\n        sum_of_numbers += i\n    return sum_of_numbers\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/02_functions/02_03_02_function_with_default_argument.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nIf the list is empty, the function should return 0.\n\"\"\"\n\ndef sum_of_numbers(lst=[]):\n    \"\"\"\n    >>> sum_of_numbers([1, 2, 3])\n    6\n    >>> sum_of_numbers([])\n    0\n    \"\"\"\n    sum_of_numbers = 0\n    for i in lst:\n        sum_of_numbers += i\n    return sum_of_numbers\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/02_functions/02_03_03_function_with_default_argument.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nIf the list is empty, the function should return 0.\n\"\"\"\n\ndef sum_of_numbers(lst=[]):\n    \"\"\"\n    >>> sum_of_numbers([1, 2, 3])\n    6\n    >>> sum_of_numbers([])\n    0\n    \"\"\"\n    sum_of_numbers = 0\n    for i in lst:\n        sum_of_numbers += i\n    return sum_of_numbers\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/02_functions/02_03_04_function_with_default_argument.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nIf the list is empty, the function should return 0.\n\"\"\"\n\ndef sum_of_numbers(lst=[]):\n    \"\"\"\n    >>> sum_of_numbers([1, 2, 3])\n    6\n    >>> sum_of_numbers([])\n    0\n    \"\"\"\n    sum_of_numbers = 0\n    for i in lst:\n        sum_of_numbers += i\n    return sum_of_numbers\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/02_functions/02_03_05_function_with_default_argument.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\nIf the list is empty, the function should return 0.\n\"\"\"\n\ndef sum_of_numbers(lst=[]):\n    \"\"\"\n    >>> sum_of_numbers([1, 2, 3])\n    6\n    >>> sum_of_numbers([])\n    0\n    \"\"\"\n    sum_of_numbers = 0\n    for i in lst:\n        sum_of_numbers += i\n    return sum_of_numbers\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/02_functions/02_03_06_function_with_default_argument.py\n\"\"\"\nWrite a"}
{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\nprint(remove_odd([1,2,3]))\n/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# Variables are created when you assign a value to it.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python is a dynamically typed language.\n\n# Variables are case sensitive.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned in a single line.\n\n# Variables can be declared and assigned"}
{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(list_of_tuples,n):\n    return [i[n] for i in list_of_tuples]\n\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0))\n/Python/Python_Fundamentals/Functions_Intermediate_I/functions_intermediate_i.py\n\"\"\"\nFunctions Intermediate I\n\"\"\"\n\n\"\"\"\n1. Update Values in Dictionaries and Lists\n\nWrite a function that takes a dictionary as an argument and adds a new key to each key:value pair.\n\nThe function should also add a new key:value pair to the dictionary. The key should be \"first_name\" and the value should be \"Michael\".\n\nThe function should then return the dictionary.\n\nFor example, if this code were to be run:\n\nupdate_dictionary({'first_name': 'Elie', 'last_name': 'Schoppik'})\n\nIt would return the following dictionary:\n\n{'first_name': 'Elie', 'last_name': 'Schoppik', 'first_name': 'Michael'}\n\"\"\"\n\ndef update_dictionary(dict,key,value):\n    dict[key] = value\n    return dict\n\nprint(update_dictionary({'first_name': 'Elie', 'last_name': 'Schoppik'},'first_name','Michael'))\n\n\"\"\"\n2. Iterate Through a Dictionary with List Values\n\nWrite a function that takes in a dictionary and returns a new list of values based on a key.\n\nFor example, if this code were to be run:\n\niterateDictionary2({'first_name': 'Elie', 'last_name': 'Schoppik'})\n\nIt would return the following list:\n\n['Elie', 'Schoppik']\n\"\"\"\n\ndef iterateDictionary2(dict):\n    return list(dict.values())\n\nprint(iterateDictionary2({'first_name': 'Elie', 'last_name': 'Schoppik'}))\n\n\"\"\"\n3. Iterate Through a Dictionary with List Values\n\nWrite a function that takes in a dictionary and returns a new list of values based on a key.\n\nFor example, if this code were to be run:\n\niterateDictionary2({'first_name': 'Elie', 'last_name': 'Schoppik'})\n\nIt would return the following list:\n\n['Elie', 'Schoppik']\n\"\"\"\n\ndef iterateDictionary2(dict):\n    return list(dict.values())\n\nprint(iterateDictionary2({'first_name': 'Elie', 'last_name': 'Schoppik'}))\n\n\"\"\"\n4. Iterate Through a Dictionary with List Values\n\nWrite a function that takes in a dictionary and returns a new list of values based on a key.\n\nFor example, if this code were to be run:\n\niterateDictionary2({'first_name': 'Elie', 'last_name': 'Schoppik'})\n\nIt would return the following list:\n\n['Elie', 'Schoppik']\n\"\"\"\n\ndef iterateDictionary2(dict):\n    return list(dict.values())\n\nprint(iterateDictionary2({'first_name': 'Elie', 'last_name': 'Schoppik'}))\n\n\"\"\"\n5. Get Values From a List of Dictionaries\n\nWrite a function that takes a list of dictionaries and returns a new list of values from the key:value pairs.\n\nFor example, if this code were to be run:\n\niterateDictionary2([{'first_name': 'Elie', 'last_name': 'Schoppik'}, {'first_name': 'Matt', 'last_name': 'Lane'}])\n\nIt would return the following list:\n\n['Elie', 'Schoppik', 'Matt', 'Lane']\n\"\"\"\n\ndef iterateDictionary"}
{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1,seq2):\n    for i in seq1:\n        for j in seq2:\n            if i == j:\n                return True\n    return False\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3,4,5],[1,2,3,4,5]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"}
{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_product = 0\n    max_product_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_product_pair = [arr[i], arr[j]]\n    return max_product_pair\n\nprint(max_Product([1,2,3,4,7,0,8,4]))\n/python/leetcode/easy/14_longest_common_prefix.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\n\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\n\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\nNote:\n\nAll given inputs are in lowercase letters a-z.\n\"\"\"\n\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n    return prefix\n\nprint(longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n/python/leetcode/easy/13_roman_to_integer.py\n\"\"\"\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\n\nExample 1:\n\nInput: \"III\"\nOutput: 3\nExample 2:\n\nInput: \"IV\"\nOutput: 4\nExample 3:\n\nInput: \"IX\"\nOutput: 9\nExample 4:\n\nInput: \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\nExample 5:\n\nInput: \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\"\"\"\n\ndef romanToInt(s):\n    roman_dict = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000\n    }\n    total = 0\n    for i in range(len(s)):\n        if i < len(s) - 1 and roman"}
{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n   "}
{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/functions_intermediate_1.py\n\"\"\"\nCountdown - Create a function that accepts a number as an input. Return a new list that counts down by one, from the number (as the 0th element) down to 0 (as the last element).\nassert countdown(5) == [5,4,3,2,1,0]\n\"\"\"\n\ndef countdown(number):\n    new_list = []\n    for i in range(number, -1, -1):\n        new_list.append(i)\n    return new_list\n\nprint(countdown(5))\n\n\"\"\"\nPrint and Return - Create a function that will receive a list with two numbers. Print the first value and return the second.\nassert print_and_return([1,2]) == 2\n\"\"\"\n\ndef print_and_return(numbers):\n    print(numbers[0])\n    return numbers[1]\n\nprint(print_and_return([1,2]))\n\n\"\"\"\nFirst Plus Length - Create a function that accepts a list and returns the sum of the first value in the list plus the list's length.\nassert first_plus_length([1,2,3,4,5]) == 6\n\"\"\"\n\ndef first_plus_length(numbers):\n    return numbers[0] + len(numbers)\n\nprint(first_plus_length([1,2,3,4,5]))\n\n\"\"\"\nValues Greater than Second - Write a function that accepts a list and creates a new list containing only the values from the original list that are greater than"}
{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(2))\n\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert cube_Sum(2) == 108\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(cube"}
{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_data, delimiter=\"-\"):\n    return delimiter.join(tuple_data)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n\n\"\"\"\nWrite a function to convert a list of tuples into a dictionary.\nassert convert_list_of_tuples_to_dict([('ID', 'is', 4), ('UTS', 'is', 'awesome')]) == {'ID': 'is', 'UTS': 'is'}\n\"\"\"\ndef convert_list_of_tuples_to_dict(list_of_tuples):\n    return dict(list_of_tuples)\n\nassert convert_list_of_tuples_to_dict([('ID', 'is', 4), ('UTS', 'is', 'awesome')]) == {'ID': 'is', 'UTS': 'is'}\n\n\"\"\"\nWrite a function to convert a dictionary into a list of tuples.\nassert convert_dict_to_list_of_tuples({'ID': 'is', 'UTS': 'is'}) == [('ID', 'is'), ('UTS', 'is')]\n\"\"\"\ndef convert_dict_to_list_of_tuples(dict_data):\n    return list(dict_data.items())\n\nassert convert_dict_to_list_of_tuples({'ID': 'is', 'UTS': 'is'}) == [('ID', 'is'), ('UTS', 'is')]\n\n\"\"\"\nWrite a function to convert a list of dictionaries into a list of tuples.\nassert convert_list_of_dicts_to_list_of_tuples([{'ID': 'is', 'UTS': 'is'}, {'ID': 'is', 'UTS': 'awesome'}]) == [('ID', 'is', 'UTS', 'is'), ('ID', 'is', 'UTS', 'awesome')]\n\"\"\"\ndef convert_list_of_dicts_to_list_of_tuples(list_of_dicts):\n    return list(zip(*list_of_dicts.values()))\n\nassert convert_list_of_dicts_to_list_of_tuples([{'ID': 'is', 'UTS': 'is'}, {'ID': 'is', 'UTS': 'awesome'}]) == [('ID', 'is', 'UTS', 'is'), ('ID', 'is', 'UTS', 'awesome')]\n\n\"\"\"\nWrite a function to convert a list of tuples into a list of dictionaries.\nassert convert_list_of_tuples_to_list_of_dicts([('ID', 'is', 4), ('UTS', 'is', 'awesome')]) == [{'ID': 'is', 'UTS': 'is'}, {'ID': 4, 'UTS': 'awesome'}]\n\"\"\"\ndef convert_list_of_tuples_to_list_of_dicts(list_of_tuples):\n    return [dict(list_of_tuples[i:i+2]) for i in range(0, len(list_of_tuples), 2)]\n\nassert convert_list_of_tuples_to_list_of_dicts([('ID', 'is', 4), ('UTS', 'is', 'awesome')]) == [{'ID': 'is', 'UTS': 'is'}, {'ID': 4, 'UTS': 'awesome'}]\n\n\"\"\"\nWrite a function to convert a list of dictionaries into a list of lists.\nassert convert_list_of_dicts_to_list_of_lists([{'ID': 'is', 'UTS': 'is'}, {'ID': 'is', 'UTS': 'awesome'}]) == [['ID', 'is', 'UTS', 'is'], ['ID', 'is', 'UTS', 'awesome']]\n\"\"\"\ndef convert_list_of_dicts_to_list_of_lists(list_of_dicts):\n    return [list(list_of_dicts[i].keys()) + list(list_of_dicts[i].values()) for i in range(len(list_of_dicts))]\n\nassert convert_list_of_dicts_to_list_of_lists([{'ID': 'is', 'UTS': 'is'}, {'ID': 'is', 'UTS': 'awesome'}]) == [['ID', 'is', 'UTS', 'is'], ['ID', 'is', 'UTS', 'awesome']]\n\n\"\"\"\nWrite"}
{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n\nprint(find_Average_Of_Cube(2))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\nassert find_Sum_Of_Cube(2) == 14\n\"\"\"\ndef find_Sum_Of_Cube(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n\nprint(find_Sum_Of_Cube(2))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\nassert find_Sum_Of_Square(2) == 5\n\"\"\"\ndef find_Sum_Of_Square(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    return sum\n\nprint(find_Sum_Of_Square(2))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the average of squares of first n natural numbers.\nassert find_Average_Of_Square(2) == 3.5\n\"\"\"\ndef find_Average_Of_Square(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    return sum/n\n\nprint(find_Average_Of_Square(2))\n"}
{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r','s']\n\"\"\"\n\ndef extract_rear(tup):\n    return [x[-1] for x in tup]\n\nprint(extract_rear(('Mers', 'for', 'Vers')))\n/python_basics/001_python_basics/001_python_basics.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\nSample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output :\n\nTwinkle, twinkle, little star,\n\tHow I wonder what you are! \n\t\tUp above the world so high,   \t\t\n\t\tLike a diamond in the sky. \nTwinkle, twinkle, little star, \n\tHow I wonder what you are\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n/python_basics/003_python_basics/003_python_basics.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\n\nimport sys\n\nprint(sys.version)\n/python_basics/002_python_basics/002_python_basics.py\n\"\"\"\nWrite a Python program to display the current date and time.\nSample Output :\nCurrent date and time :\n2014-07-05 14:34:14\n\"\"\"\n\nimport datetime\n\nprint(datetime.datetime.now())\n/python_basics/004_python_basics/004_python_basics.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\n\nimport math\n\nradius = float(input(\"Enter radius: \"))\n\nprint(\"Area of circle with radius {} is {}\".format(radius, math.pi * radius * radius))\n/python_basics/005_python_basics/005_python_basics.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\n\nprint(\"{} {}\".format(last_name, first_name))\n/python_basics/006_python_basics/006_python_basics.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\n\nnumbers = input(\"Enter comma separated numbers: \")\n\nprint(list(numbers.split(\",\")))\nprint(tuple(numbers.split(\",\")))\n/python_basics/007_python_basics/007_python_basics.py\n\"\"\"\nWrite a Python program to display the first and last colors from the following list.\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\n\"\"\"\n\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\n\nprint(color_list[0])\nprint(color_list[-1])\n/python_basics/008_python_basics/008_python_basics.py\n\"\"\"\nWrite a Python program to display the examination schedule. (extract the date from exam_st_date).\nexam_st_date = (11, 12, 2014)\nSample Output : The examination will start from : 11 / 12 / 2014\n\"\"\"\n\nexam_st_date = (11, 12, 2014)\n\nprint(\"The examination will start from : {} / {} / {}\".format(exam_st_date[0], exam_st_date[1], exam_st_date[2]))\n/python_basics/009_python_basics/009_python_basics.py\n\"\"\"\nWrite a Python program that accepts an"}
{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists,element):\n    count=0\n    for i in list_of_lists:\n        if element in i:\n            count+=1\n    return count\n\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list"}
{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return [x for x in numbers if x % 2 == 1]\n\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n/python/python_basics/01_variables/02_variables.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\n\"\"\"\n\nname = input(\"What is your name? \")\nprint(\"Hello \" + name)\n/python/python_basics/02_conditionals/02_conditionals.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\nIf the user enters their name as \"Bob\", print \"Hello Bob\".\nIf their name is \"Alice\", print \"Hello Alice\".\nIf their name is \"Eve\", print \"Hello Eve\".\nIf their name is something else, print \"Hello unknown\".\n\"\"\"\n\nname = input(\"What is your name? \")\n\nif name == \"Bob\":\n    print(\"Hello Bob\")\nelif name == \"Alice\":\n    print(\"Hello Alice\")\nelif name == \"Eve\":\n    print(\"Hello Eve\")\nelse:\n    print(\"Hello unknown\")\n/python/python_basics/02_conditionals/01_conditionals.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\nIf the user enters their name as \"Bob\", print \"Hello Bob\".\nIf their name is \"Alice\", print \"Hello Alice\".\nIf their name is \"Eve\", print \"Hello Eve\".\nIf their name is something else, print \"Hello unknown\".\n\"\"\"\n\nname = input(\"What is your name? \")\n\nif name == \"Bob\":\n    print(\"Hello Bob\")\nelif name == \"Alice\":\n    print(\"Hello Alice\")\nelif name == \"Eve\":\n    print(\"Hello Eve\")\nelse:\n    print(\"Hello unknown\")\n/python/python_basics/03_loops/01_loops.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\nIf the user enters their name as \"Bob\", print \"Hello Bob\".\nIf their name is \"Alice\", print \"Hello Alice\".\nIf their name is \"Eve\", print \"Hello Eve\".\nIf their name is something else, print \"Hello unknown\".\n\"\"\"\n\nname = input(\"What is your name? \")\n\nwhile name!= \"Bob\" and name!= \"Alice\" and name!= \"Eve\":\n    name = input(\"What is your name? \")\n\nif name == \"Bob\":\n    print(\"Hello Bob\")\nelif name == \"Alice\":\n    print(\"Hello Alice\")\nelif name == \"Eve\":\n    print(\"Hello Eve\")\nelse:\n    print(\"Hello unknown\")\n/python/python_basics/04_functions/01_functions.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\nassert largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==10\n\"\"\"\n\ndef largest(numbers):\n    return max(numbers)\n\nprint(largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n/python/python_basics/04_functions/02_functions.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==1\n\"\"\"\n\ndef smallest(numbers):\n    return min(numbers)\n\nprint(smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n/python/python_basics/04_functions/"}
{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    return date[8:] + \"-\" + date[5:7] + \"-\" + date[:4]\n\nprint(change_date_format(\"2026-01-02\"))/python/python_basics/01_variables/02_variable_types.py\n\"\"\"\nVariables can be of different types.\n\"\"\"\n\n# Integer\na = 1\nprint(a)\n\n# Float\nb = 1.0\nprint(b)\n\n# String\nc = \"Hello World\"\nprint(c)\n\n# Boolean\nd = True\nprint(d)\n\n# List\ne = [1, 2, 3, 4, 5]\nprint(e)\n\n# Tuple\nf = (1, 2, 3, 4, 5)\nprint(f)\n\n# Dictionary\ng = {\"a\": 1, \"b\": 2, \"c\": 3}\nprint(g)\n\n# Set\nh = {1, 2, 3, 4, 5}\nprint(h)\n\n# None\ni = None\nprint(i)\n/python/python_basics/02_operators/01_arithmetic_operators.py\n\"\"\"\nArithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, etc.\n\"\"\"\n\n# Addition\na = 1 + 2\nprint(a)\n\n# Subtraction\nb = 1 - 2\nprint(b)\n\n# Multiplication\nc = 1 * 2\nprint(c)\n\n# Division\nd = 1 / 2\nprint(d)\n\n# Floor Division\ne = 1 // 2\nprint(e)\n\n# Modulus\nf = 1 % 2\nprint(f)\n\n# Exponent\ng = 1 ** 2\nprint(g)\n\n# Floor Division\nh = 1 // 2\nprint(h)\n\n# Floor Division\ni = 1 // 2\nprint(i)\n\n# Floor Division\nj = 1 // 2\nprint(j)\n\n# Floor Division\nk = 1 // 2\nprint(k)\n\n# Floor Division\nl = 1 // 2\nprint(l)\n\n# Floor Division\nm = 1 // 2\nprint(m)\n\n# Floor Division\nn = 1 // 2\nprint(n)\n\n# Floor Division\no = 1 // 2\nprint(o)\n\n# Floor Division\np = 1 // 2\nprint(p)\n\n# Floor Division\nq = 1 // 2\nprint(q)\n\n# Floor Division\nr = 1 // 2\nprint(r)\n\n# Floor Division\ns = 1 // 2\nprint(s)\n\n# Floor Division\nt = 1 // 2\nprint(t)\n\n# Floor Division\nu = 1 // 2\nprint(u)\n\n# Floor Division\nv = 1 // 2\nprint(v)\n\n# Floor Division\nw = 1 // 2\nprint(w)\n\n# Floor Division\nx = 1 // 2\nprint(x)\n\n# Floor Division\ny = 1 // 2\nprint(y)\n\n# Floor Division\nz = 1 // 2\nprint(z)\n\n# Floor Division\naa = 1 // 2\nprint(aa)\n\n# Floor Division\nbb = 1 // 2\nprint(bb)\n\n# Floor Division\ncc = 1 // 2\nprint(cc)\n\n# Floor Division\ndd = 1 // 2\nprint(dd)\n\n# Floor Division\nee = 1 // 2\nprint(ee)\n\n# Floor Division\nff = 1 // 2\nprint(ff)\n\n# Floor Division\ngg = 1"}
{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(array):\n    gap = len(array) // 2\n    while gap > 0:\n        for i in range(gap, len(array)):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n        gap //= 2\n    return array\n\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))\n/01_Data_Structures/02_Linked_Lists/01_Singly_Linked_List/01_Singly_Linked_List.py\n\"\"\"\nSingly Linked List\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        node = Node(data)\n        node.next = self.head\n        self.head = node\n\n    def insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data)\n            return\n        itr = self.head\n        while itr.next:\n            itr = itr.next\n        itr.next = Node(data)\n\n    def insert_values(self, data_list):\n        self.head = None\n        for data in data_list:\n            self.insert_at_end(data)\n\n    def get_length(self):\n        count = 0\n        itr = self.head\n        while itr:\n            count += 1\n            itr = itr.next\n        return count\n\n    def remove_at(self, index):\n        if index < 0 or index >= self.get_length():\n            raise Exception(\"Invalid Index\")\n        if index == 0:\n            self.head = self.head.next\n            return\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                itr.next = itr.next.next\n                break\n            itr = itr.next\n            count += 1\n\n    def insert_at(self, index, data):\n        if index < 0 or index > self.get_length():\n            raise Exception(\"Invalid Index\")\n        if index == 0:\n            self.insert_at_beginning(data)\n            return\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                node = Node(data)\n                node.next = itr.next\n                itr.next = node\n                break\n            itr = itr.next\n            count += 1\n\n    def insert_after_value(self, data_after, data_to_insert):\n        if self.head is None:\n            return\n        if self.head.data == data_after:\n            self.insert_at_beginning(data_to_insert)\n            return\n        itr = self.head\n        while itr:\n            if itr.data == data_after:\n                node = Node(data_to_insert)\n                node.next = itr.next\n                itr.next = node\n                break\n            itr = itr.next\n\n    def remove_by_value(self, data):\n        if self.head is None:\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        itr = self.head\n        while itr.next:\n            if itr.next.data == data:\n                itr.next = itr.next.next\n                break\n            itr = itr.next\n\n    def insert_before_value(self, data_before, data_to_insert):\n        if self.head is None:\n            return\n        if self.head.data == data_before:\n            self.insert_at_beginning(data_to_insert)\n            return\n        itr = self.head\n        while itr.next:\n            if itr.next.data == data_before:\n                node = Node(data_to_insert)\n                node.next = itr.next\n                itr.next = node\n                break\n            itr = itr.next\n\n    def print_list(self):\n        if"}
{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tup1, tup2):\n    \"\"\"\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(a & b for a, b in zip(tup1, tup2))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/0001_two_sum.py\n\"\"\"\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\"\"\"\n\nclass Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        for i, num in enumerate(nums):\n            for j, num2 in enumerate(nums[i+1:]):\n                if num + num2 == target:\n                    return [i, i+j+1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/0002_add_two_numbers.py\n\"\"\"\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n\"\"\"\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        carry = 0\n        head = ListNode(0)\n        curr = head\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry /= 10\n        return head.next\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/0003_longest_substring_without_repeating_characters.py\n\"\"\"\nGiven a string, find the length of the longest substring without repeating characters.\n\nExamples:\n\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\n\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\n\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\"\"\"\n\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        max_len = 1\n        curr_len = 1\n        curr_set = set()\n        curr_set.add(s[0])\n        for i in range(1, len(s)):\n            if s[i] not in curr_set:\n                curr_len += 1\n                curr_set.add(s[i])\n            else:\n                if curr_len > max_len:\n                    max_len"}
{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return -4*a*c\n\n\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==-10\n\"\"\"\ndef parabola_focus(a,b,c):\n    return -2*a*c\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-1,1)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    return (-b/(2*a),-parabola_focus(a,b,c)/(4*a))\n\n\"\"\"\nWrite a function to find the equation of a parabola.\nassert parabola_equation(5,3,2)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation(a,b,c):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the focus and directrix.\nassert parabola_equation_focus_directrix(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_focus_directrix(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the vertex and directrix.\nassert parabola_equation_vertex_directrix(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_vertex_directrix(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the vertex and focus.\nassert parabola_equation_vertex_focus(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_vertex_focus(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the directrix and focus.\nassert parabola_equation_directrix_focus(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_directrix_focus(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the directrix and vertex.\nassert parabola_equation_directrix_vertex(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_directrix_vertex(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the focus and vertex.\nassert parabola_equation_focus_vertex(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_focus_vertex(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the focus and directrix.\nassert parabola_equation_focus_directrix(5,3,2,1)==\"x^2+3x+2\"\n\"\"\"\ndef parabola_equation_focus_directrix(a,b,c,d):\n    return \"x^2\"+\"+\"+str(b)+\"x\"+\"+\"+str(c)\n\n\"\"\"\nWrite a function to find the equation of a parabola given the vertex and directrix.\nassert parabola_equation_vertex_directrix(5,3,2,1)="}
{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nprint(common_element([1,2,3,4,5], [5,6,7,8,9]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/for_loop_basic1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n/python/python_fundamentals/functions_intermediate1.py\n\"\"\"\nUpdate Values in Dictionaries and Lists\n\"\"\"\n\nx = [ [5,2,3], [10,8,9] ]\nstudents = [\n    {'first_name':  'Michael', 'last_name': 'Jordan'},\n    {'first_name': 'John', 'last_name': 'Rosales'}\n]\nsport"}
{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n\nprint(median_trapezium(15,25,35))\n\n\"\"\"\nWrite a function to find the area of a trapezium.\nassert area_trapezium(15,25,35)==125\n\"\"\"\n\ndef area_trapezium(a,b,c):\n    return (a+b)*c/2\n\nprint(area_trapezium(15,25,35))\n\n\"\"\"\nWrite a function to find the area of a triangle.\nassert area_triangle(15,25,35)==125\n\"\"\"\n\ndef area_triangle(a,b,c):\n    return (a*b*c)/2\n\nprint(area_triangle(15,25,35))\n\n\"\"\"\nWrite a function to find the area of a circle.\nassert area_circle(15)==706.8583470577035\n\"\"\"\n\ndef area_circle(r):\n    return 3.14*r**2\n\nprint(area_circle(15))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\nassert area_rectangle(15,25)==375\n\"\"\"\n\ndef area_rectangle(a,b):\n    return a*b\n\nprint(area_rectangle(15,25))\n\n\"\"\"\nWrite a function to find the area of a square.\nassert area_square(15)==225\n\"\"\"\n\ndef area_square(a):\n    return a**2\n\nprint(area_square(15))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\nassert area_parallelogram(15,25)==375\n\"\"\"\n\ndef area_parallelogram(a,b):\n    return a*b\n\nprint(area_parallelogram(15,25))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\nassert area_rhombus(15,25)==375\n\"\"\"\n\ndef area_rhombus(a,b):\n    return a*b\n\nprint(area_rhombus(15,25))\n\n\"\"\"\nWrite a function to find the area of a kite.\nassert area_kite(15,25)==375\n\"\"\"\n\ndef area_kite(a,b):\n    return a*b\n\nprint(area_kite(15,25))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\nassert area_trapezoid(15,25,35)==125\n\"\"\"\n\ndef area_trapezoid(a,b,c):\n    return (a+b)*c/2\n\nprint(area_trapezoid(15,25,35))\n\n\"\"\"\nWrite a function to find the area of a regular polygon.\nassert area_regular_polygon(15,25)==375\n\"\"\"\n\ndef area_regular_polygon(a,b):\n    return a*b\n\nprint(area_regular_polygon(15,25))\n\n\"\"\"\nWrite a function to find the area of a regular hexagon.\nassert area_regular_hexagon(15)==1092.6875\n\"\"\"\n\ndef area_regular_hexagon(a):\n    return 3*a**2*3.14/2\n\nprint(area_regular_hexagon(15))\n\n\"\"\"\nWrite a function to find the area of a regular octagon.\nassert area_regular_octagon(15)==1092.6875\n\"\"\"\n\ndef area_regular_octagon(a):\n    return 4*a**2*3.14/2\n\nprint(area_regular_octagon(15))\n\n\"\"\"\nWrite a function to find the area of a regular decagon.\nassert area_regular_decagon(15)==1092.68"}
{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\ndef check_greater(array, number):\n    for i in array:\n        if i > number:\n            return True\n    return False\n\nprint(check_greater([1, 2, 3, 4, 5], 4))\n/python/01_basics/02_variables/01_variables.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string value of your name.\n\"\"\"\n\nname = \"\"\nprint(name)\n/python/01_basics/04_strings/01_strings.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string value of your name.\n\"\"\"\n\nname = \"\"\nprint(name)\n/python/01_basics/03_numbers/01_numbers.py\n\"\"\"\nWrite a program that creates a variable called age and assigns it a number value of your age.\n\"\"\"\n\nage = 24\nprint(age)\n/python/01_basics/04_strings/02_strings.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string value of your name.\n\"\"\"\n\nname = \"\"\nprint(name)\n/python/01_basics/02_variables/02_variables.py\n\"\"\"\nWrite a program that creates a variable called age and assigns it a number value of your age.\n\"\"\"\n\nage = 24\nprint(age)\n/python/01_basics/03_numbers/02_numbers.py\n\"\"\"\nWrite a program that creates a variable called age and assigns it a number value of your age.\n\"\"\"\n\nage = 24\nprint(age)\n/python/01_basics/01_hello_world/01_hello_world.py\n\"\"\"\nWrite a program that prints the string \"Hello World!\" to the console.\n\"\"\"\n\nprint(\"Hello World!\")\n/python/01_basics/01_hello_world/02_hello_world.py\n\"\"\"\nWrite a program that prints the string \"Hello World!\" to the console.\n\"\"\"\n\nprint(\"Hello World!\")\n/python/01_basics/04_strings/03_strings.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string value of your name.\n\"\"\"\n\nname = \"\"\nprint(name)\n/python/01_basics/03_numbers/03_numbers.py\n\"\"\"\nWrite a program that creates a variable called age and assigns it a number value of your age.\n\"\"\"\n\nage = 24\nprint(age)\n/python/01_basics/02_variables/03_variables.py\n\"\"\"\nWrite a program that creates a variable called age and assigns it a number value of your age.\n\"\"\"\n\nage = 24\nprint(age)\n/python/01_basics/01_hello_world/03_hello_world.py\n\"\"\"\nWrite a program that prints the string \"Hello World!\" to the console.\n\"\"\"\n\nprint(\"Hello World!\")\n/python/01_basics/04_strings/04_strings.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string value of your name.\n\"\"\"\n\nname = \"\"\nprint(name)\n"}
{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n\nprint(last_Digit(123))/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# 1. Declare a variable named \"name\" and assign to it a string value of your name.\nname = \"\"\n\n# 2. Declare a variable named \"age\" and assign to it an integer value of your age.\nage = 27\n\n# 3. Declare a variable named \"is_married\" and assign to it a boolean value of whether you are married or not.\nis_married = False\n\n# 4. Declare a variable named \"is_single\" and assign to it a boolean value of whether you are single or not.\nis_single = True\n\n# 5. Declare a variable named \"is_student\" and assign to it a boolean value of whether you are a student or not.\nis_student = False\n\n# 6. Declare a variable named \"is_employed\" and assign to it a boolean value of whether you are employed or not.\nis_employed = True\n\n# 7. Declare a variable named \"is_graduated\" and assign to it a boolean value of whether you are graduated or not.\nis_graduated = True\n\n# 8. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 9. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 10. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 11. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 12. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 13. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 14. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 15. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 16. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 17. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 18. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 19. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 20. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 21. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 22. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 23. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 24. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 25. Declare a variable named \"is_active\" and assign to it a boolean value of whether you are active or not.\nis_active = True\n\n# 26. Declare a variable named"}
{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\ndef neg_nos(nums):\n    return [num for num in nums if num < 0]\n\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n/python/01_basics/02_lists/01_list_basics.py\n\"\"\"\nList basics\n\"\"\"\n\n# Create a list\nmy_list = [1, 2, 3]\n\n# Accessing elements\nprint(my_list[0])\n\n# Slicing\nprint(my_list[1:])\n\n# Length\nprint(len(my_list))\n\n# Append\nmy_list.append(4)\nprint(my_list)\n\n# Insert\nmy_list.insert(1, 10)\nprint(my_list)\n\n# Remove\nmy_list.remove(10)\nprint(my_list)\n\n# Pop\nmy_list.pop()\nprint(my_list)\n\n# Reverse\nmy_list.reverse()\nprint(my_list)\n\n# Sort\nmy_list.sort()\nprint(my_list)\n\n# Copy\nmy_list_copy = my_list.copy()\nprint(my_list_copy)\n\n# Clear\nmy_list.clear()\nprint(my_list)\n/python/01_basics/01_variables/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Assigning a value to a variable\na = 1\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning multiple values to multiple variables\na, b, c = 1, 2, 3\n\n# Printing the values of multiple variables\nprint(a, b, c)\n\n# Printing the type of multiple variables\nprint(type(a), type(b), type(c))\n\n# Assigning the same value to multiple variables\na = b = c = 1\n\n# Printing the values of multiple variables\nprint(a, b, c)\n\n# Printing the type of multiple variables\nprint(type(a), type(b), type(c))\n\n# Assigning a value to a variable using the assignment operator\na = 1\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na += 1\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na -= 1\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na *= 2\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na /= 2\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na %= 2\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na **= 2\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n\n# Assigning a value to a variable using the assignment operator\na //= 2\n\n# Printing the value of a variable\nprint(a)\n\n# Printing the type of a variable\nprint(type(a))\n/python/01_basics/03_dictionaries/01_dictionary_basics.py\n\"\"\"\nDictionary basics\n\"\"\"\n\n# Create a dictionary\nmy_dict = {\n    \"name\": \"John\",\n    \"age\": 30,\n   "}
{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return \"\".join([char for char in string if ord(char)%2==0])\n\nprint(remove_odd(\"python\"))\n/python/01_python_basics/01_python_basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Write a Python program to print the following string in a specific format\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\n# 2. Write a Python program to get the Python version you are using\nimport sys\nprint(\"Python version\")\nprint(sys.version)\nprint(\"Version info.\")\nprint(sys.version_info)\n\n# 3. Write a Python program to display the current date and time\nimport datetime\nprint(datetime.datetime.now())\n\n# 4. Write a Python program which accepts the radius of a circle from the user and compute the area\nr = float(input(\"Input the radius of the circle : \"))\nprint(\"The area of the circle with radius \" + str(r) + \" is: \" + str(3.14 * (r**2)))\n\n# 5. Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them\nfirst_name = input(\"Input your First Name : \")\nlast_name = input(\"Input your Last Name : \")\nprint(last_name + \" \" + first_name)\n\n# 6. Write a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers\nvalues = input(\"Input some comma seprated numbers : \")\nlist = values.split(\",\")\ntuple = tuple(list)\nprint('List : ',list)\nprint('Tuple : ',tuple)\n\n# 7. Write a Python program to accept a filename from the user and print the extension of that\nfilename = input(\"Input the Filename: \")\nf_extns = filename.split(\".\")\nprint(\"The extension of the file is : \" + repr(f_extns[-1]))\n\n# 8. Write a Python program to display the first and last colors from the following list\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\nprint(color_list[0],color_list[-1])\n\n# 9. Write a Python program to display the examination schedule. (extract the date from exam_st_date)\nexam_st_date = (11, 12, 2014)\nprint(\"The examination will start from : %i / %i / %i\"%exam_st_date)\n\n# 10. Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.\nn = int(input(\"Input an integer : \"))\nprint(n + (n*11) + (n*111))\n\n# 11. Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s).\nprint(abs.__doc__)\n\n# 12. Write a Python program to print the calendar of a given month and year.\n# Note : Use 'calendar' module.\nimport calendar\ny = int(input(\"Input the year : \"))\nm = int(input(\"Input the month : \"))\nprint(calendar.month(y, m))\n\n# 13. Write a Python program to print the following here document.\nprint(\"\"\"a string that you \"don't\" have to escape\nThis\nis a....... multi-line\nheredoc string --------> example\"\"\")\n\n# 14. Write a Python program to calculate number of days between two dates.\n# Sample dates : (2014, 7, 2), (2014, 7, 11)\n# Expected output : 9 days\nfrom datetime import date\nf_date = date(2014, 7, 2)\nl_date = date(2014, 7, 11)\ndelta = l_date - f_date\nprint"}
{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\n\ndef count_bidirectional(pairs):\n    count = 0\n    for pair in pairs:\n        if pair[::-1] in pairs:\n            count += 1\n    return count\n\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_depth(root):\n    if root is None:\n        return 0\n    return max(max_depth(root.left), max_depth(root.right)) + 1\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(max_depth(root))\n/python/leetcode/easy/121_best_time_to_buy_and_sell_stock.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\nNote that you cannot sell a stock before you buy one.\n\nExample 1:\n\nInput: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\nExample 2:\n\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\"\"\"\n\ndef max_profit(prices):\n    if len(prices) < 2:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit\n\nprint(max_profit([7,1,5,3,6,4]))\nprint(max_profit([7,6,4,3,1]))\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput"}
{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list):\n    return int(''.join(map(str, list)))\n\nprint(multiple_to_single([11, 33, 50]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list.\nWhere n is the number of coins to be tossed.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    return [toss_coin() for i in range(n)]\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_win() that returns a string - \"Heads\" or \"Tails\"\nHave the function print \"Attempt #\" on each attempt before the flip\nIf it is heads, add one to the heads counter\nIf it is tails, add one to the tails counter\nIf the result is heads, print \"It took 5 attempts to get heads\"\nIf the result is tails, print \"It took 5 attempts to get tails\"\n\"\"\"\n\ndef toss_coin_to_win():\n    heads = 0\n    tails = 0\n    for i in range(1, 5):\n        print(\"Attempt #\" + str(i))\n        if toss_coin() == \"Heads\":\n            heads += 1\n        else:\n            tails += 1\n    if heads > tails:\n        print(\"It took \" + str(heads) + \" attempts to get heads\")\n    else:\n        print(\"It took \" + str(tails) + \" attempts to get tails\")\n\ntoss_coin_to_win()\n/python/python_fundamentals/functions_intermediate1.py\n\"\"\"\nUpdate Values in Dictionaries and Lists\n\"\"\"\n\nx = [ [5,2"}
{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its positions in the sentence\n    \"\"\"\n    pass\n\n\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of the first adverb and its"}
{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(size):\n    return 6 * size**2\n\nprint(surfacearea_cube(5))\n/python/python_basics/01_variables/01_variables.py\n\"\"\"\nVariables\n\nVariables are containers for storing data values.\n\nVariables do not need to be declared with any particular type and can even change type after they have been set.\n\n\"\"\"\n\n# Assigning a value to a variable\nx = 5\nprint(x)\n\n# Re-assigning a value to a variable\nx = 10\nprint(x)\n\n# Multiple assignments\nx, y, z = 1, 2, 3\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Unpacking a collection into variables\nx, y, z = [1, 2, 3]\nprint(x, y, z)\n\n# Unpacking a string into variables\na, b, c = \"abc\"\nprint(a, b, c)\n\n# Unpacking a tuple into variables\na, b, c = (1, 2, 3)\nprint(a, b, c)\n\n# Unpacking a dictionary into variables\na, b, c = {\"a\": 1, \"b\": 2, \"c\": 3}.values()\nprint(a, b, c)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = 10\nprint(x, y, z)\n\n# Assigning the same value to multiple variables at once\nx = y = z = "}
{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)\n\nprint(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list.\nWhere n is the number of coins to be tossed.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    coins = []\n    for i in range(n):\n        coins.append(toss_coin())\n    return coins\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_win() that returns a string - \"Heads\" or \"Tails\"\nHave the function print the number of tosses it took to toss a head.\n\"\"\"\n\ndef toss_coin_to_win():\n    count = 0\n    while True:\n        count += 1\n        if toss_coin() == \"Heads\":\n            return count\n\nprint(toss_coin_to_win())\n/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return"}
{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    return tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), tuple1, tuple2))\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))\n/python/python_basics/02_variables/01_variables.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n/python/python_basics/03_operators/01_operators.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n/python/python_basics/04_conditionals/01_conditionals.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(a)\nelse:\n    print(b)\n/python/python_basics/05_loops/01_loops.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nfor i in range(10):\n    print(i)\n/python/python_basics/06_functions/01_functions.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\ndef add(a, b):\n    return a + b\n\nprint(add(10, 20))\n/python/python_basics/07_classes/01_classes.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def print_details(self):\n        print(self.name, self.age)\n\nperson = Person(\"John\", 30)\nperson.print_details()\n/python/python_basics/08_modules/01_modules.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\nimport math\n\nprint(math.sqrt(25))\n/python/python_basics/09_files/01_files.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\nwith open(\"test.txt\", \"w\") as file:\n    file.write(\"Hello World\")\n\nwith open(\"test.txt\", \"r\") as file:\n    print(file.read())\n/python/python_basics/01_hello_world/01_hello_world.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/03_operators/02_operators.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\nprint(a ** b)\n/python/python_basics/04_conditionals/02_conditionals.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(a)\nelif a == b:\n    print(\"Equal\")\nelse:\n    print(b)\n/python/python_basics/"}
{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple, list):\n    count = 0\n    for i in list:\n        for j in tuple:\n            if i == j:\n                count += 1\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\n\"\"\"\nWrite a python function to find the sum of all elements of list in a tuple.\nassert sum_of_elements((1, 2, 3, 4, 5)) == 15\n\"\"\"\n\ndef sum_of_elements(tuple):\n    sum = 0\n    for i in tuple:\n        sum += i\n    return sum\n\n"}
{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n/python/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/0000_python_basics/"}
{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n\nprint(cal_sum(9))\n/leetcode/100. Same Tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p == None and q == None:\n            return True\n        elif p == None or q == None:\n            return False\n        else:\n            if p.val == q.val:\n                return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n            else:\n                return False\n/leetcode/101. Symmetric Tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root == None:\n            return True\n        else:\n            return self.isSymmetricHelper(root.left, root.right)\n\n    def isSymmetricHelper(self, left, right):\n        if left == None and right == None:\n            return True\n        elif left == None or right == None:\n            return False\n        else:\n            if left.val == right.val:\n                return self.isSymmetricHelper(left.left, right.right) and self.isSymmetricHelper(left.right, right.left)\n            else:\n                return False\n/leetcode/102. Binary Tree Level Order Traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if root == None:\n            return []\n        else:\n            return self.level"}
{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'],8)==['practice','solution']\n\"\"\"\n\ndef extract_string(list_of_string,size):\n    return [i for i in list_of_string if len(i) == size]\n\nprint(extract_string(['Python', 'list', 'exercises', 'practice','solution'],8))\n/python_basic/python_basic_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\n\nimport sys\nprint(sys.version)\n/python_basic/python_basic_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\n\nimport time\nprint(time.ctime())\n/python_basic/python_basic_13.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\n\nimport getpass\nprint(getpass.getuser())\n/python_basic/python_basic_11.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now())\n/python_basic/python_basic_12.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n/python_basic/python_basic_14.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n/python_basic/python_basic_15.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n/python_basic/python_basic_16.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n/python_basic/python_basic_17.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n/python_basic/python_basic_18.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n/python_basic/python_basic_19.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\n\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now"}
{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    return string.replace(\" \", \"\")\n\nprint(remove_whitespaces(' Google    Flutter '))\n/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are used to store data\n\n# Variables are declared using the assignment operator (=)\n\n# Variables are case sensitive\n\n# Variables can be declared and assigned in a single line\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n"}
{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(18))\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0"}
{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\ndef text_match_wordz(text):\n    return \"z\" in text\n\nprint(text_match_wordz(\"pythonz.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o'.\nassert text_match_wordzo(\"pythonzo.\")==True\n\"\"\"\n\ndef text_match_wordzo(text):\n    return \"z\" in text and \"o\" in text\n\nprint(text_match_wordzo(\"pythonzo.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p'.\nassert text_match_wordzop(\"pythonzop.\")==True\n\"\"\"\n\ndef text_match_wordzop(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text\n\nprint(text_match_wordzop(\"pythonzop.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p' and 't'.\nassert text_match_wordzopt(\"pythonzopt.\")==True\n\"\"\"\n\ndef text_match_wordzopt(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text and \"t\" in text\n\nprint(text_match_wordzopt(\"pythonzopt.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p' and 't' and 'h'.\nassert text_match_wordzopth(\"pythonzopth.\")==True\n\"\"\"\n\ndef text_match_wordzopth(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text and \"t\" in text and \"h\" in text\n\nprint(text_match_wordzopth(\"pythonzopth.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p' and 't' and 'h' and 'n'.\nassert text_match_wordzopthn(\"pythonzopthn.\")==True\n\"\"\"\n\ndef text_match_wordzopthn(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text and \"t\" in text and \"h\" in text and \"n\" in text\n\nprint(text_match_wordzopthn(\"pythonzopthn.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p' and 't' and 'h' and 'n' and 'i'.\nassert text_match_wordzopthni(\"pythonzopthni.\")==True\n\"\"\"\n\ndef text_match_wordzopthni(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text and \"t\" in text and \"h\" in text and \"n\" in text and \"i\" in text\n\nprint(text_match_wordzopthni(\"pythonzopthni.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p' and 't' and 'h' and 'n' and 'i' and 'c'.\nassert text_match_wordzopthnic(\"pythonzopthnic.\")==True\n\"\"\"\n\ndef text_match_wordzopthnic(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text and \"t\" in text and \"h\" in text and \"n\" in text and \"i\" in text and \"c\" in text\n\nprint(text_match_wordzopthnic(\"pythonzopthnic.\"))\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'o' and 'p' and 't' and 'h' and 'n' and 'i' and 'c' and 'k'.\nassert text_match_wordzopthnick(\"pythonzopthnick.\")==True\n\"\"\"\n\ndef text_match_wordzopthnick(text):\n    return \"z\" in text and \"o\" in text and \"p\" in text and \"t\" in text and \"h\" in text and \"n\" in text and \"i\" in text and \"c\" in text and \""}
{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given year is leap year or not.\nassert check_leap_year(2000)==True\n\"\"\"\ndef check_leap_year(year):\n    if year%4==0:\n        return True\n    else:\n        return False\n\n\"\"\""}
{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_strings):\n    return [string[::-1] for string in list_of_strings]\n\nprint(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the longest string in a given list of string values.\nassert longest_string(['Red', 'Green', 'Blue', 'White', 'Black'])=='Black'\n\"\"\"\ndef longest_string(list_of_strings):\n    return max(list_of_strings, key=len)\n\nprint(longest_string(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the shortest string in a given list of string values.\nassert shortest_string(['Red', 'Green', 'Blue', 'White', 'Black'])=='Red'\n\"\"\"\ndef shortest_string(list_of_strings):\n    return min(list_of_strings, key=len)\n\nprint(shortest_string(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the number of strings in a given list of string values that have the same length as the first string.\nassert count_same_length_strings(['Red', 'Green', 'Blue', 'White', 'Black'])==3\n\"\"\"\ndef count_same_length_strings(list_of_strings):\n    return len([string for string in list_of_strings if len(string) == len(list_of_strings[0])])\n\nprint(count_same_length_strings(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the number of strings in a given list of string values that have the same length as the first string and are palindromes.\nassert count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black'])==2\n\"\"\"\ndef count_same_length_palindromes(list_of_strings):\n    return len([string for string in list_of_strings if len(string) == len(list_of_strings[0]) and string == string[::-1]])\n\nprint(count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the number of strings in a given list of string values that have the same length as the first string and are palindromes.\nassert count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black'])==2\n\"\"\"\ndef count_same_length_palindromes(list_of_strings):\n    return len([string for string in list_of_strings if len(string) == len(list_of_strings[0]) and string == string[::-1]])\n\nprint(count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the number of strings in a given list of string values that have the same length as the first string and are palindromes.\nassert count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black'])==2\n\"\"\"\ndef count_same_length_palindromes(list_of_strings):\n    return len([string for string in list_of_strings if len(string) == len(list_of_strings[0]) and string == string[::-1]])\n\nprint(count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n\"\"\"\nWrite a function to find the number of strings in a given list of string values that have the same length as the first string and are palindromes.\nassert count_same_length_palindromes(['Red', 'Green', 'Blue', 'White', 'Black'])==2\n\"\"\"\ndef count_same_length_palindromes(list_of_strings):\n    return len([string for string in list_of_strings if len(string) == len(list_of_strings[0]) and string == string[::-1]])\n\nprint(count_same_length_palindromes(['Red', 'Green', 'Blue', '"}
{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(list_of_lists):\n    min_len = len(list_of_lists[0])\n    min_list = list_of_lists[0]\n    for i in list_of_lists:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_list = i\n    return min_list\n\nprint(Find_Min([[1],[1,2],[1,2,3]]))\n/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python program to find the sum of all the items in a list.\n\"\"\""}
{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    return length*width\n\nprint(rectangle_area(10,20))\n\n\"\"\"\nWrite a function to find the area of a circle.\nassert circle_area(10)==314.1592653589793\n\"\"\"\ndef circle_area(radius):\n    return 3.14*radius**2\n\nprint(circle_area(10))\n\n\"\"\"\nWrite a function to find the area of a triangle.\nassert triangle_area(10,20)==100\n\"\"\"\ndef triangle_area(base,height):\n    return 0.5*base*height\n\nprint(triangle_area(10,20))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\nassert trapezoid_area(10,20,30)==150\n\"\"\"\ndef trapezoid_area(base1,base2,height):\n    return 0.5*(base1+base2)*height\n\nprint(trapezoid_area(10,20,30))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\n\nprint(parallelogram_area(10,20))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\nassert rhombus_area(10,20)==200\n\"\"\"\ndef rhombus_area(diagonal1,diagonal2):\n    return 0.5*diagonal1*diagonal2\n\nprint(rhombus_area(10,20))\n\n\"\"\"\nWrite a function to find the area of a square.\nassert square_area(10)==100\n\"\"\"\ndef square_area(side):\n    return side**2\n\nprint(square_area(10))\n\n\"\"\"\nWrite a function to find the area of a kite.\nassert kite_area(10,20)==100\n\"\"\"\ndef kite_area(diagonal1,diagonal2):\n    return 0.5*diagonal1*diagonal2\n\nprint(kite_area(10,20))\n\n\"\"\"\nWrite a function to find the area of a pentagon.\nassert pentagon_area(10)==523.6\n\"\"\"\ndef pentagon_area(side):\n    return 1.7320508075688772*side**2\n\nprint(pentagon_area(10))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\nassert hexagon_area(10)==608.6619572131107\n\"\"\"\ndef hexagon_area(side):\n    return 2.598076211353316*side**2\n\nprint(hexagon_area(10))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\nassert heptagon_area(10)==796.2269812359558\n\"\"\"\ndef heptagon_area(side):\n    return 2.679491924311227*side**2\n\nprint(heptagon_area(10))\n\n\"\"\"\nWrite a function to find the area of an octagon.\nassert octagon_area(10)==921.6490088414705\n\"\"\"\ndef octagon_area(side):\n    return 2.0943951023931957*side**2\n\nprint(octagon_area(10))\n\n\"\"\"\nWrite a function to find the area of a nonagon.\nassert nonagon_area(10)==1131.0649658065186\n\"\"\"\ndef nonagon_area(side):\n    return 2.326300661322645*side"}
{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    return ''.join(c.lower() for c in string)\n\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n/python/leetcode/easy/1365_how_many_numbers_are_smaller_than_the_current_number.py\n\"\"\"\nGiven the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j!= i and nums[j] < nums[i].\n\nReturn the answer in an array.\n\nExample 1:\n\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation:\nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).\nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1).\nFor nums[3]=2 there exist one smaller number than it (1).\nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\nExample 2:\n\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n\nExample 3:\n\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n\nConstraints:\n\n2 <= nums.length <= 500\n0 <= nums[i] <= 100\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        return [sum(n < num for n in nums) for num in nums]\n\nprint(Solution().smallerNumbersThanCurrent([8,1,2,2,3]))\nprint(Solution().smallerNumbersThanCurrent([6,5,4,8]))\nprint(Solution().smallerNumbersThanCurrent([7,7,7,7]))\n/python/leetcode/easy/1295_find_numbers_with_even_number_of_digits.py\n\"\"\"\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\nExample 1:\n\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\n\nExample 2:\n\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation:\nOnly 1771 contains an even number of digits.\n\nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 10^5\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        return sum(len(str(n)) % 2 == 0 for n in nums)\n\nprint(Solution().findNumbers([12,345,2,6,7896]))\nprint(Solution().findNumbers([555,901,482,1771]))\n/python/leetcode/easy/1281_subtract_the_product_and_sum_of_digits_of_an_integer.py\n\"\"\"\nGiven an integer number n, return the difference between the product of its digits and the sum of its digits.\n\nExample 1:\n\nInput: n = 234\nOutput: 15\nExplanation:\nProduct of digits = 2 * 3 * 4 = 24\nSum of digits = 2 + 3 + 4 = 9\nResult = 24"}
{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(list):\n    return [x[0] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n/Python/Python_Basics/Python_Basics_01.py\n\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(list):\n    return [x[0] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [2, 5, 9]\n\"\"\"\n\ndef Extract(list):\n    return [x[-1] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 5], [6, 9]]\n\"\"\"\n\ndef Extract(list):\n    return [[x[0], x[-1]] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 5], [6, 9]]\n\"\"\"\n\ndef Extract(list):\n    return [[x[0], x[-1]] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 5], [6, 9]]\n\"\"\"\n\ndef Extract(list):\n    return [[x[0], x[-1]] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 5], [6, 9]]\n\"\"\"\n\ndef Extract(list):\n    return [[x[0], x[-1]] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 5], [6, 9]]\n\"\"\"\n\ndef Extract(list):\n    return [[x[0], x[-1]] for x in list]\n\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8,"}
{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n\nprint(upper_ctr('PYthon'))\n/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a python program to print 'Hello World'\n\"\"\"\n\nprint('Hello World')\n/python/python_basics/05_print_even_numbers.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/03_print_odd_numbers.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/02_print_numbers.py\n\"\"\"\nWrite a python program to print numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    print(i)\n/python/python_basics/04_print_odd_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/06_print_odd_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/07_print_even_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/08_print_odd_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/09_print_even_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/10_print_odd_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/11_print_even_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/12_print_odd_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print odd numbers between 1 to 100\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/13_print_even_numbers_between_1_to_100.py\n\"\"\"\nWrite a python program to print even numbers between 1 to 100\n\"\"\"\n\nfor i in"}
{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange','red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green','red'], ['green','red', 'orange'], ['blue'], ['blue', 'orange'], ['blue','red'], ['blue','red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green','red'], ['blue', 'green','red', 'orange']]\n\"\"\"\n\ndef combinations_list(list):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)+1):\n            result.append(list[i:j])\n    return result\n\nprint(combinations_list(['orange','red', 'green', 'blue']))\n/python/0000_python_basics/0000_python_basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Print the string \"Hello, world!\" to your terminal\nprint(\"Hello, world!\")\n\n# 2. Print the string \"Hello, world!\" to your terminal 10 times\nprint(\"Hello, world!\" * 10)\n\n# 3. Print the string \"Hello, world!\" to your terminal 10 times using a loop\nfor i in range(10):\n    print(\"Hello, world!\")\n\n# 4. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i))\n\n# 5. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1))\n\n# 6. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 7. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 8. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 9. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 10. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 11. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 12. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 13. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 14. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 15. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\"Hello, world! \" + str(i+1) + \"!\")\n\n# 16. Print the string \"Hello, world!\" to your terminal 10 times using a loop and a counter\nfor i in range(10):\n    print(\""}
{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))\n/02_data_structures/01_arrays/02_reverse_array.py\n\"\"\"\nWrite a function to reverse an array.\nassert reverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n\"\"\"\n\ndef reverse(arr):\n    return arr[::-1]\n\nprint(reverse([1, 2, 3, 4]))\n/02_data_structures/01_arrays/03_rotate_array.py\n\"\"\"\nWrite a function to rotate an array to the right by k steps.\nassert rotate([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n\"\"\"\n\ndef rotate(arr, k):\n    return arr[-k:] + arr[:-k]\n\nprint(rotate([1, 2, 3, 4, 5], 2))\n/02_data_structures/01_arrays/04_find_missing_number.py\n\"\"\"\nWrite a function to find the missing number in a given integer array of 1 to 100.\nassert find_missing_number([1, 2, 3, 4, 6, 7, 8, 10]) == 5\n\"\"\"\n\ndef find_missing_number(arr):\n    for i in range(1, 101):\n        if i not in arr:\n            return i\n\nprint(find_missing_number([1, 2, 3, 4, 6, 7, 8, 10]))\n/02_data_structures/01_arrays/05_find_duplicate.py\n\"\"\"\nWrite a function to find the first duplicate value in the given array.\nassert find_duplicate([1, 2, 3, 1]) == 1\n\"\"\"\n\ndef find_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return arr[i]\n\nprint(find_duplicate([1, 2, 3, 1]))\n/02_data_structures/01_arrays/06_find_common_elements.py\n\"\"\"\nWrite a function to find common elements between two arrays.\nassert find_common_elements([1, 2, 3], [2, 3, 4]) == [2, 3]\n\"\"\"\n\ndef find_common_elements(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nprint(find_common_elements([1, 2, 3], [2, 3, 4]))\n/02_data_structures/01_arrays/07_find_unique_elements.py\n\"\"\"\nWrite a function to find unique elements in an array.\nassert find_unique_elements([1, 2, 3, 1]) == [2, 3]\n\"\"\"\n\ndef find_unique_elements(arr):\n    return list(set(arr) - set(arr[::2]))\n\nprint(find_unique_elements([1, 2, 3, 1]))\n/02_data_structures/01_arrays/08_find_missing_elements.py\n\"\"\"\nWrite a function to find missing elements in an array.\nassert find_missing_elements([1"}
{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v}\n\nprint(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/003_print_numbers.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1,101):\n    print(i)\n/python/python_basics/002_print_odd_numbers.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1,101):\n    if i%2!= 0:\n        print(i)\n/python/python_basics/004_print_even_numbers.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1,101):\n    if i%2 == 0:\n        print(i)\n/python/python_basics/005_print_odd_numbers_between_50_and_100.py\n\"\"\"\nWrite a program that prints the odd numbers from 50 to 100.\n\"\"\"\n\nfor i in range(50,101):\n    if i%2!= 0:\n        print(i)\n/python/python_basics/006_print_even_numbers_between_50_and_100.py\n\"\"\"\nWrite a program that prints the even numbers from 50 to 100.\n\"\"\"\n\nfor i in range(50,101):\n    if i%2 == 0:\n        print(i)\n/python/python_basics/007_print_numbers_divisible_by_7_and_5_between_500_and_1000.py\n\"\"\"\nWrite a program that prints the numbers from 500 to 1000 that are divisible by 7 and 5.\n\"\"\"\n\nfor i in range(500,1001):\n    if i%7 == 0 and i%5 == 0:\n        print(i)\n/python/python_basics/008_print_numbers_divisible_by_7_or_5_between_500_and_1000.py\n\"\"\"\nWrite a program that prints the numbers from 500 to 1000 that are divisible by 7 or 5.\n\"\"\"\n\nfor i in range(500,1001):\n    if i%7 == 0 or i%5 == 0:\n        print(i)\n/python/python_basics/009_print_numbers_divisible_by_7_and_5_between_500_and_1000_but_not_both.py\n\"\"\"\nWrite a program that prints the numbers from 500 to 1000 that are divisible by 7 and 5 but not both.\n\"\"\"\n\nfor i in range(500,1001):\n    if i%7 == 0 and i%5!= 0:\n        print(i)\n/python/python_basics/010_print_numbers_divisible_by_7_or_5_but_not_both_between_500_and_1000.py\n\"\"\"\nWrite a program that prints the numbers from 500 to 1000 that are divisible by 7 or 5 but not both.\n"}
{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\ndef max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i], arr[i] * max_product)\n    return max_product\n\nprint(max_product([3, 100, 4, 5, 150, 6]))\n/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_same_tree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n\ndef is_same_tree_iterative(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    stack = [(p, q)]\n    while stack:\n        p, q = stack.pop()\n        if p is None and q is None:\n            continue\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        stack.append((p.left, q.left))\n        stack.append((p.right, q.right))\n    return True\n\ndef is_same_tree_recursive(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree_recursive(p.left, q.left) and is_same_tree_recursive(p.right, q.right)\n\ndef is_same_tree_recursive_iterative(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    stack = [(p, q)]\n    while stack:\n        p, q = stack.pop()\n        if p is None and q is None:\n            continue\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        stack.append((p.left, q.left))\n        stack.append((p.right, q.right))\n    return True\n\ndef is_same_tree_recursive_iterative_2(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    stack = [(p, q)]\n    while stack:\n        p, q = stack.pop()\n        if p is None and q is None:\n            continue\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        stack.append((p.left, q.left))\n        stack.append((p.right, q.right))\n    return True\n\ndef is_same_tree_recursive_iterative_3(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    stack = [(p, q)]\n    while stack:\n        p, q = stack.pop()\n        if p is None and q is None:\n            continue\n        if p is None or q is None:\n            return False\n        if p.val!= q."}
{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n\nprint(add_pairwise((1, 5, 7, 8, 10)))\n/python/0000_python_basics/0000_python_basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Print the following string:\n# \"Hello World!\"\nprint(\"Hello World!\")\n\n# 2. Print the following string:\n# \"Hello World!\"\n# using a single print statement\nprint(\"Hello World!\")\n\n# 3. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 4. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 5. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 6. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 7. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 8. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 9. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 10. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# 11. Print the following string:\n# \"Hello World!\"\n# using a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n# and a single print statement\n#"}
{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\ndef find_remainder(arr,n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n\nprint(find_remainder([ 100, 10, 5, 25, 35, 14 ],11))\n/python/leetcode/easy/141_linked_list_cycle.py\n\"\"\"\nGiven a linked list, determine if it has a cycle in it.\n\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\n\nExample 1:\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\nFollow up:\nCan you solve it using O(1) (i.e. constant) memory?\n\"\"\"\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        slow = head\n        fast = head\n        while fast.next is not None and fast.next.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\nclass Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return True\n        s = s.lower()\n        s = ''.join(filter(str.isalnum, s))\n        return s == s[::-1]\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n/python/leetcode/easy/121_best_time_to_buy_and_sell_stock.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\nNote that you cannot sell a stock before you buy one.\n\nExample 1:\n\nInput: [7,1,"}
{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(list):\n    for i in range(len(list)-1):\n        if list[i] + 1!= list[i+1]:\n            return False\n    return True\n\nprint(check_Consecutive([1,2,3,4,5]))\n/Python/Python_Basics/01_Python_Basics/01_Python_Basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Write a Python program to print the following string in a specific format (see the output).\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\n# 2. Write a Python program to get the Python version you are using.\nimport sys\nprint(\"Python version\")\nprint(sys.version)\nprint(\"Version info.\")\nprint(sys.version_info)\n\n# 3. Write a Python program to display the current date and time.\nimport datetime\nnow = datetime.datetime.now()\nprint(\"Current date and time : \")\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n# 4. Write a Python program which accepts the radius of a circle from the user and compute the area.\nfrom math import pi\nr = float(input(\"Input the radius of the circle : \"))\nprint(\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n\n# 5. Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\nfirst_name = input(\"Input your First Name : \")\nlast_name = input(\"Input your Last Name : \")\nprint(last_name + \" \" + first_name)\n\n# 6. Write a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\nvalues = input(\"Input some comma seprated numbers : \")\nlist = values.split(\",\")\ntuple = tuple(list)\nprint('List : ',list)\nprint('Tuple : ',tuple)\n\n# 7. Write a Python program to display the first and last colors from the following list.\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\nprint(color_list[0],color_list[-1])\n\n# 8. Write a Python program to display the examination schedule. (extract the date from exam_st_date).\nexam_st_date = (11, 12, 2014)\nprint(exam_st_date[0])\nprint(exam_st_date[1])\nprint(exam_st_date[2])\n\n# 9. Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.\na = int(input(\"Input an integer : \"))\nn1 = int(\"%s\" % a)\nn2 = int(\"%s%s\" % (a,a))\nn3 = int(\"%s%s%s\" % (a,a,a))\nprint(n1+n2+n3)\n\n# 10. Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s).\nprint(abs.__doc__)\n\n# 11. Write a Python program to print the calendar of a given month and year.\n# Note : Use 'calendar' module.\nimport calendar\ny = int(input(\"Input the year : \"))\nm = int(input(\"Input the month : \"))\nprint(calendar.month(y, m))\n\n# 12. Write a Python program to print the following here document.\nprint(\"\"\"a string that you \"don't\" have to escape\nThis\nis a....... multi-line\nheredoc string --------> example\"\"\")\n\n# 13."}
{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :return: set of tuples\n    \"\"\"\n    return set.intersection(*tuple_list)\n\n\nif __name__ == '__main__':\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)]))\n    print(tuple_intersection([(5, 4), (3, 4), (6, 5), (9, 11)]))\n/python/leetcode/easy/1480_running_sum_of_1d_array.py\n\"\"\"\nGiven an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]\u2026nums[i]).\n\nReturn the running sum of nums.\n\nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: [1,3,6,10]\nExplanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\nExample 2:\n\nInput: nums = [1,1,1,1,1]\nOutput: [1,2,3,4,5]\nExplanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].\nExample 3:\n\nInput: nums = [3,1,2,10,1]\nOutput: [3,4,6,16,17]\n\nConstraints:\n\n1 <= nums.length <= 1000\n-10^6 <= nums[i] <= 10^6\n\"\"\"\n\n\ndef running_sum(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: list of integers\n    \"\"\"\n    return [sum(nums[:i + 1]) for i in range(len(nums))]\n\n\nif __name__ == '__main__':\n    print(running_sum([1, 2, 3, 4]))\n    print(running_sum([1, 1, 1, 1, 1]))\n    print(running_sum([3, 1, 2, 10, 1]))\n/python/leetcode/easy/1295_find_numbers_with_even_number_of_digits.py\n\"\"\"\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\nExample 1:\n\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\nExample 2:\n\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation:\nOnly 1771 contains an even number of digits.\n\nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 10^5\n\"\"\"\n\n\ndef find_numbers(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: integer\n    \"\"\"\n    return sum(len(str(num)) % 2 == 0 for num in nums)\n\n\nif __name__ == '__main__':\n    print(find_numbers([12, 345, 2, 6, 7896]))\n    print(find_numbers([555, 901, 482, 1771]))\n/python/leetcode/easy/1281_subtract_the_product_and_sum_of_digits_of_an"}
{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old,new):\n    new_string = \"\"\n    for i in string:\n        if i == old:\n            new_string += new\n        else:\n            new_string += i\n    return new_string\n\nprint(replace_char(\"polygon\",'y','l'))\n\n\"\"\"\nWrite a function to remove duplicates from a list.\nassert remove_duplicates([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"}
{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])\n\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n/python/python_basics/01_basics/01_02_variables.py\n\"\"\"\nWrite a program that asks the user to enter their name and stores it in a variable.\nThen print the following:\nHello, [name]! You just delved into python.\n\"\"\"\n\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"! You just delved into python.\")\n/python/python_basics/02_functions/02_01_functions.py\n\"\"\"\nWrite a function that takes a number as an input and returns the square of that number.\n\"\"\"\n\ndef square(number):\n    return number ** 2\n\nprint(square(2))\n/python/python_basics/01_basics/01_03_operators.py\n\"\"\"\nWrite a program that asks the user to enter a number and stores it in a variable.\nThen print the following:\nThe square of the number is [square]\nThe cube of the number is [cube]\n\"\"\"\n\nnumber = int(input(\"Enter a number: \"))\nprint(\"The square of the number is \" + str(number ** 2))\nprint(\"The cube of the number is \" + str(number ** 3))\n/python/python_basics/01_basics/01_01_hello_world.py\n\"\"\"\nWrite a program that prints the following:\nHello, World!\n\"\"\"\n\nprint(\"Hello, World!\")\n/python/python_basics/02_functions/02_03_functions.py\n\"\"\"\nWrite a function that takes a number as an input and returns the square of that number.\n\"\"\"\n\ndef square(number):\n    return number ** 2\n\nprint(square(2))\n\n\"\"\"\nWrite a function that takes a number as an input and returns the cube of that number.\n\"\"\"\n\ndef cube(number):\n    return number ** 3\n\nprint(cube(2))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the sum of those two numbers.\n\"\"\"\n\ndef sum(number1, number2):\n    return number1 + number2\n\nprint(sum(2, 3))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the difference of those two numbers.\n\"\"\"\n\ndef difference(number1, number2):\n    return number1 - number2\n\nprint(difference(2, 3))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the product of those two numbers.\n\"\"\"\n\ndef product(number1, number2):\n    return number1 * number2\n\nprint(product(2, 3))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the quotient of those two numbers.\n\"\"\"\n\ndef quotient(number1, number2):\n    return number1 / number2\n\nprint(quotient(2, 3))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the remainder of those two numbers.\n\"\"\"\n\ndef remainder(number1, number2):\n    return number1 % number2\n\nprint(remainder(2, 3))\n/python/python_basics/02_functions/02_02_functions.py\n\"\"\"\nWrite a function that takes a number as an input and returns the square of that number.\n\"\"\"\n\ndef square(number):\n    return number ** 2\n\nprint(square(2))\n\n\"\"\"\nWrite a function that takes a number as an input and returns the cube of that number.\n\"\"\"\n\ndef cube(number):\n    return number ** 3\n\nprint(cube(2))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the sum of those two numbers.\n\"\"\"\n\ndef sum(number1, number2):\n    return number1 + number2\n\nprint(sum(2, 3))\n\n\"\"\"\nWrite a function that takes two numbers as inputs and returns the difference of those two numbers.\n\"\"\"\n\ndef difference(number1,"}
{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\nprint(big_sum([1,2,3]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0,151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5,1001,5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1,101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0,500001,2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018,0,-4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum,highNum+1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1,5001):\n        toss = random.randint(0,1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1,5001):\n        toss = random.randint(0,1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n\n\"\"\"\nCreate another function that simulates tossing a pair of dice 5,000 times. Your function should print how many times the double 6 appears.\n\"\"\"\n\ndef dice_tosses():\n    double_six = 0\n    for i in range(1,5001):\n        die1 = random.randint(1,6)\n        die2 = random.randint(1,6)\n        if die1 + die2 == 6:\n            double_six += 1\n    print(\"Double 6: \" + str(double_six))\n\ndice_tosses()\n/python/python_fundamentals/coin_tosses_3.py\n\"\"\"\nWrite a function that simulates"}
{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower()\n\nprint(is_lower(\"InValid\"))\n/python/python_basics/01_variables.py\n\"\"\"\nWrite a python program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n/python/python_basics/02_variables.py\n\"\"\"\nWrite a python program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n# Write a python program to print the sum of two numbers.\n\na = 10\nb = 20\n\nprint(a + b)\n\n"}
{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    return ''.join(i for i in string if i.isupper())\n\nprint(remove_lowercase(\"PYTHon\"))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/004_print_numbers.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    print(i)\n/python/python_basics/003_print_odd_numbers.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/002_print_even_numbers.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/005_print_odd_numbers_between_1_and_100.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/006_print_even_numbers_between_1_and_100.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/007_print_odd_numbers_between_1_and_100_using_while.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\n\ni = 1\nwhile i <= 100:\n    if i % 2!= 0:\n        print(i)\n    i += 1\n/python/python_basics/008_print_even_numbers_between_1_and_100_using_while.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\n\ni = 1\nwhile i <= 100:\n    if i % 2 == 0:\n        print(i)\n    i += 1\n/python/python_basics/009_print_odd_numbers_between_1_and_100_using_for_and_range.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/010_print_even_numbers_between_1_and_100_using_for_and_range.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2 == 0:\n        print(i)\n/python/python_basics/011_print_odd_numbers_between_1_and_100_using_for_and_range_and_if.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2!= 0:\n        print(i)\n/python/python_basics/012_print_even_numbers_between_1_and_100_using_for_and_range_and_if.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 2"}
{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    return int(str(num)[0])\n\nprint(first_Digit(123))/python_basics/01_variables/01_variables.py\n\"\"\"\nVariables are used to store information to be referenced and manipulated in a computer program.\n\"\"\"\n\n# Variables are case sensitive\n\n# Variables can be declared and assigned in one line\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n# Variables can be declared and assigned in multiple lines\n\n"}
{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\ndef Split(list):\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n\nprint(Split([1,2,3,4,5,6]))\n/Python/Python_Fundamentals/Functions_Intermediate_I/Functions_Intermediate_I.py\n\"\"\"\n1. Update Values in Dictionaries and Lists\nx = [ [5,2,3], [10,8,9] ]\n\nx[1][0] = 15\n\nprint x\n\nOutput:\n[ [5,2,3], [15,8,9] ]\n\"\"\"\n\nx = [ [5,2,3], [10,8,9] ]\n\nx[1][0] = 15\n\nprint(x)\n\n\"\"\"\n2. Iterate Through a Dictionary\nCreate a function iterateDictionary(some_list) that, given a list of dictionaries, the function loops through each dictionary in the list and prints each key and the associated value. For example, given the following list:\n\n\"\"\"\n\ndef iterateDictionary(some_list):\n    for i in some_list:\n        for key, value in i.items():\n            print(key, value)\n\niterateDictionary([{'name': 'John', 'age': '27'}, {'name': 'Mark', 'age': '25'}])\n\n\"\"\"\n3. Iterate Through a Dictionary with List Values\nCreate a function printInfo(some_dict) that given a dictionary whose values are all lists, prints the name of each key along with the size of its list, and then prints the associated values within each key's list. For example:\n\n\"\"\"\n\ndef printInfo(some_dict):\n    for key, value in some_dict.items():\n        print(key)\n        print(len(value))\n        for i in value:\n            print(i)\n\nprintInfo({'name': ['Anna', 'Eli', 'Pariece', 'Brendan', 'Amy', 'Shane', 'Oscar'], 'favorite_color': ['\u84dd\u8272', '\u7eff\u8272', '\u7ea2\u8272', '\u9ec4\u8272', '\u767d\u8272', '\u9ed1\u8272', '\u7d2b\u8272'], 'favorite_animal': ['\u5929\u9e45', '\u732b', '\u732a', '\u5c0f\u9e21', '\u72d7', '\u8001\u9f20', '\u9752\u86d9']})\n\n\"\"\"\n4. Iterate Through a Dictionary with Dictionary Values\nCreate a function that given a dictionary that contains multiple dictionaries, prints the name of each dictionary and prints the names of its properties and values. For example, given the following dictionary:\n\n\"\"\"\n\ndef printInfo(some_dict):\n    for key, value in some_dict.items():\n        print(key)\n        for key2, value2 in value.items():\n            print(key2, value2)\n\nprintInfo({'grandma': {'first_name': 'Diana', 'last_name': 'Smith'}, 'grandpa': {'first_name': 'Abe', 'last_name': 'Simpson'}})\n\n\"\"\"\n5. Iterate Through a Dictionary with Values That are Dictionaries\nCreate a function that prints the name of each location and also its cities. If the location has an area, also print the area of each city.\n\n\"\"\"\n\ndef printInfo(some_dict):\n    for key, value in some_dict.items():\n        print(key)\n        for key2, value2 in value.items():\n            print(key2, value2)\n\nprintInfo({'Chicago': {'area_code': '630', 'cities': ['Riverdale', 'Glencoe']}, 'Boston': {'area_code': '617', 'cities': ['Quincy', 'Watertown']}})\n\n\"\"\"\n6. Iterate Through a Dictionary with Values That are Lists\nCreate a function that prints the name of each location and its cities. If the location has an area code, also print the area code.\n\n\"\"\"\n\ndef printInfo(some_dict):\n    for key, value in some_dict.items():\n        print(key)\n        for i in value:\n            print(i)\n\nprintInfo({'Chicago': ['Riverdale', 'Glencoe', '630'], 'Boston': ['Quincy', 'Watertown', '617']})\n\n\"\"\"\n7"}
{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\ndef difference(n):\n    sum_of_cubes = 0\n    sum_of_n = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_n += i\n    return sum_of_cubes - sum_of_n\n\nprint(difference(3))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(16))\nprint(digital_root(942))\nprint(digital_root(132189))\nprint(digital_root(493193))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum([i for i in range(1, n*2, 2)])\n\nprint(row_sum_odd_numbers(1))\nprint(row_sum_odd_numbers(2))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum([i for i in arr if i > 0])\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_digits_digital_root.js\n/*\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + "}
{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\ndef find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j]) % 2!= 0:\n                count += 1\n    return count\n\nprint(find_Odd_Pair([5,4,7,2,1],5))\n/Python/Algorithms/Sorting/bubble_sort.py\n\"\"\"\nBubble Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0,n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n\nprint(bubble_sort([5,4,3,2,1]))\n/Python/Algorithms/Sorting/selection_sort.py\n\"\"\"\nSelection Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1,n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i],arr[min_idx] = arr[min_idx],arr[i]\n    return arr\n\nprint(selection_sort([5,4,3,2,1]))\n/Python/Algorithms/Sorting/insertion_sort.py\n\"\"\"\nInsertion Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef insertion_sort(arr):\n    n = len(arr)\n    for i in range(1,n):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\nprint(insertion_sort([5,4,3,2,1]))\n/Python/Algorithms/Sorting/merge_sort.py\n\"\"\"\nMerge Sort\n\nTime Complexity: O(nlogn)\nSpace Complexity: O(n)\n\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr\n\nprint(merge_sort([5,4,3,2,1]))\n/Python/Algorithms/Sorting/quick_sort.py\n\"\"\"\nQuick Sort\n\nTime Complexity: O(nlogn)\nSpace Complexity: O(logn)\n\n\"\"\"\n\ndef partition(arr,low,high):\n    i = low-1\n    pivot = arr[high]\n    for j in range(low,high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i],arr[j] = arr[j],arr[i]\n    arr[i+1],arr[high] = arr[high],arr[i+1]\n    return i+1\n\ndef quick_sort(arr,low,high):\n    if low < high:\n        pi = partition(arr,low,high)\n        quick_sort(arr,low,pi-1)\n        quick_sort(arr,pi+1,high)\n    return arr\n\nprint(quick_"}
{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\ndef toggle_string(string):\n    return string.swapcase()\n\nprint(toggle_string(\"Python\"))\n\n\"\"\"\nWrite a function to count the number of words in a string.\nassert count_words(\"Python is a programming language\")==4\n\"\"\"\ndef count_words(string):\n    return len(string.split())\n\nprint(count_words(\"Python is a programming language\"))\n\n\"\"\"\nWrite a function to count the number of occurrences of a substring in a string.\nassert count_substring(\"Python is a programming language\",\"is\")==2\n\"\"\"\ndef count_substring(string,substring):\n    return string.count(substring)\n\nprint(count_substring(\"Python is a programming language\",\"is\"))\n\n\"\"\"\nWrite a function to convert a string to a list.\nassert convert_string_to_list(\"Python is a programming language\")==['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e']\n\"\"\"\ndef convert_string_to_list(string):\n    return list(string)\n\nprint(convert_string_to_list(\"Python is a programming language\"))\n\n\"\"\"\nWrite a function to convert a list to a string.\nassert convert_list_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'])==\"Python is a programming language\"\n\"\"\"\ndef convert_list_to_string(list):\n    return ''.join(list)\n\nprint(convert_list_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e']))\n\n\"\"\"\nWrite a function to convert a list of characters into a string.\nassert convert_list_of_characters_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'])==\"Python is a programming language\"\n\"\"\"\ndef convert_list_of_characters_to_string(list):\n    return ''.join(list)\n\nprint(convert_list_of_characters_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e']))\n\n\"\"\"\nWrite a function to convert a list of characters into a string.\nassert convert_list_of_characters_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'])==\"Python is a programming language\"\n\"\"\"\ndef convert_list_of_characters_to_string(list):\n    return ''.join(list)\n\nprint(convert_list_of_characters_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e']))\n\n\"\"\"\nWrite a function to convert a list of characters into a string.\nassert convert_list_of_characters_to_string(['P','y','t','h','o','n',' ','i','s',' ','a',' ','p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'])==\""}
{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\ndef digit_distance_nums(num1, num2):\n    \"\"\"\n    >>> digit_distance_nums(1,2)\n    1\n    \"\"\"\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1) > len(num2):\n        num2 = '0'*(len(num1)-len(num2)) + num2\n    elif len(num1) < len(num2):\n        num1 = '0'*(len(num2)-len(num1)) + num1\n    return sum([int(num1[i]) - int(num2[i]) for i in range(len(num1))])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/easy/1002_find_common_characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\nExample 1:\n\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\nExample 2:\n\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\ndef commonChars(A):\n    \"\"\"\n    >>> commonChars([\"bella\",\"label\",\"roller\"])\n    ['e', 'l', 'l']\n    >>> commonChars([\"cool\",\"lock\",\"cook\"])\n    ['c', 'o']\n    \"\"\"\n    result = []\n    for i in range(len(A[0])):\n        char = A[0][i]\n        for j in range(1, len(A)):\n            if char not in A[j]:\n                break\n            if A[j].count(char) < A[0].count(char):\n                char = A[j][A[j].index(char)]\n        result.append(char)\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/easy/1009_complement_of_base_10_integer.py\n\"\"\"\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\"\"\"\n\ndef bitwiseComplement(N):\n    \"\"\"\n    >>> bitwiseComplement(5)\n    2\n    >>> bitwiseComplement(7)\n    0\n    >>> bitwiseComplement(10)\n    5\n    \"\"\"\n    return int(''.join(['1' if i == '0' else '0' for i in bin(N)[2:]]), 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.test"}
{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\ndef max_sub_array_sum(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    # TODO: Write your code here\n    max_sum = 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n\nif __name__ == '__main__':\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))\n/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2022));\n        System.out.println(isLeapYear(2023));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2027));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2029));\n        System.out.println(isLeapYear(2030));\n        System.out.println(isLeapYear(2031));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2033));\n        System.out.println(isLeapYear(2034));\n        System.out.println(isLeapYear(2035));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2041));\n        System.out.println(isLeapYear(2042));\n        System.out.println(isLeapYear(2043));\n        System.out.println(isLeapYear(2044));\n        System.out.println(isLeapYear(2045));\n        System.out.println(isLeapYear(2046));\n        System.out.println(isLeapYear(2047));\n        System.out.println(isLeapYear(2048));\n        System.out.println(isLeapYear(2049));\n        System.out.println(isLeapYear(2050));\n        System.out.println(isLeapYear(2051));\n        System.out.println(isLeapYear(2052));\n        System.out.println(isLeapYear(2053));\n        System.out.println(isLeapYear(2054));\n        System.out.println(isLeapYear(2055));\n        System.out.println(isLeapYear(2056));\n        System.out.println(isLeapYear(2057));\n        System.out.println(isLeapYear(2058));\n        System.out.println(isLeapYear(2059));\n        System.out.println(isLeapYear(2060));\n        System.out.println(isLeapYear(2061));\n        System.out.println(isLeapYear(2062));\n        System.out.println("}
{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\ndef union_elements(tuple1, tuple2):\n    return sorted(set(tuple1 + tuple2))\n\nprint(union_elements((3, 4, 5, 6),(5, 7, 4, 10) ))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\nassert largest_number([1, 2, 3, 4, 5]) == 5\n\"\"\"\n\ndef largest_number(list):\n    return max(list)\n\nprint(largest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_10.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\nassert smallest_number([1, 2, 3, 4, 5]) == 1\n\"\"\"\n\ndef smallest_number(list):\n    return min(list)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_12.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\nassert second_largest_number([1, 2, 3, 4, 5]) == 4\n\"\"\"\n\ndef second_largest_number(list):\n    return sorted(list)[-2]\n\nprint(second_largest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_11.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest_number([1, 2, 3, 4, 5]) == 2\n\"\"\"\n\ndef second_smallest_number(list):\n    return sorted(list)[1]\n\nprint(second_smallest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_13.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest_number([1, 2, 3, 4, 5]) == 2\n\"\"\"\n\ndef second_smallest_number(list):\n    return sorted(list)[1]\n\nprint(second_smallest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_14.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest_number([1, 2, 3, 4, 5]) == 2\n\"\"\"\n\ndef second_smallest_number(list):\n    return sorted(list)[1]\n\nprint(second_smallest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_15.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest_number([1, 2, 3, 4, 5]) == 2\n\"\"\"\n\ndef second_smallest_number(list):\n    return sorted(list)[1]\n\nprint(second_smallest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_16.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\nassert second_smallest_number([1, 2, 3, 4, 5]) == 2\n\"\"\"\n\ndef second_smallest_number(list):\n    return sorted(list)[1]\n\nprint(second_smallest_number([1, 2, 3, 4, 5]))\n/python_basics/python_basics_17.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n"}
{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist)"}
{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\ndef extract_values(string):\n    return [x[1:-1] for x in string.split(',')]\n\nprint(extract_values('\"Python\", \"PHP\", \"Java\"'))\n/python/python_basics/01_variables/01_variables.py\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n/python/python_basics/02_data_types/02_data_types.py\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")\n\n\"\"\"\nWrite a program to print the following string:\n\nHello World!\n\"\"\"\n\nprint(\"Hello World!\")"}
{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\ndef count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n\nprint(count_Pairs([1,2,1],3))\n/Python/Algorithms/Sorting/bubble_sort.py\n\"\"\"\nBubble Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\"\"\"\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n\nprint(bubble_sort([1,2,3,4,5,6,7,8,9,10]))\n/Python/Algorithms/Sorting/insertion_sort.py\n\"\"\"\nInsertion Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\"\"\"\n\ndef insertion_sort(arr):\n    for i in range(1,len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\nprint(insertion_sort([1,2,3,4,5,6,7,8,9,10]))\n/Python/Algorithms/Sorting/selection_sort.py\n\"\"\"\nSelection Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\"\"\"\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1,len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i],arr[min_index] = arr[min_index],arr[i]\n    return arr\n\nprint(selection_sort([1,2,3,4,5,6,7,8,9,10]))\n/Python/Algorithms/Sorting/merge_sort.py\n\"\"\"\nMerge Sort\n\nTime Complexity: O(nlogn)\nSpace Complexity: O(n)\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n\nprint(merge_sort([1,2,3,4,5,6,7,8,9,10]))\n/Python/Algorithms/Sorting/quick_sort.py\n\"\"\"\nQuick Sort\n\nTime Complexity: O(nlogn)\nSpace Complexity: O(logn)\n\"\"\"\n\ndef quick_sort(arr):\n    if len(arr) > 1:\n        pivot = arr[len(arr)//2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)\n    else:\n        return arr\n\nprint(quick_sort([1,2,3,4,5,6,7,8,9,10]))\n/Python/Algorithms/Sorting/heap_sort"}
{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\ndef split(string):\n    return [char for char in string]\n\nprint(split('python'))\n/python/python_basics/02_variables.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nname = \"John\"\nage = 23\n\nprint(\"My name is %s and I am %d years old.\" % (name, age))\n/python/python_basics/03_operators.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)\nprint(a % b)\nprint(a ** b)\nprint(a // b)\n/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Hello World!\")\n/python/python_basics/04_if_else.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a < b:\n    print(\"a is less than b\")\nelse:\n    print(\"a is equal to b\")\n/python/python_basics/05_for_loop.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\nfor i in range(1, 11):\n    print(i)\n/python/python_basics/06_while_loop.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\ni = 1\nwhile i <= 10:\n    print(i)\n    i += 1\n/python/python_basics/07_functions.py\n\"\"\"\nWrite a python function to add two numbers.\nassert add(10, 20) == 30\n\"\"\"\n\ndef add(a, b):\n    return a + b\n\nprint(add(10, 20))\n/python/python_basics/08_lists.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\na = [1, 2, 3, 4, 5]\n\nprint(a[0])\nprint(a[1])\nprint(a[2])\nprint(a[3])\nprint(a[4])\n\nprint(a[-1])\nprint(a[-2])\nprint(a[-3])\nprint(a[-4])\nprint(a[-5])\n\nprint(a[0:3])\nprint(a[1:4])\nprint(a[2:5])\nprint(a[3:6])\nprint(a[4:7])\n\nprint(a[0:5:2])\nprint(a[1:5:2])\nprint(a[2:5:2])\nprint(a[3:6:2])\nprint(a[4:7:2])\n\nprint(a[::-1])\nprint(a[::-2])\n\na.append(6)\nprint(a)\n\na.insert(0, 0)\nprint(a)\n\na.remove(0)\nprint(a)\n\na.pop()\nprint(a)\n\na.pop(0)\nprint(a)\n\na.clear()\nprint(a)\n/python/python_basics/09_dictionaries.py\n\"\"\"\nWrite a python program to print the result of the following operations.\n\"\"\"\n\na = {\n    'name': 'John',\n    'age': 23,\n    'city': 'New York'\n}\n\nprint(a['name'])\nprint(a['age'])\nprint(a['city'])\n\na['name'] = 'Jane'\nprint(a)\n\na['country'] = 'USA'\nprint(a)\n\ndel a['country']\nprint(a)\n\na.clear()\nprint"}
{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n\ndef sum_digits(n):\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\nprint(sum_digits(345))\n/02_data_structures/02_lists/02_list_comprehensions.py\n\"\"\"\nList comprehensions are a way to create lists in a concise way.\n\"\"\"\n\n# Create a list of the first 10 square numbers\nsquares = [x**2 for x in range(10)]\nprint(squares)\n\n# Create a list of the first 10 square numbers that are divisible by 3\nsquares_div_3 = [x**2 for x in range(10) if x**2 % 3 == 0]\nprint(squares_div_3)\n\n# Create a list of the first 10 square numbers that are divisible by 3\n# and are even\nsquares_div_3_even = [x**2 for x in range(10) if x**2 % 3 == 0 and x**2 % 2 == 0]\nprint(squares_div_3_even)\n\n# Create a list of the first 10 square numbers that are divisible by 3\n# and are even\n# and are odd\nsquares_div_3_even_odd = [x**2 for x in range(10) if x**2 % 3 == 0 and x**2 % 2 == 0 and x**2 % 2 == 1]\nprint(squares_div_3_even_odd)\n/02_data_structures/02_lists/01_list_basics.py\n\"\"\"\nLists are a data structure that can hold multiple values.\n\"\"\"\n\n# Create a list of numbers\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers)\n\n# Create a list of strings\nstrings = [\"hello\", \"world\"]\nprint(strings)\n\n# Create a list of mixed types\nmixed = [1, \"hello\", 2, \"world\"]\nprint(mixed)\n\n# Create a list of lists\nlists = [[1, 2, 3], [4, 5, 6]]\nprint(lists)\n\n# Create a list of lists of lists\nlists_of_lists = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]\nprint(lists_of_lists)\n\n# Create a list of lists of lists of lists\nlists_of_lists_of_lists = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]\nprint(lists_of_lists_of_lists)\n\n# Create a list of lists of lists of lists of lists\nlists_of_lists_of_lists_of_lists = [[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[25, 26, 27], [28, 29, 30]], [[31, 32, 33], [34, 35, 36]]], [[[37, 38, 39], [40, 41, 42]], [[43, 44, 45], [46, 47, 48]]]]]\nprint(lists_of_lists_of_lists_of_lists)\n\n# Create a list of lists of lists of lists of lists of lists\nlists"}
{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\ndef issort_list(list):\n    for i in range(len(list)-1):\n        if list[i]>list[i+1]:\n            return False\n    return True\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20])==True\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24])==True\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25,26])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25,26,27])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25,26,27,28])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25,26,27,28,29])==False\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25,26,27,28,29,30])==True\nassert issort_list([1,2,4,6,8,10,12,14,16,17,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31])==False\nassert issort_list([1,2,4,6,8,10,12,14,16"}
{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\ndef empty_list(n):\n    return [{} for i in range(n)]\n\nprint(empty_list(5))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(500001):\n    if i % 2!= 0:\n        sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/functions_intermediate1.py\n\"\"\"\nCountdown - Create a function that accepts a number as an input. Return a new list that counts down by one, from the number (as the 0th element) down to 0 (as the last element).\n\"\"\"\n\ndef countdown(num):\n    new_list = []\n    for i in range(num, -1, -1):\n        new_list.append(i)\n    return new_list\n\nprint(countdown(5))\n\n\"\"\"\nPrint and Return - Create a function that will receive a list with two numbers. Print the first value and return the second.\n\"\"\"\n\ndef print_and_return(list):\n    print(list[0])\n    return list[1]\n\nprint(print_and_return([1, 2]))\n\n\"\"\"\nFirst Plus Length - Create a function that accepts a list and returns the sum of the first value in the list plus the list's length.\n\"\"\"\n\ndef first_plus_length(list):\n    return list[0] + len(list)\n\nprint(first_plus_length([1, 2, 3, 4, 5]))\n\n\"\"\"\nValues Greater than Second - Write a function that accepts a list and creates a new list containing only the values from the original list that are greater than its 2nd value. Print how many values this is and then return the new list. If the list has less than 2 elements, have the function return False\n\"\"\"\n\ndef values_greater_than_second(list):\n    if len(list) < 2:\n        return False\n    new_list = []\n    for i in range(len(list)):\n        if list[i] > list[1]:\n            new_list.append(list[i])\n    print(len(new_list))\n    return new_list\n\nprint(values_greater_than_second([5, 2, 3, 2, 1, 4]))\n\n\"\"\"\nThis Length, That Value - Write a function that accepts two integers as parameters: size and value. The function should create and return a list"}
{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst\n\nprint(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(132189))/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4] becomes 1^3 + 3^3 + 5^3 + 7^3 = 27.\n\"\"\"\n\ndef cube_odd(arr):\n    return sum([i**3 for i in arr if i % 2!= 0])\n\nprint(cube_odd([1, 2, 3, 4]))/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum([i for i in range(1, n*2, 2)])\n\nprint(row_sum_odd_numbers(1))/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum([i for i in arr if i > 0])\n\nprint(positive_sum([1,-4,7,12]))/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it"}
{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\ndef two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\nprint(two_unique_nums([1,2,3,2,3,4,5]))\n/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n/python/python_fundamentals/coin_tosses2.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n\n\"\"\"\nCreate another function that simulates tossing a pair of dice 5,000 times. Your function should print how many times the double 6 appears.\n\"\"\"\n\nimport random\n\ndef dice_tosses():\n    double_six = 0\n    for i in range(1, 5001):\n        die1 = random.randint(1, 6)\n        die2 = random.randint(1, 6)\n        if die"}
{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\ndef unique_product(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to calculate the sum of the digits of a given number.\nassert sum_digits(123) == 6\n\"\"\"\n\ndef sum_digits(number):\n    sum = 0\n    while number > 0:\n        sum += number % 10\n        number //= 10\n    return sum\n\nprint(sum_digits(123))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to calculate the sum of the digits of a given number.\nassert sum_digits(123) == 6\n\"\"\"\n\ndef sum_digits(number):\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n    return sum\n\nprint(sum_digits(123))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to calculate the sum of the digits of a given number.\nassert sum_digits(123) == 6\n\"\"\"\n\ndef sum_digits(number):\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n    return sum\n\nprint(sum_digits(123))\n"}
{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\n\ndef surfacearea_cylinder(r,h):\n    return 2*3.14*r*h+2*3.14*r**2\n\nprint(surfacearea_cylinder(10,5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.79\n\"\"\"\n\ndef volume_cylinder(r,h):\n    return 3.14*r**2*h\n\nprint(volume_cylinder(10,5))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.64\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return 4*3.14*r**2\n\nprint(surfacearea_sphere(10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.79\n\"\"\"\n\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\nprint(volume_sphere(10))\n\n\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(10,5)==235.62\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return 3.14*r*(r+((r**2+h**2)**0.5))\n\nprint(surfacearea_cone(10,5))\n\n\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(10,5)==837.75\n\"\"\"\n\ndef volume_cone(r,h):\n    return 1/3*3.14*r**2*h\n\nprint(volume_cone(10,5))\n\n\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(10)==600\n\"\"\"\n\ndef surfacearea_cube(a):\n    return 6*a**2\n\nprint(surfacearea_cube(10))\n\n\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(10)==1000\n\"\"\"\n\ndef volume_cube(a):\n    return a**3\n\nprint(volume_cube(10))\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(10,5,2)==1000\n\"\"\"\n\ndef surfacearea_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\nprint(surfacearea_cuboid(10,5,2))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(10,5,2)==100\n\"\"\"\n\ndef volume_cuboid(l,b,h):\n    return l*b*h\n\nprint(volume_cuboid(10,5,2))\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\nassert surfacearea_hemisphere(10)==1570.79\n\"\"\"\n\ndef surfacearea_hemisphere(r):\n    return 3*3.14*r**2\n\nprint(surfacearea_hemisphere(10))\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\nassert volume_hemisphere(10)==2680.48\n\"\"\"\n\ndef volume_hemisphere(r):\n    return 2/3*3.14*r**3\n\nprint(volume_hemisphere(10))\n\n\"\"\"\nWrite a function to find the surface area of a torus.\nassert surfacearea_torus(10,5)==1256.64\n\"\"\"\n\ndef surfacearea_torus(r,R):\n    return 2*3.14*r*R+2*3.14*r**2\n\nprint(surfacearea_torus(10,5))\n\n\"\"\""}
{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\ndef is_Sub_Array(list1,list2):\n    if len(list1) < len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list2[0]:\n                if list1[i:i+len(list2)] == list2:\n                    return True\n    return False\n\nprint(is_Sub_Array([1,4,3,5],[1,2]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10,11]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(is_Sub_Array([1,4,3,5],[1,4,3,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(is_Sub_Array([1,4,3,5],["}
{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n\nprint(last_Digit_Factorial(4))\n/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find"}
{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\ndef interleave_lists(list1, list2, list3):\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]))/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(151):\n    print(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\n\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n    if i % mult == 0:\n        print(i)/python/python_fundamentals/coin_tosses.py\n\"\"\"\nCreate a function called toss_coin() that returns a string \"Heads\" or \"Tails\" randomly.\n\"\"\"\n\nimport random\n\ndef toss_coin():\n    if random.randint(0, 1) == 0:\n        return \"Heads\"\n    else:\n        return \"Tails\"\n\nprint(toss_coin())\n\n\"\"\"\nCreate another function called toss_multiple_coins(n) that returns a list. Each element in the list should be a string of \"Heads\" or \"Tails\" randomly, based on the input parameter n.\n\"\"\"\n\ndef toss_multiple_coins(n):\n    return [toss_coin() for i in range(n)]\n\nprint(toss_multiple_coins(5))\n\n\"\"\"\nCreate a function called toss_coin_to_get_head(n) that returns the number of tosses it took to get a head.\n\"\"\"\n\ndef toss_coin_to_get_head(n):\n   "}
{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n\ndef find_dissimilar(t1, t2):\n    \"\"\"\n    >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 6, 7, 10)\n    \"\"\"\n    return tuple(set(t1) ^ set(t2))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_practice/python_practice_2017/python_practice_2017_03/python_practice_2017_03_19.py\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\nWrite a function to find the longest common prefix string in a list of strings.\nassert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n\"\"\"\n\ndef longest_common_prefix(strs):\n    \"\"\"\n    >>> longest_common_prefix([\"flower\", \"flow\", \"flight\"])\n    'fl'\n    \"\"\"\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n    return prefix\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_practice/python_practice_2017/python_practice_2017_03/python_practice_2017_03_14.py\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\nWrite a function to find the longest common prefix string in a list of strings.\nassert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n\"\"\"\n\ndef longest_common_prefix(strs):\n    \"\"\"\n    >>> longest_common_prefix([\"flower\", \"flow\", \"flight\"])\n    'fl'\n    \"\"\"\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n    return prefix\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_practice/python_practice_2017/python_practice_2017_03/python_practice_2017_03_15.py\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\nWrite a function to find the longest common prefix string in a list of strings.\nassert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n\"\"\"\n\ndef longest_common_prefix(strs):\n    \"\"\"\n    >>> longest_common_prefix([\"flower\", \"flow\", \"flight\"])\n    'fl'\n    \"\"\"\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n    return prefix\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_practice/python_practice_2017/python_practice_2017_03/python_practice_2017_03_16.py\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\nWrite a function to find the longest common prefix string in a list of strings.\nassert longest_common_prefix([\"flower\", \"flow\", \"flight"}
{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\ndef extract_even(nested_tuple):\n    \"\"\"\n    >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n    (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    new_tuple = ()\n    for item in nested_tuple:\n        if type(item) == tuple:\n            new_tuple += (extract_even(item),)\n        elif item % 2 == 0:\n            new_tuple += (item,)\n    return new_tuple\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day01/02_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the even numbers.\n\nassert only_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n\"\"\"\n\ndef only_even(numbers):\n    \"\"\"\n    >>> only_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [number for number in numbers if number % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day01/03_list_comprehension_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the even numbers.\n\nassert only_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n\"\"\"\n\ndef only_even(numbers):\n    \"\"\"\n    >>> only_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [number for number in numbers if number % 2 == 0]\n\ndef only_even_2(numbers):\n    \"\"\"\n    >>> only_even_2([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [number for number in numbers if number % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day01/01_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the even numbers.\n\nassert only_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n\"\"\"\n\ndef only_even(numbers):\n    \"\"\"\n    >>> only_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n    new_list = []\n    for number in numbers:\n        if number % 2 == 0:\n            new_list.append(number)\n    return new_list\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week02/day01/04_list_comprehension_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the even numbers.\n\nassert only_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n\"\"\"\n\ndef only_even(numbers):\n    \"\"\"\n    >>> only_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [number for number in numbers if number % 2 == 0]\n\ndef only_even_2(numbers):\n    \"\"\"\n    >>> only_even_2([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [number for number in numbers if number % 2 == 0]\n\ndef only_even_3(numbers):\n    \"\"\"\n    >>> only_even_3([1,"}
{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\ndef surface_Area(base, height):\n    return (base * base) + (base * height * 4)\n\nprint(surface_Area(3,4))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nBasic - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nBasic - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nBasic - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\n\nsum = 0\nfor i in range(0, 500001, 2):\n    sum += i\nprint(sum)\n\n\"\"\"\nBasic - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\n\nfor i in range(2018, 0, -4):\n    print(i)\n\n\"\"\"\nBasic - Print the sum of all the values in the list: a = [1, 2, 5, 10, 255, 3]\n\"\"\"\n\na = [1, 2, 5, 10, 255, 3]\nsum = 0\nfor i in a:\n    sum += i\nprint(sum)\n\n\"\"\"\nBasic - Print the average of the values in the list: a = [1, 2, 5, 10, 255, 3]\n\"\"\"\n\na = [1, 2, 5, 10, 255, 3]\nsum = 0\nfor i in a:\n    sum += i\nprint(sum / len(a))\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nModify the previous program to that 1,000 users will have the chance to try to guess the number of heads.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n    guess = input(\"Guess the number of heads: \")\n    if heads == int(guess):\n        print(\"You guessed correctly!\")\n    else:\n        print(\"You guessed incorrectly.\")\n\ncoin_tosses()\n/python/python_fundamentals/coin_tosses_3.py\n\"\"\"\nModify the previous program to that 1,000 users will have the chance to try to guess the number of heads.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i"}
{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False\n\nassert is_empty({})==True\nassert is_empty({10})==False\n\n\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef is_empty(my_dict):\n    if len(my_dict) == 0:"}
{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n\ndef catalan_number(n):\n    if n==0:\n        return 1\n    else:\n        return (4*n-2)/(n+1)*catalan_number(n-1)\n\nprint(catalan_number(10))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val==q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        else:\n            return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        elif left is None or right is None:\n            return False\n        else:\n            return left.val==right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if root is None:\n            return []\n        else:\n            result = []\n            queue = [root]\n            while queue:\n                level = []\n                for _ in range("}
{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\ndef expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1))\n/python/python_basics/03_lists/03_list_comprehension.py\n\"\"\"\nList comprehension is a way to create a list in a single line of code.\n\"\"\"\n\n# Create a list of squares of numbers from 1 to 10\nsquares = [x**2 for x in range(1, 11)]\nprint(squares)\n\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1, 11) if x % 2 == 0]\nprint(even_numbers)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3\ndivisible_by_3 = [x for x in range(1, 101) if x % 3 == 0]\nprint(divisible_by_3)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 and 5\ndivisible_by_3_and_5 = [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0]\nprint(divisible_by_3_and_5)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 or 5\ndivisible_by_3_or_5 = [x for x in range(1, 101) if x % 3 == 0 or x % 5 == 0]\nprint(divisible_by_3_or_5)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 and not 5\ndivisible_by_3_not_5 = [x for x in range(1, 101) if x % 3 == 0 and x % 5!= 0]\nprint(divisible_by_3_not_5)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 or 5 but not both\ndivisible_by_3_or_5_not_both = [x for x in range(1, 101) if x % 3 == 0 or x % 5 == 0 and x % 15!= 0]\nprint(divisible_by_3_or_5_not_both)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 or 5 but not both\ndivisible_by_3_or_5_not_both = [x for x in range(1, 101) if x % 3 == 0 or x % 5 == 0 and x % 15!= 0]\nprint(divisible_by_3_or_5_not_both)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 or 5 but not both\ndivisible_by_3_or_5_not_both = [x for x in range(1, 101) if x % 3 == 0 or x % 5 == 0 and x % 15!= 0]\nprint(divisible_by_3_or_5_not_both)\n\n# Create a list of numbers from 1 to 100 that are divisible by 3 or 5 but not both\ndivisible_by_3_or_5_not_both = [x for x in range(1, 101) if x % 3 == 0 or x % 5 == 0 and x % 15!= 0]\nprint(divisible_by_3_or_5_not"}
{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr,n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))/Python/Python_Fundamentals/Functions_Intermediate_I/Functions_Intermediate_I.py\n\"\"\"\nFunctions Intermediate I\n\"\"\"\n\n# 1. Update Values in Dictionaries and Lists\nx = [ [5,2,3], [10,8,9] ] \nstudents = [\n     {'first_name':  'Michael', 'last_name' : 'Jordan'},\n     {'first_name' : 'John', 'last_name' : 'Rosales'}\n]\nsports_directory = {\n    'basketball' : ['Kobe', 'Jordan', 'James', 'Curry'],\n   'soccer' : ['Messi', 'Ronaldo', 'Rooney']\n}\nz = [ {'x': 10, 'y': 20} ]\n\n# Change the value 10 in x to 15. Once you're done, x should now be [ [5,2,3], [15,8,9] ].\nx[1][0] = 15\nprint(x)\n\n# Change the last_name of the first student from 'Jordan' to 'Bryant'\nstudents[0]['last_name'] = 'Bryant'\nprint(students)\n\n# In the sports_directory, change 'Messi' to 'Andres'\nsports_directory['soccer'][0] = 'Andres'\nprint(sports_directory)\n\n# Change the value 20 in z to 30\nz[0]['y'] = 30\nprint(z)\n\n# 2. Iterate Through a List of Dictionaries\nstudents = [\n         {'first_name':  'Michael', 'last_name' : 'Jordan'},\n         {'first_name' : 'John', 'last_name' : 'Rosales'},\n         {'first_name' : 'Mark', 'last_name' : 'Guillen'},\n         {'first_name' : 'KB', 'last_name' : 'Tonel'}\n    ]\n\ndef iterateDictionary(arr):\n    for i in range(len(arr)):\n        print(f\"{i+1} - {arr[i]['first_name']} {arr[i]['last_name']}\")\n\niterateDictionary(students)\n\n# 3. Get Values From a List of Dictionaries\ndef iterateDictionary2(key_name, some_list):\n    for i in range(len(some_list)):\n        print(some_list[i][key_name])\n\niterateDictionary2('first_name', students)\niterateDictionary2('last_name', students)\n\n# 4. Iterate Through a Dictionary with List Values\ndojo = {\n   'locations': ['San Jose', 'Seattle', 'Dallas', 'Chicago', 'Tulsa', 'DC', 'Burbank'],\n   'instructors': ['Michael', 'Amy', 'Eduardo', 'Josh', 'Graham', 'Patrick', 'Minh', 'Devon']\n}\n\ndef printInfo(some_dict):\n    for key in some_dict:\n        print(f\"{key.upper()}:\")\n        for i in range(len(some_dict[key])):\n            print(f\"{i+1} - {some_dict[key][i]}\")\n\nprintInfo(dojo)/Python/Python_Fundamentals/Functions_Basic_II/Functions_Basic_II.py\n\"\"\"\nFunctions Basic II\n\"\"\"\n\n# 1. Countdown\ndef countdown(num):\n    for i in range(num, -1, -1):\n        print(i)\n\ncountdown(5)\n\n# 2. Print and Return\ndef print_and_return(arr):\n    print(arr[0])\n    return arr[1]\n\nprint_and_return([1,2])\n\n# 3. First Plus Length\ndef first_plus_length(arr):\n    return arr[0] + len(arr)\n"}
{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\ndef list_tuple(list):\n    return tuple(list)\n\nprint(list_tuple([5, 10, 7, 4, 15, 3]))\n/python_basics/02_variables/02_variables.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n/python_basics/03_operators/01_operators.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a + b)\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a - b)\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a * b)\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a / b)\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a % b)\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a ** b)\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nprint(a // b)\n/python_basics/04_conditional_statements/01_conditional_statements.py\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"b is greater than a\")\n\n\"\"\"\nWrite a program to print the sum of two numbers.\n\"\"\"\n\na = 10\nb = 20\n\nif a > b:\n    print(\"a is greater"}
{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\ndef big_diff(nums):\n    return max(nums) - min(nums)\n\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([10,3,10,4]) == 7\nassert big_diff([1,10,10,4]) == 9\nassert big_diff([10,10,10,4]) == 6\nassert big_diff([1,2,3,4,5,6,7,8,9,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10]) == 9\nassert big_diff([10,10,10,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]) == 9\nassert big_"}
{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\ndef perfect_squares(start, end):\n    return [i**2 for i in range(start, end+1) if i**0.5 == int(i**0.5)]\n\nprint(perfect_squares(1,30))\n/python/00001-05000/00011-00500/00111-01600/00511-06600/00551-06600/00554-00600/00555-00600/00556-00600/00557-00600/00558-00600/00559-00600/00560-00600/00561-00600/00562-00600/00563-00600/00564-00600/00565-00600/00566-00600/00567-00600/00568-00600/00569-00600/00570-00600/00571-00600/00572-00600/00573-00600/00574-00600/00575-00600/00576-00600/00577-00600/00578-00600/00579-00600/00580-00600/00581-00600/00582-00600/00583-00600/00584-00600/00585-00600/00586-00600/00587-00600/00588-00600/00589-00600/00590-00600/00591-00600/00592-00600/00593-00600/00594-00600/00595-00600/00596-00600/00597-00600/00598-00600/00599-00600.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\n\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\n\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\nNote:\n\nAll given inputs are in lowercase letters a-z.\n\"\"\"\n\nclass Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n\nprint(Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\nprint(Solution().longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n/python/00001-05000/"}
{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n\ndef polar_rect(r,theta):\n    x = r*cos(theta)\n    y = r*sin(theta)\n    return (x,y)\n\nprint(polar_rect(3,4))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x,y):\n    r = sqrt(x**2+y**2)\n    theta = atan2(y,x)\n    return (r,theta)\n\nprint(rect_polar(5,0.9272952180016122))\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\nassert rect_polar(5,0.9272952180016122)==(3,4)\n\"\"\"\n\ndef rect_polar(x"}
{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\ndef swap_List(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list\n\nprint(swap_List([12, 35, 9, 56, 24]))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the maximum of three numbers.\nassert max_of_three(10, 11, 12) == 12\n\"\"\"\n\ndef max_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nprint(max_of_three(10, 11, 12))\n/python_basics/python_basics_10.py\n\"\"\"\nWrite a python function to find the sum of the first n positive integers.\nassert sum_of_n(10) == 55\n\"\"\"\n\ndef sum_of_n(n):\n    return n * (n + 1) / 2\n\nprint(sum_of_n(10))\n/python_basics/python_basics_11.py\n\"\"\"\nWrite a python function to find the sum of the first n positive integers.\nassert sum_of_n(10) == 55\n\"\"\"\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n/python_basics/python_basics_12.py\n\"\"\"\nWrite a python function to find the sum of the first n positive integers.\nassert sum_of_n(10) == 55\n\"\"\"\n\ndef sum_of_n(n):\n    return n * (n + 1) / 2\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n/python_basics/python_basics_13.py\n\"\"\"\nWrite a python function to find the sum of the first n positive integers.\nassert sum_of_n(10) == 55\n\"\"\"\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint(sum_of_n(10))\n\ndef sum"}
{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\n\nprint(sum_Of_product(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_8.py\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**"}
{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    ip = ip.split('.')\n    ip = [i for i in ip if i!= '0']\n    return '.'.join(ip)\n\nprint(removezero_ip(\"216.08.094.196\"))\n\n\"\"\"\nWrite a function to remove all leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip("}
{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(lst):\n    for i in lst:\n        if i%2==0:\n            even=i\n        if i%2!=0:\n            odd=i\n    return even-odd\n\nprint(diff_even_odd([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and last element of a given list.\nassert sum_first_last([1,3,5,7,4,1,6,8])==15\n\"\"\"\ndef sum_first_last(lst):\n    return lst[0]+lst[-1]\n\nprint(sum_first_last([1,3,5,7,4,1,6,8]))\n\n\"\"\"\nWrite a function to find the sum of the first and"}
{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\n\ndef min_Swaps(s1,s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            count += 1\n    return count\n\nprint(min_Swaps(\"1101\",\"1110\"))\n/Python/Algorithms/Sorting/SelectionSort.py\n\"\"\"\nSelection Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1,len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i],arr[min_idx] = arr[min_idx],arr[i]\n    return arr\n\nprint(selection_sort([1,5,3,2,4]))\n/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n\nprint(bubble_sort([1,5,3,2,4]))\n/Python/Algorithms/Sorting/InsertionSort.py\n\"\"\"\nInsertion Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef insertion_sort(arr):\n    for i in range(1,len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\nprint(insertion_sort([1,5,3,2,4]))\n/Python/Algorithms/Sorting/MergeSort.py\n\"\"\"\nMerge Sort\n\nTime Complexity: O(nlogn)\nSpace Complexity: O(n)\n\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n\nprint(merge_sort([1,5,3,2,4]))\n/Python/Algorithms/Sorting/QuickSort.py\n\"\"\"\nQuick Sort\n\nTime Complexity: O(nlogn)\nSpace Complexity: O(logn)\n\n\"\"\"\n\ndef partition(arr,low,high):\n    i = low-1\n    pivot = arr[high]\n    for j in range(low,high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i],arr[j] = arr[j],arr[i]\n    arr[i+1],arr[high] = arr[high],arr[i+1]\n    return i+1\n\ndef quick_sort(arr,low,high):\n    if low < high:\n        pi = partition(arr,low,high)\n        quick_sort(arr,low,pi-1)\n        quick_sort(arr,pi+1,high)\n    return arr\n\nprint(quick_sort([1,5,3,2,4],0,4))\n/Python/Algorithms/Sorting/HeapSort.py\n\"\"\"\nHeap"}
{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n\"\"\"\nWrite a"}
{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\ndef find_kth(a, b, k):\n    if len(a) > len(b):\n        return find_kth(b, a, k)\n    if len(a) == 0:\n        return b[k - 1]\n    if k == 1:\n        return min(a[0], b[0])\n    i = min(len(a), k // 2)\n    j = k - i\n    if a[i - 1] > b[j - 1]:\n        return find_kth(a, b[j:], k - j)\n    else:\n        return find_kth(a[i:], b, k - i)\n\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5))\n/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\ndef build_tree(arr):\n    if len(arr) == 0:\n        return None\n    root = TreeNode(arr[0])\n    queue = [root]\n    i = 1\n    while i < len(arr):\n        node = queue.pop(0)\n        if arr[i] is not None:\n            node.left = TreeNode(arr[i])\n            queue.append(node.left)\n        i += 1\n        if i < len(arr) and arr[i] is not None:\n            node.right = TreeNode(arr[i])\n            queue.append(node.right)\n        i += 1\n    return root\n\ndef print_tree(root):\n    if root is None:\n        return\n    print(root.val)\n    print_tree(root.left)\n    print_tree(root.right)\n\ndef main():\n    p = build_tree([1, 2, 3])\n    q = build_tree([1, 2, 3])\n    print(Solution().isSameTree(p, q))\n\nif __name__ == '__main__':\n    main()\n/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode)"}
{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n\ndef armstrong_number(num):\n    sum=0\n    temp=num\n    while temp>0:\n        digit=temp%10\n        sum=sum+digit**3\n        temp=temp//10\n    if num==sum:\n        return True\n    else:\n        return False\n\nprint(armstrong_number(153))\nprint(armstrong_number(123))\nprint(armstrong_number(370))\nprint(armstrong_number(371))\nprint(armstrong_number(407))\n/Day 1/Day1_Assignment_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n/Day 1/Day1_Assignment_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n/Day 1/Day1_Assignment_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):"}
{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    avg=sum/n\n    return sum,avg\n\nprint(sum_average(10))\n\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5"}
{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\ndef is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\nassert is_Even(4) == True\nassert is_Even(5) == False\nassert is_Even(6) == True\nassert is_Even(7) == False\nassert is_Even(8) == True\nassert is_Even(9) == False\nassert is_Even(10) == True\nassert is_Even(11) == False\nassert is_Even(12) == True\nassert is_Even(13) == False\nassert is_Even(14) == True\nassert is_Even(15) == False\nassert is_Even(16) == True\nassert is_Even(17) == False\nassert is_Even(18) == True\nassert is_Even(19) == False\nassert is_Even(20) == True\nassert is_Even(21) == False\nassert is_Even(22) == True\nassert is_Even(23) == False\nassert is_Even(24) == True\nassert is_Even(25) == False\nassert is_Even(26) == True\nassert is_Even(27) == False\nassert is_Even(28) == True\nassert is_Even(29) == False\nassert is_Even(30) == True\nassert is_Even(31) == False\nassert is_Even(32) == True\nassert is_Even(33) == False\nassert is_Even(34) == True\nassert is_Even(35) == False\nassert is_Even(36) == True\nassert is_Even(37) == False\nassert is_Even(38) == True\nassert is_Even(39) == False\nassert is_Even(40) == True\nassert is_Even(41) == False\nassert is_Even(42) == True\nassert is_Even(43) == False\nassert is_Even(44) == True\nassert is_Even(45) == False\nassert is_Even(46) == True\nassert is_Even(47) == False\nassert is_Even(48) == True\nassert is_Even(49) == False\nassert is_Even(50) == True\nassert is_Even(51) == False\nassert is_Even(52) == True\nassert is_Even(53) == False\nassert is_Even(54) == True\nassert is_Even(55) == False\nassert is_Even(56) == True\nassert is_Even(57) == False\nassert is_Even(58) == True\nassert is_Even(59) == False\nassert is_Even(60) == True\nassert is_Even(61) == False\nassert is_Even(62) == True\nassert is_Even(63) == False\nassert is_Even(64) == True\nassert is_Even(65) == False\nassert is_Even(66) == True\nassert is_Even(67) == False\nassert is_Even(68) == True\nassert is_Even(69) == False\nassert is_Even(70) == True\nassert is_Even(71) == False\nassert is_Even(72) == True\nassert is_Even(73) == False\nassert is_Even(74) == True\nassert is_Even(75) == False\nassert is_Even(76) == True\nassert is_Even(77) == False\nassert is_Even(78) == True\nassert is_Even(79) == False\nassert is_Even(80) == True\nassert is_Even(81) == False\nassert is_Even(82) == True\nassert is_Even(83) == False\nassert is_Even(84) == True\nassert is_Even(85) == False\nassert is_Even(86) =="}
{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\ndef first_repeated_char(string):\n    \"\"\"\n    :param string: str\n    :return: str\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            return string[i]\n    return None\n\nprint(first_repeated_char(\"abcabc\"))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :param nums: List[int]\n    :return: int\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef same_tree(p, q):\n    \"\"\"\n    :param p: TreeNode\n    :param q: TreeNode\n    :return: bool\n    \"\"\"\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return same_tree(p.left, q.left) and same_tree(p.right, q.right)\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\n\nprint(same_tree(root, root2))\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    :param s: str\n    :return: bool\n    \"\"\"\n    s = s.lower()\n    s = ''.join(c for c in s if c.isalnum())\n    return s == s[::-1]\n\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))\n/python/leetcode/easy/118_pascals_triangle.py\n\"\"\"\nGiven a non-negative integer numRows, generate the first numRows of Pascal's triangle.\n\nExample:\n\nInput: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\n\ndef generate(numRows):\n    \"\"\"\n    :param numRows: int\n    :return: List[List[int"}
{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\ndef get_lucid(n):\n    \"\"\"\n    :param n: int\n    :return: list\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid.append(i)\n        else:\n            if i % 2 == 0:\n                lucid.append(i)\n            else:\n                if i % 3 == 0:\n                    lucid.append(i)\n                else:\n                    if i % 5 == 0:\n                        lucid.append(i)\n    return lucid\n\nprint(get_lucid(10))\n/leetcode/1001-1100/1009.py\n\"\"\"\n1009. Complement of Base 10 Integer\n\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n\n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\n\nclass Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 1\n        else:\n            return int(''.join(['1' if i == '0' else '0' for i in bin(N)[2:]]), 2)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.bitwiseComplement(5))\n    print(s.bitwiseComplement(7))\n    print(s.bitwiseComplement(10))\n/leetcode/1001-1100/1003.py\n\"\"\"\n1003. Check If Word Is Valid After Substitutions\n\nGiven a string S, a k duplicate removal consists of choosing two adjacent and equal letters, and removing them.\n\nWe repeatedly make k duplicate removals on S, until we no longer can.\n\nReturn the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.\n\n\n\nExample 1:\n\nInput: \"abcd\"\nOutput: \"abcd\"\nExplanation: If we choose to remove duplicate characters in order, we will get \"abcd\".\nExample 2:\n\nInput: \"abccba\"\nOutput: \"a\"\nExplanation: If we choose to remove duplicate characters in order, we will get \"a\".\nNote that \"abccba\" also applies, since removing \"bb\" would not make the string equal to \"a\".\nExample 3:\n\nInput: \"aabcabcab\"\nOutput: \"\"\nExplanation: If we choose to remove duplicate characters in order, we will get \"\".\nExample 4:\n\nInput: \"aaabaaab\"\nOutput: \"aaabaaab\"\nExample 5:\n\nInput: \"aaababab\"\nOutput: \"ab\"\n\n\nNote:\n\n1 <= S.length <= 10^5\nS consists only of lowercase letters.\n\"\"\"\n\n\nclass Solution:\n    def isValid(self, S: str) -> bool:\n        \"\"\"\n        :type"}
{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\ndef reverse_words(string):\n    return \" \".join(string.split()[::-1])\n\nprint(reverse_words(\"python program\"))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef same_tree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    return p.val == q.val and same_tree(p.left, q.left) and same_tree(p.right, q.right)\n\ndef same_tree_iterative(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    stack = [(p, q)]\n    while stack:\n        p, q = stack.pop()\n        if p is None and q is None:\n            continue\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        stack.append((p.left, q.left))\n        stack.append((p.right, q.right))\n    return True\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\n\nprint(same_tree(root, root2))\nprint(same_tree_iterative(root, root2))\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef level_order_bottom(root):\n    if root is None:\n        return []\n    queue = [root]\n    result = []\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left"}
{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\ndef prime_num(n):\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n\nprint(prime_num(13))\n/02_python_basics/03_functions/01_functions.py\n\"\"\"\nWrite a function to calculate the area of a triangle.\nassert area_of_triangle(3,4,5)==6\n\"\"\"\n\ndef area_of_triangle(a,b,c):\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n\nprint(area_of_triangle(3,4,5))\n/02_python_basics/02_conditionals/02_conditionals.py\n\"\"\"\nWrite a function to check if the given number is even or odd.\nassert even_odd(10)==True\n\"\"\"\n\ndef even_odd(n):\n    if n%2==0:\n        return True\n    else:\n        return False\n\nprint(even_odd(10))\n/02_python_basics/03_functions/02_functions.py\n\"\"\"\nWrite a function to calculate the area of a rectangle.\nassert area_of_rectangle(3,4)==12\n\"\"\"\n\ndef area_of_rectangle(a,b):\n    area=a*b\n    return area\n\nprint(area_of_rectangle(3,4))\n/02_python_basics/03_functions/03_functions.py\n\"\"\"\nWrite a function to calculate the area of a circle.\nassert area_of_circle(3)==28.274333882308138\n\"\"\"\n\ndef area_of_circle(r):\n    area=3.14*r*r\n    return area\n\nprint(area_of_circle(3))\n/02_python_basics/03_functions/04_functions.py\n\"\"\"\nWrite a function to calculate the area of a square.\nassert area_of_square(3)==9\n\"\"\"\n\ndef area_of_square(a):\n    area=a*a\n    return area\n\nprint(area_of_square(3))\n/02_python_basics/03_functions/05_functions.py\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\nassert area_of_trapezoid(3,4,5)==10\n\"\"\"\n\ndef area_of_trapezoid(a,b,h):\n    area=0.5*(a+b)*h\n    return area\n\nprint(area_of_trapezoid(3,4,5))\n/02_python_basics/03_functions/06_functions.py\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\nassert area_of_parallelogram(3,4,5)==6\n\"\"\"\n\ndef area_of_parallelogram(a,b,h):\n    area=a*b\n    return area\n\nprint(area_of_parallelogram(3,4,5))\n/02_python_basics/03_functions/07_functions.py\n\"\"\"\nWrite a function to calculate the area of a rhombus.\nassert area_of_rhombus(3,4,5)==6\n\"\"\"\n\ndef area_of_rhombus(a,b,h):\n    area=0.5*a*b\n    return area\n\nprint(area_of_rhombus(3,4,5))\n/02_python_basics/03_functions/08_functions.py\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_of_regular_polygon(3,4,5)==6\n\"\"\"\n\ndef area_of_regular_polygon(n,a,h):\n    area=0.5*n*a*h\n    return area\n\nprint(area_of_regular_polygon(3,4,5))\n/02_python_basics/03_functions/09_functions.py\n\"\"\""}
{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\nprint(radian_degree(90))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/003_variables.py\n\"\"\"\nCreate a variable that holds a string value of your name.\n\"\"\"\n\nname = \"\"\n/python/python_basics/002_variables.py\n\"\"\"\nCreate a variable that holds an integer value of your age.\n\"\"\"\n\nage = 25\n/python/python_basics/004_variables.py\n\"\"\"\nCreate a variable that holds a float value of your height.\n\"\"\"\n\nheight = 1.75\n/python/python_basics/005_variables.py\n\"\"\"\nCreate a variable that holds a boolean value of your favorite color.\n\"\"\"\n\nfavorite_color = True\n/python/python_basics/006_variables.py\n\"\"\"\nCreate a variable that holds a list of your favorite colors.\n\"\"\"\n\nfavorite_colors = [\"red\", \"blue\", \"green\"]\n/python/python_basics/007_variables.py\n\"\"\"\nCreate a variable that holds a dictionary of your favorite foods.\n\"\"\"\n\nfavorite_foods = {\n    \"pizza\": \"pizza\",\n    \"burger\": \"burger\",\n    \"pasta\": \"pasta\"\n}\n/python/python_basics/008_variables.py\n\"\"\"\nCreate a variable that holds a tuple of your favorite foods.\n\"\"\"\n\nfavorite_foods = (\"pizza\", \"burger\", \"pasta\")\n/python/python_basics/009_variables.py\n\"\"\"\nCreate a variable that holds a set of your favorite foods.\n\"\"\"\n\nfavorite_foods = {\"pizza\", \"burger\", \"pasta\"}\n/python/python_basics/010_variables.py\n\"\"\"\nCreate a variable that holds a frozenset of your favorite foods.\n\"\"\"\n\nfavorite_foods = frozenset({\"pizza\", \"burger\", \"pasta\"})\n/python/python_basics/011_variables.py\n\"\"\"\nCreate a variable that holds a complex number.\n\"\"\"\n\ncomplex_number = 1 + 2j\n/python/python_basics/012_variables.py\n\"\"\"\nCreate a variable that holds a range of numbers.\n\"\"\"\n\nrange_of_numbers = range(10)\n/python/python_basics/013_variables.py\n\"\"\"\nCreate a variable that holds a bytearray of your name.\n\"\"\"\n\nbytearray_of_name = bytearray(\"\", \"utf-8\")\n/python/python_basics/014_variables.py\n\"\"\"\nCreate a variable that holds a memoryview of your name.\n\"\"\"\n\nmemoryview_of_name = memoryview(bytearray(\"\", \"utf-8\"))\n/python/python_basics/015_variables.py\n\"\"\"\nCreate a variable that holds a byte of your name.\n\"\"\"\n\nbyte_of_name = b\"\"\n/python/python_basics/016_variables.py\n\"\"\"\nCreate a variable that holds a bytearray of your name.\n\"\"\"\n\nbytearray_of_name = bytearray(\"\", \"utf-8\")\n/python/python_basics/017_variables.py\n\"\"\"\nCreate a variable that holds a memoryview of your name.\n\"\"\"\n\nmemoryview_of_name = memoryview(bytearray(\"\", \"utf-8\"))\n/python/python_basics/018_variables.py\n\"\"\"\nCreate a variable that holds a byte of your name.\n\"\"\"\n\nbyte_of_name = b\"\"\n/python/python_basics/019_variables.py\n\"\"\"\nCreate a variable that holds a bytearray of your name.\n\"\"\"\n\nbyte"}
{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\ndef find_literals(string, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return re.search(pattern, string).group(), re.search(pattern, string).start(), re.search(pattern, string).end()\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day_01/02_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the even numbers.\n\"\"\"\n\ndef even_numbers(numbers):\n    \"\"\"\n    >>> even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [number for number in numbers if number % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day_01/01_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the odd numbers.\n\"\"\"\n\ndef odd_numbers(numbers):\n    \"\"\"\n    >>> odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 5, 7, 9]\n    \"\"\"\n    return [number for number in numbers if number % 2!= 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day_01/03_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the positive numbers.\n\"\"\"\n\ndef positive_numbers(numbers):\n    \"\"\"\n    >>> positive_numbers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10])\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [number for number in numbers if number > 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day_01/04_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the negative numbers.\n\"\"\"\n\ndef negative_numbers(numbers):\n    \"\"\"\n    >>> negative_numbers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10])\n    [-1, -3, -5, -7, -9]\n    \"\"\"\n    return [number for number in numbers if number < 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day_01/05_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the numbers that are divisible by 3.\n\"\"\"\n\ndef divisible_by_three(numbers):\n    \"\"\"\n    >>> divisible_by_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [3, 6, 9]\n    \"\"\"\n    return [number for number in numbers if number % 3 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day_01/06_list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with only the numbers that are divisible by 3 and 5.\n\"\"\"\n\ndef divisible_by_three_and_five(numbers):\n    \"\"\"\n    >>> divisible_by_three_and_five([1,"}
{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + (n-1)*bell_Number(n-1)\n\nprint(bell_Number(2))\n/recursion/fibonacci.py\n\"\"\"\nWrite a python function to find nth fibonacci number.\nassert fibonacci(2) == 1\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(2))\n/recursion/factorial.py\n\"\"\"\nWrite a python function to find factorial of a number.\nassert factorial(5) == 120\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n/recursion/sum_of_digits.py\n\"\"\"\nWrite a python function to find sum of digits of a number.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits(n//10)\n\nprint(sum_of_digits(123))\n/recursion/sum_of_digits_2.py\n\"\"\"\nWrite a python function to find sum of digits of a number.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits(n//10)\n\nprint(sum_of_digits(123))\n\ndef sum_of_digits_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits_2(n//10)\n\nprint(sum_of_digits_2(123))\n/recursion/sum_of_digits_3.py\n\"\"\"\nWrite a python function to find sum of digits of a number.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits(n//10)\n\nprint(sum_of_digits(123))\n\ndef sum_of_digits_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits_2(n//10)\n\nprint(sum_of_digits_2(123))\n\ndef sum_of_digits_3(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits_3(n//10)\n\nprint(sum_of_digits_3(123))\n/recursion/sum_of_digits_4.py\n\"\"\"\nWrite a python function to find sum of digits of a number.\nassert sum_of_digits(123) == 6\n\"\"\"\n\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits(n//10)\n\nprint(sum_of_digits(123))\n\ndef sum_of_digits_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of_digits_2(n//10)\n\nprint(sum_of_digits_2(123))\n\ndef sum_of_digits_3(n):\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_of"}
{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(list,k):\n    return list[:k-1]+list[k:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))\n/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a python program which prints \"Hello World\"\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/03_print_numbers.py\n\"\"\"\nWrite a python program which prints the numbers from 0 to 9\n\"\"\"\n\nfor i in range(10):\n    print(i)\n/python/python_basics/02_print_hello_world_10_times.py\n\"\"\"\nWrite a python program which prints \"Hello World\" 10 times\n\"\"\"\n\nfor i in range(10):\n    print(\"Hello World\")\n/python/python_basics/04_print_odd_numbers.py\n\"\"\"\nWrite a python program which prints the odd numbers from 0 to 9\n\"\"\"\n\nfor i in range(10):\n    if i%2==1:\n        print(i)\n/python/python_basics/05_print_even_numbers.py\n\"\"\"\nWrite a python program which prints the even numbers from 0 to 9\n\"\"\"\n\nfor i in range(10):\n    if i%2==0:\n        print(i)\n/python/python_basics/06_print_even_numbers_between_0_and_100.py\n\"\"\"\nWrite a python program which prints the even numbers from 0 to 100\n\"\"\"\n\nfor i in range(101):\n    if i%2==0:\n        print(i)\n/python/python_basics/07_print_odd_numbers_between_0_and_100.py\n\"\"\"\nWrite a python program which prints the odd numbers from 0 to 100\n\"\"\"\n\nfor i in range(101):\n    if i%2==1:\n        print(i)\n/python/python_basics/08_print_numbers_between_0_and_100_with_step_5.py\n\"\"\"\nWrite a python program which prints the numbers from 0 to 100 with step 5\n\"\"\"\n\nfor i in range(0,101,5):\n    print(i)\n/python/python_basics/09_print_numbers_between_0_and_100_with_step_3.py\n\"\"\"\nWrite a python program which prints the numbers from 0 to 100 with step 3\n\"\"\"\n\nfor i in range(0,101,3):\n    print(i)\n/python/python_basics/10_print_numbers_between_0_and_100_with_step_7.py\n\"\"\"\nWrite a python program which prints the numbers from 0 to 100 with step 7\n\"\"\"\n\nfor i in range(0,101,7):\n    print(i)\n/python/python_basics/11_print_numbers_between_0_and_100_with_step_2.py\n\"\"\"\nWrite a python program which prints the numbers from 0 to 100 with step 2\n\"\"\"\n\nfor i in range(0,101,2):\n    print(i)\n"}
{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\ndef max_of_nth(matrix, n):\n    return max(matrix[i][n] for i in range(len(matrix)))\n\nprint(max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum(int(i) for i in str(n)))\n\nprint(digital_root(16))\nprint(digital_root(942))\nprint(digital_root(132189))\nprint(digital_root(493193))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(i for i in range(1, n * 2, 2))\n\nprint(row_sum_odd_numbers(1))\nprint(row_sum_odd_numbers(2))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum(i for i in arr if i > 0)\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers.\nFor example, the array [1, 2, 3, 4, 5] becomes [1, 8, 27, 64, 125] after being cubed.\n\nThat is, if arr = [1, 2, 3, 4, 5],\n\nthen new_arr(arr) should return [1, 8, 27"}
{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(list_of_lists):\n    first_list = []\n    second_list = []\n    for sublist in list_of_lists:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n/python/exercises/exercise_10.py\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(list_of_lists):\n    first_list = []\n    second_list = []\n    for sublist in list_of_lists:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(list_of_lists):\n    first_list = []\n    second_list = []\n    for sublist in list_of_lists:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(list_of_lists):\n    first_list = []\n    second_list = []\n    for sublist in list_of_lists:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(list_of_lists):\n    first_list = []\n    second_list = []\n    for sublist in list_of_lists:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))\n\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge"}
{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\ndef cummulative_sum(list_of_tuples):\n    sum = 0\n    for i in list_of_tuples:\n        for j in i:\n            sum += j\n    return sum\n\nprint(cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]))\n/Python/Python_Basics/01_Python_Basics/01_Python_Basics.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\nSample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output :\n\nTwinkle, twinkle, little star,\n\tHow I wonder what you are! \n\t\tUp above the world so high,   \t\t\n\t\tLike a diamond in the sky. \nTwinkle, twinkle, little star, \n\tHow I wonder what you are\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n/Python/Python_Basics/02_Python_Basics_2/02_Python_Basics_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\n\nimport sys\n\nprint(sys.version)\n/Python/Python_Basics/03_Python_Basics_3/03_Python_Basics_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\nSample Output :\nCurrent date and time :\n2014-07-05 14:34:14\n\"\"\"\n\nimport datetime\n\nprint(datetime.datetime.now())\n/Python/Python_Basics/04_Python_Basics_4/04_Python_Basics_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\nSample Output :\nr = 1.1\nArea = 3.8013271108436504\n\"\"\"\n\nimport math\n\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius ** 2\nprint(\"Area of the circle is: \", area)\n/Python/Python_Basics/05_Python_Basics_5/05_Python_Basics_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n/Python/Python_Basics/06_Python_Basics_6/06_Python_Basics_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\nSample data : 3, 5, 7, 23\nOutput :\nList : ['3','5','7','23']\nTuple : ('3','5','7','23')\n\"\"\"\n\nnumbers = input(\"Enter the numbers separated by commas: \")\nlist = numbers.split(\",\")\ntuple = tuple(list)\nprint(\"List: \", list)\nprint(\"Tuple: \", tuple)\n/Python/Python_Basics/07_Python_Basics_7/07_Python_Basics_7.py\n\"\"\"\nWrite a Python program to display the first and last colors from the following list.\ncolor_list = [\"Red\",\"Green\",\"White\",\""}
{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_tuple(tup):\n    return [sum(i)/len(i) for i in tup]\n\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))\n/Python/Python_Basics/03_Lists/01_list_basics.py\n\"\"\"\nWrite a function which takes a list of numbers and returns the sum of the numbers.\nassert sum_list([1, 2, 3, 4, 5, 6]) == 21\n\"\"\"\n\ndef sum_list(lst):\n    return sum(lst)\n\nprint(sum_list([1, 2, 3, 4, 5, 6]))\n/Python/Python_Basics/03_Lists/05_list_of_lists.py\n\"\"\"\nWrite a function which takes a list of lists and returns the sum of all the numbers in the lists.\nassert sum_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45\n\"\"\"\n\ndef sum_list_of_lists(lst):\n    return sum([sum(i) for i in lst])\n\nprint(sum_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n/Python/Python_Basics/03_Lists/04_list_of_lists_2.py\n\"\"\"\nWrite a function which takes a list of lists and returns the average of all the numbers in the lists.\nassert average_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.0\n\"\"\"\n\ndef average_list_of_lists(lst):\n    return sum([sum(i) for i in lst])/len(lst)\n\nprint(average_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n/Python/Python_Basics/03_Lists/03_list_of_lists_1.py\n\"\"\"\nWrite a function which takes a list of lists and returns the maximum number in the lists.\nassert max_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\n\"\"\"\n\ndef max_list_of_lists(lst):\n    return max([max(i) for i in lst])\n\nprint(max_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n/Python/Python_Basics/03_Lists/02_list_of_lists_2.py\n\"\"\"\nWrite a function which takes a list of lists and returns the minimum number in the lists.\nassert min_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1\n\"\"\"\n\ndef min_list_of_lists(lst):\n    return min([min(i) for i in lst])\n\nprint(min_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n/Python/Python_Basics/03_Lists/06_list_of_lists_3.py\n\"\"\"\nWrite a function which takes a list of lists and returns the maximum number in each list.\nassert max_list_of_lists_2([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\ndef tuple_modulo(tup1, tup2):\n    return tuple(map(lambda x, y: x % y, tup1, tup2))\n\nprint(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/005_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n/python/python_basics/003_string_concatenation.py\n\"\"\"\nWrite a program that prints the string \"Hello, World!\" to the screen.\n\"\"\"\n\nprint(\"Hello, \" + \"World!\")\n/python/python_basics/002_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is \" + str(1 + 2))\n/python/python_basics/004_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n/python/python_basics/006_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n/python/python_basics/007_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n\nprint(\"The sum of 1 + 2 is \" + str(1 + 2))\n/python/python_basics/008_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n\nprint(\"The sum of 1 + 2 is \" + str(1 + 2))\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n\nprint(\"The sum of 1 + 2 is \" + str(1 + 2))\n/python/python_basics/009_string_formatting.py\n\"\"\"\nWrite a program that prints the following string to the screen:\n\n\"The sum of 1 + 2 is 3\"\n\"\"\"\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n\nprint(\"The sum of 1 + 2 is \" + str(1 + 2))\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n\nprint(\"The sum of 1 + 2 is {}\".format(1 + 2))\n\nprint(\"The sum of 1 + 2 is \" + str(1 + 2))\n\nprint(\"The sum of 1 + 2 is %d\" % (1 + 2))\n\nprint(\"The sum of 1"}
{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\ndef div_list(a,b):\n    return [a[i]/b[i] for i in range(len(a))]\n\nprint(div_list([4,5,6],[1, 2, 3]))\n/python/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is a way to create a list in a single line.\n\"\"\"\n\n# Example 1\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1,11)]\nprint(list2)\n\n# Example 2\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1,11) if i%2==0]\nprint(list2)\n\n# Example 3\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    list1.append(i**2)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 for i in range(1,11)]\nprint(list2)\n\n# Example 4\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 for i in range(1,11) if i%2==0]\nprint(list2)\n\n# Example 5\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 6\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 7\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 8\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 9\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1,11):\n    if i%2==0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i%2==0 else i for i in range(1,11)]\nprint(list2)\n\n# Example 10\n\n# Without"}
{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\ndef move_num(s):\n    return ''.join(sorted(s, key=lambda x: x.isdigit()))\n\nprint(move_num('I1love143you55three3000thousand'))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nif __name__ == '__main__':\n    s = Solution()\n    p = TreeNode(1)\n    p.left = TreeNode(2)\n    p.right = TreeNode(3)\n    q = TreeNode(1)\n    q.left = TreeNode(2)\n    q.right = TreeNode(3)\n    print(s.isSameTree(p, q))\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isSymmetricHelper(root.left, root.right)\n\n    def isSymmetricHelper(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isSymmetricHelper(left.left, right.right) and self.isSymmetricHelper(left.right, right.left)\n\nif __name__ == '__main__':\n    s = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(2)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(4)\n    root.right.right = TreeNode(3)\n    print(s.isSymmetric(root))\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9"}
{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\ndef largest_subset(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nprint(largest_subset([ 1, 3, 6, 13, 17, 18 ]))/leetcode/1000-1099/1000.py\n\"\"\"\nGiven an array A of positive integers, let S be the sum of the digits of the minimal element of A.\nReturn 0 if S is odd, otherwise return 1.\n\nExample 1:\nInput: [34,23,1,24,75,33,54,8]\nOutput: 0\nExplanation:\nThe minimal element is 1, and the sum of those digits is S = 1 which is odd, so the answer is 0.\n\nExample 2:\nInput: [99,77,33,66,55]\nOutput: 1\nExplanation:\nThe minimal element is 33, and the sum of those digits is S = 3 + 3 = 6 which is even, so the answer is 1.\n\nNote:\n1 <= A.length <= 100\n1 <= A[i].length <= 100\n\"\"\"\n\nclass Solution(object):\n    def sumOfDigits(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        return 0 if sum(map(int, str(min(A)))) % 2 else 1\n\nprint(Solution().sumOfDigits([34,23,1,24,75,33,54,8]))/leetcode/1-99/10.py\n\"\"\"\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\n\nExample 2:\nInput: \"cbbd\"\nOutput: \"bb\"\n\"\"\"\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        max_len = 1\n        start = 0\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                if dp[i][j] and j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    start = i\n        return s[start:start + max_len]\n\nprint(Solution().longestPalindrome(\"babad\"))/leetcode/1-99/11.py\n\"\"\"\nGiven n non-negative integers a1, a2,..., an, where each represents a point at coordinate (i, ai).\nn vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).\nFind two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and n is at least 2.\n\"\"\"\n\nclass Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        if not height:\n            return 0\n        n = len"}
{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\ndef get_median(list1, list2, n):\n    if n % 2 == 0:\n        return (get_kth(list1, list2, n // 2) + get_kth(list1, list2, n // 2 + 1)) / 2\n    else:\n        return get_kth(list1, list2, n // 2 + 1)\n\ndef get_kth(list1, list2, k):\n    if len(list1) == 0:\n        return list2[k - 1]\n    if len(list2) == 0:\n        return list1[k - 1]\n    if k == 1:\n        return min(list1[0], list2[0])\n    i = min(len(list1), k // 2)\n    j = min(len(list2), k // 2)\n    if list1[i - 1] > list2[j - 1]:\n        return get_kth(list1, list2[j:], k - j)\n    else:\n        return get_kth(list1[i:], list2, k - i)\n\nprint(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n/leetcode/100. Same Tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/leetcode/101. Symmetric Tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left."}
{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef nth_nums(nums,n):\n    return [num**n for num in nums]\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==55\n\"\"\"\ndef sum_nums(nums):\n    return sum(nums)\n\n\"\"\"\nWrite a function to compute the sum of the numbers in a list.\nassert sum_nums([1, 2, "}
{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\ndef is_upper(string):\n    return string.upper()\n\nprint(is_upper(\"person\"))/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello\"))\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome.\nassert is_palindrome(\"racecar"}
{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius**2) * (math.sqrt(3)/4)\n\nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(63))\nprint(triangle_area(64))\nprint(triangle_area(65))\nprint(triangle_area(66))\nprint(triangle_area(67))\nprint(triangle_area(68))\nprint(triangle_area(69))\nprint(triangle_area(70))\nprint(triangle_area(71))\nprint(triangle_area(72))\nprint(triangle_area(73))\nprint(triangle_area(74))\nprint(triangle_area(75))\nprint(triangle_area(76))\nprint(triangle_area(77))\nprint(triangle_area(78))\nprint(triangle_area(79))\nprint(triangle_area(80))\nprint(triangle_area(81))\nprint(triangle_area(82))\nprint(triangle_area(83))\nprint(triangle_area(84))\nprint(triangle_area(85))\nprint(triangle_area(86))\nprint(triangle_area(87))\nprint(triangle_area(88))\nprint(triangle_area(89))\nprint(triangle_area"}
{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n\nprint(replace_spaces(\"My Name is Dawood\"))\n/chapter_1/1_1_is_unique.py\n\"\"\"\nImplement an algorithm to determine if a string has all unique characters.\n\"\"\"\n\ndef is_unique(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return len(set(string)) == len(string)\n\nprint(is_unique(\"dawood\"))\nprint(is_unique(\"dawoodd\"))\n/chapter_1/1_3_urlify.py\n\"\"\"\nWrite a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters, and that you are given the \"true\" length of the string.\n\"\"\"\n\ndef urlify(string, length):\n    return string[:length].replace(\" \", \"%20\")\n\nprint(urlify(\"\", 13))\n/chapter_1/1_2_check_permutation.py\n\"\"\"\nGiven two strings, write a method to decide if one is a permutation of the other.\n\"\"\"\n\ndef check_permutation(string1, string2):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return sorted(string1) == sorted(string2)\n\nprint(check_permutation(\"dawood\", \"dawood\"))\nprint(check_permutation(\"dawood\", \"dawoodd\"))\n/chapter_1/1_5_one_away.py\n\"\"\"\nThere are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away.\n\"\"\"\n\ndef one_away(string1, string2):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(string1) == len(string2):\n        return one_edit_replace(string1, string2)\n    elif len(string1) + 1 == len(string2):\n        return one_edit_insert(string1, string2)\n    elif len(string1) - 1 == len(string2):\n        return one_edit_insert(string2, string1)\n    return False\n\ndef one_edit_replace(string1, string2):\n    found_difference = False\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            if found_difference:\n                return False\n            found_difference = True\n    return True\n\ndef one_edit_insert(string1, string2):\n    index1 = 0\n    index2 = 0\n    while index1 < len(string1) and index2 < len(string2):\n        if string1[index1]!= string2[index2]:\n            if index1!= index2:\n                return False\n            index2 += 1\n        else:\n            index1 += 1\n            index2 += 1\n    return True\n\nprint(one_away(\"pale\", \"ple\"))\nprint(one_away(\"pales\", \"pale\"))\nprint(one_away(\"pale\", \"bale\"))\nprint(one_away(\"pale\", \"bake\"))\n/chapter_1/1_4_palindrome_permutation.py\n\"\"\"\nGiven a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\"\"\"\n\ndef palindrome_permutation(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    string = string.replace(\" \", \"\")\n    string = string.lower()\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] ="}
{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\ndef split(list):\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n\nprint(split([1,2,3,4,5]))\n/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# Variables are created when you assign a value to it.\n\n# Python has no command for declaring a variable.\n\n# A variable is created the moment you first assign a value to it.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python is a dynamically typed language, so you do not need to specify the type of a variable.\n\n# This means you can assign any type of data to any variable, and the same variable can be used to represent and hold values of different data types:\n\n# Example\n# Create a variable called \"x\" and assign an integer value to it:\n\nx = 5\nprint(x)\n\n# Create a variable called \"y\" and assign a string value to it:\n\ny = \"John\"\nprint(y)\n\n# Create a variable called \"z\" and assign a float value to it:\n\nz = 5.5\nprint(z)\n\n# Create a variable called \"a\" and assign a boolean value to it:\n\na = True\nprint(a)\n\n# Create a variable called \"b\" and assign a complex value to it:\n\nb = 3 + 5j\nprint(b)\n\n# Create a variable called \"c\" and assign a list value to it:\n\nc = [1, 2, 3, 4, 5]\nprint(c)\n\n# Create a variable called \"d\" and assign a tuple value to it:\n\nd = (1, 2, 3, 4, 5)\nprint(d)\n\n# Create a variable called \"e\" and assign a set value to it:\n\ne = {1, 2, 3, 4, 5}\nprint(e)\n\n# Create a variable called \"f\" and assign a frozenset value to it:\n\nf = frozenset({1, 2, 3, 4, 5})\nprint(f)\n\n# Create a variable called \"g\" and assign a dictionary value to it:\n\ng = {\"name\": \"John\", \"age\": 36}\nprint(g)\n\n# Create a variable called \"h\" and assign a range value to it:\n\nh = range(6)\nprint(h)\n\n# Create a variable called \"i\" and assign a bytes value to it:\n\ni = b\"Hello\"\nprint(i)\n\n# Create a variable called \"j\" and assign a bytearray value to it:\n\nj = bytearray(5)\nprint(j)\n\n# Create a variable called \"k\" and assign a memoryview value to it:\n\nk = memoryview(bytes(5))\nprint(k)\n\n# Create a variable called \"l\" and assign a None value to it:\n\nl = None\nprint(l)\n\n# Create a variable called \"m\" and assign a class value to it:\n\nclass MyClass:\n    x = 5\n\nm = MyClass()\nprint(m)\n\n# Create a variable called \"n\" and assign a function value to it:\n\ndef my_function():\n    print(\"Hello from a function\")\n\nn = my_function\nprint(n)\n\n# Create a variable called \"o\" and assign a method value to it:\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def myfunc(self):\n        print(\"Hello my name is \" + self.name)\n\no = Person(\"John\", 36)\np = o.myfunc\nprint(p)\n\n# Create a variable called \"q\" and assign a module value to it:\n\nimport platform\n\nq = platform\nprint(q)"}
{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n\nprint(get_coordinates((3, 4)))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n\ns = Solution()\nprint(s.singleNumber([2,2,1]))\nprint(s.singleNumber([4,1,2,1,2]))\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\nclass Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = s.lower()\n        s = ''.join(c for c in s if c.isalnum())\n        return s == s[::-1]\n\ns = Solution()\nprint(s.isPalindrome(\"A man, a plan, a canal: Panama\"))\nprint(s.isPalindrome(\"race a car\"))\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n\ns = Solution()\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\nprint(s.maxDepth(root))\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:"}
{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\ndef replace_spaces(string):\n    return string.replace(' ', '_')\n\ndef replace_spaces_2(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_3(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_4(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_5(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_6(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_7(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_8(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_9(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_10(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_11(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_12(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_13(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_14(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_15(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_16(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_17(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_18(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_19(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_20(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_21(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_22(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_23(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_24(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_25(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_26(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_27(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_28(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_29(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_30(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_31(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_32(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_33(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_34(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_35(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_36(string):\n    return string.replace(' ', '_').replace('_','')\n\ndef replace_spaces_37(string):\n    return string.replace(' ',"}
{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\ndef move_zero(l):\n    return [i for i in l if i!= 0] + [0 for i in l if i == 0]\n\nprint(move_zero([1,0,2,0,3,4]))\n/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a python program to print \"Hello World\"\n\"\"\"\n\nprint(\"Hello World\")\n/python/python_basics/002_print_name.py\n\"\"\"\nWrite a python program to print your name\n\"\"\"\n\nprint(\"\")\n/python/python_basics/003_print_name_age.py\n\"\"\"\nWrite a python program to print your name and age\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\n/python/python_basics/004_print_name_age_city.py\n\"\"\"\nWrite a python program to print your name, age and city\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\n/python/python_basics/005_print_name_age_city_country.py\n\"\"\"\nWrite a python program to print your name, age, city and country\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\nprint(\"India\")\n/python/python_basics/006_print_name_age_city_country_phone.py\n\"\"\"\nWrite a python program to print your name, age, city, country and phone number\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\nprint(\"India\")\nprint(\"9876543210\")\n/python/python_basics/007_print_name_age_city_country_phone_email.py\n\"\"\"\nWrite a python program to print your name, age, city, country, phone number and email\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\nprint(\"India\")\nprint(\"9876543210\")\nprint(\"\")\n/python/python_basics/008_print_name_age_city_country_phone_email_address.py\n\"\"\"\nWrite a python program to print your name, age, city, country, phone number, email and address\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\nprint(\"India\")\nprint(\"9876543210\")\nprint(\"\")\nprint(\"1234567890\")\n/python/python_basics/009_print_name_age_city_country_phone_email_address_pincode.py\n\"\"\"\nWrite a python program to print your name, age, city, country, phone number, email, address and pincode\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\nprint(\"India\")\nprint(\"9876543210\")\nprint(\"\")\nprint(\"1234567890\")\nprint(\"400001\")\n/python/python_basics/010_print_name_age_city_country_phone_email_address_pincode_dob.py\n\"\"\"\nWrite a python program to print your name, age, city, country, phone number, email, address, pincode and date of birth\n\"\"\"\n\nprint(\"\")\nprint(\"25\")\nprint(\"Mumbai\")\nprint(\"India\")\nprint(\"9876543210\")\nprint(\"\")\nprint(\"1234567890\")\nprint(\"400001\")\nprint(\"12/01/1994\")\n/python/python_basics/011_print_name_age_city_country_phone_email_address_pincode_dob_gender.py\n\"\"\"\nWrite a python program to print your name, age, city, country,"}
{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\ndef pair_xor_Sum(lst,n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ lst[i]\n    return xor_sum\n\nprint(pair_xor_Sum([5,9,7,6],4))\n/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\n#Another way\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\n#Another way\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\n#Another way\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\n#Another way\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\n#Another way\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()"}
{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef heap_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert merge_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef merge_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert quick_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef quick_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert radix_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef radix_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert bucket_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef bucket_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert counting_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef counting_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert shell_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef shell_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert selection_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef selection_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert insertion_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef insertion_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert bubble_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef bubble_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert cocktail_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef cocktail_sort(lst):\n    pass\n\n\"\"\"\nWrite a function to sort the given list.\nassert comb_sort([1"}
{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\ndef noprofit_noloss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has profit and no loss\nassert profit_noloss(1500,1200)==True\n\"\"\"\ndef profit_noloss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_loss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_loss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_loss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_loss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_loss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_loss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\nassert noprofit_loss(1500,1200)==True\n\"\"\"\ndef noprofit_loss(buy,sell):\n    if buy<sell:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\nassert profit_loss(1500,1200)==False\n\"\"\"\ndef profit_"}
{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n\ndef wind_chill(wind_velocity, temperature):\n    if wind_velocity < 1 or temperature < -58 or temperature > 41:\n        return \"Invalid input\"\n    else:\n        return round(13.12 + 0.6215 * temperature - 11.37 * wind_velocity ** 0.16 + 0.3965 * temperature * wind_velocity ** 0.16)\n\nprint(wind_chill(120,35))\n/python/python_basics/01_variables/01_variables.py\n\"\"\"\nCreate a variable called name and assign your name to it.\n\"\"\"\n\nname = \"\"\n\nprint(name)\n/python/python_basics/02_data_types/02_data_types.py\n\"\"\"\nCreate a variable called age and assign your age to it.\n\"\"\"\n\nage = 23\n\nprint(age)\n/python/python_basics/03_operators/03_operators.py\n\"\"\"\nCreate a variable called x and assign it the value of 10.\nCreate a variable called y and assign it the value of 5.\nCreate a variable called z and assign it the value of x + y.\n\"\"\"\n\nx = 10\ny = 5\nz = x + y\n\nprint(z)\n/python/python_basics/04_functions/04_functions.py\n\"\"\"\nWrite a function that takes a number as an argument and returns the square of that number.\nassert square(5)==25\n\"\"\"\n\ndef square(number):\n    return number ** 2\n\nprint(square(5))\n/python/python_basics/05_conditionals/05_conditionals.py\n\"\"\"\nWrite a function that takes a number as an argument and returns whether the number is even or odd.\nassert even_or_odd(5)==\"odd\"\n\"\"\"\n\ndef even_or_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\nprint(even_or_odd(5))\n/python/python_basics/06_lists/06_lists.py\n\"\"\"\nCreate a list called numbers and assign the values 1, 2, 3, 4, 5 to it.\n\"\"\"\n\nnumbers = [1, 2, 3, 4, 5]\n\nprint(numbers)\n/python/python_basics/07_loops/07_loops.py\n\"\"\"\nWrite a function that takes a list of numbers as an argument and returns the sum of all the numbers in the list.\nassert sum_of_numbers([1,2,3,4,5])==15\n\"\"\"\n\ndef sum_of_numbers(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\nprint(sum_of_numbers([1,2,3,4,5]))\n/python/python_basics/08_dictionaries/08_dictionaries.py\n\"\"\"\nCreate a dictionary called person and assign the values \"\", 23, \"male\" to it.\n\"\"\"\n\nperson = {\n    \"name\": \"\",\n    \"age\": 23,\n    \"gender\": \"male\"\n}\n\nprint(person)\n/python/python_basics/09_classes/09_classes.py\n\"\"\"\nCreate a class called Person with the attributes name, age and gender.\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\nperson = Person(\"\", 23, \"male\")\n\nprint(person)\n/python/python_basics/04_functions/04_functions_2.py\n\"\"\"\nWrite a function that takes a list of numbers as an argument and returns the average of all the numbers in the list.\nassert average([1,2,3,4,5])==3\n\"\"\"\n\ndef average(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n   "}
{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan','rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    sum = 0\n    for name in names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum\n\nprint(sample_nam(['sally', 'Dylan','rebecca', 'Diana', 'Joanne', 'keith']))\n/python_basics/02_variables_and_data_types/02_02_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are used to store information to be referenced and manipulated in a computer program.\n\n# Rules for Python variables\n# A variable name must start with a letter or the underscore character\n# A variable name cannot start with a number\n# A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Assigning values to variables\n# Python variables do not need explicit declaration to reserve memory space.\n# The declaration happens automatically when you assign a value to a variable.\n\n# The equal sign (=) is used to assign values to variables.\n\n# Example\n# Create a variable called \"x\" and assign an integer value to it.\nx = 5\n\n# Create a variable called \"y\" and assign a string value to it.\ny = \"John\"\n\n# Create a variable called \"z\" and assign a float value to it.\nz = 3.2\n\n# Create a variable called \"a\" and assign a boolean value to it.\na = True\n\n# Create a variable called \"b\" and assign a complex value to it.\nb = 3+5j\n\n# Create a variable called \"c\" and assign a list value to it.\nc = [\"apple\", \"banana\", \"cherry\"]\n\n# Create a variable called \"d\" and assign a tuple value to it.\nd = (\"apple\", \"banana\", \"cherry\")\n\n# Create a variable called \"e\" and assign a range value to it.\ne = range(6)\n\n# Create a variable called \"f\" and assign a set value to it.\nf = {\"apple\", \"banana\", \"cherry\"}\n\n# Create a variable called \"g\" and assign a frozenset value to it.\ng = frozenset({\"apple\", \"banana\", \"cherry\"})\n\n# Create a variable called \"h\" and assign a dictionary value to it.\nh = {\"name\" : \"John\", \"age\" : 36}\n\n# Create a variable called \"i\" and assign a bytearray value to it.\ni = bytearray(5)\n\n# Create a variable called \"j\" and assign a memoryview value to it.\nj = memoryview(bytes(5))\n\n# Print the variable values\nprint(x)\nprint(y)\nprint(z)\nprint(a)\nprint(b)\nprint(c)\nprint(d)\nprint(e)\nprint(f)\nprint(g)\nprint(h)\nprint(i)\nprint(j)\n\n# The type() function can be used to get the type of a variable.\nprint(type(x))\nprint(type(y))\nprint(type(z))\nprint(type(a))\nprint(type(b))\nprint(type(c))\nprint(type(d))\nprint(type(e))\nprint(type(f))\nprint(type(g))\nprint(type(h))\nprint(type(i))\nprint(type(j))\n\n# The id() function can be used to get the unique id of a variable.\nprint(id(x))\nprint(id(y))\nprint(id(z))\nprint(id(a))\nprint(id(b))\nprint(id(c))\nprint(id(d))\nprint(id(e))\nprint(id(f))\nprint(id(g))\nprint(id(h))\nprint(id(i))\nprint(id(j))\n\n# The isinstance() function can be used to check if a variable is an instance of a given class.\nprint(isinstance(x, int))\nprint(isinstance(y, str"}
{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\n\ndef remove_parenthesis(string):\n    return string[0:string.index(\"(\")]\n\nprint(remove_parenthesis([\"python (chrome)\"]))/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is a way to create a list in a single line of code.\n\"\"\"\n\n# Example 1\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1, 11)]\nprint(list2)\n\n# Example 2\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    list1.append(i**2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 for i in range(1, 11)]\nprint(list2)\n\n# Example 3\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i for i in range(1, 11) if i % 2 == 0]\nprint(list2)\n\n# Example 4\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i**2)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 for i in range(1, 11) if i % 2 == 0]\nprint(list2)\n\n# Example 5\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i % 2 == 0 else i for i in range(1, 11)]\nprint(list2)\n\n# Example 6\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i % 2 == 0 else i for i in range(1, 11)]\nprint(list2)\n\n# Example 7\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i % 2 == 0 else i for i in range(1, 11)]\nprint(list2)\n\n# Example 8\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if i % 2 == 0 else i for i in range(1, 11)]\nprint(list2)\n\n# Example 9\n\n# Without list comprehension\n\nlist1 = []\nfor i in range(1, 11):\n    if i % 2 == 0:\n        list1.append(i**2)\n    else:\n        list1.append(i)\n\nprint(list1)\n\n# With list comprehension\n\nlist2 = [i**2 if"}
{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\ndef is_nonagonal(n):\n    return n*(3*n-2)\n\ndef nth_nonagonal(n):\n    return n*(3*n-2)\n\ndef test_nth_nonagonal():\n    assert nth_nonagonal(10) == 325\n    assert nth_nonagonal(100) == 100100\n    assert nth_nonagonal(1000) == 3003001\n\nif __name__ == '__main__':\n    test_nth_nonagonal()\n/euler/problem_001.py\n\"\"\"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\n\ndef sum_multiples_of_3_or_5(n):\n    return sum(x for x in range(n) if x % 3 == 0 or x % 5 == 0)\n\ndef test_sum_multiples_of_3_or_5():\n    assert sum_multiples_of_3_or_5(10) == 23\n    assert sum_multiples_of_3_or_5(1000) == 233168\n\nif __name__ == '__main__':\n    test_sum_multiples_of_3_or_5()\n/euler/problem_003.py\n\"\"\"\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143?\n\"\"\"\n\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\ndef test_largest_prime_factor():\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(600851475143) == 6857\n\nif __name__ == '__main__':\n    test_largest_prime_factor()\n/euler/problem_002.py\n\"\"\"\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\"\"\"\n\ndef sum_even_fibonacci(n):\n    a, b = 1, 2\n    s = 0\n    while b < n:\n        if b % 2 == 0:\n            s += b\n        a, b = b, a + b\n    return s\n\ndef test_sum_even_fibonacci():\n    assert sum_even_fibonacci(10) == 10\n    assert sum_even_fibonacci(4000000) == 4613732\n\nif __name__ == '__main__':\n    test_sum_even_fibonacci()\n/euler/problem_004.py\n\"\"\"\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\"\"\"\n\ndef largest_palindrome_product(n):\n    return max(a * b for a in range(100, 1000) for b in range(100, 1000) if str(a * b) == str(a * b)[::-1])\n\ndef test_largest_palindrome_product():\n    assert largest"}
{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\""}
{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\ndef reverse_Array_Upto_K(arr,k):\n    arr = arr[::-1]\n    arr = arr[:k]\n    return arr\n\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4))/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n\nprint(sum_of_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list.\nassert sum_of_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_of_list(arr"}
{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : "}
{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\ndef maxAverageOfPath(matrix):\n    # Write your code here\n    if not matrix:\n        return 0\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n*n)\n\nif __name__ == \"__main__\":\n    print(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))/leetcode/1004.py\n\"\"\"\nGiven an array A of 0s and 1s, we may change up to K values from 0 to 1.\n\nReturn the length of the longest (contiguous) subarray that contains only 1s.\n\nassert longestOnes([1,1,1,0,0,0,1,1,1,1,0], 2) == 6\n\"\"\"\n\ndef longestOnes(A, K):\n    # Write your code here\n    if not A:\n        return 0\n    n = len(A)\n    left = 0\n    right = 0\n    max_len = 0\n    while right < n:\n        if A[right] == 0:\n            K -= 1\n        if K < 0:\n            if A[left] == 0:\n                K += 1\n            left += 1\n        max_len = max(max_len, right - left + 1)\n        right += 1\n    return max_len\n\nif __name__ == \"__main__\":\n    print(longestOnes([1,1,1,0,0,0,1,1,1,1,0], 2))/leetcode/1003.py\n\"\"\"\nGiven a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\n\nWe repeatedly make duplicate removals on S until we no longer can.\n\nReturn the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.\n\nassert removeDuplicates(\"abbaca\") == \"ca\"\n\"\"\"\n\ndef removeDuplicates(S):\n    # Write your code here\n    if not S:\n        return \"\"\n    stack = []\n    for c in S:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return \"\".join(stack)\n\nif __name__ == \"__main__\":\n    print(removeDuplicates(\"abbaca\"))/leetcode/1002.py\n\"\"\"\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n\nassert minWindow(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"\n\"\"\"\n\ndef minWindow(S, T):\n    # Write your code here\n    if not S or not T:\n        return \"\"\n    n = len(S)\n    m = len(T)\n    if n < m:\n        return \"\"\n    left = 0\n    right = 0\n    min_len = float(\"inf\")\n    min_str = \"\"\n    count = 0\n    while right < n:\n        if S[right] in T:\n            count += 1\n        if count == m:\n            while S[left] not in T:\n                left += 1\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                min_str = S"}
{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\ndef filter_data(data, min_height, min_weight):\n    return {k:v for k,v in data.items() if v[0] > min_height and v[1] > min_weight}\n\nprint(filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70))\n/python_basics/week_1/day_1/task_1.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n/python_basics/week_1/day_2/task_1.py\n\"\"\"\nWrite a program that asks the user for a number n and prints the sum of the numbers 1 to n\n\"\"\"\n\nn = int(input(\"Enter a number: \"))\n\nsum = 0\n\nfor i in range(1, n+1):\n    sum += i\n\nprint(sum)\n/python_basics/week_1/day_2/task_2.py\n\"\"\"\nWrite a program that asks the user for a number n and gives them the possibility to choose between computing the sum and computing the product of 1,\u2026,n.\n\"\"\"\n\nn = int(input(\"Enter a number: \"))\n\nchoice = input(\"Enter's' for sum or 'p' for product: \")\n\nsum = 0\nproduct = 1\n\nfor i in range(1, n+1):\n    if choice =='s':\n        sum += i\n    elif choice == 'p':\n        product *= i\n\nif choice =='s':\n    print(sum)\nelif choice == 'p':\n    print(product)\n/python_basics/week_1/day_2/task_3.py\n\"\"\"\nWrite a program that asks the user for a number n and gives them the possibility to choose between computing the sum and computing the product of 1,\u2026,n.\n\"\"\"\n\nn = int(input(\"Enter a number: \"))\n\nchoice = input(\"Enter's' for sum or 'p' for product: \")\n\nsum = 0\nproduct = 1\n\nfor i in range(1, n+1):\n    if choice =='s':\n        sum += i\n    elif choice == 'p':\n        product *= i\n\nif choice =='s':\n    print(sum)\nelif choice == 'p':\n    print(product)\n/python_basics/week_1/day_1/task_2.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print"}
{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nDigital root is the recursive sum of all the digits in a number.\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works:\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum(int(i) for i in str(n)))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(i for i in range(1, n*2, 2))\n\nprint(row_sum_odd_numbers(1))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum(i for i in arr if i > 0)\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nFind the sum of the odd numbers within an array, after cubing the initial integers. The function should return undefined/None/nil/NULL if any of the values aren't numbers.\n\nNote: there are only 10 test cases for this kata.\n\"\"\"\n\ndef cube_odd(arr):\n    return sum(i**3 for i in arr if type(i) == int and i % 2!= 0)\n\nprint(cube_odd([1,2,"}
{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base,power):\n    sum=0\n    for i in range(power+1):\n        sum+=base**i\n    return sum\n\nprint(power_base_sum(2,100))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n\"\"\"\nWrite a function that takes a number as argument and returns the sum of all digits of the number.\nassert digit_sum(1234)==10\n\"\"\"\ndef digit_sum(number):\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    return sum\n\nprint(digit_sum(1234))\n\n"}
{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53','multi', 'Processor']\n\"\"\"\n\ndef extract_quotation(string):\n    return re.findall(r'\"([^\"]*)\"', string)\n\nprint(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'))\n/python/leetcode/easy/1365.py\n\"\"\"\nGiven an array of integers arr,\nyou are initially positioned at the first index of the array.\n\nIn one step you can jump from index i to index:\n\ni + 1 where: i + 1 < arr.length.\ni - 1 where: i - 1 >= 0.\nj where: arr[i] == arr[j] and i!= j.\nReturn the minimum number of steps to reach the last index of the array.\n\nNotice that you can not jump outside of the array at any time.\n\nExample 1:\n\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\nExample 2:\n\nInput: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You don't need to jump.\nExample 3:\n\nInput: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.\nExample 4:\n\nInput: arr = [6,1,9]\nOutput: 2\nExample 5:\n\nInput: arr = [11,22,7,7,7,7,7,7,7,22,13]\nOutput: 3\n\nConstraints:\n\n1 <= arr.length <= 5 * 10^4\n-10^8 <= arr[i] <= 10^8\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        if len(arr) <= 1:\n            return 0\n\n        jumps = 0\n        visited = set()\n        queue = [0]\n        visited.add(0)\n\n        while queue:\n            new_queue = []\n            for i in queue:\n                if i == len(arr) - 1:\n                    return jumps\n\n                if i + 1 < len(arr) and i + 1 not in visited:\n                    new_queue.append(i + 1)\n                    visited.add(i + 1)\n\n                if i - 1 >= 0 and i - 1 not in visited:\n                    new_queue.append(i - 1)\n                    visited.add(i - 1)\n\n                if arr[i] in arr[:i] and arr[i] not in visited:\n                    new_queue.append(arr.index(arr[i]))\n                    visited.add(arr.index(arr[i]))\n\n                if arr[i] in arr[i + 1:]:\n                    new_queue.append(arr[i:].index(arr[i]) + i + 1)\n                    visited.add(arr[i:].index(arr[i]) + i + 1)\n\n            queue = new_queue\n            jumps += 1\n\n        return jumps\n\nprint(Solution().minJumps([100,-23,-23,404,100,23,23,23,3,404]))\nprint(Solution().minJumps([7]))\nprint(Solution().minJumps([7,6,9,6,9,6,9,7]))\nprint(Solution().minJumps([11,22,7,7,7,7,7,7,7,"}
{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\ndef multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nprint(multiply_elements((1, 5, 7, 8, 10)))\n/week02/day03/02_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of the strings.\nassert list_to_dict([\"a\", \"bb\", \"ccc\"]) == {\"a\": 1, \"bb\": 2, \"ccc\": 3}\n\"\"\"\n\ndef list_to_dict(l):\n    return {i: len(i) for i in l}\n\nprint(list_to_dict([\"a\", \"bb\", \"ccc\"]))\n/week02/day03/01_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the indices of the strings.\nassert list_to_dict([\"a\", \"bb\", \"ccc\"]) == {\"a\": 0, \"bb\": 1, \"ccc\": 2}\n\"\"\"\n\ndef list_to_dict(l):\n    return {i: l.index(i) for i in l}\n\nprint(list_to_dict([\"a\", \"bb\", \"ccc\"]))\n/week02/day03/03_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the first letters of the strings.\nassert list_to_dict([\"a\", \"bb\", \"ccc\"]) == {\"a\": \"a\", \"bb\": \"b\", \"ccc\": \"c\"}\n\"\"\"\n\ndef list_to_dict(l):\n    return {i: i[0] for i in l}\n\nprint(list_to_dict([\"a\", \"bb\", \"ccc\"]))\n/week02/day03/04_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the last letters of the strings.\nassert list_to_dict([\"a\", \"bb\", \"ccc\"]) == {\"a\": \"a\", \"bb\": \"b\", \"ccc\": \"c\"}\n\"\"\"\n\ndef list_to_dict(l):\n    return {i: i[-1] for i in l}\n\nprint(list_to_dict([\"a\", \"bb\", \"ccc\"]))\n/week02/day03/05_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of the strings.\nassert list_to_dict([\"a\", \"bb\", \"ccc\"]) == {\"a\": 1, \"bb\": 2, \"ccc\": 3}\n\"\"\"\n\ndef list_to_dict(l):\n    return {i: len(i) for i in l}\n\nprint(list_to_dict([\"a\", \"bb\", \"ccc\"]))\n/week02/day03/06_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the first and last letters of the strings.\nassert list_to_dict([\"a\", \"bb\", \"ccc\"]) == {\"a\": \"aa\", \"bb\": \"bb\", \"ccc\": \"cc\"}\n\"\"\"\n\ndef list_to_dict(l):\n    return {i: i[0] + i[-1] for i in l}\n\nprint(list_to_dict([\"a\", \"bb\", \"ccc\"]))\n/week02/day03/07_list_to_dict.py\n\"\"\"\nWrite a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the first and last letters of"}
{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\ndef sum_list(a,b):\n    return [a[i]+b[i] for i in range(len(a))]\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the sum of the numbers.\nassert sum_list([10,20,30])==60\n\"\"\"\ndef sum_list(a):\n    return sum(a)\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the average of the numbers.\nassert average_list([10,20,30])==20\n\"\"\"\ndef average_list(a):\n    return sum(a)/len(a)\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the largest number in the list.\nassert max_list([10,20,30])==30\n\"\"\"\ndef max_list(a):\n    return max(a)\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the smallest number in the list.\nassert min_list([10,20,30])==10\n\"\"\"\ndef min_list(a):\n    return min(a)\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of elements in the list.\nassert len_list([10,20,30])==3\n\"\"\"\ndef len_list(a):\n    return len(a)\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of even elements in the list.\nassert even_count([10,20,30])==2\n\"\"\"\ndef even_count(a):\n    return len([i for i in a if i%2==0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of odd elements in the list.\nassert odd_count([10,20,30])==1\n\"\"\"\ndef odd_count(a):\n    return len([i for i in a if i%2==1])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of positive elements in the list.\nassert positive_count([10,-20,30])==2\n\"\"\"\ndef positive_count(a):\n    return len([i for i in a if i>0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of negative elements in the list.\nassert negative_count([10,-20,30])==1\n\"\"\"\ndef negative_count(a):\n    return len([i for i in a if i<0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of zeroes in the list.\nassert zero_count([10,-20,30])==0\n\"\"\"\ndef zero_count(a):\n    return len([i for i in a if i==0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of elements that are divisible by 3.\nassert divisible_by_3_count([10,20,30])==1\n\"\"\"\ndef divisible_by_3_count(a):\n    return len([i for i in a if i%3==0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of elements that are divisible by 5.\nassert divisible_by_5_count([10,20,30])==2\n\"\"\"\ndef divisible_by_5_count(a):\n    return len([i for i in a if i%5==0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of elements that are divisible by 7.\nassert divisible_by_7_count([10,20,30])==0\n\"\"\"\ndef divisible_by_7_count(a):\n    return len([i for i in a if i%7==0])\n\n\"\"\"\nWrite a function takes as input a list of numbers and returns the number of elements that are divisible by 1"}
{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\ndef consecutive_duplicates(lst):\n    \"\"\"\n    >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i]!= lst[i-1]:\n            new_lst.append(lst[i])\n    return new_lst\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/python/week1/day3/ex1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\n\"\"\"\n\ndef sum_list(lst):\n    \"\"\"\n    >>> sum_list([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    total = 0\n    for i in lst:\n        total += i\n    return total\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/python/week1/day3/ex3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\n\ndef largest_number(lst):\n    \"\"\"\n    >>> largest_number([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    largest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/python/week1/day3/ex2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\n\ndef smallest_number(lst):\n    \"\"\"\n    >>> smallest_number([1, 2, 3, 4, 5])\n    1\n    \"\"\"\n    smallest = lst[0]\n    for i in lst:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/python/week1/day3/ex4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the elements of the original list in reverse order.\n\"\"\"\n\ndef reverse_list(lst):\n    \"\"\"\n    >>> reverse_list([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[len(lst)-1-i])\n    return new_lst\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/python/week1/day3/ex5.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the elements of the original list in sorted order from highest to lowest.\n\"\"\"\n\ndef sort_list(lst):\n    \"\"\"\n    >>> sort_list([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(max(lst))\n        lst.remove(max(lst))\n    return new_lst\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/python/week1/day3/ex6.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a new list with the elements of the original list in sorted order from lowest to highest.\n\"\"\"\n\ndef sort_list(lst):\n    \"\"\"\n    >>> sort_list([1, 2, 3, 4, 5])\n    [1, 2, 3,"}
{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\ndef lateralsurface_cone(r,h):\n    return 3.14*r*(r+math.sqrt(r**2+h**2))\n\nprint(lateralsurface_cone(5,12))\n\n\"\"\"\nWrite a function to find the volume of a cone given radius r and the height h.\nassert volume_cone(5,12)==83.77580409572781\n\"\"\"\n\ndef volume_cone(r,h):\n    return 3.14*r**2*h/3\n\nprint(volume_cone(5,12))\n\n\"\"\"\nWrite a function to find the volume of a sphere given radius r.\nassert volume_sphere(5)==523.5987755982989\n\"\"\"\n\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere given radius r.\nassert lateralsurface_sphere(5)==314.1592653589793\n\"\"\"\n\ndef lateralsurface_sphere(r):\n    return 4*3.14*r**2\n\nprint(lateralsurface_sphere(5))\n\n\"\"\"\nWrite a function to find the total surface area of a sphere given radius r.\nassert totalsurface_sphere(5)==1256.6370614359173\n\"\"\"\n\ndef totalsurface_sphere(r):\n    return 4*3.14*r**2+4*3.14*r**2\n\nprint(totalsurface_sphere(5))\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder given radius r and height h.\nassert totalsurface_cylinder(5,12)==1256.6370614359173\n\"\"\"\n\ndef totalsurface_cylinder(r,h):\n    return 2*3.14*r**2+2*3.14*r*h\n\nprint(totalsurface_cylinder(5,12))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder given radius r and height h.\nassert lateralsurface_cylinder(5,12)==1256.6370614359173\n\"\"\"\n\ndef lateralsurface_cylinder(r,h):\n    return 2*3.14*r*h\n\nprint(lateralsurface_cylinder(5,12))\n\n\"\"\"\nWrite a function to find the volume of a cylinder given radius r and height h.\nassert volume_cylinder(5,12)==83.77580409572781\n\"\"\"\n\ndef volume_cylinder(r,h):\n    return 3.14*r**2*h\n\nprint(volume_cylinder(5,12))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube given side s.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(s):\n    return 6*s**2\n\nprint(lateralsurface_cube(5))\n\n\"\"\"\nWrite a function to find the total surface area of a cube given side s.\nassert totalsurface_cube(5)==200\n\"\"\"\n\ndef totalsurface_cube(s):\n    return 6*s**2\n\nprint(totalsurface_cube(5))\n\n\"\"\"\nWrite a function to find the volume of a cube given side s.\nassert volume_cube(5)==125\n\"\"\"\n\ndef volume_cube(s):\n    return s**3\n\nprint(volume_cube(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cuboid given length l, width w and height h.\nassert"}
{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\ndef replace_specialchar(string):\n    return string.replace(' ','::').replace(',','::').replace('.','::')\n\nprint(replace_specialchar('Python language, Programming language.'))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a given list.\nassert find_max_min([1,2,3,4,5])==[5,1]\n\"\"\"\n\ndef find_max_min(list):\n    return [max(list),min(list)]\n\nprint(find_max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum"}
{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\ndef find_first_occurrence(arr, num):\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        if arr[0] == num:\n            return 0\n        else:\n            return -1\n    mid = len(arr) // 2\n    if arr[mid] == num:\n        if mid == 0:\n            return 0\n        if arr[mid - 1] == num:\n            return find_first_occurrence(arr[:mid], num)\n        else:\n            return mid\n    elif arr[mid] > num:\n        return find_first_occurrence(arr[:mid], num)\n    else:\n        return find_first_occurrence(arr[mid:], num)\n\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    / "}
{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\ndef sum_Of_Subarray_Prod(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_2(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_3(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_4(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_5(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_6(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_7(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_8(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_9(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_10(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_11(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_12(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_13(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_14(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_15(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_16(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_17(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_18(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_19(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_20(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_21(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_22(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_23(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_24(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_25(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_26(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_27(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef sum_Of_Subarray_Prod_28(arr):\n    prod ="}
{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\ndef toggle_middle_bits(num):\n    return (num & 0x55555555) | (num & 0xAAAAAAAA)\n\nprint(toggle_middle_bits(9))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\ndef main():\n    p = TreeNode(1)\n    p.left = TreeNode(2)\n    p.right = TreeNode(3)\n\n    q = TreeNode(1)\n    q.left = TreeNode(2)\n    q.right = TreeNode(3)\n\n    s = Solution()\n    print(s.isSameTree(p, q))\n\nif __name__ == '__main__':\n    main()\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n\ndef main():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(2)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(4)\n    root.right.right = TreeNode(3)\n\n    s = Solution()\n    print(s.isSymmetric(root))\n\nif __name__ == '__main__':\n    main()\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null"}
{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\ndef left_insertion(arr,val):\n    if arr[0]>val:\n        return 0\n    if arr[-1]<val:\n        return len(arr)\n    for i in range(len(arr)):\n        if arr[i]>val:\n            return i\n    return len(arr)\n\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],1)==0\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],0)==0\nassert left_insertion([1,2,4,5],2)==1\nassert left_insertion([1,2,4,5],4)==2\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],-1)==0\nassert left_insertion([1,2,4,5],10)==5\nassert left_insertion([1,2,4,5],-10)==0\nassert left_insertion([1,2,4,5],0)==0\nassert left_insertion([1,2,4,5],1)==0\nassert left_insertion([1,2,4,5],2)==1\nassert left_insertion([1,2,4,5],4)==2\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],-1)==0\nassert left_insertion([1,2,4,5],10)==5\nassert left_insertion([1,2,4,5],-10)==0\nassert left_insertion([1,2,4,5],0)==0\nassert left_insertion([1,2,4,5],1)==0\nassert left_insertion([1,2,4,5],2)==1\nassert left_insertion([1,2,4,5],4)==2\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],-1)==0\nassert left_insertion([1,2,4,5],10)==5\nassert left_insertion([1,2,4,5],-10)==0\nassert left_insertion([1,2,4,5],0)==0\nassert left_insertion([1,2,4,5],1)==0\nassert left_insertion([1,2,4,5],2)==1\nassert left_insertion([1,2,4,5],4)==2\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],-1)==0\nassert left_insertion([1,2,4,5],10)==5\nassert left_insertion([1,2,4,5],-10)==0\nassert left_insertion([1,2,4,5],0)==0\nassert left_insertion([1,2,4,5],1)==0\nassert left_insertion([1,2,4,5],2)==1\nassert left_insertion([1,2,4,5],4)==2\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],-1)==0\nassert left_insertion([1,2,4,5],10)==5\nassert left_insertion([1,2,4,5],-10)==0\nassert left_insertion([1,2,4,5],0)==0\nassert left_insertion([1,2,4,5],1)==0\nassert left_insertion([1,2,4,5],2)==1\nassert left_insertion([1,2,4,5],4)==2\nassert left_insertion([1,2,4,5],5)==4\nassert left_insertion([1,2,4,5],-1)==0\nassert left_insertion([1,2,4"}
{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_10.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_11.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_12.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_13.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_14.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_15.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_16.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_17.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_18.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_19.py\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)\n\nprint(check_str(\"annie\"))\n/python/regex/regex_20.py\n\"\"\"\nWrite a function"}
{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n\ndef find_Index(n):\n    # TODO: Write your code here\n    pass\n\nif __name__ == '__main__':\n    print(find_Index(2))\n/python/leetcode/1001-1100/1001-1010/1008.py\n\"\"\"\n1008. Construct Binary Search Tree from Preorder Traversal\nMedium\n\nReturn the root node of a binary search tree that matches the given preorder traversal.\n\n(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)\n\nIt's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.\n\nExample 1:\nInput: [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]\n\nConstraints:\n1 <= preorder.length <= 100\n1 <= preorder[i] <= 10^8\nThe values of preorder are distinct.\n\"\"\"\n\nfrom typing import List\n\nfrom leetcode import TreeNode\n\n\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n        \"\"\"\n        Time complexity: O(n)\n        Space complexity: O(n)\n        \"\"\"\n        def helper(left, right):\n            if left > right:\n                return None\n            root = TreeNode(preorder[left])\n            i = left + 1\n            while i <= right and preorder[i] < preorder[left]:\n                i += 1\n            root.left = helper(left + 1, i - 1)\n            root.right = helper(i, right)\n            return root\n\n        return helper(0, len(preorder) - 1)\n\n\nif __name__ == '__main__':\n    print(Solution().bstFromPreorder([8, 5, 1, 7, 10, 12]))  # [8,5,10,1,7,null,12]\n/python/leetcode/1001-1100/1001-1010/1002.py\n\"\"\"\n1002. Find Common Characters\nEasy\n\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\nExample 1:\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\n\nExample 2:\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\n\nNote:\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def commonChars(self, A: List[str]) -> List[str]:\n        \"\"\"\n        Time complexity: O(n * m)\n        Space complexity: O(n)\n        \"\"\"\n        res = []\n        for i in range(26):\n            count = 101\n            for j in range(len(A)):\n                count = min(count, A[j].count(chr(i + ord('a'))))\n            for _ in range(count):\n                res.append(chr(i + ord('a')))\n        return res\n\n\nif __name__ == '__main__':\n    print(Solution().commonChars([\"bella\", \"label\", \"roller\"]))  # [\"e\", \"l\", \"l\"]\n    print(Solution().commonChars([\"cool\", \"lock\", \"cook\"]))  # [\"c\", \"o\"]\n/"}
{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\ndef tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(len(tup)-1)}\n\nprint(tuple_to_dict((1, 5, 7, 10, 13, 5)))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef same_tree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    return p.val == q.val and same_tree(p.left, q.left) and same_tree(p.right, q.right)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\n\nprint(same_tree(root1, root2))\n/python/leetcode/easy/121_best_time_to_buy_and_sell_stock.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\nNote that you cannot sell a stock before you buy one.\n\nExample 1:\n\nInput: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\nExample 2:\n\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\"\"\"\n\ndef max_profit(prices):\n    if len(prices) < 2:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_"}
{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\ndef all_Characters_Same(str):\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            return False\n    return True\n\nprint(all_Characters_Same(\"python\"))\nprint(all_Characters_Same(\"aaaaa\"))\nprint(all_Characters_Same(\"aaaa\"))\nprint(all_Characters_Same(\"a\"))\nprint(all_Characters_Same(\"\"))\n/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 2\n3 3 3\n4 4 4 4\n5 5 5 5 5\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(i):\n        print(i,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n    for j in range(i,i+4):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(i,i+5):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(i,i+5):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n\"\"\"\n\nfor i in range(1,7):\n    for j in range(i,i+5):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n\"\"\"\n\nfor i in range(1,7):\n    for j in range(i,i+5):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_15.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n26 27 28 29 30\n\"\"\"\n\nfor i in range(1,8):\n    for j in range(i,i+5):\n        print(j,end=\" \")\n    print()\n/Python/Python_Basics/Python_Basics_16.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n2 3\n4 5 6\n7 8"}
{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\ndef area_tetrahedron(a):\n    return (a**2)*((3**0.5)/4)\n\nprint(area_tetrahedron(3))\n\n\"\"\"\nWrite a function to calculate the volume of a tetrahedron.\nassert volume_tetrahedron(3)==13.416407864998739\n\"\"\"\n\ndef volume_tetrahedron(a):\n    return (a**3)*((3**0.5)/12)\n\nprint(volume_tetrahedron(3))\n\n\"\"\"\nWrite a function to calculate the surface area of a tetrahedron.\nassert surface_area_tetrahedron(3)==39.47841760435743\n\"\"\"\n\ndef surface_area_tetrahedron(a):\n    return (a**2)*((3**0.5)/2)\n\nprint(surface_area_tetrahedron(3))\n\n\"\"\"\nWrite a function to calculate the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(a):\n    return a**3\n\nprint(volume_cube(3))\n\n\"\"\"\nWrite a function to calculate the surface area of a cube.\nassert surface_area_cube(3)==54\n\"\"\"\n\ndef surface_area_cube(a):\n    return 6*a**2\n\nprint(surface_area_cube(3))\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\nassert volume_sphere(3)==113.09733552923255\n\"\"\"\n\ndef volume_sphere(a):\n    return (4/3)*3.14*(a**3)\n\nprint(volume_sphere(3))\n\n\"\"\"\nWrite a function to calculate the surface area of a sphere.\nassert surface_area_sphere(3)==113.09733552923255\n\"\"\"\n\ndef surface_area_sphere(a):\n    return 4*3.14*(a**2)\n\nprint(surface_area_sphere(3))\n\n\"\"\"\nWrite a function to calculate the volume of a cone.\nassert volume_cone(3, 4)==26.194444444444445\n\"\"\"\n\ndef volume_cone(r, h):\n    return (1/3)*3.14*(r**2)*h\n\nprint(volume_cone(3, 4))\n\n\"\"\"\nWrite a function to calculate the surface area of a cone.\nassert surface_area_cone(3, 4)==56.54866776461627\n\"\"\"\n\ndef surface_area_cone(r, h):\n    return 3.14*(r**2)+(3.14*r*h)\n\nprint(surface_area_cone(3, 4))\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\nassert volume_cylinder(3, 4)==36.0\n\"\"\"\n\ndef volume_cylinder(r, h):\n    return 3.14*(r**2)*h\n\nprint(volume_cylinder(3, 4))\n\n\"\"\"\nWrite a function to calculate the surface area of a cylinder.\nassert surface_area_cylinder(3, 4)==88.2\n\"\"\"\n\ndef surface_area_cylinder(r, h):\n    return 2*3.14*(r**2)+2*3.14*r*h\n\nprint(surface_area_cylinder(3, 4))\n\n\"\"\"\nWrite a function to calculate the volume of a pyramid.\nassert volume_pyramid(3, 4)==12.0\n\"\"\"\n\ndef volume_pyramid(b, h):\n    return (1/3)*b*h\n\nprint(volume_pyramid(3, 4"}
{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\ndef rotate_right(lst,n):\n    return lst[n:] + lst[:n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n/python/list_comprehension.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a list of the square of each number.\n\"\"\"\n\ndef square(lst):\n    return [i**2 for i in lst]\n\nassert square([1,2,3,4,5])==[1,4,9,16,25]\n/python/list_of_lists.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a list of the square of each number.\n\"\"\"\n\ndef square(lst):\n    return [[i**2 for i in lst]]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25]]\n/python/list_of_lists_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a list of the square of each number.\n\"\"\"\n\ndef square(lst):\n    return [[i**2 for i in lst]]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25]]\n\ndef square(lst):\n    return [[i**2 for i in lst] for i in lst]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25]]\n/python/list_of_lists_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns a list of the square of each number.\n\"\"\"\n\ndef square(lst):\n    return [[i**2 for i in lst] for i in lst]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25]]\n\ndef square(lst):\n    return [[i**2 for i in lst] for i in lst]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25]]\n\ndef square(lst):\n    return [[i**2 for i in lst] for i in lst]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25]]\n\ndef square(lst):\n    return [[i**2 for i in lst] for i in lst]\n\nassert square([1,2,3,4,5])==[[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25],[1,4,9,16,25]]\n\ndef square(lst):\n    return [[i**2 for i in lst] for i in lst]\n\n"}
{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\ndef check_none(t):\n    for i in t:\n        if i is None:\n            return True\n    return False\n\nprint(check_none((10, 4, 5, 6, None)))\n/01_python_basics/02_python_basics_exercises/02_01_print_hello_world.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console.\n\"\"\"\n\nprint(\"Hello World\")\n/01_python_basics/02_python_basics_exercises/02_02_print_hello_world_with_variable.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(hello_world)\n/01_python_basics/02_python_basics_exercises/02_03_print_hello_world_with_variable_and_type.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable and type.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(type(hello_world))\n/01_python_basics/02_python_basics_exercises/02_04_print_hello_world_with_variable_and_type_and_value.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable, type and value.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(type(hello_world), hello_world)\n/01_python_basics/02_python_basics_exercises/02_05_print_hello_world_with_variable_and_type_and_value_and_length.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable, type, value and length.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(type(hello_world), hello_world, len(hello_world))\n/01_python_basics/02_python_basics_exercises/02_06_print_hello_world_with_variable_and_type_and_value_and_length_and_upper.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable, type, value, length and upper.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(type(hello_world), hello_world, len(hello_world), hello_world.upper())\n/01_python_basics/02_python_basics_exercises/02_07_print_hello_world_with_variable_and_type_and_value_and_length_and_upper_and_lower.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable, type, value, length, upper and lower.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(type(hello_world), hello_world, len(hello_world), hello_world.upper(), hello_world.lower())\n/01_python_basics/02_python_basics_exercises/02_08_print_hello_world_with_variable_and_type_and_value_and_length_and_upper_and_lower_and_title.py\n\"\"\"\nWrite a program to print \"Hello World\" on the console using a variable, type, value, length, upper, lower and title.\n\"\"\"\n\nhello_world = \"Hello World\"\nprint(type(hello_world), hello_world, len(hello_world), hello_world.upper(), hello_world.lower(), hello_world.title())\n/01_python_basics/02_python_basics_exercises/02_09_print_hello_world_with_variable_and_type_and_value_and_length_and_upper_and_lower_and_title_and_swapcase.py\n\"\"\"\n"}
{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\ndef divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i%int(j) == 0 for j in str(i))]\n\nprint(divisible_by_digits(1,22))\n/python/python_exercises/python_lambda_exercise_18.py\n\"\"\"\nWrite a function to find the maximum and minimum numbers from a sequence of numbers. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-18.php\nassert max_min([1,2,3,4,5]) == (5,1)\n\"\"\"\n\ndef max_min(seq):\n    return (max(seq), min(seq))\n\nprint(max_min([1,2,3,4,5]))\n/python/python_exercises/python_lambda_exercise_11.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2 + 1/3 + 1/4 +... + 1/n. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-11.php\nassert sum_series(4) == 1.8333333333333333\n\"\"\"\n\ndef sum_series(n):\n    return sum(1/i for i in range(1, n+1))\n\nprint(sum_series(4))\n/python/python_exercises/python_lambda_exercise_23.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2^2 + 1/3^2 + 1/4^2 +... + 1/n^2. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-23.php\nassert sum_series(4) == 1.6875\n\"\"\"\n\ndef sum_series(n):\n    return sum(1/(i**2) for i in range(1, n+1))\n\nprint(sum_series(4))\n/python/python_exercises/python_lambda_exercise_16.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2 + 1/3 + 1/4 +... + 1/n. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-16.php\nassert sum_series(4) == 2.75\n\"\"\"\n\ndef sum_series(n):\n    return sum(1/i for i in range(1, n+1))\n\nprint(sum_series(4))\n/python/python_exercises/python_lambda_exercise_15.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2 + 1/3 + 1/4 +... + 1/n. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-15.php\nassert sum_series(4) == 2.25\n\"\"\"\n\ndef sum_series(n):\n    return sum(1/i for i in range(1, n+1))\n\nprint(sum_series(4))\n/python/python_exercises/python_lambda_exercise_19.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2 + 1/3 + 1/4 +... + 1/n. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-19.php\nassert sum_series(4) == 2.25\n\"\"\"\n\ndef sum_series(n):\n    return sum(1/i for i in range(1, n+1))\n\nprint(sum_series(4))\n/python/python"}
{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (radius**2)*angle*0.01591549430918956\n\nprint(sector_area(4,45))\n\n\"\"\"\nWrite a function to find the area of a triangle. The function takes the length of the three sides as inputs. Function should return None if the sum of any two sides is less than the third side.\nassert triangle_area(3,4,5)==6\n\"\"\"\n\ndef triangle_area(a,b,c):\n    if a+b<c or b+c<a or a+c<b:\n        return None\n    else:\n        s=(a+b+c)/2\n        return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a parallelogram. The function takes the base and height as inputs. Function should return None if the base is less than 0 or the height is less than 0.\nassert parallelogram_area(4,5)==20\n\"\"\"\n\ndef parallelogram_area(base,height):\n    if base<0 or height<0:\n        return None\n    else:\n        return base*height\n\nprint(parallelogram_area(4,5))\n\n\"\"\"\nWrite a function to find the area of a trapezoid. The function takes the length of the two parallel sides and the height as inputs. Function should return None if the length of any side is less than 0 or the height is less than 0.\nassert trapezoid_area(4,5,6)==16\n\"\"\"\n\ndef trapezoid_area(a,b,h):\n    if a<0 or b<0 or h<0:\n        return None\n    else:\n        return (a+b)*h/2\n\nprint(trapezoid_area(4,5,6))\n\n\"\"\"\nWrite a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is less than 0.\nassert circle_area(4)==50.26548245743669\n\"\"\"\n\ndef circle_area(radius):\n    if radius<0:\n        return None\n    else:\n        return 3.14*radius**2\n\nprint(circle_area(4))\n\n\"\"\"\nWrite a function to find the area of a rectangle. The function takes the length and width as inputs. Function should return None if the length or width is less than 0.\nassert rectangle_area(4,5)==20\n\"\"\"\n\ndef rectangle_area(length,width):\n    if length<0 or width<0:\n        return None\n    else:\n        return length*width\n\nprint(rectangle_area(4,5))\n\n\"\"\"\nWrite a function to find the area of a rhombus. The function takes the length of the side as input. Function should return None if the length is less than 0.\nassert rhombus_area(4)==16\n\"\"\"\n\ndef rhombus_area(side):\n    if side<0:\n        return None\n    else:\n        return side**2\n\nprint(rhombus_area(4))\n\n\"\"\"\nWrite a function to find the area of a square. The function takes the length of the side as input. Function should return None if the length is less than 0.\nassert square_area(4)==16\n\"\"\"\n\ndef square_area(side):\n    if side<0:\n        return None\n    else:\n        return side**2\n\nprint(square_area(4))\n\n\"\"\"\nWrite a function to find the area of a kite. The function takes the length of the two diagonals as inputs. Function should return None if the length of any diagonal is less than 0.\nassert kite_area(4,5)==1"}
{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\ndef capital_words_spaces(string):\n    return string\n\nprint(capital_words_spaces(\"Python\"))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    return n\n\nprint(digital_root(16))\nprint(digital_root(942))\nprint(digital_root(132189))\nprint(digital_root(493193))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum(filter(lambda x: x > 0, arr))\n\nprint(positive_sum([1,2,3,4,5]))\nprint(positive_sum([1,-2,3,4,5]))\nprint(positive_sum([]))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum(range(1, n * 2 + 1, 2))\n\nprint(row_sum_odd_numbers(1))\nprint(row_sum_odd_numbers(2))\nprint(row_sum_odd_numbers(3))\nprint(row_sum_odd_numbers(4))\nprint(row_sum_odd_numbers(5))\n/python/codewars/7kyu/sum_of_two_lowest_positive_integers.py\n\"\"\"\nCreate a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\n\nFor example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.\n\n[10, 343445353, 3453445, 3453545353453] should return 34"}
{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\ndef sort_numeric_strings(strings):\n    return sorted(strings, key=lambda x: int(x))\n\nprint(sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500']))\n/python/leetcode/easy/1480_running_sum_of_1d_array.py\n\"\"\"\nGiven an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]\u2026nums[i]).\n\nReturn the running sum of nums.\n\nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: [1,3,6,10]\nExplanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\nExample 2:\n\nInput: nums = [1,1,1,1,1]\nOutput: [1,2,3,4,5]\nExplanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].\nExample 3:\n\nInput: nums = [3,1,2,10,1]\nOutput: [3,4,6,16,17]\n\nConstraints:\n\n1 <= nums.length <= 1000\n-10^6 <= nums[i] <= 10^6\n\"\"\"\n\ndef running_sum(nums):\n    return [sum(nums[:i+1]) for i in range(len(nums))]\n\nprint(running_sum([1,2,3,4]))\nprint(running_sum([1,1,1,1,1]))\nprint(running_sum([3,1,2,10,1]))\n/python/leetcode/easy/1295_find_numbers_with_even_number_of_digits.py\n\"\"\"\nGiven an array nums of integers, return how many of them contain an even number of digits.\n\nExample 1:\n\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\nExample 2:\n\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation:\nOnly 1771 contains an even number of digits.\n\nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 10^5\n\"\"\"\n\ndef find_numbers(nums):\n    return len([num for num in nums if len(str(num)) % 2 == 0])\n\nprint(find_numbers([12,345,2,6,7896]))\nprint(find_numbers([555,901,482,1771]))\n/python/leetcode/easy/1221_split_a_string_in_balanced_strings.py\n\"\"\"\nBalanced strings are those who have equal quantity of 'L' and 'R' characters.\n\nGiven a balanced string s split it in the maximum amount of balanced strings.\n\nReturn the maximum amount of splitted balanced strings.\n\nExample 1:\n\nInput: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L'"}
{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\ndef add_tuple(lst, tup):\n    return lst + list(tup)\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\"\"\"\n\ndef remove_tuple(lst, tup):\n    return [x for x in lst if x not in tup]\n\nassert remove_tuple([5, 6, 7, 9, 10], (9, 10)) == [5, 6, 7]\n\n"}
{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\ndef check_min_heap(arr):\n    for i in range(len(arr)):\n        if arr[i] < arr[i*2+1] or arr[i] < arr[i*2+2]:\n            return False\n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1"}
{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\nassert jacobsthal_num(5) == 11\n\"\"\"\n\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n\nprint(jacobsthal_num(5))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val!= q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        else:\n            return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        elif left is None or right is None:\n            return False\n        elif left.val!= right.val:\n            return False\n        else:\n            return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#"}
{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\ndef min_k(list_of_tuples, k):\n    return sorted(list_of_tuples, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 3) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 5) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 6) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 7) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 8) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 9) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 10) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 11) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 12) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 13) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert"}
{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :param l3: list\n    :return: list\n    \"\"\"\n    return [x for x in l1 if x in l2 and x in l3]\n\n\nif __name__ == '__main__':\n    print(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n/01_Python_Basics/02_Python_Basics_Exercises}
{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\ndef second_smallest(lst):\n    \"\"\"\n    >>> second_smallest([1, 2, -8, -2, 0, -2])\n    -2\n    \"\"\"\n    smallest = lst[0]\n    second_smallest = lst[0]\n    for i in lst:\n        if i < smallest:\n            second_smallest = smallest\n            smallest = i\n        elif i < second_smallest and i!= smallest:\n            second_smallest = i\n    return second_smallest\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week01/day03/03_01_list_comprehension.py\n\"\"\"\nWrite a list comprehension to create a list of the first 10 square numbers.\n\"\"\"\n\ndef square_numbers():\n    \"\"\"\n    >>> square_numbers()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week01/day03/03_03_list_comprehension_2.py\n\"\"\"\nWrite a list comprehension to create a list of the first 10 square numbers.\n\"\"\"\n\ndef square_numbers():\n    \"\"\"\n    >>> square_numbers()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\ndef square_numbers_2():\n    \"\"\"\n    >>> square_numbers_2()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week01/day03/03_02_list_comprehension_1.py\n\"\"\"\nWrite a list comprehension to create a list of the first 10 square numbers.\n\"\"\"\n\ndef square_numbers():\n    \"\"\"\n    >>> square_numbers()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week01/day03/03_04_list_comprehension_3.py\n\"\"\"\nWrite a list comprehension to create a list of the first 10 square numbers.\n\"\"\"\n\ndef square_numbers():\n    \"\"\"\n    >>> square_numbers()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\ndef square_numbers_2():\n    \"\"\"\n    >>> square_numbers_2()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\ndef square_numbers_3():\n    \"\"\"\n    >>> square_numbers_3()\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    \"\"\"\n    return [i**2 for i in range(10)]\n\nif __name__ == '__main"}
{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][::-1] == lst[j]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"])== 3\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\"])== 4\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\"])== 5\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\"])== 6\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 7\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"])== 8\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\"])== 9\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\"])== 10\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\"])== 11\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 12\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"])== 13\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\"])== 14\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\"])== 15\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"best\", \"tseb\", \"for\"])== 16\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for"}
{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\ndef unique_sublists(lst):\n    d = {}\n    for i in lst:\n        d[tuple(i)] = lst.count(i)\n    return d\n\nprint(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/01_Python_Basics/"}
{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n\ndef is_decimal(s):\n    if '.' not in s:\n        return False\n    else:\n        if s.count('.') > 1:\n            return False\n        else:\n            if s.count('.') == 1:\n                if s.split('.')[1].isdigit():\n                    return True\n                else:\n                    return False\n            else:\n                if s.isdigit():\n                    return True\n                else:\n                    return False\n\nprint(is_decimal('123.11'))\nprint(is_decimal('123.11.1'))\nprint(is_decimal('123.11a'))\nprint(is_decimal('123.11.1a'))\nprint(is_decimal('123.11a.1'))\nprint(is_decimal('123.11a1'))\nprint(is_decimal('123.111'))\nprint(is_decimal('123.111a'))\nprint(is_decimal('123.111.1'))\nprint(is_decimal('123.111.1a'))\nprint(is_decimal('123.111a.1'))\nprint(is_decimal('123.111a1'))\nprint(is_decimal('123.1111'))\nprint(is_decimal('123.1111a'))\nprint(is_decimal('123.1111.1'))\nprint(is_decimal('123.1111.1a'))\nprint(is_decimal('123.1111a.1'))\nprint(is_decimal('123.1111a1'))\nprint(is_decimal('123.11111'))\nprint(is_decimal('123.11111a'))\nprint(is_decimal('123.11111.1'))\nprint(is_decimal('123.11111.1a'))\nprint(is_decimal('123.11111a.1'))\nprint(is_decimal('123.11111a1'))\nprint(is_decimal('123.111111'))\nprint(is_decimal('123.111111a'))\nprint(is_decimal('123.111111.1'))\nprint(is_decimal('123.111111.1a'))\nprint(is_decimal('123.111111a.1'))\nprint(is_decimal('123.111111a1'))\nprint(is_decimal('123.1111111'))\nprint(is_decimal('123.1111111a'))\nprint(is_decimal('123.1111111.1'))\nprint(is_decimal('123.1111111.1a'))\nprint(is_decimal('123.1111111a.1'))\nprint(is_decimal('123.1111111a1'))\nprint(is_decimal('123.11111111'))\nprint(is_decimal('123.11111111a'))\nprint(is_decimal('123.11111111.1'))\nprint(is_decimal('123.11111111.1a'))\nprint(is_decimal('123.11111111a.1'))\nprint(is_decimal('123.11111111a1'))\nprint(is_decimal('123.111111111'))\nprint(is_decimal('123.111111111a'))\nprint(is_decimal('123.111111111.1'))\nprint(is_decimal('123."}
{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\ndef unique_Element(list):\n    if len(list) == len(set(list)):\n        return True\n    else:\n        return False\n\nprint(unique_Element([1,1,1]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python function to check whether a number is even or odd.\nassert even_odd(2) == \"Even\"\nassert even_odd(3) == \"Odd\"\n\"\"\"\n\ndef even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(even_odd(2))\nprint(even_odd(3))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python function to check whether a number is prime or not.\nassert prime_number(2) == True\nassert prime_number(3) == True\nassert prime_number(4) == False\n\"\"\"\n\ndef prime_number(num):\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\nprint(prime_number(2))\nprint(prime_number(3))\nprint(prime_number(4))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python function to check whether a number is positive or negative.\nassert positive_negative(2) == \"Positive\"\nassert positive_negative(-2) == \"Negative\"\n\"\"\"\n\ndef positive_negative(num):\n    if num > 0:\n        return \"Positive\"\n    elif num < 0:\n        return \"Negative\"\n    else:\n        return \"Zero\"\n\nprint(positive_negative(2))\nprint(positive_negative(-2))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_1.py\n\"\"\"\nWrite a python function to check whether a number is divisible by 5 and 11 or not.\nassert divisible_by_5_and_11(55) == True\nassert divisible_by_5_and_11(56) == False\n\"\"\"\n\ndef divisible_by_5_and_11(num):\n    if num % 5 == 0 and num % 11 == 0:\n        return True\n    else:\n        return False\n\nprint(divisible_by_5_and_11(55))\nprint(divisible_by_5_and_11(56))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_2.py\n\"\"\"\nWrite a python function to check whether a number is divisible by 7 or not.\nassert divisible_by_7(49) == True\nassert divisible_by_7(48) == False\n\"\"\"\n\ndef divisible_by_7(num):\n    if num % 7 == 0:\n        return True\n    else:\n        return False\n\nprint(divisible_by_7(49))\nprint(divisible_by_7(48))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_3.py\n\"\"\"\nWrite a python function to check whether a number is divisible by 5 or 7 or not.\nassert divisible_by_5_or_7(35) == True\nassert divisible_by_5_or_7(36) == False\n\"\"\"\n\ndef divisible_by_5_or_7(num):\n    if num % 5 == 0 or num % 7 == 0:\n        return True\n    else:\n        return False\n\nprint(divisible_by_5_or_7(35))\nprint(divisible_by_5_or_7(36))\n/Python/Python_Basics/Python_Basics_2/Python_Basics_2_4.py\n\"\"\"\nWrite a python function to check whether a number is divisible by 5 and 7 or"}
{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [4,6,9,11]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [4,6,9,11]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [4,6,9,11]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [4,6,9,11]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [4,6,9,11]:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n   "}
{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\ndef find_min_diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)-1):\n        if abs(arr[i+1] - arr[i]) < min_diff:\n            min_diff = abs(arr[i+1] - arr[i])\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nassert single_number([2,2,1]) == 1\nassert single_number([4,1,2,1,2]) == 4\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/easy/107_binary_tree_level_order_traversal_2.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if root is None:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:"}
{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\ndef number_ctr(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\nprint(number_ctr('program2bedone'))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n/python_basics/python_basics_4.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\nassert sum_list([1,2,3,4,5]) == 15\n\"\"\"\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\n"}
{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n\ndef is_polite(n):\n    \"\"\"\n    >>> is_polite(7)\n    11\n    \"\"\"\n    return n * (n + 1) // 2\n\ndef nth_polite(n):\n    \"\"\"\n    >>> nth_polite(7)\n    11\n    \"\"\"\n    return is_polite(n)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isSymmetricHelper(root.left, root.right)\n\n    def isSymmetricHelper(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isSymmetricHelper(left.left, right.right) and self.isSymmetricHelper(left.right, right.left)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x"}
{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\ndef pair_wise(lst):\n    return [(lst[i],lst[i+1]) for i in range(len(lst)-1)]\n\nprint(pair_wise([1,1,2,3,3,4,4,5]))\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nIn this kata, you must create a digital root function.\n\nA digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works (Ruby example given):\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    if n < 10:\n        return n\n    else:\n        return digital_root(sum([int(i) for i in str(n)]))\n\nprint(digital_root(132189))\n/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\ndef row_sum_odd_numbers(n):\n    return sum([i for i in range(1,n*2,2)])\n\nprint(row_sum_odd_numbers(1))\nprint(row_sum_odd_numbers(2))\n/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\ndef positive_sum(arr):\n    return sum([i for i in arr if i > 0])\n\nprint(positive_sum([1,-4,7,12]))\n/python/codewars/7kyu/sum_of_odd_cubed_numbers.py\n\"\"\"\nGiven a number n, return the sum of the cube of all the odd numbers up to n, and return this number.\n\nFor example:\n\nn = 7 then the sum of odd cubes = 36, because 7 is odd and its odd cubes are: 36, 7, 1\n\"\"\"\n\ndef cube_odd(n):\n    return sum([i**3 for i in range(1,n+1) if i%2!= 0])\n\nprint(cube_odd(7))\n/python/codewars/7kyu/sum_of_two_lowest_positive_integers.py\n\"\"\"\nCreate a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\n\nFor example, when an array is"}
{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\ndef get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count\n\nprint(get_pairs_count([1,1,1,1],2))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3,4]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\nassert get_sum([1,2,3,4]) == 10\n\"\"\"\n\ndef get_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\nprint(get_sum([1,2,3"}
{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\ndef Diff(li1, li2):\n    return [x for x in li1 if x not in li2]\n\nprint(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to get the Python version you are using.\n\"\"\"\n\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to display the current date and time.\n\"\"\"\n\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\n\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a python program which takes two inputs from user and print them addition.\n\"\"\"\n\nnum1 = input('Enter first number: ')\nnum2 = input('Enter second number: ')\n\nsum = float(num1) + float(num2)\n\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a python program which takes two inputs from user and print them addition.\n\"\"\"\n\nnum1 = input('Enter first number: ')\nnum2 = input('Enter second number: ')\n\nsum = float(num1) + float(num2)\n\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_8.py\n\"\"\"\nWrite a python program to display the first and last colors from the following list.\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\n\"\"\"\n\ncolor_list = [\"Red\",\"Green\",\"White\",\"Black\"]\nprint(color_list[0], color_list[-1])\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_9.py\n\"\"\"\nWrite a python program to get the Python version you are using.\n\"\"\"\n\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n/Python/Python_Basics/Python_Basics_1/Python_Basics_1_10."}
{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\ndef odd_num_sum(n):\n    return sum([i**4 for i in range(1,n+1) if i%2!=0])\n\nprint(odd_num_sum(2))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of first n natural numbers.\nassert sum_of_n(2) == 3\n\"\"\"\n\ndef sum_of_n(n):\n    return sum(range(1,n+1))\n\nprint(sum_of_n(2))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\nassert sum_of_squares(2) == 5\n\"\"\"\n\ndef sum_of_squares(n):\n    return sum([i**2 for i in range(1,n+1)])\n\nprint(sum_of_squares(2))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\nassert sum_of_cubes(2) == 9\n\"\"\"\n\ndef sum_of_cubes(n):\n    return sum([i**3 for i in range(1,n+1)])\n\nprint(sum_of_cubes(2))\n"}
{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\ndef check_expression(expression):\n    pass\n/python/data_structures/linked_list/linked_list.py\n\"\"\"\nImplement a linked list.\n\nYou should be able to:\n\n- Add a node to the start and end of the list\n- Remove a node from the start and the end of the list\n- Get the size of the list\n- Traverse the list\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.size = 0\n\n    def add_to_start(self, data):\n        pass\n\n    def add_to_end(self, data):\n        pass\n\n    def remove_from_start(self):\n        pass\n\n    def remove_from_end(self):\n        pass\n\n    def get_size(self):\n        pass\n\n    def traverse(self):\n        pass\n/python/data_structures/queue/queue.py\n\"\"\"\nImplement a queue.\n\nYou should be able to:\n\n- Enqueue an element\n- Dequeue an element\n- Get the size of the queue\n\"\"\"\n\nclass Queue:\n    def __init__(self):\n        pass\n\n    def enqueue(self, data):\n        pass\n\n    def dequeue(self):\n        pass\n\n    def get_size(self):\n        pass\n/python/data_structures/stack/stack.py\n\"\"\"\nImplement a stack.\n\nYou should be able to:\n\n- Push an element\n- Pop an element\n- Get the size of the stack\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        pass\n\n    def push(self, data):\n        pass\n\n    def pop(self):\n        pass\n\n    def get_size(self):\n        pass\n/python/data_structures/binary_tree/binary_tree.py\n\"\"\"\nImplement a binary tree.\n\nYou should be able to:\n\n- Add a node\n- Remove a node\n- Get the size of the tree\n- Traverse the tree\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n        self.size = 0\n\n    def add_node(self, data):\n        pass\n\n    def remove_node(self, data):\n        pass\n\n    def get_size(self):\n        pass\n\n    def traverse(self):\n        pass\n/python/data_structures/binary_search_tree/binary_search_tree.py\n\"\"\"\nImplement a binary search tree.\n\nYou should be able to:\n\n- Add a node\n- Remove a node\n- Get the size of the tree\n- Traverse the tree\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n        self.size = 0\n\n    def add_node(self, data):\n        pass\n\n    def remove_node(self, data):\n        pass\n\n    def get_size(self):\n        pass\n\n    def traverse(self):\n        pass\n/python/data_structures/hash_table/hash_table.py\n\"\"\"\nImplement a hash table.\n\nYou should be able to:\n\n- Add a key/value pair\n- Remove a key/value pair\n- Get the value of a key\n\"\"\"\n\nclass HashTable:\n    def __init__(self):\n        pass\n\n    def add(self, key, value):\n        pass\n\n    def remove(self, key):\n        pass\n\n    def get(self, key):\n        pass\n/python/data_structures/heap/heap.py\n\"\"\"\nImplement a heap.\n\nYou should be able to:\n\n- Add an element\n- Remove an element\n- Get the size of the heap\n\"\"\"\n\nclass Heap:\n    def __init__(self):\n        pass\n\n    def add(self, data):\n        pass\n\n    def remove(self):\n        pass\n\n    def get_size(self):\n        pass\n/python/data_structures/graph/graph.py\n\"\"\""}
{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\ndef remove_length(string, k):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word)!= k:\n            result.append(word)\n    return''.join(result)\n\nprint(remove_length('The person is most value tet', 3))\n/python/00001-00500/00100-00150/00130-00139/00138.py\n\"\"\"\nGiven a linked list, remove the nth node from the end of list and return its head.\n\nFor example,\n\n   Given linked list: 1->2->3->4->5, and n = 2.\n\n   After removing the second node from the end, the linked list becomes 1->2->3->5.\nNote:\nGiven n will always be valid.\nTry to do this in one pass.\n\"\"\"\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        first = dummy\n        second = dummy\n        for i in range(n+1):\n            first = first.next\n        while first:\n            first = first.next\n            second = second.next\n        second.next = second.next.next\n        return dummy.next\n/python/00001-00500/00100-00150/00120-00129/00122.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n\"\"\"\n\nclass Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        profit = 0\n        for i in range(len(prices)-1):\n            if prices[i+1] > prices[i]:\n                profit += prices[i+1] - prices[i]\n        return profit\n/python/00001-00500/00100-00150/00110-00119/00118.py\n\"\"\"\nGiven numRows, generate the first numRows of Pascal's triangle.\n\nFor example, given numRows = 5,\nReturn\n\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\n\nclass Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        result = []\n        for i in range(numRows):\n            row = [1] * (i+1)\n            for j in range(1, i):\n                row[j] = result[i-1][j-1] + result[i-1][j]\n            result.append(row)\n        return result\n/python/00001-00500/00100-00150/00110-00119/00111.py\n\"\"\"\nGiven a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass"}
{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\ndef occurance_substring(string, substring):\n    \"\"\"\n    :param string: string\n    :param substring: substring\n    :return: None if there is no match, otherwise return a tuple of (substring, start_index, end_index)\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\nif __name__ == '__main__':\n    print(occurance_substring('python programming, python language', 'python'))\n/python/01_basic/02_list/01_list_basic.py\n\"\"\"\nList is a collection which is ordered and changeable. Allows duplicate members.\n\"\"\"\n\n# Create a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list(('apple', 'banana', 'cherry'))\nlist_3 = list(range(10))\n\n# Access items\nprint(list_1[0])\nprint(list_1[-1])\n\n# Change items\nlist_1[0] = 'orange'\nprint(list_1)\n\n# Loop through a list\nfor item in list_1:\n    print(item)\n\n# Check if item exists\nif 'apple' in list_1:\n    print('apple exists')\n\n# Get the length of a list\nprint(len(list_1))\n\n# Add items\nlist_1.append('grape')\nprint(list_1)\n\n# Insert items\nlist_1.insert(1,'mango')\nprint(list_1)\n\n# Remove items\nlist_1.remove('mango')\nprint(list_1)\n\n# Remove the last item\nlist_1.pop()\nprint(list_1)\n\n# Remove the item at a specific position\nlist_1.pop(1)\nprint(list_1)\n\n# Remove the specified item\nlist_1.remove('banana')\nprint(list_1)\n\n# Clear the list\nlist_1.clear()\nprint(list_1)\n\n# Delete the list\ndel list_1\n\n# Join two lists\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = ['grape','mango']\nlist_1.extend(list_2)\nprint(list_1)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1.copy()\nprint(list_2)\n\n# Sort a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_1.sort()\nprint(list_1)\n\n# Reverse a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_1.reverse()\nprint(list_1)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1\nprint(list_2)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1[:]\nprint(list_2)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1.copy()\nprint(list_2)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1.copy()\nprint(list_2)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1.copy()\nprint(list_2)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1.copy()\nprint(list_2)\n\n# Copy a list\nlist_1 = ['apple', 'banana', 'cherry']\nlist_2 = list_1.copy()\n"}
{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,4]) == False\nassert odd_position([2,1,4,3,6,7,6,5]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6,7,6,1]) == False\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,5]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6,7,6,1]) == False\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,5]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6,7,6,1]) == False\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,5]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6,7,6,1]) == False\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,5]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6,7,6,1]) == False\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,5]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6"}
{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\ndef find_sum(lst):\n    sum = 0\n    for i in lst:\n        if lst.count(i) == 1:\n            sum += i\n    return sum\n\nprint(find_sum([1,2,3,1,1,4,5,6]))\n/python/python_basics/03_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are used to store data.\n# Variables are declared using the equal sign (=)\n\n# Example\n\nx = 5\ny = \"John\"\nprint(x)\nprint(y)\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\nx = 4 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)\n\n# Variable names are case-sensitive.\n\na = 4\nA = \"Sally\"\nprint(a)\nprint(A)\n\n# Variable names can be short but descriptive, for example:\n\nmyvar = 5\nmy_var = 5\n_my_var = 5\nmyVar = 5\nMYVAR = 5\nmyvar2 = 5\n\n# Variable names cannot start with a number.\n\n# 2myvar = 5\n\n# Variable names cannot contain spaces.\n\n# my var = 5\n\n# Variable names are case-sensitive.\n\nmyvar = 5\nMYVAR = 10\n\nprint(myvar)\nprint(MYVAR)\n\n# Variable names cannot be any of the following words:\n\n# and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, while, with, yield\n\n# Variable names can contain alphanumeric characters and underscores (a-z, A-Z, 0-9, _).\n\nmy_var = 5\nmy_var2 = \"John\"\nmy_var3 = \"John\"\n\n# Variable names cannot contain special characters.\n\n# my-var = 5\n\n# Variable names cannot contain spaces.\n\n# my var = 5\n\n# Variable names cannot start with a number.\n\n# 2myvar = 5\n\n# Variable names are case-sensitive.\n\nmyvar = 4\nMYVAR = 10\n\nprint(myvar)\nprint(MYVAR)\n\n# Variable names cannot be any of the following words:\n\n# and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, while, with, yield\n\n# Variable names can contain alphanumeric characters and underscores (a-z, A-Z, 0-9, _).\n\nmy_var = 5\nmy_var2 = \"John\"\nmy_var3 = \"John\"\n\n# Variable names cannot contain special characters.\n\n# my-var = 5\n\n# Variable names cannot contain spaces.\n\n# my var = 5\n\n# Variable names cannot start with a number.\n\n# 2myvar = 5\n\n# Variable names are case-sensitive.\n\nmyvar = 4\nMYVAR = 10\n\nprint(myvar)\nprint(MYVAR)\n\n# Variable names cannot be any of the following words:\n\n# and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, while, with, yield\n\n# Variable names can contain alphanumeric characters and underscores (a-z, A-"}
{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append([lst[i]])\n        elif lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result\n\nprint(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n    \"\"\"\n    :param nums: list\n    :return: int\n    \"\"\"\n    return 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\nprint(single_number([4,1,2,1,2]))\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    :param s: str\n    :return: bool\n    \"\"\"\n    s = s.lower()\n    s = ''.join(filter(str.isalnum, s))\n    return s == s[::-1]\n\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))\nprint(is_palindrome(\"race a car\"))\n/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_depth(root):\n    \"\"\"\n    :param root: TreeNode\n    :return: int\n    \"\"\"\n    if root is None:\n        return 0\n    return max(max_depth(root.left), max_depth(root.right)) + 1\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\nprint(max_depth(root))\n/python/leetcode/easy/110_balanced_binary_tree.py\n\"\"\"\nGiven a binary tree, determine if it is height-balanced.\n\nFor this problem, a height-balanced binary tree is defined as:\n\na binary tree in which the depth of the two subtrees of every node"}
{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\ndef find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]))\n/python/leetcode/easy/1002_find_common_characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\nExample 1:\n\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\nExample 2:\n\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\nclass Solution:\n    def commonChars(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(A[0])):\n            char = A[0][i]\n            count = 0\n            for j in range(len(A)):\n                if char in A[j]:\n                    count += 1\n            if count == len(A):\n                result.append(char)\n        return result\n\nprint(Solution().commonChars([\"bella\",\"label\",\"roller\"]))\n/python/leetcode/easy/1009_complement_of_base_10_integer.py\n\"\"\"\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n\n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\nclass Solution:\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 1\n        binary = bin(N)[2:]\n        result = \"\"\n        for i in range(len(binary)):\n            if binary[i] == \"0\":\n                result += \"1\"\n            else:\n                result += \"0\"\n        return int(result, 2)\n\nprint(Solution().bitwiseComplement(5))\n/python/leetcode/easy/1013_partition_"}
{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n\ndef count_divisors(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\nprint(count_divisors(10))\n/python_basics/python_basic_1_exercise_12.py\n\"\"\"\nWrite a python function to check whether the given number is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-12.php\nassert is_even(10)\n\"\"\"\n\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_even(10))\n/python_basics/python_basic_1_exercise_13.py\n\"\"\"\nWrite a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\nassert is_prime(10)\n\"\"\"\n\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\nprint(is_prime(10))\n/python_basics/python_basic_1_exercise_16.py\n\"\"\"\nWrite a python function to check whether the given number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\nassert is_perfect(6)\n\"\"\"\n\ndef is_perfect(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    if sum == num:\n        return True\n    else:\n        return False\n\nprint(is_perfect(6))\n/python_basics/python_basic_1_exercise_15.py\n\"\"\"\nWrite a python function to check whether the given number is amstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\nassert is_amstrong(153)\n\"\"\"\n\ndef is_amstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == num:\n        return True\n    else:\n        return False\n\nprint(is_amstrong(153))\n/python_basics/python_basic_1_exercise_14.py\n\"\"\"\nWrite a python function to check whether the given number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\nassert is_armstrong(153)\n\"\"\"\n\ndef is_armstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == num:\n        return True\n    else:\n        return False\n\nprint(is_armstrong(153))\n/python_basics/python_basic_1_exercise_23.py\n\"\"\"\nWrite a python function to check whether the given number is strong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\nassert is_strong(145)\n\"\"\"\n\ndef is_strong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += factorial(digit)\n        temp //= 10\n    if sum == num:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\ndef odd_length_sum(arr):\n    pass\n\n# Test Cases\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,3,4]) == 20\nassert odd_length_sum([1,2,3,4,5]) == 35\nassert odd_length_sum([1,2,3,4,5,6]) == 42\nassert odd_length_sum([1,2,3,4,5,6,7]) == 52\nassert odd_length_sum([1,2,3,4,5,6,7,8]) == 66\nassert odd_length_sum([1,2,3,4,5,6,7,8,9]) == 84\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 108\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11]) == 138\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12]) == 174\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 216\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 264\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 320\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 384\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 456\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 540\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 630\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 730\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 840\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 966\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,"}
{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n\n\"\"\"\nWrite a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert hsv_to_rgb(0, 0.0, 100.0)==(255, 255, 255)\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    h60 = h / 60.0\n    h60f = math.floor(h60)\n    hi = int(h60f) % 6\n    f = h60 - h60f\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if hi == 0:\n        r, g, b = v, t, p\n    elif hi == 1:\n        r, g, b = q, v, p\n    elif hi == 2:\n        r, g, b = p, v, t\n    elif hi == 3:\n        r, g, b = p, q, v\n    elif hi == 4:\n        r, g, b = t, p, v\n    elif hi == 5:\n        r, g, b = v, p, q\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    return r, g, b\n\n\"\"\"\nWrite a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert hsv_to_rgb(0, 0.0, 100.0)==(255, 255, 255)\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    h60 = h / 60.0\n    h60f = math.floor(h60)\n    hi = int(h60f) % 6\n    f = h60 - h60f\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if hi == 0:\n        r, g, b = v, t, p\n    elif hi == 1:\n        r, g, b = q, v, p\n    elif hi == 2:\n        r, g, b = p, v, t\n    elif hi == 3:\n        r, g, b = p, q, v\n    elif hi == 4:\n        r, g,"}
{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef mul_even_odd(lst):\n    even = 0\n    odd = 0\n    for i in lst:\n        if i%2==0:\n            even = even*i\n        else:\n            odd = odd*i\n    return even*odd\n\nprint(mul_even_odd([1,3,5,7,4,1,6,8]))\n/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is a way to create a list in a single line.\n\"\"\"\n\n# Example 1\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    lst.append(i)\nprint(lst)\n\n# With list comprehension\nlst = [i for i in range(1,11)]\nprint(lst)\n\n# Example 2\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\nprint(lst)\n\n# With list comprehension\nlst = [i for i in range(1,11) if i%2==0]\nprint(lst)\n\n# Example 3\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 4\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 5\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 6\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 7\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 8\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 9\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%2==0:\n        lst.append(i)\n    else:\n        lst.append(i*2)\nprint(lst)\n\n# With list comprehension\nlst = [i if i%2==0 else i*2 for i in range(1,11)]\nprint(lst)\n\n# Example 10\n\n# Without list comprehension\nlst = []\nfor i in range(1,11):\n    if i%"}
{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\ndef tuple_str_int(s):\n    return tuple(map(int, s[1:-1].split(', ')))\n\nprint(tuple_str_int(\"(7, 8, 9)\"))\n/python/leetcode/1001-1100/1007. Minimum Domino Rotations For Equal Row.py\n\"\"\"\n1007. Minimum Domino Rotations For Equal Row\nMedium\n\nIn a row of dominoes, A[i] and B[i] represent the top and bottom halves of the ith domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\n\nWe may rotate the ith domino, so that A[i] and B[i] swap values.\n\nReturn the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.\n\nIf it cannot be done, return -1.\n\n \n\nExample 1:\n\nInput: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]\nOutput: 2\nExplanation: \nThe first figure represents the dominoes as given by A and B: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.\nExample 2:\n\nInput: A = [3,5,1,2,3], B = [3,6,3,3,4]\nOutput: -1\nExplanation: \nIn this case, it is not possible to rotate the dominoes to make one row of values equal.\n \n\nNote:\n\n1 <= A[i], B[i] <= 6\n2 <= A.length == B.length <= 20000\n\"\"\"\n\nclass Solution:\n    def minDominoRotations(self, A: List[int], B: List[int]) -> int:\n        n = len(A)\n        if A[0] == B[0]:\n            return min(self.count(A, B, A[0]), self.count(A, B, B[0]))\n        else:\n            return min(self.count(A, B, A[0]), self.count(A, B, B[0]), self.count(A, B, A[0], B[0]))\n        \n    def count(self, A, B, x, y=None):\n        if y is None:\n            y = x\n        count = 0\n        for i in range(len(A)):\n            if A[i]!= x and B[i]!= x and A[i]!= y and B[i]!= y:\n                return -1\n            if A[i]!= x and B[i]!= y:\n                count += 1\n        return count\n/python/leetcode/1001-1100/1003. Check If Word Is Valid After Substitutions.py\n\"\"\"\n1003. Check If Word Is Valid After Substitutions\nMedium\n\nGiven a string s, determine if it is valid.\n\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\n\nInsert string \"abc\" into any position in t.  More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright.  Note that tleft and tright may be empty.\n\nReturn true if s is a valid string, otherwise, return false.\n\n \n\nExample 1:\n\nInput: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.\nExample 2:\n\nInput: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.\nExample 3:\n\nInput: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.\nExample 4:\n\nInput: s = \"cab"}
{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\ndef right_insertion(lst,val):\n    if val<lst[0]:\n        return 0\n    if val>lst[-1]:\n        return len(lst)\n    for i in range(len(lst)):\n        if val<lst[i]:\n            return i\n    return len(lst)\n\n\"\"\"\nWrite a function to find the maximum value in a list of integers.\nassert max_value([1,2,3,4,5])==5\n\"\"\"\ndef max_value(lst):\n    max_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]>max_val:\n            max_val=lst[i]\n    return max_val\n\n\"\"\"\nWrite a function to find the minimum value in a list of integers.\nassert min_value([1,2,3,4,5])==1\n\"\"\"\ndef min_value(lst):\n    min_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]<min_val:\n            min_val=lst[i]\n    return min_val\n\n\"\"\"\nWrite a function to find the maximum value in a list of integers.\nassert max_value([1,2,3,4,5])==5\n\"\"\"\ndef max_value(lst):\n    max_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]>max_val:\n            max_val=lst[i]\n    return max_val\n\n\"\"\"\nWrite a function to find the minimum value in a list of integers.\nassert min_value([1,2,3,4,5])==1\n\"\"\"\ndef min_value(lst):\n    min_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]<min_val:\n            min_val=lst[i]\n    return min_val\n\n\"\"\"\nWrite a function to find the maximum value in a list of integers.\nassert max_value([1,2,3,4,5])==5\n\"\"\"\ndef max_value(lst):\n    max_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]>max_val:\n            max_val=lst[i]\n    return max_val\n\n\"\"\"\nWrite a function to find the minimum value in a list of integers.\nassert min_value([1,2,3,4,5])==1\n\"\"\"\ndef min_value(lst):\n    min_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]<min_val:\n            min_val=lst[i]\n    return min_val\n\n\"\"\"\nWrite a function to find the maximum value in a list of integers.\nassert max_value([1,2,3,4,5])==5\n\"\"\"\ndef max_value(lst):\n    max_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]>max_val:\n            max_val=lst[i]\n    return max_val\n\n\"\"\"\nWrite a function to find the minimum value in a list of integers.\nassert min_value([1,2,3,4,5])==1\n\"\"\"\ndef min_value(lst):\n    min_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]<min_val:\n            min_val=lst[i]\n    return min_val\n\n\"\"\"\nWrite a function to find the maximum value in a list of integers.\nassert max_value([1,2,3,4,5])==5\n\"\"\"\ndef max_value(lst):\n    max_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]>max_val:\n            max_val=lst[i]\n    return max_val\n\n\"\"\"\nWrite a function to find the minimum value in a list of integers.\nassert min_value([1,2,3,4,5])==1\n\"\"\"\ndef min_value(lst):\n    min_val=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]<min_val:\n            min_val=lst[i]\n    return min_val\n\n\"\"\""}
{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\ndef text_match_three(text):\n    return text.find(\"a\")!= -1 and text.find(\"b\", text.find(\"a\") + 1)!= -1 and text.find(\"b\", text.find(\"b\") + 1)!= -1\n\nprint(text_match_three(\"abc\"))\nprint(text_match_three(\"abbc\"))\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_three(\"abbbbc\"))\nprint(text_match_"}
{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\ndef new_tuple(list, string):\n    return tuple(list + [string])\n\nprint(new_tuple([\"WEB\", \"is\"], \"best\"))\n/python/00001-00100/00044-find-the-difference.py\n\"\"\"\nGiven two strings s and t which consist of only lowercase letters.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nFind the letter that was added in t.\n\nExample:\nInput:\ns = \"abcd\"\nt = \"abcde\"\n\nOutput:\ne\n\nExplanation:\n'e' is the letter that was added.\n\"\"\"\n\ndef find_the_difference(s, t):\n    return list(set(t) - set(s))[0]\n\nprint(find_the_difference(\"abcd\", \"abcde\"))\n/python/00001-00100/00021-merge-two-sorted-lists.py\n\"\"\"\nMerge two sorted linked lists and return it as a new list.\nThe new list should be made by splicing together the nodes of the first two lists.\n\nExample:\nInput: 1->2->4, 1->3->4\nOutput: 1->1->2->3->4->4\n\"\"\"\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef merge_two_sorted_lists(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = merge_two_sorted_lists(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge_two_sorted_lists(l1, l2.next)\n        return l2\n\nl1 = ListNode(1)\nl1.next = ListNode(2)\nl1.next.next = ListNode(4)\n\nl2 = ListNode(1)\nl2.next = ListNode(3)\nl2.next.next = ListNode(4)\n\nprint(merge_two_sorted_lists(l1, l2))\n/python/00001-00100/00014-longest-common-prefix.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\nNote:\nAll given inputs are in lowercase letters a-z.\n\"\"\"\n\ndef longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n            if len(prefix) == 0:\n                return \"\"\n    return prefix\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n/python/00001-00100/00066-plus-one.py\n\"\"\"\nGiven a non-empty array of digits representing a non-negative integer, plus one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n\nExample 1:\nInput: [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n\nExample 2:\nInput: [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\"\"\"\n\ndef plus_one("}
{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n\ndef even_position(lst):\n    for i in range(0,len(lst),2):\n        if lst[i]%2!= 0:\n            return False\n    return True\n\nprint(even_position([3,2,1]))\nprint(even_position([2,4,6,8]))\nprint(even_position([2,4,6,7]))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to check whether a given number is prime or not.\nassert is_prime(7) == True\nassert is_prime(10) == False\n\"\"\"\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n\nprint(is_prime(7))\nprint(is_prime(10))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to check whether a given number is palindrome or not.\nassert is_palindrome(121) == True\nassert is_palindrome(123) == False\n\"\"\"\n\ndef is_palindrome(num):\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if num_str[i]!= num_str[-i-1]:\n            return False\n    return True\n\nprint(is_palindrome(121))\nprint(is_palindrome(123))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to check whether a given number is armstrong number or not.\nassert is_armstrong(153) == True\nassert is_armstrong(123) == False\n\"\"\"\n\ndef is_armstrong(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    sum = 0\n    for i in range(num_len):\n        sum += int(num_str[i])**num_len\n    if sum == num:\n        return True\n    return False\n\nprint(is_armstrong(153))\nprint(is_armstrong(123))\n"}
{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\ndef remove_nested(tup):\n    \"\"\"\n    >>> remove_nested((1, 5, 7, (4, 6), 10))\n    (1, 5, 7, 10)\n    \"\"\"\n    return tuple(item for item in tup if not isinstance(item, tuple))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_practice/python_practice_1/python_practice_1_1.py\n\"\"\"\nWrite a function that takes a string and returns a string with the words reversed.\nassert reverse_words(\"hello world\") == \"world hello\"\n\"\"\"\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/python_practice/python_practice_1/python_practice_1_2.py\n\"\"\"\nWrite a function that takes a string and returns a string with the words reversed.\nassert reverse_words(\"hello world\") == \"world hello\"\n\"\"\"\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'\n    \"\"\"\n    return''.join(string.split()[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\ndef reverse_words(string):\n    \"\"\"\n    >>> reverse_words(\"hello world\")\n    'world hello'"}
{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\ndef count_list(lists):\n    count = 0\n    for i in lists:\n        if type(i) == list:\n            count += 1\n    return count\n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25]]) == 5\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25], [27, 29, 31, 33, 35]]) == 6\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25], [27, 29, 31, 33, 35], [37, 39, 41, 43, 45, 47]]) == 7\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25], [27, 29, 31, 33, 35], [37, 39, 41, 43, 45, 47], [49, 51, 53, 55, 57, 59, 61]]) == 8\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25], [27, 29, 31, 33, 35], [37, 39, 41, 43, 45, 47], [49, 51, 53, 55, 57, 59, 61], [63, 65, 67, 69, 71, 73, 75, 77]]) == 9\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25], [27, 29, 31, 33, 35], [37, 39, 41, 43, 45, 47], [49, 51, 53, 55, 57, 59, 61], [63, 65, 67, 69, 71, 73, 75, 77], [79, 81, 83, 85, 87, 89, 91, 93, 95]]) == 10\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25], [27, 29, 31, 33, 35], [37, 39, 41, 43, 45, 47], [49, 51, 53, 55, 57, 59, 61], [63, 65, 67, 69, 71, 73, 75, 77], [79, 81, 83, 85, 87,"}
{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\ndef last(arr,x):\n    if len(arr) == 0:\n        return -1\n    if arr[len(arr)-1] == x:\n        return len(arr)-1\n    if arr[0] == x:\n        return 0\n    if arr[0] > x:\n        return -1\n    if arr[len(arr)-1] < x:\n        return -1\n    if arr[len(arr)-1] > x:\n        return last(arr[0:len(arr)-1],x)\n\nprint(last([1,2,3],1))\nprint(last([1,2,3],2))\nprint(last([1,2,3],3))\nprint(last([1,2,3],4))\nprint(last([1,2,3],0))\nprint(last([1,2,3],5))\nprint(last([1,2,3],-1))\nprint(last([1,2,3],-2))\nprint(last([1,2,3],-3))\nprint(last([1,2,3],-4))\nprint(last([1,2,3],-5))\nprint(last([1,2,3],-6))\nprint(last([1,2,3],-7))\nprint(last([1,2,3],-8))\nprint(last([1,2,3],-9))\nprint(last([1,2,3],-10))\nprint(last([1,2,3],-11))\nprint(last([1,2,3],-12))\nprint(last([1,2,3],-13))\nprint(last([1,2,3],-14))\nprint(last([1,2,3],-15))\nprint(last([1,2,3],-16))\nprint(last([1,2,3],-17))\nprint(last([1,2,3],-18))\nprint(last([1,2,3],-19))\nprint(last([1,2,3],-20))\nprint(last([1,2,3],-21))\nprint(last([1,2,3],-22))\nprint(last([1,2,3],-23))\nprint(last([1,2,3],-24))\nprint(last([1,2,3],-25))\nprint(last([1,2,3],-26))\nprint(last([1,2,3],-27))\nprint(last([1,2,3],-28))\nprint(last([1,2,3],-29))\nprint(last([1,2,3],-30))\nprint(last([1,2,3],-31))\nprint(last([1,2,3],-32))\nprint(last([1,2,3],-33))\nprint(last([1,2,3],-34))\nprint(last([1,2,3],-35))\nprint(last([1,2,3],-36))\nprint(last([1,2,3],-37))\nprint(last([1,2,3],-38))\nprint(last([1,2,3],-39))\nprint(last([1,2,3],-40))\nprint(last([1,2,3],-41))\nprint(last([1,2,3],-42))\nprint(last([1,2,3],-43))\nprint(last([1,2,3],-44))\nprint(last([1,2,3],-45))\nprint(last([1,2,3],-46))\nprint(last([1,2,3],-47))\nprint(last([1,2,3],-48))\nprint(last([1,2,3],-49))\nprint(last([1,2,3],-50))\nprint(last([1,2,3],-51))\nprint(last([1,2,3],-52))\nprint(last([1,2,"}
{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith a minimum of 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3,}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith a maximum of 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{,3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\"a.*b{3}$\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith exactly 3 'b's.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\ndef text_starta_endb(text):\n    return re.search(r\""}
{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n/week-01/day-04/03-draw-square.py\n# create a function that draws a square like the following:\n#\n# %%%%%%\n# %    %\n# %    %\n# %    %\n# %    %\n# %%%%%%\n#\n# The square should have as many lines as line_count is\n\ndef draw_square(line_count):\n    for i in range(line_count):\n        if i == 0 or i == line_count - 1:\n            print(\"%\" * line_count)\n        else:\n            print(\"%\" + \" \" * (line_count - 2) + \"%\")\n\ndraw_square(5)\n/week-01/day-04/02-draw-triangle.py\n# create a function that draws a triangle like the following:\n#\n# *\n# **\n# ***\n# ****\n#\n# The triangle should have as many lines as line_count is\n\ndef draw_triangle(line_count):\n    for i in range(line_count):\n        print(\"*\" * (i + 1))\n\ndraw_triangle(5)\n/week-01/day-04/01-draw-line.py\n# create a function that draws a single line and takes 2 parameters:\n#\n# - the number of lines to draw (parameter named \"line_count\")\n# - the width of the line (parameter named \"line_width\")\n#\n# The line should be drawn with the following characters:\n# - \" \" (space) - for the line width minus 2\n# - \"x\" (x) - for the remaining 2 characters\n#\n# The line should only have as many \"x\" as the value of line_width\n#\n# You can call the function like:\n# draw_line(5, 3)\n#\n# It should print the following on the output:\n# xxxx\n# xxxx\n# xxxx\n# xxxx\n# xxxx\n\ndef draw_line(line_count, line_width):\n    for i in range(line_count):\n        print(\"x\" * line_width)\n\ndraw_line(5, 3)\n/week-01/day-04/04-draw-diamond.py\n# create a function that draws a diamond like the following:\n#\n#\n#    *\n#   ***\n#  *****\n# *******\n#  *****\n#   ***\n#    *\n#\n# The diamond should have as many lines as line_count is\n\ndef draw_diamond(line_count):\n    for i in range(line_count):\n        if i < line_count / 2:\n            print(\" \" * (line_count / 2 - i) + \"*\" * (2 * i + 1))\n        else:\n            print(\" \" * (i - line_count / 2 + 1) + \"*\" * (2 * (line_count - i) - 1))\n\ndraw_diamond(5)\n/week-01/day-04/05-draw-pyramid.py\n# create a function that draws a pyramid like the following:\n#\n#\n#    *\n#   ***\n#  *****\n# *******\n#  *****\n#   ***\n#    *\n#\n# The pyramid should have as many lines as line_count is\n\ndef draw_pyramid(line_count):\n    for i in range(line_count):\n        if i < line_count / 2:\n            print(\" \" * (line_count / 2 - i) + \"*\" * (2 * i + 1))\n        else:\n            print(\" \" * (i - line_count / 2 + 1) + \"*\" * (2 * (line_count - i) - 1))\n\ndraw_pyramid(5)\n/week-01/day-04/06-draw-triangle.py\n"}
{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            sum += i\n    return sum\n\nprint(sum_in_range(2,5))\n/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\nassert sum_in_range(2,5) == 6\n\"\"\"\n\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n\nprint(sum_in_range(2,5))\n/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\nassert sum_in_range(2,5) == 6\n\"\"\"\n\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n\nprint(sum_in_range(2,5))\n\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            sum += i\n    return sum\n\nprint(sum_in_range(2,5))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\nassert sum_in_range(2,5) == 14\n\"\"\"\n\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        sum += i\n    return sum\n\nprint(sum_in_range(2,5))\n/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            sum += i\n    return sum\n\nprint(sum_in_range(2,5))\n"}
{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\ndef _sum(arr):\n    return sum(arr)\n\nassert _sum([1, 2, 3]) == 6\n/python/0001_hello_world.py\n\"\"\"\nWrite a python function to print \"Hello World\"\n\"\"\"\n\ndef hello_world():\n    print(\"Hello World\")\n\nhello_world()\n/python/0002_sum_of_array.py\n\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\ndef _sum(arr):\n    return sum(arr)\n\nassert _sum([1, 2, 3]) == 6\n/python/0003_reverse_string.py\n\"\"\"\nWrite a python function to reverse a string.\nassert _reverse(\"Hello World\") == \"dlroW olleH\"\n\"\"\"\n\ndef _reverse(string):\n    return string[::-1]\n\nassert _reverse(\"Hello World\") == \"dlroW olleH\"\n/python/0004_reverse_array.py\n\"\"\"\nWrite a python function to reverse an array.\nassert _reverse([1, 2, 3]) == [3, 2, 1]\n\"\"\"\n\ndef _reverse(arr):\n    return arr[::-1]\n\nassert _reverse([1, 2, 3]) == [3, 2, 1]\n/python/0005_reverse_words.py\n\"\"\"\nWrite a python function to reverse the words in a string.\nassert _reverse_words(\"Hello World\") == \"World Hello\"\n\"\"\"\n\ndef _reverse_words(string):\n    return \" \".join(string.split()[::-1])\n\nassert _reverse_words(\"Hello World\") == \"World Hello\"\n/python/0006_reverse_words_in_place.py\n\"\"\"\nWrite a python function to reverse the words in a string in place.\nassert _reverse_words_in_place(\"Hello World\") == \"World Hello\"\n\"\"\"\n\ndef _reverse_words_in_place(string):\n    return \" \".join(string.split()[::-1])\n\nassert _reverse_words_in_place(\"Hello World\") == \"World Hello\"\n/python/0007_reverse_words_in_place_2.py\n\"\"\"\nWrite a python function to reverse the words in a string in place.\nassert _reverse_words_in_place_2(\"Hello World\") == \"World Hello\"\n\"\"\"\n\ndef _reverse_words_in_place_2(string):\n    return \" \".join(string.split()[::-1])\n\nassert _reverse_words_in_place_2(\"Hello World\") == \"World Hello\"\n/python/0008_reverse_words_in_place_3.py\n\"\"\"\nWrite a python function to reverse the words in a string in place.\nassert _reverse_words_in_place_3(\"Hello World\") == \"World Hello\"\n\"\"\"\n\ndef _reverse_words_in_place_3(string):\n    return \" \".join(string.split()[::-1])\n\nassert _reverse_words_in_place_3(\"Hello World\") == \"World Hello\"\n/python/0009_reverse_words_in_place_4.py\n\"\"\"\nWrite a python function to reverse the words in a string in place.\nassert _reverse_words_in_place_4(\"Hello World\") == \"World Hello\"\n\"\"\"\n\ndef _reverse_words_in_place_4(string):\n    return \" \".join(string.split()[::-1])\n\nassert _reverse_words_in_place_4(\"Hello World\") == \"World Hello\"\n/python/0010_reverse_words_in_place_5.py\n\"\"\"\nWrite a python function to reverse the words in a string in place.\nassert _reverse_words_in_place_5(\"Hello World\") == \"World Hello\"\n\"\"\"\n\ndef _reverse_words_in_place_5(string):\n    return \" \".join(string.split()[::-1])\n\nassert _reverse_words_in_place_5(\"Hello World\") == \"World Hello\"\n/python/0011_"}
{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\ndef left_rotate(num, d):\n    return (num << d) | (num >> (32 - d))\n\nprint(left_rotate(16,2))\n/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val!= right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n/python/leetcode/102_binary_tree_level_order_traversal.py\n\"\"\"\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if root is None:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node"}
{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return string.replace(' ','')\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return ''.join(string.split())\n\nprint(remove_all_spaces('python  program'))\n\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\""}
{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal("}
{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\ndef is_perfect_square(n):\n    # TODO: implement this function\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/000_python_basics/000_python_basics.py\n\"\"\"\nPython Basics\n\nThis is a collection of exercises to get you familiar with Python.\n\nTo run the exercises, you can either run the code in a Python interpreter or in a Jupyter notebook.\n\nTo run the code in a Jupyter notebook, you can either run the code in a cell or use the \"Run All\" button.\n\nTo run the code in a Python interpreter, you can either run the code in a cell or use the \"Run\" button.\n\nTo run the code in a cell, you can either press \"Shift + Enter\" or use the \"Run\" button.\n\nTo use the \"Run\" button, you can either click on the button or press \"Ctrl + Enter\".\n\nTo use the \"Run All\" button, you can either click on the button or press \"Shift + Ctrl + Enter\".\n\n\"\"\"\n\n# TODO: Write a function that takes a list of numbers and returns the sum of the numbers.\ndef sum_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the average of the numbers.\ndef average_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the minimum of the numbers.\ndef minimum_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the maximum of the numbers.\ndef maximum_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the median of the numbers.\ndef median_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the mode of the numbers.\ndef mode_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the range of the numbers.\ndef range_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the variance of the numbers.\ndef variance_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the standard deviation of the numbers.\ndef standard_deviation_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the product of the numbers.\ndef product_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the factorial of the numbers.\ndef factorial_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the sum of the squares of the numbers.\ndef sum_of_squares_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the sum of the cubes of the numbers.\ndef sum_of_cubes_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the sum of the fourth powers of the numbers.\ndef sum_of_fourth_powers_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the sum of the fifth powers of the numbers.\ndef sum_of_fifth_powers_of_numbers(numbers):\n    # TODO: implement this function\n    pass\n\n# TODO: Write a function that takes a list of numbers and returns the sum of the sixth powers of the numbers.\ndef sum_of_sixth_powers_"}
{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\ndef is_product_even(list):\n    product = 1\n    for i in list:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n\nassert is_product_even([1,2,3]) == False\nassert is_product_even([1,2,4]) == True\nassert is_product_even([1,2,3,4]) == False\nassert is_product_even([1,2,3,4,5]) == True\nassert is_product_even([1,2,3,4,5,6]) == False\nassert is_product_even([1,2,3,4,5,6,7]) == True\nassert is_product_even([1,2,3,4,5,6,7,8]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == False\nassert is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == True\nassert is_product_even([1,2,3,4,5,6,7,8,9,"}
{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\ndef max_sum_list(list_of_lists):\n    max_sum = 0\n    max_list = []\n    for list in list_of_lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n    return max_list\n\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))\n/week-02/day-03/02-draw-square.py\n# create a function that draws a square like the following:\n# %%%%%%\n# %    %\n# %    %\n# %    %\n# %    %\n# %%%%%%\n\ndef draw_square(size):\n    for i in range(size):\n        if i == 0 or i == size - 1:\n            print(\"%\" * size)\n        else:\n            print(\"%\" + \" \" * (size - 2) + \"%\")\n\ndraw_square(5)\n/week-03/day-02/02-count-lines.py\n\"\"\"\nWrite a function that takes a filename as string,\nthen returns the number of lines the file contains.\nIt should return zero if it can't open the file, and\nshould not raise any error.\n\"\"\"\n\ndef count_lines(filename):\n    try:\n        file = open(filename, \"r\")\n        lines = file.readlines()\n        file.close()\n        return len(lines)\n    except:\n        return 0\n\nprint(count_lines(\"02-count-lines.py\"))\n/week-02/day-03/03-draw-triangle.py\n# create a function that draws a triangle like the following:\n#\n# *\n# **\n# ***\n# ****\n# *****\n#\n# The triangle should have as many lines as lineCount is\n\ndef draw_triangle(line_count):\n    for i in range(line_count):\n        print(\"*\" * (i + 1))\n\ndraw_triangle(5)\n/week-02/day-03/01-draw-diamond.py\n# create a function that draws a diamond like the following:\n#\n#    *\n#   ***\n#  *****\n# *******\n#  *****\n#   ***\n#    *\n#\n# The diamond should have as many lines as lineCount is\n\ndef draw_diamond(line_count):\n    for i in range(line_count):\n        if i < line_count / 2:\n            print(\" \" * (line_count / 2 - i - 1) + \"*\" * (2 * i + 1))\n        else:\n            print(\" \" * (i - line_count / 2 + 1) + \"*\" * (2 * (line_count - i) - 1))\n\ndraw_diamond(5)\n/week-02/day-03/04-draw-pyramid.py\n# create a function that draws a pyramid like the following:\n#\n#\n#    *\n#   ***\n#  *****\n# *******\n#\n# The pyramid should have as many lines as lineCount is\n\ndef draw_pyramid(line_count):\n    for i in range(line_count):\n        print(\" \" * (line_count - i - 1) + \"*\" * (2 * i + 1))\n\ndraw_pyramid(5)\n/week-02/day-03/05-draw-checkerboard.py\n# create a function that draws a chess table like the following\n# without using any loop\n# % % % %\n#  % % % %\n# % % % %\n#  % % % %\n# % % % %\n#  % % % %\n# % % % %\n#  % % % %\n\ndef draw_checkerboard(size):\n    for i in range(size):\n        if i % 2 == 0:\n            print(\"%\" + \" \" * (size - 1) + \"%"}
{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\ndef max_run_uppercase(string):\n    \"\"\"\n    >>> max_run_uppercase('GeMKSForGERksISBESt')\n    5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    return max_run\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/week_02/day}
{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\ndef first_odd(list):\n    for i in list:\n        if i % 2!= 0:\n            return i\n\nprint(first_odd([1,3,5]))\n/python/python_fundamentals/for_loop_basic_1.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\n\nfor i in range(0, 151):\n    print(i)\n\n\"\"\"\nBasic - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\n\nfor i in range(5, 1001, 5):\n    print(i)\n\n\"\"\"\nBasic - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\n\nfor i in range(1, 101):\n    if i % 5 == 0 and i % 10 == 0:\n        print(\"Coding Dojo\")\n    elif i % 5 == 0:\n        print(\"Coding\")\n    else:\n        print(i)\n\n\"\"\"\nBasic - Print the sum of all the values in the list: a = [1, 2, 5, 10, 255, 3]\n\"\"\"\n\na = [1, 2, 5, 10, 255, 3]\n\nsum = 0\n\nfor i in a:\n    sum += i\n\nprint(sum)\n\n\"\"\"\nBasic - Print the average of the values in the list: a = [1, 2, 5, 10, 255, 3]\n\"\"\"\n\na = [1, 2, 5, 10, 255, 3]\n\nsum = 0\n\nfor i in a:\n    sum += i\n\nprint(sum / len(a))\n/python/python_fundamentals/coin_tosses.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ncoin_tosses()\n/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nModify the previous program to that 1,000 users will have the chance to try to guess the number of heads.\n\"\"\"\n\nimport random\n\ndef coin_tosses():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n\ndef guess_heads():\n    heads = 0\n    tails = 0\n    for i in range(1, 5001):\n        toss = random.randint(0, 1)\n        if toss == 0:\n            heads += 1\n        else:\n            tails += 1\n    print(\"Heads: \" + str(heads))\n    print(\"Tails: \" + str(tails))\n    guess = int(input(\"Guess the number of heads: \"))\n    if guess == heads:\n        print(\"You guessed correctly!\")\n    else:\n        print(\"You guessed incorrectly.\")\n\nguess_heads()\n/python/python_fundamentals/coin_tosses_3.py\n\"\"\"\nMake a function that will take in a number of coins and then simulate tossing those coins as many times as you like.\nYour function should take in a number of coins, and then return the percentage of heads vs tails.\n\"\"\"\n\nimport random\n\ndef coin_tosses(num_coins):\n    heads = 0\n    t"}
{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\ndef check_K(tup, k):\n    for i in tup:\n        if i == k:\n            return True\n    return False\n\nprint(check_K((10, 4, 5, 6, 8), 6))\n/python_basics/01_python_basics/02_variables_and_data_types/01_variables.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\n\"\"\"\n\nname = input(\"What is your name? \")\nprint(\"Hello, \" + name)\n/python_basics/01_python_basics/02_variables_and_data_types/03_data_types.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\n\"\"\"\n\nname = input(\"What is your name? \")\nprint(\"Hello, \" + name)\n\n# Write a program that asks the user for their name and greets them with their name.\n# If the name is longer than 4 characters, print \"Hello, \" + name.\n# If the name is shorter than 4 characters, print \"Hello, \" + name + \"!\".\n\nname = input(\"What is your name? \")\nif len(name) > 4:\n    print(\"Hello, \" + name)\nelse:\n    print(\"Hello, \" + name + \"!\")\n/python_basics/01_python_basics/03_conditional_statements/02_if_else.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\nIf the name is longer than 4 characters, print \"Hello, \" + name.\nIf the name is shorter than 4 characters, print \"Hello, \" + name + \"!\".\n\"\"\"\n\nname = input(\"What is your name? \")\nif len(name) > 4:\n    print(\"Hello, \" + name)\nelse:\n    print(\"Hello, \" + name + \"!\")\n\n# Write a program that asks the user for their name and greets them with their name.\n# If the name is longer than 4 characters, print \"Hello, \" + name.\n# If the name is shorter than 4 characters, print \"Hello, \" + name + \"!\".\n# If the name is exactly 4 characters long, print \"Hello, \" + name + \"!\".\n\nname = input(\"What is your name? \")\nif len(name) > 4:\n    print(\"Hello, \" + name)\nelif len(name) < 4:\n    print(\"Hello, \" + name + \"!\")\nelse:\n    print(\"Hello, \" + name + \"!\")\n/python_basics/01_python_basics/03_conditional_statements/03_if_elif_else.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\nIf the name is longer than 4 characters, print \"Hello, \" + name.\nIf the name is shorter than 4 characters, print \"Hello, \" + name + \"!\".\nIf the name is exactly 4 characters long, print \"Hello, \" + name + \"!\".\n\"\"\"\n\nname = input(\"What is your name? \")\nif len(name) > 4:\n    print(\"Hello, \" + name)\nelif len(name) < 4:\n    print(\"Hello, \" + name + \"!\")\nelse:\n    print(\"Hello, \" + name + \"!\")\n\n# Write a program that asks the user for their name and greets them with their name.\n# If the name is longer than 4 characters, print \"Hello, \" + name.\n# If the name is shorter than 4 characters, print \"Hello, \" + name + \"!\".\n# If the name is exactly 4 characters long, print \"Hello, \" + name + \"!\".\n# If the name is exactly 5 characters long, print \"Hello, \" + name + \"!\".\n\nname = input(\"What is your name? \")\nif len(name) > 4:\n    print(\"Hello, \" + name)\nelif len(name) < 4:\n    print(\"Hello, \" + name + \"!\")\nelif len(name) == 4:\n    print(\"Hello, \" + name + \"!\")\nelse:\n    print(\"Hello, \""}
{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\ndef check_smaller(tuple1, tuple2):\n    if len(tuple1)!= len(tuple2):\n        return False\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True\n\nprint(check_smaller((1, 2, 3), (2, 3, 4)))\n/python/python_basics/02_variables/02_variables.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\n\"\"\"\n\nname = input(\"What is your name? \")\nprint(\"Hello \" + name)\n/python/python_basics/04_lists/04_lists.py\n\"\"\"\nWrite a program that asks the user for a number and prints the square of that number.\n\"\"\"\n\nnumber = int(input(\"Enter a number: \"))\nprint(number ** 2)\n/python/python_basics/03_strings/03_strings.py\n\"\"\"\nWrite a program that asks the user for their name and greets them with their name.\n\"\"\"\n\nname = input(\"What is your name? \")\nprint(\"Hello \" + name)\n/python/python_basics/05_tuples/05_tuples.py\n\"\"\"\nWrite a function that takes a tuple of numbers and returns the largest number.\nassert largest_number((1, 2, 3)) == 3\n\"\"\"\n\ndef largest_number(tuple):\n    return max(tuple)\n\nprint(largest_number((1, 2, 3)))\n/python/python_basics/06_dictionaries/06_dictionaries.py\n\"\"\"\nWrite a function that takes a dictionary and returns the largest value.\nassert largest_value({'a': 1, 'b': 2, 'c': 3}) == 3\n\"\"\"\n\ndef largest_value(dictionary):\n    return max(dictionary.values())\n\nprint(largest_value({'a': 1, 'b': 2, 'c': 3}))\n/python/python_basics/07_sets/07_sets.py\n\"\"\"\nWrite a function that takes a set and returns the largest value.\nassert largest_value({1, 2, 3}) == 3\n\"\"\"\n\ndef largest_value(set):\n    return max(set)\n\nprint(largest_value({1, 2, 3}))\n/python/python_basics/08_functions/08_functions.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number.\nassert largest_number([1, 2, 3]) == 3\n\"\"\"\n\ndef largest_number(list):\n    return max(list)\n\nprint(largest_number([1, 2, 3]))\n/python/python_basics/09_conditionals/09_conditionals.py\n\"\"\"\nWrite a function that takes a number and returns whether it is even or odd.\nassert even_or_odd(2) == \"even\"\nassert even_or_odd(3) == \"odd\"\n\"\"\"\n\ndef even_or_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\nprint(even_or_odd(2))\nprint(even_or_odd(3))\n/python/python_basics/01_hello_world/01_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World!\" to the screen.\n\"\"\"\n\nprint(\"Hello World!\")\n/python/python_basics/04_lists/04_lists_2.py\n\"\"\"\nWrite a program that asks the user for a number and prints the square of that number.\n\"\"\"\n\nnumber = int(input(\"Enter a number: \"))\nprint(number ** 2)\n\n# or\n\nnumbers = [1, 2, 3]\nprint(numbers[0] ** 2)\nprint(numbers[1] ** 2)\nprint(numbers[2] ** 2)\n/python/python_basics/05_tuples/05_tuples_2.py\n\"\"\"\nWrite a function that takes a tuple of numbers and returns"}
