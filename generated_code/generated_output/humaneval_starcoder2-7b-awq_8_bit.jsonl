{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n/README.md\n# Python-for-Data-Science\n\nThis repository contains my solutions to the exercises from the [Python for Data Science](https://www.coursera.org/learn/python-for-data-science) course on Coursera.\n\n## Course Description\n\nThis course is aimed at data scientists and analysts who want to learn the basics of Python programming language. The course covers the basics of Python programming language, including variables, data types, control structures, functions, and object-oriented programming.\n\n## Course Objectives\n\n* Learn the basics of Python programming language\n* Learn how to use Python for data analysis\n* Learn how to use Python for data visualization\n* Learn how to use Python for machine learning\n* Learn how to use Python for web development\n* Learn how to use Python for data science\n\n## Course Content\n\n* Python Basics\n* Python for Data Analysis\n* Python for Data Visualization\n* Python for Machine Learning\n* Python for Web Development\n* Python for Data Science\n\n## Course Certificate\n\n![Python for Data Science Certificate](https://raw.githubusercontent.com/michal-krajewski/Python-for-Data-Science/master/certificate.png)\n/Python for Data Science/Python for Data Science.md\n# Python for Data Science\n\n## Course Description\n\nThis course is aimed at data scientists and analysts who want to learn the basics of Python programming language. The course covers the basics of Python programming language, including variables, data types, control structures, functions, and object-oriented programming.\n\n## Course Objectives\n\n* Learn the basics of Python programming language\n* Learn how to use Python for data analysis\n* Learn how to use Python for data visualization\n* Learn how to use Python for machine learning\n* Learn how to use Python for web development\n* Learn how to use Python for data science\n\n## Course Content\n\n* Python Basics\n* Python for Data Analysis\n* Python for Data Visualization\n* Python for Machine Learning\n* Python for Web Development\n* Python for Data Science\n\n## Course Certificate\n\n![Python for Data Science Certificate](https://raw.githubusercontent.com/michal-krajewski/Python-for-Data-Science/master/certificate.png)\n/Python for Data Science/Python for Data Science/Python for Data Science.py\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Oct 17 10:05:46 2018\n\n@author: michal\n\"\"\"\n\n# Python for Data Science\n\n# Python Basics\n\n# Variables\n\n# Data Types\n\n# Control Structures\n\n# Functions\n\n# Object-Oriented Programming\n\n# Python for Data Analysis\n\n# Python for Data Visualization\n\n# Python for Machine Learning\n\n# Python for Web Development\n\n# Python for Data Science\n"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n/python/tests/test_separate_paren_groups.py\nfrom python.separate_paren_groups import separate_paren_groups\n\n\ndef test_separate_paren_groups():\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a prime number.\n\n    Return True if the number is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_perfect(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a perfect number.\n\n    Return True if the number is perfect, False otherwise.\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(1)\n    False\n    \"\"\"\n\ndef is_amicable(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is an amicable number.\n\n    Return True if the number is amicable, False otherwise.\n    >>> is_amicable(220)\n    True\n    >>> is_amicable(1)\n    False\n    \"\"\"\n\ndef is_deficient(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a deficient number.\n\n    Return True if the number is deficient, False otherwise.\n    >>> is_deficient(220)\n    False\n    >>> is_deficient(1)\n    False\n    \"\"\"\n\ndef is_abundant(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is an abundant number.\n\n    Return True if the number is abundant, False otherwise.\n    >>> is_abundant(220)\n    False\n    >>> is_abundant(1)\n    False\n    \"\"\"\n\ndef is_perfect_square(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a perfect square.\n\n    Return True if the number is a perfect square, False otherwise.\n    >>> is_perfect_square(220)\n    False\n    >>> is_perfect_square(1)\n    False\n    \"\"\"\n\ndef is_palindrome(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a palindrome.\n\n    Return True if the number is a palindrome, False otherwise.\n    >>> is_palindrome(220)\n    False\n    >>> is_palindrome(1)\n    False\n    \"\"\"\n\ndef is_fibonacci(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a Fibonacci number.\n\n    Return True if the number is a Fibonacci number, False otherwise.\n    >>> is_fibonacci(220)\n    False\n    >>> is_fibonacci(1)\n    False\n    \"\"\"\n\ndef is_triangular(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a triangular number.\n\n    Return True if the number is a triangular number, False otherwise.\n    >>> is_triangular(220)\n    False\n    >>> is_triangular(1)\n    False\n    \"\"\"\n\ndef is_square(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a square number.\n\n    Return True if the number is a square number, False otherwise.\n    >>> is_square(220)\n    False\n    >>> is_square(1)\n    False\n    \"\"\"\n\ndef is_pentagonal(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a pentagonal number.\n\n    Return True if the number is a pentagonal number, False otherwise.\n    >>> is_pentagonal(220)\n    False\n    >>> is_pentagonal(1)\n    False\n    \"\"\"\n\ndef is_hexagonal(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a hexagonal number.\n\n    Return True if the number is a hexagonal number, False otherwise.\n    >>> is_hexagonal(220)\n    False\n    >>> is_hexagonal(1)\n    False\n    \"\"\"\n\ndef is_heptagonal(number: int) -> bool:\n    \"\"\" Given a positive integer, it checks if it is a heptagonal number.\n\n    Return True if the number is a heptagonal number, False otherwise.\n    >>> is_heptagonal(220)\n    False\n    >>> is_heptagonal(1)\n   "}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n/python/tests/test_below_zero.py\nfrom below_zero import below_zero\n\n\ndef test_below_zero_1():\n    assert below_zero([1, 2, 3]) is False\n\n\ndef test_below_zero_2():\n    assert below_zero([1, 2, -4, 5]) is True\n"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n/README.md\n# Python Data Science\n\nThis repository contains my notes and exercises from the book [Python Data Science Cookbook](https://www.amazon.com/Python-Data-Science-Cookbook-Preparation/dp/1491968909) by.\n\n## Chapter 1: Introduction\n\n### 1.1. What is Data Science?\n\nData Science is a field of study that combines the use of data analysis and the use of computer programming to extract useful information from data.\n\n### 1.2. Why Python?\n\nPython is a general-purpose programming language that is easy to learn and use. It is also a high-level language that is easy to read and write.\n\n### 1.3. Why Python for Data Science?\n\nPython is a great language for data science because it is:\n\n- **Easy to learn**: Python is a general-purpose programming language that is easy to learn and use.\n- **Easy to read**: Python is a high-level language that is easy to read and write.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high-level language that is easy to debug.\n- **Easy to learn**: Python is a high-level language that is easy to learn.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high-level language that is easy to debug.\n- **Easy to learn**: Python is a high-level language that is easy to learn.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high-level language that is easy to debug.\n- **Easy to learn**: Python is a high-level language that is easy to learn.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high-level language that is easy to debug.\n- **Easy to learn**: Python is a high-level language that is easy to learn.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high-level language that is easy to debug.\n- **Easy to learn**: Python is a high-level language that is easy to learn.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high-level language that is easy to debug.\n- **Easy to learn**: Python is a high-level language that is easy to learn.\n- **Easy to use**: Python is a high-level language that is easy to use.\n- **Easy to deploy**: Python is a high-level language that is easy to deploy.\n- **Easy to scale**: Python is a high-level language that is easy to scale.\n- **Easy to debug**: Python is a high"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n/README.md\n# CS 1.2 Data Structures\n\n## Course Description\n\nThis course introduces the fundamental data structures and algorithms that underpin the design of modern software systems.\n\n## What You Will Learn\n\n* How to use data structures to store and manipulate data\n* How to use algorithms to solve problems\n* How to design and implement software systems that use data structures and algorithms\n\n## Prerequisites\n\n* [Python 3.6](https://www.python.org/downloads/)\n* [Git](https://git-scm.com/downloads)\n\n## Course Schedule\n\n| Week | Topics |\n| --- | --- |\n| 1 | [Introduction to Data Structures and Algorithms](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 2 | [Linked Lists](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 3 | [Stacks and Queues](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 4 | [Trees](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 5 | [Hash Tables](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 6 | [Graphs](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 7 | [Recursion](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 8 | [Sorting](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 9 | [Searching](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 10 | [Dynamic Programming](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 11 | [Greedy Algorithms](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 12 | [Graph Algorithms](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n| 13 | [Project Week](https://docs.google.com/presentation/d/1-288-367-873-367/edit?usp=sharing) |\n\n## Course Resources\n\n* [Course Website](https://cs12-data-structures.github.io/)\n* [Course Schedule](https://docs.google.com/spreadsheets/d/1-288-367-873-367/edit?usp=sharing)\n* [Course Slack](https://join.slack.com/t/cs12-data-structures/shared_invite/zt-)\n* [Course Canvas](https://canvas.ucsd.edu/courses/1215621)\n* [Course Github](https://github.com/ucsd-cse12-sp19/cs12-data-structures)\n* [Course Piazza](https://piazza.com/ucsd/spring201"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\nfrom typing import List\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    >>> is_palindrome(\"A man, a plan, a canal: Panama\")\n    True\n    >>> is_palindrome(\"race a car\")\n    False\n    \"\"\"\n    s = s.lower()\n    s = ''.join(filter(lambda x: x.isalnum(), s))\n    return s == s[::-1]\n/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\nfrom typing import List\n\n\ndef max_depth(root: TreeNode) -> int:\n    \"\"\"\n    >>> max_depth(TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))))\n    3\n    \"\"\"\n    if not root:\n        return 0\n    return max(max_depth(root.left), max_depth(root.right)) + 1\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\nfrom typing import List\n\n\ndef level_order_bottom(root: TreeNode) -> List[List[int]]:\n    \"\"\"\n    >>> level_order_bottom(TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))))\n    [[15, 7], [9, 20], [3]]\n    \"\"\"\n    if not root:\n        return []\n    res = []\n    queue = [root]\n    while queue:\n        res.append([node.val for node in queue])\n        queue = [child for node in queue for child in (node.left, node.right) if child]\n    return res[::-1]\n/python/leetcode/easy/108_convert_sorted_array_to_binary_search_tree.py\n\"\"\"\nGiven an array where elements are sorted in ascending order, convert it to a height balanced BST.\n\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n\nExample:\n\nGiven the sorted array: [-10,-3,0,5,9],\n\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\"\"\"\n\nfrom typing import List\n\n\ndef sorted_array_to_bst(nums: List[int]) -> TreeNode:\n    \"\"\"\n    >>> sorted"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n/README.md\n# Python-101\n\n## Description\n\nThis repository contains a set of exercises for Python 101 course.\n\n## Installation\n\nTo install the project, run the following command:\n\n```bash\ngit clone https://github.com/d-kostenko/Python-101.git\n```\n\n## Usage\n\nTo run the project, run the following command:\n\n```bash\npython3 main.py\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n/main.py\nfrom exercises.exercise_1 import filter_by_substring\nfrom exercises.exercise_2 import find_max_value\nfrom exercises.exercise_3 import find_max_value_with_key\nfrom exercises.exercise_4 import find_max_value_with_key_and_default\nfrom exercises.exercise_5 import find_max_value_with_key_and_default_and_default_key\nfrom exercises.exercise_6 import find_max_value_with_key_and_default_and_default_key_and_default_value\nfrom exercises.exercise_7 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key\nfrom exercises.exercise_8 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value\nfrom exercises.exercise_9 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key\nfrom exercises.exercise_10 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value\nfrom exercises.exercise_11 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key\nfrom exercises.exercise_12 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value\nfrom exercises.exercise_13 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key\nfrom exercises.exercise_14 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value\nfrom exercises.exercise_15 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key\nfrom exercises.exercise_16 import find_max_value_with_key_and_default_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_default_key_and_default_value_and_"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n/python/exercises/lists/list_comprehension.py\n\"\"\"\nList comprehension is a way to create lists in a concise way.\n\nThe syntax is:\n\n[expression for item in list]\n\nThe expression can be any Python expression, including another list comprehension.\n\nThe following example creates a list of the first 10 square numbers:\n\n>>> [x**2 for x in range(10)]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even:\n\n>>> [x**2 for x in range(10) if x % 2 == 0]\n[0, 4, 16, 36, 64]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even, and the square is less than 100:\n\n>>> [x**2 for x in range(10) if x % 2 == 0 if x**2 < 100]\n[0, 4, 16]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even, and the square is less than 100, and the square is not divisible by 5:\n\n>>> [x**2 for x in range(10) if x % 2 == 0 if x**2 < 100 if x**2 % 5!= 0]\n[0, 4]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even, and the square is less than 100, and the square is not divisible by 5, and the square is not divisible by 7:\n\n>>> [x**2 for x in range(10) if x % 2 == 0 if x**2 < 100 if x**2 % 5!= 0 if x**2 % 7!= 0]\n[0]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even, and the square is less than 100, and the square is not divisible by 5, and the square is not divisible by 7, and the square is not divisible by 11:\n\n>>> [x**2 for x in range(10) if x % 2 == 0 if x**2 < 100 if x**2 % 5!= 0 if x**2 % 7!= 0 if x**2 % 11!= 0]\n[]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even, and the square is less than 100, and the square is not divisible by 5, and the square is not divisible by 7, and the square is not divisible by 11, and the square is not divisible by 13:\n\n>>> [x**2 for x in range(10) if x % 2 == 0 if x**2 < 100 if x**2 % 5!= 0 if x**2 % 7!= 0 if x**2 % 11!= 0 if x**2 % 13!= 0]\n[0, 4]\n\nThe following example creates a list of the first 10 square numbers, but only if the square is even, and the square is less than 100, and the square is not divisible by 5, and the square is not divisible by 7, and the square is not divisible by 11, and the square is not divisible by 13, and the square is not divisible by 17:\n\n>>> [x**2 for x in range(10) if x % 2 == 0 if"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n/README.md\n# Python Algorithms\n\nThis repository contains a collection of algorithms implemented in Python.\n\n## Algorithms\n\n### Sorting\n\n- [Bubble Sort](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/sorting/bubble_sort.py)\n- [Insertion Sort](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/sorting/insertion_sort.py)\n- [Merge Sort](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/sorting/merge_sort.py)\n- [Quick Sort](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/sorting/quick_sort.py)\n- [Selection Sort](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/sorting/selection_sort.py)\n\n### Searching\n\n- [Binary Search](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/searching/binary_search.py)\n\n### Graphs\n\n- [Breadth First Search](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/graphs/breadth_first_search.py)\n- [Depth First Search](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/graphs/depth_first_search.py)\n- [Dijkstra's Algorithm](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/graphs/dijkstra.py)\n- [Floyd-Warshall Algorithm](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/graphs/floyd_warshall.py)\n- [Prim's Algorithm](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/graphs/prim.py)\n- [Topological Sort](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/graphs/topological_sort.py)\n\n### Dynamic Programming\n\n- [Knapsack Problem](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/knapsack.py)\n- [Longest Common Subsequence](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_common_subsequence.py)\n- [Longest Increasing Subsequence](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_increasing_subsequence.py)\n- [Longest Palindromic Subsequence](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_palindromic_subsequence.py)\n- [Longest Palindromic Substring](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_palindromic_substring.py)\n- [Longest Repeated Substring](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_repeated_substring.py)\n- [Longest Repeated Subsequence](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_repeated_subsequence.py)\n- [Longest Substring Without Repeating Characters](https://github.com/juan-martinez/python-algorithms/blob/master/algorithms/dynamic_programming/longest_substring_without_repeating_characters.py)\n- [Longest Substring With Same Letters After Replacement](https://github.com/juan-martinez"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n#    print(string)\n    if is_palindrome(string):\n        return string\n    else:\n        # Find the longest palindromic suffix of string\n        suffix = find_longest_palindromic_suffix(string)\n        # Find the prefix of string that comes before the palindromic suffix\n        prefix = string[:len(string) - len(suffix)]\n        # Reverse the prefix\n        prefix = prefix[::-1]\n        # Append the reversed prefix to the end of the string\n        return string + prefix\n\n\ndef find_longest_palindromic_suffix(string: str) -> str:\n    \"\"\" Find the longest palindromic suffix of a string \"\"\"\n    # Find the longest palindromic suffix of string\n    longest_palindromic_suffix = ''\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substring = string[i:j]\n            if is_palindrome(substring):\n                if len(substring) > len(longest_palindromic_suffix):\n                    longest_palindromic_suffix = substring\n    return longest_palindromic_suffix\n\n\ndef main():\n    \"\"\" Main function \"\"\"\n    # Read input from stdin\n    input_lines = sys.stdin.readlines()\n    # Remove whitespace characters like `\\n` at the end of each line\n    input_lines = [x.strip() for x in input_lines]\n    # Iterate over the input\n    for line in input_lines:\n        # Print the result to stdout\n        print(make_palindrome(line))\n\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Palindrome\n\nThis is a simple Python 3 script that finds the shortest palindrome that begins with a supplied string.\n\n## Usage\n\n```\n$ python3 palindrome.py < input.txt > output.txt\n```\n\n## Example\n\n```\n$ cat input.txt\ncat\ncata\n$ python3 palindrome.py < input.txt\ncatac\ncatac\n```\n"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_2(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_2(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_3(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_3(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_4(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_4(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_5(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_5(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_6(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_6(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_7(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_7(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_8(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_8(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_9(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_9"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n/week01/day02/01_list_functions/01_list_functions.py\n# Create a function called `sum` that takes a list of numbers as a parameter\n# and returns the sum of numbers in the list\n#  - iterate over the list\n#  - add every element to the sum\n#  - return the sum\n\n# Create a function called `max_number` that takes a list of numbers as a parameter\n# and returns the maximum number in the list\n#  - iterate over the list\n#  - compare every element to the max\n#  - return the max\n\n# Create a function called `average` that takes a list of numbers as a parameter\n# and returns the average of numbers in the list\n#  - iterate over the list\n#  - add every element to the sum\n#  - divide the sum by the length of the list\n#  - return the average\n\n# Create a function called `factorio` that takes a number as a parameter\n# and returns the factorial of that number\n#  - create a variable to store the result\n#  - iterate over the numbers from 1 to the number\n#  - multiply the number to the result\n#  - return the result\n\n# Create a function called `double_items` that takes a list as a parameter\n# and returns a new list with each element doubled\n#  - iterate over the list\n#  - multiply every element by 2\n#  - return the new list\n\n# Create a function called `sum_all` that takes a list of lists of numbers as a parameter\n# and returns the sum of numbers in the list of lists\n#  - iterate over the list of lists\n#  - iterate over the inner lists\n#  - add every element to the sum\n#  - return the sum\n\n# Create a function called `multiply_all` that takes a list of lists of numbers as a parameter\n# and returns a new list with each element multiplied by 2\n#  - iterate over the list of lists\n#  - iterate over the inner lists\n#  - multiply every element by 2\n#  - return the new list\n\n# Create a function called `reverse_list` that takes a list as a parameter\n# and returns a new list with elements in reversed order\n#  - iterate over the list\n#  - add every element to a new list\n#  - return the new list\n\n# Create a function called `reverse_list_in_place` that takes a list as a parameter\n# and reverses elements in the list\n#  - iterate over the list\n#  - swap the first and the last element\n#  - swap the second and the second-to-last element\n#  - swap the third and the third-to-last element\n#  - swap the n-th and the n-th-to-last element\n#  - return the reversed list\n\n# Create a function called `bubble_sort` that takes a list as a parameter\n# and returns a new list with elements sorted in ascending order\n#  - iterate over the list\n#  - compare every element to the next one\n#  - if the next element is smaller than the current one, swap them\n#  - return the sorted list\n\n# Create a function called `merge` that takes two lists as parameters\n# and returns a new list with elements from both lists\n#  - iterate over the lists\n#  - add every element to the new list\n#  - return the new list\n\n# Create a function called `merge_sorted` that takes two lists as parameters\n# and returns a new list with elements from both lists sorted in ascending order\n#  - iterate over the lists\n#  - add every element to the new list\n#  - return the new list\n\n# Create a function called `sum_matrix` that takes a matrix (a list of lists) as a parameter\n# and returns the sum of numbers in the matrix\n#  - iterate over the matrix\n#  - iterate over the inner lists\n#  - add every element to the sum\n#  - return the sum\n\n# Create a function called `multiply_matrix` that takes a matrix (a list"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(13)\n    True\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Return True if n is perfect, False otherwise\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(10)\n    False\n    \"\"\"\n\ndef is_amicable(n: int) -> bool:\n    \"\"\" Return True if n is amicable, False otherwise\n    >>> is_amicable(6)\n    False\n    >>> is_amicable(220)\n    True\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Return True if n is abundant, False otherwise\n    >>> is_abundant(6)\n    False\n    >>> is_abundant(12)\n    True\n    \"\"\"\n\ndef is_deficient(n: int) -> bool:\n    \"\"\" Return True if n is deficient, False otherwise\n    >>> is_deficient(6)\n    True\n    >>> is_deficient(12)\n    False\n    \"\"\"\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Return True if n is perfect square, False otherwise\n    >>> is_perfect_square(6)\n    False\n    >>> is_perfect_square(144)\n    True\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is palindrome, False otherwise\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is armstrong, False otherwise\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(154)\n    False\n    \"\"\"\n\ndef is_strong(n: int) -> bool:\n    \"\"\" Return True if n is strong, False otherwise\n    >>> is_strong(145)\n    True\n    >>> is_strong(146)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect or abundant, False otherwise\n    >>> is_deficient_perfect_abundant(6)\n    True\n    >>> is_deficient_perfect_abundant(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant or strong, False otherwise\n    >>> is_deficient_perfect_abundant_strong(6)\n    True\n    >>> is_deficient_perfect_abundant_strong(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant, strong or palindrome, False otherwise\n    >>> is_deficient_perfect_abundant_strong_palindrome(6)\n    True\n    >>> is_deficient_perfect_abundant_strong_palindrome(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong_palindrome_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant, strong, palindrome or armstrong, False otherwise\n    >>> is_deficient_perfect_abundant_strong_palindrome_armstrong(6)\n    True\n    >>> is_deficient_perfect_abundant_strong_palindrome_armstrong(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong_palindrome_armstrong_strong(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant, strong, palindrome, armstrong or strong, False otherwise\n    >>> is_deficient_perfect_abundant_strong_palindrome_armstrong_strong(6)\n    True\n    >>> is_deficient_perfect_abundant_strong_palindrome_armstrong_strong(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n/README.md\n# Python-Practice\n\nThis is a repository for my Python practice.\n\n## Contents\n\n### 1. [Python Basics](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Basics)\n\n### 2. [Python Data Structures](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Data%20Structures)\n\n### 3. [Python Functions](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Functions)\n\n### 4. [Python Modules](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Modules)\n\n### 5. [Python OOP](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20OOP)\n\n### 6. [Python Testing](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Testing)\n\n### 7. [Python Web](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web)\n\n### 8. [Python Web Frameworks](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Frameworks)\n\n### 9. [Python Web Scraping](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping)\n\n### 10. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Selenium)\n\n### 11. [Python Web Scraping with Scrapy](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Scrapy)\n\n### 12. [Python Web Scraping with BeautifulSoup](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20BeautifulSoup)\n\n### 13. [Python Web Scraping with Requests](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Requests)\n\n### 14. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Selenium)\n\n### 15. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Selenium)\n\n### 16. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Selenium)\n\n### 17. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Selenium)\n\n### 18. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree/master/Python%20Web%20Scraping%20with%20Selenium)\n\n### 19. [Python Web Scraping with Selenium](https://github.com/jimmy-chang/Python-Practice/tree"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_step(n: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive with step.\n    >>> string_sequence_with_step(0, 1)\n    '0'\n    >>> string_sequence_with_step(5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step(5, 2)\n    '0 2 4 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start(n: int, step: int, start: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto n inclusive with step.\n    >>> string_sequence_with_step_and_start(0, 1, 0)\n    '0'\n    >>> string_sequence_with_step_and_start(5, 1, 0)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 0)\n    '0 2 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 1)\n    '1 3 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end(start: int, end: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive with step.\n    >>> string_sequence_with_step_and_start_and_end(0, 5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start_and_end(0, 5, 2)\n    '0 2 4 5'\n    >>> string_sequence_with_step_and_start_and_end(1, 5, 2)\n    '1 3 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator(start: int, end: int, step: int, separator: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive with step.\n    >>> string_sequence_with_step_and_start_and_end_and_separator(0, 5, 1, ',')\n    '0,1,2,3,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator(0, 5, 2, ',')\n    '0,2,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator(1, 5, 2, ',')\n    '1,3,5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator_and_prefix(start: int, end: int, step: int, separator: str, prefix: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive with step.\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(0, 5, 1, ',', 'prefix')\n    'prefix0,1,2,3,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(0, 5, 2, ',', 'prefix')\n    'prefix0,2,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(1, 5, 2, ',', 'prefix')\n    'prefix1,3,5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator_and_prefix_and_suffix(start: int, end: int, step: int, separator: str, prefix: str, suffix: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start u"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_4('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_5('xyzXYZ')\n    3\n    >>> count_distinct_characters_5('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_6(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_6('xyzXYZ')\n    3\n    >>> count_distinct_characters_6('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_7(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_7('xyzXYZ')\n    3\n    >>> count_distinct_characters_7('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_8(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_8('xyzXYZ')\n    3\n    >>> count_distinct_characters_8('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_9(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_9('xyzXYZ')\n    3\n    >>> count_distinct_characters_9('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_10(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_10('xyzXYZ')\n    3\n    >>> count_distinct_characters_10('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_11(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_11('xyzXYZ')\n    3\n    >>> count_distinct_characters_11('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_12(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_12('xyzXYZ')\n    3\n    >>> count_distinct_characters_12('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_13(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_13('xyzXYZ')\n    3\n    >>> count_distinct_characters_13('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_14(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_14('xyzXYZ')\n    3\n    >>> count_distinct_characters_14('"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n/README.md\n# Python-tasks\n\nThis repository contains tasks for Python programming language.\n\n## Tasks\n\n### [Task 1](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task1.py)\n\nWrite a function that takes a string as input and returns a list of integers representing how many beats does each note last.\n\n### [Task 2](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task2.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 3](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task3.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 4](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task4.py)\n\nWrite a function that takes a string as input and returns a list of integers representing how many beats does each note last.\n\n### [Task 5](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task5.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 6](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task6.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 7](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task7.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 8](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task8.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 9](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task9.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 10](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task10.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 11](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task11.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 12](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task12.py)\n\nWrite a function that takes a list of integers as input and returns a string representing a musical note in a special ASCII format.\n\n### [Task 13](https://github.com/Dmitry-Kolmogorov/Python-tasks/blob/master/task13.py)\n\nWrite"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_3('', 'a')\n    0\n    >>> how_many_times_3('aaa', 'a')\n    3\n    >>> how_many_times_3('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_4(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_4('', 'a')\n    0\n    >>> how_many_times_4('aaa', 'a')\n    3\n    >>> how_many_times_4('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_5(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_5('', 'a')\n    0\n    >>> how_many_times_5('aaa', 'a')\n    3\n    >>> how_many_times_5('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_6(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_6('', 'a')\n    0\n    >>> how_many_times_6('aaa', 'a')\n    3\n    >>> how_many_times_6('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_7(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_7('', 'a')\n    0\n    >>> how_many_times_7('aaa', 'a')\n    3\n    >>> how_many_times_7('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_8(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_8('', 'a')\n    0\n    >>> how_many_times_8('aaa', 'a')\n    3\n    >>> how_many_times_8('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_9(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_9('', 'a')\n    0\n    >>> how_many_times_9('aaa', 'a')\n    3\n    >>> how_many_times_9('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_10(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_10('', 'a')\n    0\n    >>> how_many_times_10('aaa', 'a')\n    3\n    >>> how_many_times_10('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_11(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_11('', 'a')\n    0\n    >>> how_many_times_11('aaa', 'a')\n    "}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n#    numbers = numbers.split()\n#    numbers.sort()\n#    return''.join(numbers)\n\n    return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_3('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_4(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_4('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_5(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_5('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_6(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_6('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_7(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_7('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_8(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n/README.md\n# Python-Exercises\n\nThis repository contains a collection of exercises for the Python programming language.\n\n## Exercises\n\n### Basics\n\n- [x] [Hello World](https://github.com/james-willett/Python-Exercises/blob/master/basics/hello_world.py)\n- [x] [Variables](https://github.com/james-willett/Python-Exercises/blob/master/basics/variables.py)\n- [x] [Strings](https://github.com/james-willett/Python-Exercises/blob/master/basics/strings.py)\n- [x] [Lists](https://github.com/james-willett/Python-Exercises/blob/master/basics/lists.py)\n- [x] [Dictionaries](https://github.com/james-willett/Python-Exercises/blob/master/basics/dictionaries.py)\n- [x] [Tuples](https://github.com/james-willett/Python-Exercises/blob/master/basics/tuples.py)\n- [x] [Sets](https://github.com/james-willett/Python-Exercises/blob/master/basics/sets.py)\n- [x] [Functions](https://github.com/james-willett/Python-Exercises/blob/master/basics/functions.py)\n- [x] [Classes](https://github.com/james-willett/Python-Exercises/blob/master/basics/classes.py)\n- [x] [Modules](https://github.com/james-willett/Python-Exercises/blob/master/basics/modules.py)\n- [x] [Exceptions](https://github.com/james-willett/Python-Exercises/blob/master/basics/exceptions.py)\n- [x] [Input](https://github.com/james-willett/Python-Exercises/blob/master/basics/input.py)\n- [x] [Output](https://github.com/james-willett/Python-Exercises/blob/master/basics/output.py)\n- [x] [Files](https://github.com/james-willett/Python-Exercises/blob/master/basics/files.py)\n- [x] [Errors](https://github.com/james-willett/Python-Exercises/blob/master/basics/errors.py)\n- [x] [Testing](https://github.com/james-willett/Python-Exercises/blob/master/basics/testing.py)\n- [x] [Logging](https://github.com/james-willett/Python-Exercises/blob/master/basics/logging.py)\n- [x] [Logging to a File](https://github.com/james-willett/Python-Exercises/blob/master/basics/logging_to_file.py)\n- [x] [Logging to a File and Console](https://github.com/james-willett/Python-Exercises/blob/master/basics/logging_to_file_and_console.py)\n- [x] [Logging to a File and Console with a Formatter](https://github.com/james-willett/Python-Exercises/blob/master/basics/logging_to_file_and_console_with_formatter.py)\n- [x] [Logging to a File and Console with a Formatter and a Filter](https://github.com/james-willett/Python-Exercises/blob/master/basics/logging_to_file_and_console_with_formatter_and_filter.py)\n- [x] [Logging to a File and Console with a"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\ndef rescale_to_range(numbers: List[float], low: float, high: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1)\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \"\"\"\n\ndef rescale_to_range_with_offset(numbers: List[float], low: float, high: float, offset: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high,\n    with the offset being the midpoint between the two\n    >>> rescale_to_range_with_offset([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1, 0)\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    >>> rescale_to_range_with_offset([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1, 0.5)\n    [-0.5, 0.0, 0.5, 1.0, 1.5]\n    \"\"\"\n\ndef rescale_to_range_with_offset_and_scale(numbers: List[float], low: float, high: float, offset: float, scale: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high,\n    with the offset being the midpoint between the two, and the scale being the ratio between the two\n    >>> rescale_to_range_with_offset_and_scale([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1, 0, 2)\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    >>> rescale_to_range_with_offset_and_scale([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1, 0.5, 2)\n    [-0.5, 0.0, 0.5, 1.0, 1.5]\n    \"\"\"\n\ndef rescale_to_range_with_offset_and_scale_and_exponent(numbers: List[float], low: float, high: float, offset: float, scale: float, exponent: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high,\n    with the offset being the midpoint between the two, and the scale being the ratio between the two,\n    and the exponent being the power to which the numbers are raised\n    >>> rescale_to_range_with_offset_and_scale_and_exponent([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1, 0, 2, 1)\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    >>> rescale_to_range_with_offset_and_scale_and_exponent([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1, 0.5, "}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n/0x01-python-if_else_loops_functions/10-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{}\".format(chr(i)), end=\"\")\n/0x04-python-more_data_structures/10-best_score.py\n#!/usr/bin/python3\ndef best_score(a_dictionary):\n    if a_dictionary:\n        return max(a_dictionary, key=a_dictionary.get)\n/0x04-python-more_data_structures/12-roman_to_int.py\n#!/usr/bin/python3\ndef roman_to_int(roman_string):\n    if roman_string is None or type(roman_string) is not str:\n        return 0\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    sum = 0\n    for i in range(len(roman_string)):\n        if i + 1 < len(roman_string) and roman_dict[roman_string[i]] < roman_dict[roman_string[i + 1]]:\n            sum -= roman_dict[roman_string[i]]\n        else:\n            sum += roman_dict[roman_string[i]]\n    return sum\n/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{}\".format(chr(i)), end=\"\")\nprint()\n/0x04-python-more_data_structures/13-pyramid.py\n#!/usr/bin/python3\ndef pyramid_triangle(n):\n    if n <= 0:\n        pass\n    else:\n        for i in range(1, n + 1):\n            print(\" \" * (n - i) + \"#\" * i)\n/0x04-python-more_data_structures/11-multiply_list_map.py\n#!/usr/bin/python3\ndef multiply_list_map(my_list=[], number=0):\n    return list(map(lambda x: x * number, my_list))\n/0x04-python-more_data_structures/102-complex_delete.py\n#!/usr/bin/python3\ndef complex_delete(a_dictionary, value):\n    for key in list(a_dictionary.keys()):\n        if a_dictionary[key] == value:\n            del a_dictionary[key]\n    return a_dictionary\n/0x04-python-more_data_structures/100-weight_average.py\n#!/usr/bin/python3\ndef weight_average(my_list=[]):\n    if not my_list:\n        return 0\n    sum_weight = 0\n    sum_value = 0\n    for i in my_list:\n        sum_weight += i[1]\n        sum_value += i[0] * i[1]\n    return sum_value / sum_weight\n/0x04-python-more_data_structures/101-square_matrix_map.py\n#!/usr/bin/python3\ndef square_matrix_map(matrix=[]):\n    return list(map(lambda x: list(map(lambda y: y ** 2, x)), matrix))\n/0x04-python-more_data_structures/103-python.c\n#include <Python.h>\n\n/**\n * print_python_list_info - Prints some basic info about Python lists\n * @p: Python list\n * Return: Nothing\n */\nvoid print_python_list_info(PyObject *p)\n{\n\tPy"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('abc', '')\n    'abc'\n    >>> strcat('', 'def')\n    'def'\n    \"\"\"\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first occurence of char in string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'c')\n    'c'\n    >>> strchr('abc', 'd')\n    ''\n    \"\"\"\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'abd')\n    -1\n    >>> strcmp('abc', 'abb')\n    1\n    \"\"\"\n\ndef strcpy(string1: str, string2: str) -> str:\n    \"\"\" Copy string2 to string1\n    >>> strcpy('abc', 'def')\n    'def'\n    >>> strcpy('abc', '')\n    ''\n    >>> strcpy('', 'def')\n    'def'\n    \"\"\"\n\ndef strncat(string1: str, string2: str, n: int) -> str:\n    \"\"\" Concatenate string2 to string1, but only n characters\n    >>> strncat('abc', 'def', 2)\n    'abcdef'\n    >>> strncat('abc', 'def', 3)\n    'abcde'\n    >>> strncat('abc', 'def', 4)\n    'abcde'\n    >>> strncat('abc', 'def', 5)\n    'abcde'\n    \"\"\"\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare string1 and string2, but only n characters\n    >>> strncmp('abc', 'abc', 2)\n    0\n    >>> strncmp('abc', 'abc', 3)\n    0\n    >>> strncmp('abc', 'abc', 4)\n    0\n    >>> strncmp('abc', 'abc', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc', 'abd', 5)\n    0\n    >>> strncmp('abc', 'abb', 2)\n    0\n    >>> strncmp('abc', 'abb', 3)\n    0\n    >>> strncmp('abc', 'abb', 4)\n    0\n    >>> strncmp('abc', 'abb', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc', 'abd', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc', 'abd', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc', 'abd', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc', 'abd', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc', 'abd', 5)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    0\n    >>> strncmp('abc', 'abd', 3)\n    0\n    >>> strncmp('abc', 'abd', 4)\n    0\n    >>> strncmp('abc',"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Determine if a number is prime\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Determine if a number is a palindrome\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Determine if a number is an Armstrong number\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Determine if a number is a perfect number\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_deficient(n: int) -> bool:\n    \"\"\" Determine if a number is a deficient number\n    >>> is_deficient(6)\n    False\n    >>> is_deficient(12)\n    True\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Determine if a number is an abundant number\n    >>> is_abundant(6)\n    False\n    >>> is_abundant(12)\n    True\n    \"\"\"\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Determine if a number is a perfect square\n    >>> is_perfect_square(6)\n    False\n    >>> is_perfect_square(12)\n    False\n    >>> is_perfect_square(144)\n    True\n    \"\"\"\n\ndef is_triangular(n: int) -> bool:\n    \"\"\" Determine if a number is a triangular number\n    >>> is_triangular(6)\n    False\n    >>> is_triangular(12)\n    True\n    \"\"\"\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" Determine if a number is a pentagonal number\n    >>> is_pentagonal(6)\n    False\n    >>> is_pentagonal(12)\n    False\n    >>> is_pentagonal(22)\n    True\n    \"\"\"\n\ndef is_hexagonal(n: int) -> bool:\n    \"\"\" Determine if a number is a hexagonal number\n    >>> is_hexagonal(6)\n    False\n    >>> is_hexagonal(12)\n    False\n    >>> is_hexagonal(22)\n    False\n    >>> is_hexagonal(30)\n    True\n    \"\"\"\n\ndef is_heptagonal(n: int) -> bool:\n    \"\"\" Determine if a number is a heptagonal number\n    >>> is_heptagonal(6)\n    False\n    >>> is_heptagonal(12)\n    False\n    >>> is_heptagonal(22)\n    False\n    >>> is_heptagonal(30)\n    False\n    >>> is_heptagonal(42)\n    True\n    \"\"\"\n\ndef is_octagonal(n: int) -> bool:\n    \"\"\" Determine if a number is an octagonal number\n    >>> is_octagonal(6)\n    False\n    >>> is_octagonal(12)\n    False\n    >>> is_octagonal(22)\n    False\n    >>> is_octagonal(30)\n    False\n    >>> is_octagonal(42)\n    False\n    >>> is_octagonal(56)\n    True\n    \"\"\"\n\ndef is_square(n: int) -> bool:\n    \"\"\" Determine if a number is a square\n    >>> is_square(6)\n    False\n    >>> is_square(12)\n    False\n    >>> is_square(22)\n    False\n    >>> is_square(30)\n    False\n    >>> is_square(42)\n    False\n    >>> is_square(56)\n    False\n    >>> is_square(64)\n    True\n    \"\"\"\n\ndef is_cube(n: int) -> bool:\n    \"\"\" Determine if a number is a cube\n    >>> is_cube(6)\n    False\n    >>> is_cube(12)\n    False\n    >>> is_cube(22)\n    False\n    >>> is_cube(30)\n    False\n    >>> is_cube(42)\n    False\n    >>> is_cube(56)\n    False\n    >>> is_cube(64"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n/week01/day01/01_hello_world.py\n# Create a program that prints a 'Hello, World!'-string to the console\n\nprint(\"Hello, World!\")\n/week01/day01/04_define_basic_info.py\n# Define several basic info about yourself: name, age, height, weight, favorite food\n# Print it out in a nice format like:\n#\n# Name: John\n# Age: 30\n# Height: 1.75\n# Weight: 80\n# Favorite food: Pizza\n\nname = \"John\"\nage = 30\nheight = 1.75\nweight = 80\nfavorite_food = \"Pizza\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Height: \" + str(height))\nprint(\"Weight: \" + str(weight))\nprint(\"Favorite food: \" + favorite_food)\n/week01/day01/03_define_basic_info.py\n# Define several basic info about yourself: name, age, height, weight, favorite food\n# Print it out in a nice format like:\n#\n# Name: John\n# Age: 30\n# Height: 1.75\n# Weight: 80\n# Favorite food: Pizza\n\nname = \"John\"\nage = 30\nheight = 1.75\nweight = 80\nfavorite_food = \"Pizza\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Height: \" + str(height))\nprint(\"Weight: \" + str(weight))\nprint(\"Favorite food: \" + favorite_food)\n/week01/day01/02_define_basic_info.py\n# Define several basic info about yourself: name, age, height, weight, favorite food\n# Print it out in a nice format like:\n#\n# Name: John\n# Age: 30\n# Height: 1.75\n# Weight: 80\n# Favorite food: Pizza\n\nname = \"John\"\nage = 30\nheight = 1.75\nweight = 80\nfavorite_food = \"Pizza\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Height: \" + str(height))\nprint(\"Weight: \" + str(weight))\nprint(\"Favorite food: \" + favorite_food)\n/week01/day01/05_define_basic_info.py\n# Define several basic info about yourself: name, age, height, weight, favorite food\n# Print it out in a nice format like:\n#\n# Name: John\n# Age: 30\n# Height: 1.75\n# Weight: 80\n# Favorite food: Pizza\n\nname = \"John\"\nage = 30\nheight = 1.75\nweight = 80\nfavorite_food = \"Pizza\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Height: \" + str(height))\nprint(\"Weight: \" + str(weight))\nprint(\"Favorite food: \" + favorite_food)\n/week01/day01/06_define_basic_info.py\n# Define several basic info about yourself: name, age, height, weight, favorite food\n# Print it out in a nice format like:\n#\n# Name: John\n# Age: 30\n# Height: 1.75\n# Weight: 80\n# Favorite food: Pizza\n\nname = \"John\"\nage = 30\nheight = 1.75\nweight = 80\nfavorite_food = \"Pizza\"\n\nprint(\"Name: \" + name)"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n/python/exercises/lists/remove_duplicates.py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n/python/exercises/lists/remove_duplicates_2.py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return True if the string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    \"\"\"\n\ndef is_anagram(string1: str, string2: str) -> bool:\n    \"\"\" For two given strings, return True if they are anagrams.\n    >>> is_anagram('hello', 'olleh')\n    True\n    \"\"\"\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" For a given string, return True if it is a pangram.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    \"\"\"\n\ndef is_isogram(string: str) -> bool:\n    \"\"\" For a given string, return True if it is an isogram.\n    >>> is_isogram('hello')\n    False\n    \"\"\"\n\ndef is_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is prime.\n    >>> is_prime(13)\n    True\n    \"\"\"\n\ndef is_palindrome_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a palindrome prime.\n    >>> is_palindrome_prime(13)\n    True\n    \"\"\"\n\ndef is_armstrong(number: int) -> bool:\n    \"\"\" For a given number, return True if it is an armstrong number.\n    >>> is_armstrong(153)\n    True\n    \"\"\"\n\ndef is_armstrong_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is an armstrong prime.\n    >>> is_armstrong_prime(153)\n    True\n    \"\"\"\n\ndef is_happy(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy number.\n    >>> is_happy(19)\n    True\n    \"\"\"\n\ndef is_happy_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy prime.\n    >>> is_happy_prime(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong number.\n    >>> is_happy_armstrong(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong prime.\n    >>> is_happy_armstrong_prime(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime_palindrome(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong prime palindrome.\n    >>> is_happy_armstrong_prime_palindrome(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime_palindrome_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong prime palindrome prime.\n    >>> is_happy_armstrong_prime_palindrome_prime(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime_palindrome_prime_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong prime palindrome prime prime.\n    >>> is_happy_armstrong_prime_palindrome_prime_prime(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime_palindrome_prime_prime_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong prime palindrome prime prime prime.\n    >>> is_happy_armstrong_prime_palindrome_prime_prime_prime(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime_palindrome_prime_prime_prime_prime(number: int) -> bool:\n    \"\"\" For a given number, return True if it is a happy armstrong prime palindrome prime prime prime prime.\n    >>> is_happy_armstrong_prime_palindrome_prime_prime_prime_prime(19)\n    True\n    \"\"\"\n\ndef is_happy_armstrong_prime_palindrome_prime_prime_prime_prime_prime(number:"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n/README.md\n# Python 3.7.2\n\n## Installation\n\n### Windows\n\nDownload and install [Python 3.7.2](https://www.python.org/downloads/release/python-372/)\n\n### Linux\n\n```bash\nsudo apt-get install python3.7\n```\n\n## Usage\n\n### Windows\n\n```bash\npython3.7 -m venv venv\nvenv\\Scripts\\activate\n```\n\n### Linux\n\n```bash\npython3.7 -m venv venv\nsource venv/bin/activate\n```\n\n## References\n\n- [Python 3.7.2](https://www.python.org/downloads/release/python-372/)\n- [Python 3.7.2 Documentation](https://docs.python.org/3.7/)\n- [Python 3.7.2 Tutorial](https://docs.python.org/3.7/tutorial/index.html)\n- [Python 3.7.2 Standard Library](https://docs.python.org/3.7/library/index.html)\n- [Python 3.7.2 C API Reference](https://docs.python.org/3.7/c-api/index.html)\n- [Python 3.7.2 C API Reference - Python/C API](https://docs.python.org/3.7/c-api/index.html)\n- [Python 3.7.2 C API Reference - Python/C API - Data Types](https://docs.python.org/3.7/c-api/structures.html)\n- [Python 3.7.2 C API Reference - Python/C API - Exceptions](https://docs.python.org/3.7/c-api/exceptions.html)\n- [Python 3.7.2 C API Reference - Python/C API - Memory Management](https://docs.python.org/3.7/c-api/memory.html)\n- [Python 3.7.2 C API Reference - Python/C API - Object Management](https://docs.python.org/3.7/c-api/object.html)\n- [Python 3.7.2 C API Reference - Python/C API - String and Text Management](https://docs.python.org/3.7/c-api/string.html)\n- [Python 3.7.2 C API Reference - Python/C API - Numeric Types](https://docs.python.org/3.7/c-api/numeric.html)\n- [Python 3.7.2 C API Reference - Python/C API - Buffer Protocol](https://docs.python.org/3.7/c-api/buffer.html)\n- [Python 3.7.2 C API Reference - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API - Python/C API -"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n/README.md\n# Python-Exercises\n\nThis repository contains a collection of exercises to practice Python programming.\n\n## Exercises\n\n### Basics\n\n- [x] [Hello World](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/hello_world.py)\n- [x] [Variables](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/variables.py)\n- [x] [Strings](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/strings.py)\n- [x] [Lists](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/lists.py)\n- [x] [Dictionaries](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/dictionaries.py)\n- [x] [Tuples](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/tuples.py)\n- [x] [Sets](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/sets.py)\n- [x] [Functions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/functions.py)\n- [x] [Classes](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/classes.py)\n- [x] [Modules](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/modules.py)\n- [x] [Exceptions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/exceptions.py)\n- [x] [Input/Output](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/io.py)\n- [x] [Conditionals](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/conditionals.py)\n- [x] [Loops](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/loops.py)\n- [x] [Lists Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/lists_comprehensions.py)\n- [x] [Dictionaries Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/dictionaries_comprehensions.py)\n- [x] [Tuples Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/tuples_comprehensions.py)\n- [x] [Sets Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/sets_comprehensions.py)\n- [x] [Functions Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/functions_comprehensions.py)\n- [x] [Classes Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/classes_comprehensions.py)\n- [x] [Modules Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/modules_comprehensions.py)\n- [x] [Exceptions Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/exceptions_comprehensions.py)\n- [x] [Input/Output Comprehensions](https://github.com/juan-martinez/Python-Exercises/blob/master/basics/"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 4, 0, 123, -10]\n    \"\"\"\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([1, 2, 3, 4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -5, 3, -3, 9, 1, -10]\n    \"\"\"\n\ndef get_prime(l: list):\n    \"\"\"Return only prime numbers in the list.\n    >>> get_prime([1, 2, 3, 4, 5, 6])\n    [2, 3, 5]\n    >>> get_prime([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 1]\n    \"\"\"\n\ndef get_fibonacci(l: list):\n    \"\"\"Return only fibonacci numbers in the list.\n    >>> get_fibonacci([1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 5]\n    >>> get_fibonacci([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 1]\n    \"\"\"\n\ndef get_palindrome(l: list):\n    \"\"\"Return only palindrome numbers in the list.\n    >>> get_palindrome([1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 5]\n    >>> get_palindrome([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 1]\n    \"\"\"\n\ndef get_perfect(l: list):\n    \"\"\"Return only perfect numbers in the list.\n    >>> get_perfect([1, 2, 3, 4, 5, 6])\n    [6]\n    >>> get_perfect([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [6]\n    \"\"\"\n\ndef get_amicable(l: list):\n    \"\"\"Return only amicable numbers in the list.\n    >>> get_amicable([1, 2, 3, 4, 5, 6])\n    [220]\n    >>> get_amicable([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [220]\n    \"\"\"\n\ndef get_happy(l: list"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n#    if len(xs) % 2 == 0 and xs[-1]!= 0:\n    if len(xs) % 2 == 0 and xs[-1]!= 0:\n        return -xs[0] / xs[1]\n    else:\n        raise ValueError(\"xs must have even number of coefficients and largest non zero coefficient\")\n\n\ndef find_zero_interval(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of polynomial with coefficients xs in interval [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a must be smaller than b\")\n    if len(xs) % 2 == 0 and xs[-1]!= 0:\n        if poly(xs, a) * poly(xs, b) < 0:\n            return find_zero(xs)\n        else:\n            raise ValueError(\"f(a) * f(b) must be negative\")\n    else:\n        raise ValueError(\"xs must have even number of coefficients and largest non zero coefficient\")\n\n\ndef find_zero_interval_recursive(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of polynomial with coefficients xs in interval [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a must be smaller than b\")\n    if len(xs) % 2 == 0 and xs[-1]!= 0:\n        if poly(xs, a) * poly(xs, b) < 0:\n            return find_zero(xs)\n        else:\n            raise ValueError(\"f(a) * f(b) must be negative\")\n    else:\n        raise ValueError(\"xs must have even number of coefficients and largest non zero coefficient\")\n\n\ndef find_zero_interval_recursive_2(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of polynomial with coefficients xs in interval [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a must be smaller than b\")\n    if len(xs) % 2 == 0 and xs[-1]!= 0:\n        if poly(xs, a) * poly(xs, b) < 0:\n            return find_zero(xs)\n        else:\n            raise ValueError(\"f(a) * f(b) must be negative\")\n    else:\n        raise ValueError(\"xs must have even number of coefficients and largest non zero coefficient\")\n\n\ndef find_zero_interval_recursive_3(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of polynomial with coefficients xs in interval [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a must be smaller than b\")\n    if len(xs) % 2 == 0 and xs[-1]!= 0:\n        if poly(xs, a) * poly(xs, b) < 0:\n            return find_zero(xs)\n        else:\n            raise ValueError(\"f(a) * f(b) must be negative\")\n    else:\n        raise ValueError(\"xs must have even number of coefficients and largest non zero coefficient\")\n\n\ndef find_zero_interval_recursive_4(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of polynomial with coefficients xs in interval [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a must be smaller than b\")\n    if len(xs) % 2 == 0 and xs[-1]!= 0:\n        if poly(xs, a) *"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n            l_prime.sort()\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n            l_prime.sort()\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n            l_prime.sort()\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n            l_prime.sort()\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a"}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique keys in a dictionary\n    >>> unique_dict({'a': 1, 'b': 2, 'c': 1, 'd': 3})\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n\ndef unique_list_dict(l: list, d: dict):\n    \"\"\"Return sorted unique elements in a list and keys in a dictionary\n    >>> unique_list_dict([5, 3, 5, 2, 3, 3, 9, 0, 123], {'a': 1, 'b': 2, 'c': 1, 'd': 3})\n    [0, 2, 3, 5, 9, 123]\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n\ndef unique_list_dict_dict(l: list, d: dict, dd: dict):\n    \"\"\"Return sorted unique elements in a list, keys in a dictionary and values in a dictionary\n    >>> unique_list_dict_dict([5, 3, 5, 2, 3, 3, 9, 0, 123], {'a': 1, 'b': 2, 'c': 1, 'd': 3}, {'a': 1, 'b': 2, 'c': 1, 'd': 3})\n    [0, 2, 3, 5, 9, 123]\n    ['a', 'b', 'c', 'd']\n    {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n    \"\"\"\n\ndef unique_list_dict_dict_dict(l: list, d: dict, dd: dict, ddd: dict):\n    \"\"\"Return sorted unique elements in a list, keys in a dictionary, values in a dictionary and keys in a dictionary\n    >>> unique_list_dict_dict_dict([5, 3, 5, 2, 3, 3, 9, 0, 123], {'a': 1, 'b': 2, 'c': 1, 'd': 3}, {'a': 1, 'b': 2, 'c': 1, 'd': 3}, {'a': 1, 'b': 2, 'c': 1, 'd': 3})\n    [0, 2, 3, 5, 9, 123]\n    ['a', 'b', 'c', 'd']\n    {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n    {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n    \"\"\"\n\ndef unique_list_dict_dict_dict_dict(l: list, d: dict, dd: dict, ddd: dict, dddd: dict):\n    \"\"\"Return sorted unique elements in a list, keys in a dictionary, values in a dictionary, keys in a dictionary and values in a dictionary\n    >>> unique_list_dict_dict_dict_dict([5, 3, 5, 2, 3, 3, 9, 0, 123], {'a': 1, 'b': 2, 'c': 1, 'd': 3}, {'a': 1, 'b': 2, 'c': 1, 'd': 3}, {'a': 1, 'b': 2, 'c': 1, 'd': 3}, {'a': 1, 'b': 2, 'c': 1, 'd': 3})\n    [0, 2, 3, 5, 9, 123]\n    ['a', 'b', 'c', 'd']\n    {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n    {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n    {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n    \"\"\"\n\ndef unique"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef sum_of_squares(l: list):\n    \"\"\"Return sum of squares of elements in the list.\n    >>> sum_of_squares([1, 2, 3])\n    14\n    >>> sum_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14200\n    \"\"\"\n\ndef sum_of_cubes(l: list):\n    \"\"\"Return sum of cubes of elements in the list.\n    >>> sum_of_cubes([1, 2, 3])\n    36\n    >>> sum_of_cubes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14200\n    \"\"\"\n\ndef sum_of_squares_of_evens(l: list):\n    \"\"\"Return sum of squares of even elements in the list.\n    >>> sum_of_squares_of_evens([1, 2, 3])\n    8\n    >>> sum_of_squares_of_evens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14200\n    \"\"\"\n\ndef sum_of_cubes_of_odds(l: list):\n    \"\"\"Return sum of cubes of odd elements in the list.\n    >>> sum_of_cubes_of_odds([1, 2, 3])\n    36\n    >>> sum_of_cubes_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14200\n    \"\"\"\n\ndef sum_of_squares_of_evens_and_cubes_of_odds(l: list):\n    \"\"\"Return sum of squares of even elements and cubes of odd elements in the list.\n    >>> sum_of_squares_of_evens_and_cubes_of_odds([1, 2, 3])\n    36\n    >>> sum_of_squares_of_evens_and_cubes_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14200\n    \"\"\"\n\ndef sum_of_squares_of_evens_and_cubes_of_odds_and_squares_of_odds(l: list):\n    \"\"\"Return sum of squares of even elements, cubes of odd elements and squares of odd elements in the list.\n    >>> sum_of_squares_of_evens_and_cubes_of_odds_and_squares_of_odds([1, 2, 3])\n    36\n    >>> sum_of_squares_of_evens_and_cubes_of_odds_and_squares_of_odds([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14200\n    \"\"\"\n\ndef sum_of_squares_of_evens_and_cubes_of_odds_and_squares_of_odds_and_cubes_of_evens(l: list):\n    \"\"\"Return sum of squares of even elements, cubes of odd elements, squares of odd elements and cubes of even elements in the list.\n    >>> sum_of_squares_of_evens_and_cubes_of_odds_and_squares_of_odds_and_cubes"}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_5(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_5(50)\n    0\n    >>> fizz_buzz_5(78)\n    2\n    >>> fizz_buzz_5(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_6(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_6(50)\n    0\n    >>> fizz_buzz_6(78)\n    2\n    >>> fizz_buzz_6(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_7(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_7(50)\n    0\n    >>> fizz_buzz_7(78)\n    2\n    >>> fizz_buzz_7(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_8(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_8(50)\n    0\n    >>> fizz_buzz_8(78)\n    2\n    >>> fizz_buzz_8(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_9(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_9(50)\n    0\n    >>> fizz_buzz_9(78)\n    2\n    >>> fizz_buzz_9(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_10(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_10(50)\n    0\n    >>> fizz_buzz_10(78)\n    2\n    >>> fizz_buzz_10(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_11(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_11(50)\n    0\n    >>> fizz_buzz_11(78)\n    2\n    >>> fizz_buzz_11(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_12(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_12(5"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_2([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_2([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_3(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_3([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_3([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_4(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_4([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_4([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_5(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_5([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_5([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_6(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_6([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_6([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_7(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_7([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_7([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_8(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_8([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_8([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_9(l: list):\n   "}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n#     split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by using vigenere cipher.\n    \"\"\"\n    # create list of characters from key.\n    key_list = list(key)\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of encoded characters.\n    encoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in key.\n        key_index = ord(key_list[i % len(key)]) - ord('a')\n        # get index of character in string.\n        s_index = ord(s_list[i]) - ord('a')\n        # get index of encoded character.\n        encoded_index = (s_index + key_index) % 26\n        # get character from index.\n        encoded_list.append(chr(encoded_index + ord('a')))\n    # return encoded string.\n    return \"\".join(encoded_list)\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    # create list of characters from key.\n    key_list = list(key)\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of decoded characters.\n    decoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in key.\n        key_index = ord(key_list[i % len(key)]) - ord('a')\n        # get index of character in string.\n        s_index = ord(s_list[i]) - ord('a')\n        # get index of decoded character.\n        decoded_index = (s_index - key_index) % 26\n        # get character from index.\n        decoded_list.append(chr(decoded_index + ord('a')))\n    # return decoded string.\n    return \"\".join(decoded_list)\n\n\ndef encode_affine(s: str, a: int, b: int):\n    \"\"\"\n    returns encoded string by using affine cipher.\n    \"\"\"\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of encoded characters.\n    encoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in string.\n        s_index = ord(s_list[i]) - ord('a')\n        # get index of encoded character.\n        encoded_index = (a * s_index + b) % 26\n        # get character from index.\n        encoded_list.append(chr(encoded_index + ord('a')))\n    # return encoded string.\n    return \"\".join(encoded_list)\n\n\ndef decode_affine(s: str, a: int, b: int):\n    \"\"\"\n    takes as input string encoded with encode_affine function. Returns decoded string.\n    \"\"\"\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of decoded characters.\n    decoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in string.\n        s_index = ord(s_list[i]) -"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen(n: int):\n    \"\"\"\n    prime_fib_gen returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen(1)\n    <generator object prime_fib_gen at 0x7f9084658730>\n    >>> prime_fib_gen(2)\n    <generator object prime_fib_gen at 0x7f9084658730>\n    >>> prime_fib_gen(3)\n    <generator object prime_fib_gen at 0x7f9084658730>\n    >>> prime_fib_gen(4)\n    <generator object prime_fib_gen at 0x7f9084658730>\n    >>> prime_fib_gen(5)\n    <generator object prime_fib_gen at 0x7f9084658730>\n    \"\"\"\n\ndef prime_fib_gen_2(n: int):\n    \"\"\"\n    prime_fib_gen_2 returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_2(1)\n    <generator object prime_fib_gen_2 at 0x7f9084658730>\n    >>> prime_fib_gen_2(2)\n    <generator object prime_fib_gen_2 at 0x7f9084658730>\n    >>> prime_fib_gen_2(3)\n    <generator object prime_fib_gen_2 at 0x7f9084658730>\n    >>> prime_fib_gen_2(4)\n    <generator object prime_fib_gen_2 at 0x7f9084658730>\n    >>> prime_fib_gen_2(5)\n    <generator object prime_fib_gen_2 at 0x7f9084658730>\n    \"\"\"\n\ndef prime_fib_gen_3(n: int):\n    \"\"\"\n    prime_fib_gen_3 returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_3(1)\n    <generator object prime_fib_gen_3 at 0x7f9084658730>\n    >>> prime_fib_gen_3(2)\n    <generator object prime_fib_gen_3 at 0x7f9084658730>\n    >>> prime_fib_gen_3(3)\n    <generator object prime_fib_gen_3 at 0x7f9084658730>\n    >>> prime_fib_gen_3(4)\n    <generator object prime_fib_gen_3 at 0x7f9084658730>\n    >>> prime_fib_gen_3(5)\n    <generator object prime_fib_gen_3 at 0x7f9084658730>\n    \"\"\"\n\ndef prime_fib_gen_4(n: int):\n    \"\"\"\n    prime_fib_gen_4 returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_4(1)\n    <generator object prime_fib_gen_4 at 0x7f9084658730>\n    >>> prime_fib_gen_4(2)\n    <generator object prime_fib_gen_4 at 0x7f9084658730>\n    >>> prime_fib_gen_4(3)\n    <generator object prime_fib_gen_4 at 0x7f9084658730>\n    >>> prime_fib_gen_4(4)\n    <generator object prime_fib_gen_4 at 0x7f9084658730>\n    >>> prime_fib"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1,"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_3(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_4(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_5(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_6(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_7(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to col"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_2([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_3(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_3([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_4(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_4([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_5(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_5([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_6(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_6([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_7(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_7([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_8(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace"}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return"}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive(8, 3)\n    '22'\n    >>> change_base_recursive(8, 2)\n    '1000'\n    >>> change_base_recursive(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_2(8, 3)\n    '22'\n    >>> change_base_recursive_2(8, 2)\n    '1000'\n    >>> change_base_recursive_2(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_3(8, 3)\n    '22'\n    >>> change_base_recursive_3(8, 2)\n    '1000'\n    >>> change_base_recursive_3(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_4(8, 3)\n    '22'\n    >>> change_base_recursive_4(8, 2)\n    '1000'\n    >>> change_base_recursive_4(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_5(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_5(8, 3)\n    '22'\n    >>> change_base_recursive_5(8, 2)\n    '1000'\n    >>> change_base_recursive_5(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_6(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_6(8, 3)\n    '22'\n    >>> change_base_recursive_6(8, 2)\n    '1000'\n    >>> change_base_recursive_6(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_7(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_7(8, 3)\n    '22'\n    >>> change_base_recursive_7(8, 2)\n    '1000'\n    >>> change_base_recursive_7(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_8(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_8(8, 3)\n    '22'\n    >>> change_base_recursive_8(8, 2)\n    '1000'\n    >>> change_base_recursive_8(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_9(x: int, base: int):\n    \"\"\"Change"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(5)\n    78.53981633974483\n    \"\"\"\n\ndef sphere_volume(r):\n    \"\"\"Given radius return volume for a sphere.\n    >>> sphere_volume(5)\n    523.5987755982989\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef cylinder_volume(r, h):\n    \"\"\"Given radius and height return volume for a cylinder.\n    >>> cylinder_volume(5, 3)\n    1413.7166941154066\n    \"\"\"\n\ndef cylinder_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cylinder.\n    >>> cylinder_surface_area(5, 3)\n    1570.7963267948966\n    \"\"\"\n\ndef cone_volume(r, h):\n    \"\"\"Given radius and height return volume for a cone.\n    >>> cone_volume(5, 3)\n    84.09671412921009\n    \"\"\"\n\ndef cone_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cone.\n    >>> cone_surface_area(5, 3)\n    157.07963267948966\n    \"\"\"\n\ndef pyramid_volume(b, h):\n    \"\"\"Given base and height return volume for a pyramid.\n    >>> pyramid_volume(5, 3)\n    7.5\n    \"\"\"\n\ndef pyramid_surface_area(b, h):\n    \"\"\"Given base and height return surface area for a pyramid.\n    >>> pyramid_surface_area(5, 3)\n    45.0\n    \"\"\"\n\ndef cube_volume(s):\n    \"\"\"Given side return volume for a cube.\n    >>> cube_volume(5)\n    125\n    \"\"\"\n\ndef cube_surface_area(s):\n    \"\"\"Given side return surface area for a cube.\n    >>> cube_surface_area(5)\n    150\n    \"\"\"\n\ndef rectangular_prism_volume(l, w, h):\n    \"\"\"Given length, width, and height return volume for a rectangular prism.\n    >>> rectangular_prism_volume(5, 3, 2)\n    30\n    \"\"\"\n\ndef rectangular_prism_surface_area(l, w, h):\n    \"\"\"Given length, width, and height return surface area for a rectangular prism.\n    >>> rectangular_prism_surface_area(5, 3, 2)\n    110\n    \"\"\"\n\ndef main():\n    \"\"\"Run doctests.\"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n/README.md\n# geometry\n\nA collection of geometry functions.\n\n## Installation\n\n```bash\npip install geometry\n```\n\n## Usage\n\n```python\nfrom geometry import *\n\ntriangle_area(5, 3)\n# 7.5\n\ncircle_area(5)\n# 78.53981633974483\n\nsphere_volume(5)\n# 523.5987755982989\n\nsphere_surface_area(5)\n# 314.1592653589793\n\ncylinder_volume(5, 3)\n# 1413.7166941154066\n\ncylinder_surface_area(5, 3)\n# 1570.7963267948966\n\ncone_volume(5, 3)\n# 84.09671412921009\n\ncone_surface_area(5, 3)\n# 157.07963267948"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(4) -> 2\n    fib5(5) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 2\n    fib6(5) -> 0\n    fib6(6) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    8\n    >>> fib6(7)\n    14\n    \"\"\"\n\ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 0\n    fib7(2) -> 2\n    fib7(3) -> 0\n    fib7(4) -> 2\n    fib7(5) -> 0\n    fib7(6) -> 2\n    fib7(7) -> 2\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n    Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n    >>> fib7(5)\n    4\n    >>> fib7(6)\n    8\n    >>> fib7(7)\n    14\n    \"\"\"\n\ndef fib8(n: int):\n    \"\"\"The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 0\n    fib8(2) -> 2\n    fib8(3) -> 0\n    fib8(4) -> 2\n    fib8(5) -> 0\n    fib8(6) -> 2\n    fib8(7) -> 2\n    fib8(8) -> 2\n    fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n    Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n    >>> fib8(5)\n    4\n    >>> fib8(6)\n    8"}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, "}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast(3, 5)\n    3\n    >>> modp_fast(1101, 101)\n    2\n    >>> modp_fast(0, 101)\n    1\n    >>> modp_fast(3, 11)\n    8\n    >>> modp_fast(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_2(3, 5)\n    3\n    >>> modp_fast_2(1101, 101)\n    2\n    >>> modp_fast_2(0, 101)\n    1\n    >>> modp_fast_2(3, 11)\n    8\n    >>> modp_fast_2(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_3(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_3(3, 5)\n    3\n    >>> modp_fast_3(1101, 101)\n    2\n    >>> modp_fast_3(0, 101)\n    1\n    >>> modp_fast_3(3, 11)\n    8\n    >>> modp_fast_3(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_4(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_4(3, 5)\n    3\n    >>> modp_fast_4(1101, 101)\n    2\n    >>> modp_fast_4(0, 101)\n    1\n    >>> modp_fast_4(3, 11)\n    8\n    >>> modp_fast_4(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_5(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_5(3, 5)\n    3\n    >>> modp_fast_5(1101, 101)\n    2\n    >>> modp_fast_5(0, 101)\n    1\n    >>> modp_fast_5(3, 11)\n    8\n    >>> modp_fast_5(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_6(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_6(3, 5)\n    3\n    >>> modp_fast_6(1101, 101)\n    2\n    >>> modp_fast_6(0, 101)\n    1\n    >>> modp_fast_6(3, 11)\n    8\n    >>> modp_fast_6(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_7(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_7(3, 5)\n    3\n    >>> modp_fast_7(1101, 101)\n    2\n    >>> modp_fast_7(0, 101)\n    1\n    >>> modp_fast_7(3, 11)\n    8\n    >>> modp_fast_7(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_8(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>>"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n#    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by using vigenere cipher.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + ord(key[i % len(key)]) - 2 * ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(key[i % len(key)]) + 2 * ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef encode_caesar(s: str, key: int):\n    \"\"\"\n    returns encoded string by using caesar cipher.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_caesar(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_caesar function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_substitution(s: str, key: str):\n    \"\"\"\n    returns encoded string by using substitution cipher.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef decode_substitution(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_substitution function. Returns decoded string.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef encode_affine(s: str, key: int):\n    \"\"\"\n    returns encoded string by using affine cipher.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) * key + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_affine(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_affine function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) * key ** -1 % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_hill(s: str, key: list):\n    \"\"\"\n    returns encoded string by using hill cipher.\n    \"\"\"\n    return \"\".join([chr(((key[0][0] * ord(s[0]) + key[0][1] * ord(s[1])) % 26) + ord(\"a\")) for i in range(0, len(s), 2)])\n\n\ndef decode_hill(s: str, key: list):\n    \"\"\"\n    takes as input string encoded with encode_hill function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((key[0][0] * ord(s[0]) + key[0][1] * ord(s[1])) % 26) + ord(\"a\")) for i in range(0, len(s), 2)])\n\n\ndef encode_playfair(s: str, key: str):\n    \"\"\"\n    returns encoded string by using playfair cipher.\n    \"\"\"\n    s = s.lower()\n    s = s.replace(\"j\", \"i\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"x\", \"k\")\n    s = s.replace(\"y\", \"l\")\n    s = s.replace(\"z\", \"m\")\n    s = s.replace(\"q\", \"k\")\n    s = s.replace(\"v\", \"l\")\n    s = s.replace(\""}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', '"}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2,"}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    0\n    \"\"\"\n\ndef main():\n    \"\"\"Main function\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n/README.md\n# Python-Unit-Testing\n\nThis repository contains the code for the unit testing of a simple calculator.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\nWhat things you need to install the software and how to install them\n\n```\nPython 3.6\n```\n\n### Installing\n\nA step by step series of examples that tell you how to get a development env running\n\n```\ngit clone https://github.com/siddharth-kumar-1997/Python-Unit-Testing.git\n```\n\n## Running the tests\n\n```\npython3 test_calculator.py\n```\n\n## Authors\n\n* **** - *Initial work* - [siddharth-kumar-1997](https://github.com/siddharth-kumar-1997)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_2('dddddddabc', 'abcd')\n    True\n    >>> same_chars_2('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_2('abcd', 'dddddddabce')\n    False\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_3(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_3('abcd', 'dddddddabc')\n    True\n    >>> same_chars_3('dddddddabc', 'abcd')\n    True\n    >>> same_chars_3('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_3('abcd', 'dddddddabce')\n    False\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_4(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_4('abcd', 'dddddddabc')\n    True\n    >>> same_chars_4('dddddddabc', 'abcd')\n    True\n    >>> same_chars_4('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_4('abcd', 'dddddddabce')\n    False\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_5(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_5('abcd', 'dddddddabc')\n    True\n    >>> same_chars_5('dddddddabc', 'abcd')\n    True\n    >>> same_chars_5('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_5('abcd', 'dddddddabce')\n    False\n    >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_6(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_6('abcd', 'dddddddabc')\n    True\n    >>> same_chars_6('dddddddabc', 'abcd')\n    True\n    >>> same_chars_6('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_6('abcd', 'dddddddabce')\n    False\n    >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_7(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_7('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_7('abcd', 'dddddddabc')\n    True\n    >>> same_chars_7('dddddddabc', 'abcd')\n    True\n    >>> same_chars_7('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_7('abcd', 'dddddddabce')\n    False\n    >>> same_chars_7('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo(10)\n    55\n    >>> fib_rec_memo(1)\n    1\n    >>> fib_rec_memo(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail(10)\n    55\n    >>> fib_rec_tail(1)\n    1\n    >>> fib_rec_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo(10)\n    55\n    >>> fib_rec_tail_memo(1)\n    1\n    >>> fib_rec_tail_memo(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter(10)\n    55\n    >>> fib_rec_tail_memo_iter(1)\n    1\n    >>> fib_rec_tail_memo_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_2(10)\n    55\n    >>> fib_rec_tail_memo_iter_2(1)\n    1\n    >>> fib_rec_tail_memo_iter_2(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_3(10)\n    55\n    >>> fib_rec_tail_memo_iter_3(1)\n    1\n    >>> fib_rec_tail_memo_iter_3(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_4(10)\n    55\n    >>> fib_rec_tail_memo_iter_4(1)\n    1\n    >>> fib_rec_tail_memo_iter_4(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_5(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_5(10)\n    55\n    >>> fib_rec_tail_memo_iter_5(1)\n    1\n    >>> fib_rec_tail_memo_iter_5(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_6(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_6(10)\n    55\n    >>> fib_rec_tail_memo_iter_6(1)\n    1\n    >>> fib_rec_tail_memo_iter_6(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_7(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_7(10)\n    55\n    >>> fib_rec_tail_memo_iter_7(1)\n    1\n    >>> fib_rec_tail_memo_iter_7(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_8(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_8"}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted([1, 2, 4, 20])\n    True\n    >>> is_sorted([1, 20, 4, 10])\n    False\n    >>> is_sorted([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_and_monotonic(l: list):\n    \"\"\"Return True if list is sorted and monotonically increasing or decreasing.\n    >>> is_sorted_and_monotonic([1, 2, 4, 20])\n    True\n    >>> is_sorted_and_monotonic([1, 20, 4, 10])\n    False\n    >>> is_sorted_and_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_and_monotonic_and_unique(l: list):\n    \"\"\"Return True if list is sorted, monotonically increasing or decreasing, and unique.\n    >>> is_sorted_and_monotonic_and_unique([1, 2, 4, 20])\n    True\n    >>> is_sorted_and_monotonic_and_unique([1, 20, 4, 10])\n    False\n    >>> is_sorted_and_monotonic_and_unique([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_and_monotonic_and_unique_and_positive(l: list):\n    \"\"\"Return True if list is sorted, monotonically increasing or decreasing, unique, and positive.\n    >>> is_sorted_and_monotonic_and_unique_and_positive([1, 2, 4, 20])\n    True\n    >>> is_sorted_and_monotonic_and_unique_and_positive([1, 20, 4, 10])\n    False\n    >>> is_sorted_and_monotonic_and_unique_and_positive([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_and_monotonic_and_unique_and_positive_and_odd(l: list):\n    \"\"\"Return True if list is sorted, monotonically increasing or decreasing, unique, positive, and odd.\n    >>> is_sorted_and_monotonic_and_unique_and_positive_and_odd([1, 2, 4, 20])\n    True\n    >>> is_sorted_and_monotonic_and_unique_and_positive_and_odd([1, 20, 4, 10])\n    False\n    >>> is_sorted_and_monotonic_and_unique_and_positive_and_odd([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_and_monotonic_and_unique_and_positive_and_odd_and_divisible_by_3(l: list):\n    \"\"\"Return True if list is sorted, monotonically increasing or decreasing, unique, positive, odd, and divisible by 3.\n    >>> is_sorted_and_monotonic_and_unique_and_positive_and_odd_and_divisible_by_3([1, 2, 4, 20])\n    True\n    >>> is_sorted_and_monotonic_and_unique_and_positive_and_odd_and_divisible_by_3([1, 20, 4, 10])\n    False\n    >>> is_sorted_and_monotonic_and_unique_and_positive_and_odd_and_divisible_by_3([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_and_monotonic_and_unique_and_positive_and_odd_and_divisible_by_3_and_divisible_by_5(l: list):\n    \"\"\"Return True if list is sorted, monotonically increasing or decreasing, unique, positive, odd, divisible by 3, and divisible by 5.\n    >>> is_sorted_and_monotonic"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\ndef common_with_counts(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1), (5, 2), (653, 2)]\n    >>> common_with_counts([5, 3, 2, 8], [3, 2])\n    [(2, 1), (3, 2)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0), (5, 2, 1), (653, 2, 4)]\n    >>> common_with_counts_and_positions([5, 3, 2, 8], [3, 2])\n    [(2, 1, 1), (3, 2, 0)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions_and_indices(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions_and_indices([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0, 0), (5, 2, 1, 1), (653, 2, 4, 4)]\n    >>> common_with_counts_and_positions_and_indices([5, 3, 2, 8], [3, 2])\n    [(2, 1, 1, 1), (3, 2, 0, 0)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions_and_indices_and_values(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions_and_indices_and_values([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0, 0, 1), (5, 2, 1, 1, 5), (653, 2, 4, 4, 653)]\n    >>> common_with_counts_and_positions_and_indices_and_values([5, 3, 2, 8], [3, 2])\n    [(2, 1, 1, 1, 2), (3, 2, 0, 0, 3)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions_and_indices_and_values_and_indices(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions_and_indices_and_values_and_indices([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0, 0, 1, 0), (5, 2, 1, 1, 5,"}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n\ndef is_perfect(n: int):\n    \"\"\"Return True if n is perfect, False otherwise.\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_abundant(n: int):\n    \"\"\"Return True if n is abundant, False otherwise.\n    >>> is_abundant(6)\n    False\n    >>> is_abundant(12)\n    True\n    \"\"\"\n\ndef is_deficient(n: int):\n    \"\"\"Return True if n is deficient, False otherwise.\n    >>> is_deficient(6)\n    True\n    >>> is_deficient(12)\n    False\n    \"\"\"\n\ndef is_amicable(n: int):\n    \"\"\"Return True if n is amicable, False otherwise.\n    >>> is_amicable(6)\n    False\n    >>> is_amicable(12)\n    True\n    \"\"\"\n\ndef is_perfect_square(n: int):\n    \"\"\"Return True if n is a perfect square, False otherwise.\n    >>> is_perfect_square(6)\n    False\n    >>> is_perfect_square(12)\n    True\n    \"\"\"\n\ndef is_perfect_cube(n: int):\n    \"\"\"Return True if n is a perfect cube, False otherwise.\n    >>> is_perfect_cube(6)\n    False\n    >>> is_perfect_cube(12)\n    True\n    \"\"\"\n\ndef is_perfect_power(n: int):\n    \"\"\"Return True if n is a perfect power, False otherwise.\n    >>> is_perfect_power(6)\n    False\n    >>> is_perfect_power(12)\n    True\n    \"\"\"\n\ndef is_power_of_2(n: int):\n    \"\"\"Return True if n is a power of 2, False otherwise.\n    >>> is_power_of_2(6)\n    False\n    >>> is_power_of_2(12)\n    False\n    >>> is_power_of_2(16)\n    True\n    \"\"\"\n\ndef is_power_of_3(n: int):\n    \"\"\"Return True if n is a power of 3, False otherwise.\n    >>> is_power_of_3(6)\n    False\n    >>> is_power_of_3(12)\n    False\n    >>> is_power_of_3(27)\n    True\n    \"\"\"\n\ndef is_power_of_4(n: int):\n    \"\"\"Return True if n is a power of 4, False otherwise.\n    >>> is_power_of_4(6)\n    False\n    >>> is_power_of_4(12)\n    False\n    >>> is_power_of_4(64)\n    True\n    \"\"\"\n\ndef is_power_of_5(n: int):\n    \"\"\"Return True if n is a power of 5, False otherwise.\n    >>> is_power_of_5(6)\n    False\n    >>> is_power_of_5(12)\n    False\n    >>> is_power_of_5(25)\n    True\n    \"\"\"\n\ndef is_power_of_6(n: int):\n    \"\"\"Return True if n is a power of 6, False otherwise.\n    >>> is_power_of_6(6)\n    False\n    >>> is_power_of_6(12)\n    False\n    >>> is_power_of_6(36)\n    True\n    \"\"\"\n\ndef is_power_of_7(n: int):\n    \"\"\"Return True if n is a power of 7, False otherwise.\n    >>> is_power_of_7(6)\n    False\n    >>> is_power_of_7(12)\n    False\n    >>> is_power_of_7(49)\n    True\n    \"\"\"\n\ndef is_power_of_8(n: int):\n    \"\"\"Return True if n is a power of 8"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    >>> integrate([3, 1, 2, 4, 5])\n    [0, 3, 1, 4, 5]\n    >>> integrate([1, 2, 3])\n    [0, 1, 3]\n    \"\"\"\n\ndef roots(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return roots of this polynomial in the same form.\n    >>> roots([3, 1, 2, 4, 5])\n    [-1.0, -0.5]\n    >>> roots([1, 2, 3])\n    [-1.5]\n    \"\"\"\n\ndef plot(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Plot this polynomial.\n    >>> plot([3, 1, 2, 4, 5])\n    >>> plot([1, 2, 3])\n    \"\"\"\n\ndef main():\n    \"\"\" Main function.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Polynomial\n\nThis is a simple polynomial class.\n\n## Installation\n\n```bash\npip install -e.\n```\n\n## Usage\n\n```python\nfrom polynomial import Polynomial\n\np = Polynomial([1, 2, 3])\nprint(p)\nprint(p.derivative())\nprint(p.integrate())\nprint(p.roots())\np.plot()\n```\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\ndef fibfib_fast(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast(1)\n    0\n    >>> fibfib_fast(5)\n    4\n    >>> fibfib_fast(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo(1)\n    0\n    >>> fibfib_fast_memo(5)\n    4\n    >>> fibfib_fast_memo(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo_2(1)\n    0\n    >>> fibfib_fast_memo_2(5)\n    4\n    >>> fibfib_fast_memo_2(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_3(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo_3(1)\n    0\n    >>> fibfib_fast_memo_3(5)\n    4\n    >>> fibfib_fast_memo_3(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_4(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo_4(1)\n    0\n    >>> fibfib_fast_memo_4(5)\n    4\n    >>> fibfib_fast_memo_4(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_5(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n   "}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"a\") == 1\n    assert vowels_count(\"aeiou\") == 5\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\") == 6\n    assert vowels_count(\"aeiouy\")"}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\ndef is_palindrome(x):\n    \"\"\"Return True if x is a palindrome, False otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Return True if x is prime, False otherwise.\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome_prime(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime(13)\n    True\n    >>> is_palindrome_prime(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_2(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_2(13)\n    True\n    >>> is_palindrome_prime_2(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_3(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_3(13)\n    True\n    >>> is_palindrome_prime_3(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_4(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_4(13)\n    True\n    >>> is_palindrome_prime_4(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_5(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_5(13)\n    True\n    >>> is_palindrome_prime_5(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_6(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_6(13)\n    True\n    >>> is_palindrome_prime_6(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_7(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_7(13)\n    True\n    >>> is_palindrome_prime_7(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_8(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_8(13)\n    True\n    >>> is_palindrome_prime_8(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_9(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_9(13)\n    True\n    >>> is_palindrome_prime_9(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_10(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_10(13)\n    True\n    >>> is_palindrome_prime_10(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_11(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_11(13)\n    True\n    >>> is_palindrome_prime_11(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_12(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_12(13)\n    True\n    >>> is_palindrome_prime_12(12345)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_13(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>>"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Task\n    Write a function that takes a number and returns True if it's a prime number and False otherwise.\n\n    Examples:\n        is_prime(1) => False\n        is_prime(2) => True\n        is_prime(3) => True\n        is_prime(4) => False\n        is_prime(5) => True\n        is_prime(6) => False\n        is_prime(7) => True\n        is_prime(8) => False\n        is_prime(9) => False\n        is_prime(10) => False\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if it's a palindrome and False otherwise.\n\n    Examples:\n        is_palindrome(\"\") => True\n        is_palindrome(\"a\") => True\n        is_palindrome(\"aa\") => True\n        is_palindrome(\"aba\") => True\n        is_palindrome(\"abba\") => True\n        is_palindrome(\"abbba\") => False\n        is_palindrome(\"abcba\") => True\n        is_palindrome(\"abccba\") => False\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome(\"abccba\") => True\n        is_palindrome"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    In this task, you will be given a number and you have to return True if the number is a prime number \n    and False if the number is not a prime number.\n    for examble:\n    is_prime(1) -> False\n    is_prime(2) -> True\n    is_prime(3) -> True\n    is_prime(4) -> False\n    is_prime(5) -> True\n    is_prime(6) -> False\n    is_prime(7) -> True\n    is_prime(8) -> False\n    is_prime(9) -> False\n    is_prime(10) -> False\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    In this task, you will be given a string and you have to return True if the string is a palindrome \n    and False if the string is not a palindrome.\n    for examble:\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    is_palindrome(\"abba\") -> True\n    \"\"\"\n\ndef is_anagram(s1,s2):\n    \"\"\"\n    In this task, you will be given two strings and you have to return True if the strings are anagrams \n    and False if the strings are not anagrams.\n    for examble:\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    is_anagram(\"abba\",\"aabb\") -> True\n    \"\"\"\n\ndef is_pangram(s):\n    \"\"\"\n    In this task, you will be given a string and you have to return True if the string is a pangram \n    and False if the string is not a pangram.\n    for examble:\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") -> True\n    \"\"\"\n\ndef is_isogram(s):\n    \"\"\"\n    In this task, you will be given a string and you have to return True if"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 0:\n        return [min_value, arr.index(min_value)]\n    else:\n        return []\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 0:\n       "}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, "}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_value = min(lst)\n        max_value = max(lst)\n        lst.remove(min_value)\n        lst.remove(max_value)\n        return [min_value, max_value] + strange_sort_list(lst)\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_value = min(lst)\n        max_value = max(lst)\n        lst.remove(min_value)\n        lst.remove(max_value)\n        return [min_value, max_value] + strange_sort_list(lst)\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_value = min(lst)\n        max_value = max(lst)\n        lst.remove(min_value)\n        lst.remove(max_value)\n        return [min_value, max_value] + strange_sort_list(lst)\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_value = min(lst)\n        max_value = max(lst)\n        lst.remove(min_value)\n        lst.remove(max_value)\n        return [min_value, max_value] + strange_sort_list(lst)\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\ndef is_valid_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_valid_triangle(3, 4, 5) == True\n    is_valid_triangle(1, 2, 10) == False\n    '''\n\ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form an equilateral triangle. \n    Otherwise return False\n    An equilateral triangle is a triangle in which all three sides are equal.\n    Example:\n    is_equilateral(3, 3, 3) == True\n    is_equilateral(1, 2, 10) == False\n    '''\n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form an isosceles triangle. \n    Otherwise return False\n    An isosceles triangle is a triangle in which two sides are equal.\n    Example:\n    is_isosceles(3, 3, 3) == True\n    is_isosceles(1, 2, 10) == False\n    '''\n\ndef is_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a scalene triangle. \n    Otherwise return False\n    A scalene triangle is a triangle in which all three sides are different.\n    Example:\n    is_scalene(3, 3, 3) == False\n    is_scalene(1, 2, 10) == True\n    '''\n\ndef is_right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right triangle. \n    Otherwise return False\n    A right triangle is a triangle in which one of the angles is a right angle.\n    Example:\n    is_right_triangle(3, 4, 5) == True\n    is_right_triangle(1, 2, 10) == False\n    '''\n\ndef is_acute_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form an acute triangle. \n    Otherwise return False\n    An acute triangle is a triangle in which all three angles are less than 90 degrees.\n    Example:\n    is_acute_triangle(3, 4, 5) == True\n    is_acute_triangle(1, 2, 10) == False\n    '''\n\ndef is_obtuse_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form an obtuse triangle. \n    Otherwise return False\n    An obtuse triangle is a triangle in which one of the angles is greater than 90 degrees.\n    Example:\n    is_obtuse_triangle(3, 4, 5) == False\n    is_obtuse_triangle(1, 2, 10) == True\n    '''\n\ndef is_obtuse_acute_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form an obtuse acute triangle. \n    Otherwise return False\n    An obtuse acute triangle is a triangle in which one of the angles is greater than 90 degrees and the other two angles are less than 90 degrees.\n    Example:\n    is_obtuse_acute_triangle(3, 4, 5) == False\n    is_obtuse_acute_triangle(1, 2, 10) == True\n    '''\n\ndef is_acute_obtuse_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form an acute obtuse"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly("}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_2(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_3(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_4(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_5(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_6(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_7(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(64) ==> False\n    isprime(0) ==> False\n    isprime(180) ==> False\n    '''\n\ndef isperfect(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a perfect number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isperfect(1) ==> False\n    isperfect(2) ==> False\n    isperfect(-1) ==> False\n    isperfect(64) ==> False\n    isperfect(0) ==> False\n    isperfect(180) ==> False\n    '''\n\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(1) ==> False\n    ispalindrome(2) ==> False\n    ispalindrome(-1) ==> False\n    ispalindrome(64) ==> False\n    ispalindrome(0) ==> False\n    ispalindrome(180) ==> False\n    '''\n\ndef isfibonacci(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a fibonacci number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isfibonacci(1) ==> False\n    isfibonacci(2) ==> False\n    isfibonacci(-1) ==> False\n    isfibonacci(64) ==> False\n    isfibonacci(0) ==> False\n    isfibonacci(180) ==> False\n    '''\n\ndef ispower(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 2.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispower(1) ==> True\n    ispower(2) ==> True\n    ispower(-1) ==> False\n    ispower(64) ==> False\n    ispower(0) ==> False\n    ispower(180) ==> False\n    '''\n\ndef ispower2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 2.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispower2(1) ==> True\n    ispower2(2) ==> True\n    ispower2(-1) ==> False\n    ispower2(64) ==> False\n    ispower2(0) ==> False\n    ispower2(180) ==> False\n    '''\n\ndef ispower3(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 3.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispower3(1) ==> True\n    ispower3(2) ==> False\n    ispower3(-1) ==> False\n    ispower3(64) ==> False\n    ispower3(0) ==> False\n    ispower3(180) ==> False\n    '''\n\ndef ispower4(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 4.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispower4(1) ==> True\n    ispower4(2) ==> False\n    ispower4(-1) ==> False\n    ispower4(64) ==> False\n    ispower4(0) ==> False\n    ispower4(180) ==> False\n    '''\n\ndef ispower5(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 5.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispower5(1) ==> True\n    ispower5(2) ==> False"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return sum(1 for x in num if x in '2357BD')\n\ndef hex_key(num):\n    return"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    decimal format. The function should return an integer.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\") # returns 32\n    \"\"\"\n\ndef binary_to_hex(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character representing a hexadecimal\n    number. Each character in the string will be '0' to '9' or 'a' to 'f'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_hex(\"db1111db\")   # returns \"dbffdb\"\n    binary_to_hex(\"db100000db\") # returns \"db00db\"\n    \"\"\"\n\ndef hex_to_binary(hex):\n    \"\"\"You will be given a number in hexadecimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    hex_to_binary(\"dbffdb\")   # returns \"db1111111111db\"\n    hex_to_binary(\"db00db\")   # returns \"db0000000000db\"\n    \"\"\"\n\ndef hex_to_decimal(hex):\n    \"\"\"You will be given a number in hexadecimal form and your task is to convert it to\n    decimal format. The function should return an integer.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    hex_to_decimal(\"dbffdb\")   # returns 65535\n    hex_to_decimal(\"db00db\")   # returns 0\n    \"\"\"\n\ndef decimal_to_hex(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character representing a hexadecimal\n    number. Each character in the string will be '0' to '9' or 'a' to 'f'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_hex(15)   # returns \"dbffdb\"\n    decimal_to_hex(32)   # returns \"db00db\"\n    \"\"\"\n\ndef binary_to_hex_and_back(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character representing a hexadecimal\n    number. Each character in the string will be '0' to '9' or 'a' to 'f'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_hex_and_back(\"db1111db\")   # returns \"dbffdb\"\n    binary_to_hex_and_back(\"db100000db\") # returns \"db00db\"\n   "}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B-' if grade >= 2.3 else\n        'C+' if grade >= 2.0 else\n        'C' if grade >= 1.7 else\n        'C-' if grade >= 1.3 else\n        'D+' if grade >= 1.0 else\n        'D' if grade >= 0.7 else\n        'D-' if grade >= 0.0 else\n        'E' if grade >= 0.0 else\n        'F' for grade in grades\n    ]\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('palindrome') == False\n    is_palindrome('a') == True\n    is_palindrome('') == True\n    \"\"\"\n\ndef is_anagram(string1, string2):\n    \"\"\"Write a function that takes two strings and returns True if they are\n    anagrams or False otherwise\n    Examples\n    is_anagram('abcd', 'dabc') == True\n    is_anagram('abcd', 'dcba') == False\n    is_anagram('abcd', 'llama') == False\n    is_anagram('', '') == True\n    \"\"\"\n\ndef is_pangram(string):\n    \"\"\"Write a function that takes a string and returns True if it is a\n    pangram or False otherwise\n    Examples\n    is_pangram('The quick brown fox jumps over the lazy dog') == True\n    is_pangram('The quick brown fox jumps over the dog') == False\n    is_pangram('The quick brown fox jumps over the lazy lazy dog') == False\n    is_pangram('The quick brown fox jumps over the lazy dog.') == False\n    is_pangram('The quick brown fox jumps over the lazy dog.') == False\n    \"\"\"\n\ndef is_isogram(string):\n    \"\"\"Write a function that takes a string and returns True if it is an\n    isogram or False otherwise\n    Examples\n    is_isogram('abcd') == True\n    is_isogram('aba') == False\n    is_isogram('moOse') == False\n    is_isogram('isIsogram') == True\n    is_isogram('') == True\n    \"\"\"\n\ndef is_vowel(char):\n    \"\"\"Write a function that takes a character and returns True if it is a\n    vowel or False otherwise\n    Examples\n    is_vowel('a') == True\n    is_vowel('b') == False\n    is_vowel('A') == True\n    is_vowel('B') == False\n    is_vowel('1') == False\n    \"\"\"\n\ndef is_consonant(char):\n    \"\"\"Write a function that takes a character and returns True if it is a\n    consonant or False otherwise\n    Examples\n    is_consonant('a') == False\n    is_consonant('b') == True\n    is_consonant('A') == False\n    is_consonant('B') == True\n    is_consonant('1') == False\n    \"\"\"\n\ndef is_consonant(char):\n    \"\"\"Write a function that takes a character and returns True if it is a\n    consonant or False otherwise\n    Examples\n    is_consonant('a') == False\n    is_consonant('b') == True\n    is_consonant('A') == False\n    is_consonant('B') == True\n    is_consonant('1') == False\n    \"\"\"\n\ndef is_consonant(char):\n    \"\"\"Write a function that takes a character and returns True if it is a\n    consonant or False otherwise\n    Examples\n    is_consonant('a') == False\n    is_consonant('b') == True\n    is_consonant('A') == False\n    is_consonant('B') == True\n    is_consonant('1') == False\n    \"\"\"\n\ndef is_consonant(char):\n    \"\"\"Write a function that takes a character and returns True if it is a\n    consonant or False otherwise\n    Examples\n    is_consonant('a') == False\n    is_consonant('b') == True\n    is_consonant('A') == False\n    is_consonant('B') == True\n    is_consonant('1') == False\n    \"\"\"\n\ndef is_consonant(char):\n    \"\"\"Write a function that takes a character and returns True if it is a\n    consonant or False otherwise\n    Examples\n    is_consonant('a') == False\n    is_consonant('b') == True\n    is_consonant('A') == False\n    is_consonant('B') == True\n    is_consonant('1') == False\n    \"\"\"\n\ndef is_"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\ndef starts_one_ends_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both_not_both_"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:"}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_2(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_2([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_3(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_3([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_4(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_4([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_5(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_5([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_6(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_6([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_7(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_7([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_8(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_8([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_9(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_9([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_10(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_10([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_11(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_11([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_12(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_12([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_13(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices_13([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_even_at_odd_indices_14(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a\n    palindrome, False otherwise.\n    A palindrome is a string that is the same when reversed.\n\n    For example:\n    is_palindrome('abba') returns True\n    is_palindrome('abbc') returns False\n    is_palindrome('abcba') returns True\n    is_palindrome('abccba') returns True\n    is_palindrome('abccab') returns False\n    \"\"\"\n\ndef is_anagram(s1, s2):\n    \"\"\"\n    Write a function that takes two strings and returns True if they are anagrams,\n    False otherwise.\n    An anagram is a word or phrase formed by rearranging the letters of a\n    different word or phrase, typically using all the original letters exactly\n    once.\n\n    For example:\n    is_anagram('abba', 'aabb') returns True\n    is_anagram('abba', 'abab') returns False\n    is_anagram('abba', 'abba') returns True\n    is_anagram('abba', 'abbc') returns False\n    is_anagram('abba', 'abbba') returns False\n    \"\"\"\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False otherwise.\n    A pangram is a sentence that contains all the letters of the English\n    alphabet at least once.\n\n    For example:\n    is_pangram('The quick brown fox jumps over the lazy dog') returns True\n    is_pangram('The quick brown fox jumps over the dog') returns False\n    is_pangram('The quick brown fox jumps over the lazy lazy dog') returns False\n    \"\"\"\n\ndef is_isogram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is an isogram,\n    False otherwise.\n    An isogram is a word or phrase without a repeating letter.\n\n    For example:\n    is_isogram('abba') returns False\n    is_isogram('abbc') returns True\n    is_isogram('abcba') returns False\n    is_isogram('abccba') returns True\n    is_isogram('abccab') returns False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Write a function that takes a number and returns True if it is a prime,\n    False otherwise.\n    A prime number is a number that is only divisible by itself and 1.\n\n    For example:\n    is_prime(1) returns False\n    is_prime(2) returns True\n    is_prime(3) returns True\n    is_prime(4) returns False\n    is_prime(5) returns True\n    is_prime(6) returns False\n    is_prime(7) returns True\n    is_prime(8) returns False\n    is_prime(9) returns False\n    is_prime(10) returns False\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"\n    Write a function that takes a number and returns True if it is a perfect\n    number, False otherwise.\n    A perfect number is a number that is equal to the sum of its factors.\n    A factor of a number is a number that divides evenly into another number.\n\n    For example:\n    is_perfect(6) returns True\n    is_perfect(7) returns False\n    is_perfect(8) returns False\n    is_perfect(9) returns True\n    is_perfect(10) returns False\n    is_perfect(11) returns False\n    is_perfect(12) returns False\n    is_perfect(13) returns False\n    is_perfect(14) returns False\n    is_perfect(15) returns False\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"\n    Write a function that takes a number and returns True if it is an Armstrong\n    number, False otherwise.\n    An Armstrong number is a number that is equal to the sum of its digits\n    raised to the power of the number of digits.\n\n    For example:\n    is_armstrong(1) returns True\n    is_"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x]\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x]\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1)"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array(array):\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return array if array[0] < array[1] else array[::-1]\n    if len(array) == 3:\n        return array if array[0] < array[1] < array[2] else array[::-1]\n    if len(array) == 4:\n        return array if array[0] < array[1] < array[2] < array[3] else array[::-1]\n    if len(array) == 5:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] else array[::-1]\n    if len(array) == 6:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] else array[::-1]\n    if len(array) == 7:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] else array[::-1]\n    if len(array) == 8:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] else array[::-1]\n    if len(array) == 9:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] < array[8] else array[::-1]\n    if len(array) == 10:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] < array[8] < array[9] else array[::-1]\n    if len(array) == 11:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] < array[8] < array[9] < array[10] else array[::-1]\n    if len(array) == 12:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] < array[8] < array[9] < array[10] < array[11] else array[::-1]\n    if len(array) == 13:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] < array[8] < array[9] < array[10] < array[11] < array[12] else array[::-1]\n    if len(array) == 14:\n        return array if array[0] < array[1] < array[2] < array[3] < array[4] < array[5] < array[6] < array[7] < array[8] < array[9] < array[10] < array[11] < array[12] < array[13] else array[::-1]\n    if len"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef main():\n    \"\"\"Create a function main that takes no arguments and returns no\n    values. This function should call the encrypt and decrypt functions\n    and print the results.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n/week03/day01/01_list_comprehension.py\n\"\"\"\nList Comprehension\n\nList comprehension is a way to create lists in Python.\n\nThe general syntax is:\n\nnew_list = [expression for item in list]\n\nThe expression can be any Python expression, including another list\ncomprehension.\n\nFor example:\n\nnew_list = [x for x in range(10)]\n\nThe above code creates a list of numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10)]\n\nThe above code creates a list of squares of numbers from 0 to 9.\n\nnew_list = [x for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of even numbers from 0 to 9.\n\nnew_list = [x for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list = [x**2 for x in range(10) if x % 2 == 0]\n\nThe above code creates a list of squares of even numbers from 0 to 9.\n\nnew_list ="}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for sentence in S.split('.') if sentence.startswith('I'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.startswith('I') for sentence in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.startswith('I') for sentence in S.split('.') if sentence)\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.startswith('I') for sentence in S.split('.') if sentence.strip())\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.strip().startswith('I') for sentence in S.split('.') if sentence.strip())\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.strip().startswith('I') for sentence in S.split('.') if sentence.strip())\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.strip().startswith('I') for sentence in S.split('.') if sentence.strip())\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))\n\ndef any_int(x, y, z):\n    return (x + y == z"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'TGST'\n    >>> encode_decode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file('test.txt')\n    'TGST'\n    >>> encode_decode_file('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_2(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_2('test.txt')\n    'TGST'\n    >>> encode_decode_file_2('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_3(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_3('test.txt')\n    'TGST'\n    >>> encode_decode_file_3('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_4(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_4('test.txt')\n    'TGST'\n    >>> encode_decode_file_4('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_5(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_5('test.txt')\n    'TGST'\n    >>> encode_decode_file_5('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_6(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_6('test.txt')\n    'TGST'\n    >>> encode_decode_file_6('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_7(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_7('test.txt')\n    'TGST'\n    >>> encode_decode_file_7('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_8(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_8('test.txt')\n    'TGST'\n    >>> encode_decode_file_8('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_9(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n   "}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        prime_list = []\n        for i in range(2, n):\n            if is_prime(i):\n                prime_list.append(i)\n        return prime_list\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is prime and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_prime(1) should return False.\n    is_prime(2) should return True.\n    is_prime(13) should return True.\n    is_prime(10) should return False.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is palindrome and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_palindrome(1) should return True.\n    is_palindrome(2) should return False.\n    is_palindrome(13) should return False.\n    is_palindrome(10) should return False.\n    is_palindrome(101) should return True.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is Armstrong number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_armstrong(1) should return True.\n    is_armstrong(2) should return False.\n    is_armstrong(13) should return False.\n    is_armstrong(10) should return False.\n    is_armstrong(101) should return False.\n    is_armstrong(153) should return True.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is perfect number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_perfect(1) should return False.\n    is_perfect(2) should return False.\n    is_perfect(13) should return False.\n    is_perfect(10) should return False.\n    is_perfect(101) should return False.\n    is_perfect(153) should return False.\n    is_perfect(6) should return True.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is abundant number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_abundant(1) should return False.\n    is_abundant(2) should return False.\n    is_abundant(13) should return False.\n    is_abundant(10) should return False.\n    is_abundant(101) should return False.\n    is_abundant(153) should return False.\n    is_abundant(6) should return False.\n    is_abundant(12) should return True.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is deficient number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_deficient(1) should return False.\n    is_deficient(2) should return False.\n    is_deficient(13) should return False.\n    is_deficient(10) should return False.\n    is_deficient(101) should return False.\n    is_deficient(153) should return False.\n    is_deficient(6) should return True.\n    is_deficient(12) should return False.\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is perfect square and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_perfect_square(1) should return False.\n    is_perfect_square(2) should return False.\n    is_perfect_square(13) should return False.\n    is_perfect_square(10) should return False.\n    is_perfect_square(101) should return False.\n    is_perfect_square(153) should return False.\n    is_perfect_square(6) should return False.\n    is_perfect_square(12) should return False.\n    is_perfect_square("}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_vowels('aBCdEf') returns 1\n    count_upper_vowels('abcdefg') returns 0\n    count_upper_vowels('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase consonants in even indices.\n    \n    For example:\n    count_upper_consonants('aBCdEf') returns 2\n    count_upper_consonants('abcdefg') returns 3\n    count_upper_consonants('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in even indices.\n    \n    For example:\n    count_upper_vowels_consonants('aBCdEf') returns 3\n    count_upper_vowels_consonants('abcdefg') returns 3\n    count_upper_vowels_consonants('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_digits(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels, consonants, and digits in even indices.\n    \n    For example:\n    count_upper_vowels_consonants_digits('aBCdEf') returns 3\n    count_upper_vowels_consonants_digits('abcdefg') returns 3\n    count_upper_vowels_consonants_digits('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_digits_special(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels, consonants, digits, and special characters in even indices.\n    \n    For example:\n    count_upper_vowels_consonants_digits_special('aBCdEf') returns 3\n    count_upper_vowels_consonants_digits_special('abcdefg') returns 3\n    count_upper_vowels_consonants_digits_special('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_digits_special_whitespace(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels, consonants, digits, special characters, and whitespace in even indices.\n    \n    For example:\n    count_upper_vowels_consonants_digits_special_whitespace('aBCdEf') returns 3\n    count_upper_vowels_consonants_digits_special_whitespace('abcdefg') returns 3\n    count_upper_vowels_consonants_digits_special_whitespace('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_digits_special_whitespace_punctuation(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels, consonants, digits, special characters, whitespace, and punctuation in even indices.\n    \n    For example:\n    count_upper_vowels_consonants_digits_special_whitespace_punctuation('aBCdEf') returns 3\n    count_upper_vowels_consonants_digits_special_whitespace_punctuation('abcdefg') returns 3\n    count_upper_vowels_consonants_digits_special_whitespace_punctuation('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_digits_special_whitespace_punctuation_symbols(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels, consonants, digits, special characters, whitespace, punctuation, and symbols in even indices.\n    \n    For example:\n    count_upper_vowels_consonants_digits_special_whitespace_punctuation_symbols('aBCdEf') returns 3\n    count_upper_vowels_consonants_digits_special_whitespace_punctuation_symbols('abcdefg') returns 3\n    count_upper_vowels_consonants"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\ndef is_palindrome(word):\n    '''\n    Create a function that takes a string and returns True if it's a\n    palindrome and False otherwise.\n\n    Examples\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"tacocat\")\n    True\n    >>> is_palindrome(\"hello\")\n    False\n    '''\n\ndef is_anagram(word1, word2):\n    '''\n    Create a function that takes two strings and returns True if they are\n    anagrams and False otherwise.\n\n    Examples\n    >>> is_anagram(\"listen\", \"silent\")\n    True\n    >>> is_anagram(\"hello\", \"bye\")\n    False\n    '''\n\ndef is_pangram(sentence):\n    '''\n    Create a function that takes a string and returns True if it's a\n    pangram and False otherwise.\n\n    Examples\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"The quick brown fox jumps over the dog\")\n    False\n    '''\n\ndef is_isogram(word):\n    '''\n    Create a function that takes a string and returns True if it's an\n    isogram and False otherwise.\n\n    Examples\n    >>> is_isogram(\"lumberjack\")\n    True\n    >>> is_isogram(\"aba\")\n    False\n    '''\n\ndef is_prime(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    prime number and False otherwise.\n\n    Examples\n    >>> is_prime(7)\n    True\n    >>> is_prime(10)\n    False\n    '''\n\ndef is_armstrong(number):\n    '''\n    Create a function that takes a number and returns True if it's an\n    Armstrong number and False otherwise.\n\n    Examples\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(100)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10)\n    False\n    '''\n\ndef is_happy(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    happy number and False otherwise.\n\n    Examples\n    >>> is_happy(7)\n    True\n    >>> is_happy(10"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_3(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_3(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_4(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_4(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_5(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_5(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_6(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_6(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_7(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_7(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_8(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\ndef words_string(s):\n    return s.split()\n\ndef words_string(s):\n    return s.split(', ')\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            return i\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            return i\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            return i\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            return i\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            return i\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return"}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is palindrome, False otherwise.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return True if n is an Armstrong number, False otherwise.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"Return True if n is a strong number, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"Return True if n is a deficient number, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Return True if n is a perfect number, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"Return True if n is an abundant number, False otherwise.\n    \"\"\"\n\ndef is_triangular(n):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Return True if n is a square number, False otherwise.\n    \"\"\"\n\ndef is_pentagonal(n):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    \"\"\"\n\ndef is_hexagonal(n):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    \"\"\"\n\ndef is_heptagonal(n):\n    \"\"\"Return True if n is a heptagonal number, False otherwise.\n    \"\"\"\n\ndef is_octagonal(n):\n    \"\"\"Return True if n is an octagonal number, False otherwise.\n    \"\"\"\n\ndef is_triangular_number(n):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    \"\"\"\n\ndef is_square_number(n):\n    \"\"\"Return True if n is a square number, False otherwise.\n    \"\"\"\n\ndef is_pentagonal_number(n):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    \"\"\"\n\ndef is_hexagonal_number(n):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    \"\"\"\n\ndef is_heptagonal_number(n):\n    \"\"\"Return True if n is a heptagonal number, False otherwise.\n    \"\"\"\n\ndef is_octagonal_number(n):\n    \"\"\"Return True if n is an octagonal number, False otherwise.\n    \"\"\"\n\ndef is_perfect_number(n):\n    \"\"\"Return True if n is a perfect number, False otherwise.\n    \"\"\"\n\ndef is_deficient_number(n):\n    \"\"\"Return True if n is a deficient number, False otherwise.\n    \"\"\"\n\ndef is_abundant_number(n):\n    \"\"\"Return True if n is an abundant number, False otherwise.\n    \"\"\"\n\ndef is_strong_number(n):\n    \"\"\"Return True if n is a strong number, False otherwise.\n    \"\"\"\n\ndef is_armstrong_number(n):\n    \"\"\"Return True if n is an Armstrong number, False otherwise.\n    \"\"\"\n\ndef is_palindrome_number(n):\n    \"\"\"Return True if n is a palindrome number, False otherwise.\n    \"\"\"\n\ndef is_prime_number(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    \"\"\"\n\ndef is_triangular_number(n):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    \"\"\"\n\ndef is_square_number(n):\n    \"\"\"Return True if n is a square number, False otherwise.\n    \"\"\"\n\ndef is_pentagonal_number(n):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    \"\"\"\n\ndef is_hexagonal_number(n):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    \"\"\"\n\ndef is_heptagonal_number(n):\n    \"\"\"Return True if n is a heptagonal number, False otherwise"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(map(lambda x: x in '02468', str(i)))])\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(map(lambda x: x in '02468', str(i)))])\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(map(lambda x: x in '02468', str(i)))])\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(map(lambda x: x in '02468', str(i)))])\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(map(lambda x: x in '02468', str(i)))])\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(map(lambda x: x in '02468', str(i)))])\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        arr = sorted(arr)\n        arr = arr[::-1]\n        for i in range(len(arr)):\n            if arr[i] < 1 or arr[i] > 9:\n                arr.pop(i)\n        if len(arr) == 0:\n            return []\n        else:\n            for i in range(len(arr)):\n                if arr[i] == 1:\n                    arr[i] = \"One\"\n                elif arr[i] == 2:\n                    arr[i] = \"Two\"\n                elif arr[i] == 3:\n                    arr[i] = \"Three\"\n                elif arr[i] == 4:\n                    arr[i] = \"Four\"\n                elif arr[i] == 5:\n                    arr[i] = \"Five\"\n                elif arr[i] == 6:\n                    arr[i] = \"Six\"\n                elif arr[i] == 7:\n                    arr[i] = \"Seven\"\n                elif arr[i] == 8:\n                    arr[i] = \"Eight\"\n                elif arr[i] == 9:\n                    arr[i] = \"Nine\"\n            return arr\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    g(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef h(n):\n    \"\"\" Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef i(n):\n    \"\"\" Implement the function i that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    i(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef j(n):\n    \"\"\" Implement the function j that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    j(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef k(n):\n    \"\"\" Implement the function k that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    k(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef l(n):\n    \"\"\" Implement the function l that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    l(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef m(n):\n    \"\"\" Implement the function m that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    m(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef n(n):\n    \"\"\" Implement the function n that takes n as a parameter,\n    and returns a list of size n, such that the value"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n/leetcode/0001-0100/0020/solution.py\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == '[':\n                stack.append(']')\n            elif c == '{':\n                stack.append('}')\n            elif not stack or stack.pop()!= c:\n                return False\n        return not stack\n/leetcode/0001-0100/0081/solution.py\nfrom typing import List\n\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid]:\n                left += 1\n                continue\n            if nums[left] < nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False\n/leetcode/0001-0100/0094/solution.py\nfrom typing import List\n\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res\n/leetcode/0001-0100/0054/solution.py\nfrom typing import List\n\n\nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix:\n            return []\n        res = []\n        left, right, top, bottom = 0, len(matrix[0]) - 1, 0, len(matrix) - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            for i in range(right, left - 1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            for i in range(bottom, top - 1, -1):\n                res.append(matrix[i][left])\n            left += 1\n        return res\n/leetcode/0001-0100/0029/solution.py\nclass Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        if dividend == -2 ** 31 and divisor == -1:\n            return 2 ** 31 - 1\n        sign = 1 if (dividend > 0) == (divisor > 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                divid"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums_2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_2([]) == 0\n    >>> count_nums_2([-1, 11, -11]) == 1\n    >>> count_nums_2([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_3(arr):\n    \"\"\"\n    Write a function count_nums_3 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_3([]) == 0\n    >>> count_nums_3([-1, 11, -11]) == 1\n    >>> count_nums_3([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_4(arr):\n    \"\"\"\n    Write a function count_nums_4 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_4([]) == 0\n    >>> count_nums_4([-1, 11, -11]) == 1\n    >>> count_nums_4([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_5(arr):\n    \"\"\"\n    Write a function count_nums_5 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_5([]) == 0\n    >>> count_nums_5([-1, 11, -11]) == 1\n    >>> count_nums_5([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_6(arr):\n    \"\"\"\n    Write a function count_nums_6 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_6([]) == 0\n    >>> count_nums_6([-1, 11, -11]) == 1\n    >>> count_nums_6([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_7(arr):\n    \"\"\"\n    Write a function count_nums_7 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_7([]) == 0\n    >>> count_nums_7([-1, 11, -11]) == 1\n    >>> count_nums_7([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_8(arr):\n    \"\"\"\n    Write a function count_nums_8 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3."}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    print(exchange(lst1, lst2))\n\nif __name__ == \"__main__\":\n    main()\n/python/leetcode/easy/100_same_tree.py\n\"\"\"\n100. Same Tree\n\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val!= q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\n107. Binary Tree Level Order Traversal II\n\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if root is None:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()\n/python/leetcode/easy/104_"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]\n        test = [i.lower() for i in test]\n        test = Counter(test)\n        test = test.most_common(1)\n        test = dict(test)\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]\n        test = [i.lower() for i in test]\n        test = Counter(test)\n        test = test.most_common(1)\n        test = dict(test)\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]\n        test = [i.lower() for i in test]\n        test = Counter(test)\n        test = test.most_common(1)\n        test = dict(test)\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n#     return (s,s==s[::-1])\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {sum(1 for c in s if c in '13579')} in the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {sum(1 for c in s if c in '13579')} in the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {sum(1 for c in s if c in '13579')} in the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements "}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum2([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum2([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum3(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum3([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum3([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum4(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum4([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum4([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum5(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum5([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum5([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum6(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum6([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum6([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum7(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum7([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum7([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum8(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum8([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum8([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum9(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum9([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum9([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum10(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum10([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum10([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum11(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum11([2, 3, 4, 1, 2, 4]) == 12\n    maxSub"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\ndef max_fill_recursive(grid, capacity, row, col, visited):\n    \"\"\"\n    Recursive solution to the max_fill problem.\n    \"\"\"\n    if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]):\n        return 0\n    if grid[row][col] == 0:\n        return 0\n    if visited[row][col]:\n        return 0\n    visited[row][col] = True\n    return 1 + max_fill_recursive(grid, capacity, row - 1, col, visited) + \\\n        max_fill_recursive(grid, capacity, row + 1, col, visited) + \\\n        max_fill_recursive(grid, capacity, row, col - 1, visited) + \\\n        max_fill_recursive(grid, capacity, row, col + 1, visited)\n\ndef max_fill_iterative(grid, capacity):\n    \"\"\"\n    Iterative solution to the max_fill problem.\n    \"\"\"\n    if not grid:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                max_fill += max_fill_recursive(grid, capacity, row, col, visited)\n    return max_fill\n\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if not grid:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                max_fill += max_fill_recursive(grid, capacity, row, col, visited)\n    return max_fill\n\ndef max_fill_dp_space_optimized(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if not grid:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                max_fill += max_fill_recursive(grid, capacity, row, col, visited)\n    return max_fill\n\ndef max_fill_dp_space_optimized_2(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if not grid:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0]))"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    result = []\n    for word in s:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n           "}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n       "}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    return 'Yes'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    return 'Yes'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    return 'Yes'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' and"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-3, -4, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [-4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [-3]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef kth_largest(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth largest \n    element in the array.\n\n    Example 1:\n\n        Input: arr = [3, 2, 1, 5, 6, 4], k = 2\n        Output: 5\n\n    Example 2:\n\n        Input: arr = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4\n        Output: 4\n\n    Note:\n        1. The length of the array will be in the range of [1, 10000].\n        2. The elements in the array will be in the range of [0, 10000].\n        3. 0 <= k <= arr.length\n    \"\"\"\n\ndef kth_smallest(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth smallest \n    element in the array.\n\n    Example 1:\n\n        Input: arr = [3, 2, 1, 5, 6, 4], k = 2\n        Output: 5\n\n    Example 2:\n\n        Input: arr = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4\n        Output: 5\n\n    Note:\n        1. The length of the array will be in the range of [1, 10000].\n        2. The elements in the array will be in the range of [0, 10000].\n        3. 0 <= k <= arr.length\n    \"\"\"\n\ndef kth_smallest_2(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth smallest \n    element in the array.\n\n    Example 1:\n\n        Input: arr = [3, 2, 1, 5, 6, 4], k = 2\n        Output: 5\n\n    Example 2:\n\n        Input: arr = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4\n        Output: 5\n\n    Note:\n        1. The length of the array will be in the range of [1, 10000].\n        2. The elements in the array will be in the range of [0, 10000].\n        3. 0 <= k <= arr.length\n    \"\"\"\n\ndef kth_smallest_3(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth smallest \n    element in"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] slideshow={\"slide_type\": \"slide\"}\n# ## 1.2.2. Exercise: List Comprehensions\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created using a list comprehension:\n#\n# ```python\n# squares = [i**2 for i in range(1, 11)]\n# ```\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created using a list comprehension:\n#\n# ```python\n# squares = [i**2 for i in range(1, 11)]\n# ```\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created using a list comprehension:\n#\n# ```python\n# squares = [i**2 for i in range(1, 11)]\n# ```\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created using a list comprehension:\n#\n# ```python\n# squares = [i**2 for i in range(1, 11)]\n# ```\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created using a list comprehension:\n#\n# ```python\n# squares = [i**2 for i in range(1, 11)]\n# ```\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created using a list comprehension:\n#\n# ```python\n# squares = [i**2 for i in range(1, 11)]\n# ```\n#\n# List comprehensions are a powerful way to create lists. They are a shorthand way to create lists.\n#\n# For example, the following code creates a list of the squares of the numbers 1 through 10:\n#\n# ```python\n# squares = []\n# for i in range(1, 11):\n#     squares.append(i**2)\n# ```\n#\n# The same list can be created"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_2(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_3(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_4(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_5(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_6(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_7(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_8(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\ndef get_even_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_even_collatz(5) returns [2, 4] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 2, and 4.\n    \"\"\"\n\ndef get_collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1].\n    \"\"\"\n\ndef get_collatz_sequence_length(n):\n    \"\"\"\n    Given a positive integer n, return the length of the collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence_length(5) returns 6 # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1].\n    \"\"\"\n\ndef get_collatz_sequence_length_for_all_n(n):\n    \"\"\"\n    Given a positive integer n, return a list of length n that has the length of the collatz sequence for each number from 1 to n.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n        if len(date)!= 3:\n            return False\n        else:\n            if int(date[0]) < 1 or int(date[0]) > 12:\n                return False\n            else:\n                if int(date[0]) == 1 or int(date[0]) == 3 or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0]) == 8 or int(date[0]) == 10 or int(date[0]) == 12:\n                    if int(date[1]) < 1 or int(date[1]) > 31:\n                        return False\n                elif int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0]) == 11:\n                    if int(date[1]) < 1 or int(date[1]) > 30:\n                        return False\n                elif int(date[0]) == 2:\n                    if int(date[1]) < 1 or int(date[1]) > 29:\n                        return False\n                else:\n                    return False\n                return True\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[0]:\n        interval1, interval2 = interval2, interval1\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\" if interval1[1] - interval1[0] in [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] else \"NO\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[0]:\n        interval1, interval2 = interval2, interval1\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\" if interval1[1] - interval1[0] in [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, "}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"\n    Return True if n is palindrome, False otherwise.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"\n    Return True if n is armstrong number, False otherwise.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"\n    Return True if n is strong number, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"\n    Return True if n is perfect number, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"\n    Return True if n is deficient number, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"\n    Return True if n is abundant number, False otherwise.\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"\n    Return True if n is perfect square, False otherwise.\n    \"\"\"\n\ndef is_power_of_two(n):\n    \"\"\"\n    Return True if n is power of two, False otherwise.\n    \"\"\"\n\ndef is_power_of_three(n):\n    \"\"\"\n    Return True if n is power of three, False otherwise.\n    \"\"\"\n\ndef is_power_of_five(n):\n    \"\"\"\n    Return True if n is power of five, False otherwise.\n    \"\"\"\n\ndef is_power_of_seven(n):\n    \"\"\"\n    Return True if n is power of seven, False otherwise.\n    \"\"\"\n\ndef is_power_of_eleven(n):\n    \"\"\"\n    Return True if n is power of eleven, False otherwise.\n    \"\"\"\n\ndef is_power_of_twelve(n):\n    \"\"\"\n    Return True if n is power of twelve, False otherwise.\n    \"\"\"\n\ndef is_power_of_thirteen(n):\n    \"\"\"\n    Return True if n is power of thirteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_fourteen(n):\n    \"\"\"\n    Return True if n is power of fourteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_fifteen(n):\n    \"\"\"\n    Return True if n is power of fifteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_sixteen(n):\n    \"\"\"\n    Return True if n is power of sixteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_eighteen(n):\n    \"\"\"\n    Return True if n is power of eighteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty(n):\n    \"\"\"\n    Return True if n is power of twenty, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_one(n):\n    \"\"\"\n    Return True if n is power of twenty one, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_two(n):\n    \"\"\"\n    Return True if n is power of twenty two, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_three(n):\n    \"\"\"\n    Return True if n is power of twenty three, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_four(n):\n    \"\"\"\n    Return True if n is power of twenty four, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_five(n):\n    \"\"\"\n    Return True if n is power of twenty five, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_six(n):\n    \"\"\"\n    Return True if n is power of twenty six, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_seven(n):\n    \"\"\"\n    Return True if n is power of twenty seven, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_eight(n):\n    \"\"\"\n    Return True if n is power of twenty eight, False otherwise.\n    \"\"\"\n\ndef is_power_of_twenty_nine(n):\n    \"\"\"\n    Return True if n is power of twenty nine, False otherwise.\n   "}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    n = len(grid)\n    dp = [[[0] * (n * n + 1) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j][1] = grid[i][j]\n    for k in range(2, n * n + 1):\n        for i in range(n):\n            for j in range(n):\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if 0 <= i + di < n and 0 <= j + dj < n:\n                            dp[i][j][k] = max(dp[i][j][k], dp[i + di][j + dj][k - 1] + grid[i][j])\n    return dp[0][0][k]\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3, 2, 8]\n        for i in range(3, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i / 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3, 2, 8]\n        for i in range(3, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i / 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return True if n is an Armstrong number, False otherwise.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"Return True if n is a strong number, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Return True if n is a perfect number, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"Return True if n is a deficient number, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"Return True if n is an abundant number, False otherwise.\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"Return True if n is a perfect square, False otherwise.\n    \"\"\"\n\ndef is_power_of_2(n):\n    \"\"\"Return True if n is a power of 2, False otherwise.\n    \"\"\"\n\ndef is_power_of_3(n):\n    \"\"\"Return True if n is a power of 3, False otherwise.\n    \"\"\"\n\ndef is_power_of_5(n):\n    \"\"\"Return True if n is a power of 5, False otherwise.\n    \"\"\"\n\ndef is_power_of_10(n):\n    \"\"\"Return True if n is a power of 10, False otherwise.\n    \"\"\"\n\ndef is_power_of_20(n):\n    \"\"\"Return True if n is a power of 20, False otherwise.\n    \"\"\"\n\ndef is_power_of_100(n):\n    \"\"\"Return True if n is a power of 100, False otherwise.\n    \"\"\"\n\ndef is_power_of_200(n):\n    \"\"\"Return True if n is a power of 200, False otherwise.\n    \"\"\"\n\ndef is_power_of_1000(n):\n    \"\"\"Return True if n is a power of 1000, False otherwise.\n    \"\"\"\n\ndef is_power_of_2000(n):\n    \"\"\"Return True if n is a power of 2000, False otherwise.\n    \"\"\"\n\ndef is_power_of_10000(n):\n    \"\"\"Return True if n is a power of 10000, False otherwise.\n    \"\"\"\n\ndef is_power_of_20000(n):\n    \"\"\"Return True if n is a power of 20000, False otherwise.\n    \"\"\"\n\ndef is_power_of_100000(n):\n    \"\"\"Return True if n is a power of 100000, False otherwise.\n    \"\"\"\n\ndef is_power_of_200000(n):\n    \"\"\"Return True if n is a power of 200000, False otherwise.\n    \"\"\"\n\ndef is_power_of_1000000(n):\n    \"\"\"Return True if n is a power of 1000000, False otherwise.\n    \"\"\"\n\ndef is_power_of_2000000(n):\n    \"\"\"Return True if n is a power of 2000000, False otherwise.\n    \"\"\"\n\ndef is_power_of_10000000(n):\n    \"\"\"Return True if n is a power of 10000000, False otherwise.\n    \"\"\"\n\ndef is_power_of_20000000(n):\n    \"\"\"Return True if n is a power of 20000000, False otherwise.\n    \"\"\"\n\ndef is_power_of_100000000(n):\n    \"\"\"Return True if n is a power of 100000000, False otherwise.\n    \"\"\"\n\ndef is_power_of_200000000(n):\n    \"\"\"Return True if n is a power of 200000000, False otherwise.\n    \"\"\"\n\ndef is_power_of_10000000"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\ndef is_nested(string):\n    '''\n    Create a function that takes"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\ndef count_positives_sum_negatives(lst):\n    '''\n    Create a function that takes a list of integers as an argument\n    and returns a list with two elements.\n    The first element is the count of positive numbers in the list.\n    The second element is the sum of negative numbers in the list.\n    If the input list is empty, both elements should be 0.\n\n    Examples:\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [10, -55]\n    count_positives_sum_negatives([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]\n    count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, -55]"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns the list of integers that are common to both lists.\n    Note: the returned list should be sorted in ascending order.\n    compare_two([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) \u279e [3, 4, 5]\n    compare_two([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) \u279e []\n    compare_two([1, 3, 5], [3, 4, 5]) \u279e [3, 5]\n    \"\"\"\n\ndef compare_three(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns the list of integers that are common to both lists.\n    Note: the returned list should be sorted in ascending order.\n    compare_three([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) \u279e [3, 4, 5]\n    compare_three([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) \u279e []\n    compare_three([1, 3, 5], [3, 4, 5]) \u279e [3, 5]\n    \"\"\"\n\ndef compare_four(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns the list of integers that are common to both lists.\n    Note: the returned list should be sorted in ascending order.\n    compare_four([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) \u279e [3, 4, 5]\n    compare_four([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) \u279e []\n    compare_four([1, 3, 5], [3, 4, 5]) \u279e [3, 5]\n    \"\"\"\n\ndef compare_five(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns the list of integers that are common to both lists.\n    Note: the returned list should be sorted in ascending order.\n    compare_five([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) \u279e [3, 4, 5]\n    compare_five([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) \u279e []\n    compare_five([1, 3, 5], [3, 4, 5]) \u279e [3, 5]\n    \"\"\"\n\ndef compare_six(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns the list of integers that are common to both lists.\n    Note: the returned list should be sorted in ascending order.\n    compare_six([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) \u279e [3, 4, 5]\n    compare_six([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) \u279e []\n    compare_six([1, 3, 5], [3, 4, 5]) \u279e [3, 5]\n    \"\"\"\n\ndef compare_seven(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns the list of integers that are common to both lists.\n    Note: the returned list should be sorted in ascending order.\n    compare_seven([1, 2, 3, "}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == True\n    is_equal_to_sum_odd(6) == False\n    is_equal_to_sum_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd(4) == True\n    is_equal_to_sum_even_odd(6) == True\n    is_equal_to_sum_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even(4) == False\n    is_equal_to_sum_even_odd_even(6) == True\n    is_equal_to_sum_even_odd_even(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_odd(4) == False\n    is_equal_to_sum_even_odd_odd(6) == False\n    is_equal_to_sum_even_odd_odd(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd(4) == True\n    is_equal_to_sum_even_odd_even_odd(6) == False\n    is_equal_to_sum_even_odd_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_odd_odd(4) == True\n    is_equal_to_sum_even_odd_odd_odd(6) == True\n    is_equal_to_sum_even_odd_odd_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_odd(4) == False\n    is_equal_to_sum_even_odd_even_odd_odd(6) == True\n    is_equal_to_sum_even_odd_even_odd_odd(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_odd_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_odd_odd_odd(4) == False\n    is_equal_to_sum_even_odd_odd_odd_odd(6) == False\n    is_equal_to_sum_even_odd_odd_odd_odd(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_odd_odd(4) == True\n    is_equal_to_sum_even_odd_even_odd_odd_"}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example "}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of"}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n   "}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n/src/main/java/com/github/hcsp/reflection/MyClass.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass {\n    public static void main(String[] args) {\n        // \u8bf7\u5b9e\u73b0\n        // \u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u540d\uff0c\u8fd4\u56de\u8be5\u7c7b\u7684\u5b9e\u4f8b\n        // \u5982\u679c\u8be5\u7c7b\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56denull\n        Class<?> clazz = null;\n        try {\n            clazz = Class.forName(\"com.github.hcsp.reflection.MyClass\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        System.out.println(clazz.newInstance());\n    }\n}\n/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"1234321\"));\n        System.out.println(isPalindrome(\"12343210\"));\n        System.out.println(isPalindrome(\"123432100\"));\n        System.out.println(isPalindrome(\"1234321000\"));\n        System.out.println(isPalindrome(\"12343210000\"));\n        System.out.println(isPalindrome(\"123432100000\"));\n        System.out.println(isPalindrome(\"1234321000000\"));\n        System.out.println(isPalindrome(\"12343210000000\"));\n        System.out.println(isPalindrome(\"123432100000000\"));\n        System.out.println(isPalindrome(\"1234321000000000\"));\n        System.out.println(isPalindrome(\"12343210000000000\"));\n        System.out.println(isPalindrome(\"123432100000000000\"));\n        System.out.println(isPalindrome(\"1234321000000000000\"));\n        System.out.println(isPalindrome(\"12343210000000000000\"));\n        System.out.println(isPalindrome(\"123432100000000000000\"));\n        System.out.println(isPalindrome(\"1234321000000000000000\"));\n        System.out.println(isPalindrome(\"12343210000000000000000\"));\n        System.out.println(isPalindrome(\"123432100000000000000000\"));\n        System.out.println(isPalindrome(\"1234321000000000000000000\"));\n        System.out.println(isPalindrome(\"12343210000000000000000000\"));\n        System.out.println(isPalindrome(\"123432100000000000000000000\"));\n        System.out.println(isPalindrome(\"1234321000000000000000000000\"));\n        System.out.println(isPalindrome(\"1234321000000000000000000000"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") ="}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\ndef order_by_length(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order by their length.\n    Note: if there are several items with similar length,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]\n    >>> order_by_length([]) == []\n    \"\"\"\n\ndef order_by_last_letter(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order by their last letter.\n    Note: if there are several items with similar last letter,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_letter([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]\n    >>> order_by_last_letter([]) == []\n    \"\"\"\n\ndef order_by_last_letter_and_length(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order by their last letter and their length.\n    Note: if there are several items with similar last letter and length,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_letter_and_length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]\n    >>> order_by_last_letter_and_length([]) == []\n    \"\"\"\n\ndef order_by_last_letter_and_length_and_points(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order by their last letter, their length and their sum of digits.\n    Note: if there are several items with similar last letter, length and sum of digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_letter_and_length_and_points([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]\n    >>> order_by_last_letter_and_length_and_points([]) == []\n    \"\"\"\n\ndef order_by_last_letter_and_length_and_points_and_first_letter(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order by their last letter, their length, their sum of digits and their first letter.\n    Note: if there are several items with similar last letter, length, sum of digits and first letter,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_letter_and_length_and_points_and_first_letter([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]\n    >>> order_by_last_letter_and_length_and_points_and_first_letter([]) == []\n    \"\"\"\n\ndef order_by_last_letter_and_length_and_points_and_first_letter_and_length(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order by their last letter, their length, their sum of digits, their first letter and their length.\n    Note: if there are several items with similar last letter, length, sum of digits, first letter and length,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_letter_and_length_and_points_and_first_letter_and_length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]\n    >>> order_by_last_letter_and_length_and_points_and_first_letter_and_length([]) == []\n   "}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n   "}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15,"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            sum += num ** 2\n    return sum\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            sum += num ** 2\n    return sum\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            sum += num ** 2\n    return sum\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            sum += num ** 2\n    return sum\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            sum += num ** 2\n    return sum\n\ndef double_"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return ["}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_extension_strength = strength(strongest_extension)\n    for extension in extensions:\n        if strength(extension) > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = strength(extension)\n    return class_name + '.' + strongest_extension\n\ndef strength(extension):\n    \"\"\"\n    \"\"\"\n    cap = 0\n    sm = 0\n    for char in extension:\n        if char.isupper():\n            cap += 1\n        elif char.islower():\n            sm += 1\n    return cap - sm\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_extension_strength = strength(strongest_extension)\n    for extension in extensions:\n        if strength(extension) > strongest_extension_strength:\n            strongest_extension = extension\n           "}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Given a number, return True if the number is prime and False otherwise.\n\n    A prime number is a number that is only evenly divisible by itself and 1.\n\n    Example:\n        is_prime(1) ==> False\n        is_prime(2) ==> True\n        is_prime(-1) ==> False\n        is_prime(7) ==> True\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"Given a string, return True if the string is a palindrome and False otherwise.\n\n    A palindrome is a word that is spelled the same forward and backward.\n\n    Example:\n        is_palindrome(\"racecar\") ==> True\n        is_palindrome(\"walter\") ==> False\n    \"\"\"\n\ndef is_pangram(sentence):\n    \"\"\"Given a string, return True if the string is a pangram and False otherwise.\n\n    A pangram is a sentence using every letter of the alphabet at least once.\n\n    Example:\n        is_pangram(\"The quick brown fox jumps over the lazy dog\") ==> True\n        is_pangram(\"The quick brown fox jumps over the lazy dog\") ==> False\n    \"\"\"\n\ndef is_armstrong(num):\n    \"\"\"Given a number, return True if the number is an Armstrong number and False otherwise.\n\n    An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.\n\n    Example:\n        is_armstrong(1) ==> True\n        is_armstrong(371) ==> True\n        is_armstrong(9474) ==> True\n        is_armstrong(93084) ==> True\n        is_armstrong(54748) ==> False\n    \"\"\"\n\ndef is_happy(num):\n    \"\"\"Given a number, return True if the number is a happy number and False otherwise.\n\n    A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.\n\n    Example:\n        is_happy(1) ==> True\n        is_happy(2) ==> False\n        is_happy(7) ==> True\n        is_happy(4) ==> False\n    \"\"\"\n\ndef is_happy(num):\n    \"\"\"Given a number, return True if the number is a happy number and False otherwise.\n\n    A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.\n\n    Example:\n        is_happy(1) ==> True\n        is_happy(2) ==> False\n        is_happy(7) ==> True\n        is_happy(4) ==> False\n    \"\"\"\n\ndef is_happy(num):\n    \"\"\"Given a number, return True if the number is a happy number and False otherwise.\n\n    A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.\n\n    Example:\n        is_happy(1) ==> True\n        is_happy(2) ==> False\n        is_happy(7) ==> True\n        is_happy(4) ==> False\n    \"\"\"\n\ndef is_happy(num):\n    \"\"\"Given a number, return True if the number is a happy number and False otherwise.\n\n    A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral string, return its integer equivalent.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\ndef main():\n    \"\"\"\n    The main function for the program.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Python-Practice\n\nThis repository contains my solutions to various problems in Python.\n\n## Problems\n\n### 1. Roman Numerals\n\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\n\nRestrictions: 1 <= num <= 1000\n\nExamples:\n\n```\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n```\n\n### 2. Mini Roman Numerals\n\nGiven a roman numeral string, return its integer equivalent.\n\nRestrictions: 1 <= num <= 1000\n\nExamples:\n\n```\n>>> mini_roman_to_int('xix') == 19\n>>> mini_roman_to_int('clii') == 152\n>>> mini_roman_to_int('cdxxvi') == 426\n```\n\n### 3. FizzBuzz\n\nWrite a program that prints the numbers from 1 to 100. But for multiples of\nthree print \"Fizz\" instead of the number and for the multiples of five print\n\"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\".\n\nExamples:\n\n```\n>>> fizzbuzz()\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\nBuzz\n```\n\n### 4. Palindromes\n\nWrite a program that prints all the palindromes in a given range.\n\nExamples:\n\n```\n>>> palindromes(1, 100)\n1\n2\n3\n4\n5\n6\n7\n8\n9\n11\n22\n101\n```\n\n### 5. Fibonacci\n\nWrite a program that prints the Fibonacci sequence up to a given number.\n\nExamples:\n\n```\n>>> fibonacci(10)\n1\n1\n2\n3\n5\n8\n"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n\ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides are equal.\n    Example:\n    is_equilateral(3, 3, 3) == True\n    is_equilateral(1, 2, 3) == False\n    '''\n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle in which two sides are equal.\n    Example:\n    is_isosceles(3, 4, 4) == True\n    is_isosceles(1, 2, 3) == False\n    '''\n\ndef is_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a scalene triangle, False otherwise.\n    A scalene triangle is a triangle in which all three sides are different.\n    Example:\n    is_scalene(3, 4, 5) == True\n    is_scalene(1, 2, 3) == False\n    '''\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_acute_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an acute-angled triangle, False otherwise.\n    An acute-angled triangle is a triangle in which all three angles are less than\n    90 degree.\n    Example:\n    is_acute_angled_triangle(3, 4, 5) == True\n    is_acute_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_obtuse_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an obtuse-angled triangle, False otherwise.\n    An obtuse-angled triangle is a triangle in which one angle is greater than 90\n    degree.\n    Example:\n    is_obtuse_angled_triangle(3, 4, 5) == True\n    is_obtuse_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_acute_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an acute-angled triangle, False otherwise.\n    An acute-angled triangle is a triangle in which all three angles are less than\n    90 degree.\n    Example:\n    is_acute_angled_triangle(3, 4, 5) == True\n    is_acute_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_obtuse_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an obtuse-angled triangle, False otherwise.\n    An obtuse-angled triangle is a triangle in which one angle is greater than 90\n    degree.\n    Example:"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\""}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\ndef eat(number, need, remaining):\n    return [number + need, remaining - need]\n/7kyu/sum_of_digits_digital_root.py\ndef digital_root(n):\n    \"\"\"\n    A digital root is the recursive sum of all the digits in a number.\n    Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced.\n    This is only applicable to the natural numbers.\n    Example:\n    digital_root(942)\n    9 + 4 + 2\n    15...\n    1 + 5\n    6\n    digital_root(16)\n    1 + 6\n    7\n    digital_root(999)\n    9 + 9 + 9\n    27...\n    2 + 7\n    9\n    digital_root(456)\n    4 + 5 + 6\n    15...\n    1 + 5\n    6\n    digital_root(132189)\n    1 + 3 + 2 + 1 + 8 + 9\n    24...\n    2 + 4\n    6\n    digital_root(32189)\n    3 + 2 + 1 + 8 + 9\n    24...\n    2 + 4\n    6\n    digital_root(123456789)\n    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    45...\n    4 + 5\n    9\n    digital_root(65536)\n    6 + 5 + 5 + 3 + 6\n    22...\n    2 + 2\n    4\n    digital_root(0)\n    0\n    digital_root(1)\n    1\n    digital_root(16)\n    1 + 6\n    7\n    digital_root(942)\n    9 + 4 + 2\n    15...\n    1 + 5\n    6\n    digital_root(132189)\n    1 + 3 + 2 + 1 + 8 + 9\n    24...\n    2 + 4\n    6\n    digital_root(32189)\n    3 + 2 + 1 + 8 + 9\n    24...\n    2 + 4\n    6\n    digital_root(123456789)\n    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    45...\n    4 + 5\n    9\n    digital_root(65536)\n    6 + 5 + 5 + 3 + 6\n    22...\n    2 + 2\n    4\n    digital_root(0)\n    0\n    digital_root(1)\n    1\n    digital_root(16)\n    1 + 6\n    7\n    digital_root(942)\n    9 + 4 + 2\n    15...\n    1 + 5\n    6\n    digital_root(132189)\n    1 + 3 + 2 + 1 + 8 + 9\n    24...\n    2 + 4\n    6\n    digital_root(32189)\n    3 +"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            if operator[i-1] == '+':\n                result += operand[i]\n            elif operator[i-1] == '-':\n                result -= operand[i]\n            elif operator[i-1] == '*':\n                result *= operand[i]\n            elif operator[i-1] == '//':\n                result //= operand[i]\n            elif operator[i-1] == '**':\n                result **= operand[i]\n    return result\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            if operator[i-1] == '+':\n                result += operand[i]\n            elif operator[i-1] == '-':\n                result -= operand[i]\n            elif operator[i-1] == '*':\n                result *= operand[i]\n            elif operator[i-1] == '//':\n                result //= operand[i]\n            elif operator[i-1] == '**':\n                result **= operand[i]\n    return result\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [c.lower() if c.isalpha() else c.upper() for c in s]\n    )\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [c.lower() if c.isalpha() else c.upper() for c in s]\n    )\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [c.lower() if c.isalpha() else c.upper() for c in s]\n    )\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [c.lower() if c.isalpha() else c.upper() for c in s]\n    )\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [c.lower() if c.isalpha() else c.upper() for c in s]\n    )\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [c.lower() if c.isalpha() else c.upper() for c in s]\n    )\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\""}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash equivalent string'md5', return its string equivalent.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef md5_to_hex(md5):\n    \"\"\"\n    Given an md5 hash equivalent string'md5', return its hex equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef hex_to_md5(hex):\n    \"\"\"\n    Given an md5 hash equivalent hex string 'hex', return its string equivalent.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base64(md5):\n    \"\"\"\n    Given an md5 hash equivalent string'md5', return its base64 equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base64('3e25960a79dbc69b674cd4ec67a72c62') == 'SGVsbG8gV29ybGQ='\n    \"\"\"\n\ndef base64_to_md5(base64):\n    \"\"\"\n    Given an md5 hash equivalent base64 string 'base64', return its string equivalent.\n    If 'base64' is an empty string, return None.\n\n    >>> base64_to_md5('SGVsbG8gV29ybGQ=') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base64_url(md5):\n    \"\"\"\n    Given an md5 hash equivalent string'md5', return its base64 url equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base64_url('3e25960a79dbc69b674cd4ec67a72c62') == 'SGVsbG8gV29ybGQ'\n    \"\"\"\n\ndef base64_url_to_md5(base64_url):\n    \"\"\"\n    Given an md5 hash equivalent base64 url string 'base64_url', return its string equivalent.\n    If 'base64_url' is an empty string, return None.\n\n    >>> base64_url_to_md5('SGVsbG8gV29ybGQ') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base64_url_safe(md5):\n    \"\"\"\n    Given an md5 hash equivalent string'md5', return its base64 url safe equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base64_url_safe('3e25960a79dbc69b674cd4ec67a72c62') == 'SGVsbG8gV29ybGQ'\n    \"\"\"\n\ndef base64_url_safe_to_md5(base64_url_safe):\n    \"\"\"\n    Given an md5 hash equivalent base64 url safe string 'base64_url_safe"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2"}
