{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n/week03/day02/01-list-introduction-2/01-list-introduction-2.py\n# Create a list named `t` that holds the following information:\n#  - The name of your family member and a number\n#  - The name of your friend and a number\n#  - The name of your best friend and a number\n#  - The name of your worst enemy and a number\n#\n# Print out the third element (index 2) of the list.\n\nt = [\"\", 1, \"\", 2, \"\", 3, \"\", 4]\n\nprint(t[2])\n/week03/day02/03-list-introduction-3/03-list-introduction-3.py\n# Create a list named `t` that holds the following information:\n#  - The name of your family member and a number\n#  - The name of your friend and a number\n#  - The name of your best friend and a number\n#  - The name of your worst enemy and a number\n#\n# Print out the name of the 4th element of the list.\n\nt = [\"\", 1, \"\", 2, \"\", 3, \"\", 4]\n\nprint(t[3])\n/week03/day02/02-list-introduction-1/02-list-introduction-1.py\n# Create a list named `t` that holds the following information:\n#  - The name of your family member and a number\n#  - The name of your friend and a number\n#  - The name of your best friend and a number\n#  - The name of your worst enemy and a number\n#\n# Print out the second element (index 1) of the list.\n\nt = [\"\", 1, \"\", 2, \"\", 3, \"\", 4]\n\nprint(t[1])\n/week03/day02/04-list-introduction-4/04-list-introduction-4.py\n# Create a list named `t` that holds the following information:\n#  - The name of your family member and a number\n#  - The name of your friend and a number\n#  - The name of your best friend and a number\n#  - The name of your worst enemy and a number\n#\n# Print out the name of the 5th element of the list.\n\nt = [\"\", 1, \"\", 2, \"\", 3, \"\", 4]\n\nprint(t[4])\n/week03/day02/05-list-introduction-5/05-list-introduction-5.py\n# Create a list named `t` that holds the following information:\n#  - The name of your family member and a number\n#  - The name of your friend and a number\n#  - The name of your best friend and a number\n#  - The name of your worst enemy and a number\n#\n# Print out the name of the 6th element of the list.\n\nt = [\"\", 1, \"\", 2, \"\", 3, \"\", 4]\n\nprint(t[5])\n/week03/day02/06-list-introduction-6/06-list-introduction-6.py\n# Create a list named `t` that holds the following information:\n#  - The name of your family member and a number\n#  - The name of your friend and a number\n#  - The name of your best friend and a number\n#  - The name of your worst enemy and a number\n#\n# Print out the name of the 7th element of the list.\n\nt = [\"\", 1, \"\", 2, \"\", 3, \"\", 4]\n\nprint(t[6])"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n/python/test_separate_paren_groups.py\nfrom separate_paren_groups import separate_paren_groups\n\n\ndef test_separate_paren_groups():\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_2(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_2(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_3(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_3(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_4(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_4(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_5(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_5(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_6(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_6(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_7(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_7(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_8(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_8(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_9(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_9(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_10(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_10(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_11(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_11(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_12(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n/python/tests/test_below_zero.py\nfrom below_zero import below_zero\n\n\ndef test_below_zero():\n    assert below_zero([1, 2, 3]) is False\n    assert below_zero([1, 2, -4, 5]) is True\n"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n/README.md\n# Python Data Science\n\nThis repository contains my notes and exercises from the book [Python Data Science Cookbook](https://www.packtpub.com/application-development/python-data-science-cookbook) by.\n\n## Chapter 1: Introduction to Python\n\n### 1.1.1. Hello World\n\n```python\nprint(\"Hello World!\")\n```\n\n### 1.1.2. Variables\n\n```python\nx = 10\ny = 20\nz = x + y\nprint(z)\n```\n\n### 1.1.3. Data Types\n\n```python\nx = 10\ny = 20\nz = x + y\nprint(z)\n```\n\n### 1.1.4. Operators\n\n```python\nx = 10\ny = 20\nz = x + y\nprint(z)\n```\n\n### 1.1.5. Control Flow\n\n```python\nx = 10\ny = 20\nz = x + y\nprint(z)\n```\n\n### 1.1.6. Functions\n\n```python\ndef add(x, y):\n    return x + y\n\nx = 10\ny = 20\nz = add(x, y)\nprint(z)\n```\n\n### 1.1.7. Modules\n\n```python\nimport math\n\nx = 10\ny = 20\nz = math.sqrt(x) + math.sqrt(y)\nprint(z)\n```\n\n### 1.1.8. Classes\n\n```python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\np = Point(10, 20)\nprint(p)\n```\n\n## Chapter 2: Data Structures\n\n### 2.2.1. Lists\n\n```python\nx = [1, 2, 3, 4, 5]\nprint(x)\n```\n\n### 2.2.2. Tuples\n\n```python\nx = (1, 2, 3, 4, 5)\nprint(x)\n```\n\n### 2.2.3. Sets\n\n```python\nx = {1, 2, 3, 4, 5}\nprint(x)\n```\n\n### 2.2.4. Dictionaries\n\n```python\nx = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nprint(x)\n```\n\n### 2.2.5. Comprehensions\n\n```python\nx = [i for i in range(1, 6)]\nprint(x)\n```\n\n### 2.2.6. Iterators\n\n```python\nx = [i for i in range(1, 6)]\nfor i in x:\n    print(i)\n```\n\n### 2.2.7. Generators\n\n```python\nx = (i for i in range(1, 6))\nfor i in x:\n    print(i)\n```\n\n### 2.2.8. Itertools\n\n```python\nimport itertools\n\nx = [1, 2, 3, 4, 5]\ny = itertools.cycle(x)\nfor i in y:\n    print(i)\n```\n\n### 2.2.9. Collections\n\n```python\nimport collections\n\nx = [1, 2, 3, 4, 5]\ny = collections.Counter(x)\nprint(y)\n```\n\n## Chapter 3: Data Manipulation\n\n### 3.3.1. Sorting\n\n```python\nx = [1, 2"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n/README.md\n# CS1010-19T2\n\nThis repository contains the coursework for CS1010, Semester 1, 2019/2020.\n\n## Coursework\n\n### Week 1\n\n* [Week 1](https://github.com/CS1010/cs1010.github.io/blob/master/week1.md)\n* [Week 1 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week1-exercises.md)\n\n### Week 2\n\n* [Week 2](https://github.com/CS1010/cs1010.github.io/blob/master/week2.md)\n* [Week 2 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week2-exercises.md)\n\n### Week 3\n\n* [Week 3](https://github.com/CS1010/cs1010.github.io/blob/master/week3.md)\n* [Week 3 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week3-exercises.md)\n\n### Week 4\n\n* [Week 4](https://github.com/CS1010/cs1010.github.io/blob/master/week4.md)\n* [Week 4 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week4-exercises.md)\n\n### Week 5\n\n* [Week 5](https://github.com/CS1010/cs1010.github.io/blob/master/week5.md)\n* [Week 5 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week5-exercises.md)\n\n### Week 6\n\n* [Week 6](https://github.com/CS1010/cs1010.github.io/blob/master/week6.md)\n* [Week 6 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week6-exercises.md)\n\n### Week 7\n\n* [Week 7](https://github.com/CS1010/cs1010.github.io/blob/master/week7.md)\n* [Week 7 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week7-exercises.md)\n\n### Week 8\n\n* [Week 8](https://github.com/CS1010/cs1010.github.io/blob/master/week8.md)\n* [Week 8 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week8-exercises.md)\n\n### Week 9\n\n* [Week 9](https://github.com/CS1010/cs1010.github.io/blob/master/week9.md)\n* [Week 9 Exercises](https://github.com/CS1010/cs1010.github.io/blob/master/week9-exercises.md)\n\n### Week 10\n\n* [Week 10](https://github.com/CS1010/cs1010.github.io/blob/master/week10.md)\n* [Week 10 Exercises](https://github.com/CS1010/cs"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n/python/tests/test_nested_parens.py\nfrom unittest import TestCase\n\nfrom python.nested_parens import parse_nested_parens\n\n\nclass TestParseNestedParens(TestCase):\n    def test_empty_string(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_multiple_groups(self):\n        self.assertEqual(parse_nested_parens('() () ()'), [1, 1, 1])\n\n    def test_multiple_groups_with_nesting(self):\n        self.assertEqual(parse_nested_parens('() () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ()"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n/README.md\n# Python-101\n\n## Description\n\nThis repository contains a set of exercises for learning Python.\n\n## Exercises\n\n### Basics\n\n- [x] [Hello World](https://github.com/kamil-kisiela/Python-101/blob/master/basics/hello_world.py)\n- [x] [Variables](https://github.com/kamil-kisiela/Python-101/blob/master/basics/variables.py)\n- [x] [Strings](https://github.com/kamil-kisiela/Python-101/blob/master/basics/strings.py)\n- [x] [Lists](https://github.com/kamil-kisiela/Python-101/blob/master/basics/lists.py)\n- [x] [Dictionaries](https://github.com/kamil-kisiela/Python-101/blob/master/basics/dictionaries.py)\n- [x] [Tuples](https://github.com/kamil-kisiela/Python-101/blob/master/basics/tuples.py)\n- [x] [Sets](https://github.com/kamil-kisiela/Python-101/blob/master/basics/sets.py)\n- [x] [Functions](https://github.com/kamil-kisiela/Python-101/blob/master/basics/functions.py)\n- [x] [Conditions](https://github.com/kamil-kisiela/Python-101/blob/master/basics/conditions.py)\n- [x] [Loops](https://github.com/kamil-kisiela/Python-101/blob/master/basics/loops.py)\n- [x] [Exceptions](https://github.com/kamil-kisiela/Python-101/blob/master/basics/exceptions.py)\n- [x] [Classes](https://github.com/kamil-kisiela/Python-101/blob/master/basics/classes.py)\n- [x] [Modules](https://github.com/kamil-kisiela/Python-101/blob/master/basics/modules.py)\n- [x] [Packages](https://github.com/kamil-kisiela/Python-101/blob/master/basics/packages.py)\n- [x] [Type hints](https://github.com/kamil-kisiela/Python-101/blob/master/basics/type_hints.py)\n- [x] [Decorators](https://github.com/kamil-kisiela/Python-101/blob/master/basics/decorators.py)\n- [x] [Generators](https://github.com/kamil-kisiela/Python-101/blob/master/basics/generators.py)\n- [x] [Context managers](https://github.com/kamil-kisiela/Python-101/blob/master/basics/context_managers.py)\n- [x] [Iterators](https://github.com/kamil-kisiela/Python-101/blob/master/basics/iterators.py)\n- [x] [Generators vs Iterators](https://github.com/kamil-kisiela/Python-101/blob/master/basics/generators_vs_iterators.py)\n- [x] [Generators vs Iterators - 2](https://github.com/kamil-kisiela/Python-101/blob/master/basics/generators_vs_iterators_2.py)\n- [x] [Generators vs Iterators - 3](https://github.com/kamil-kisiela/Python-101"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n/python/exercises/lists/list_manipulation.py\nfrom typing import List\n\n\ndef list_manipulation(lst: List[int], command: str, location: str, *args) -> List[int]:\n    \"\"\"\n    >>> list_manipulation([1, 2, 3], \"remove\", \"end\", 1)\n    [1, 2]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"beginning\", 2)\n    [2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"beginning\", 20)\n    [20, 1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"end\", 30)\n    [1, 2, 3, 30]\n    >>> list_manipulation([1, 2, 3], \"add\", \"beginning\", 10, 20)\n    [10, 20, 1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"end\", 10, 20)\n    [1, 2, 3, 10, 20]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"beginning\", 2)\n    [3]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"end\", 2)\n    [1, 2]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"beginning\", 10)\n    [1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"end\", 10)\n    [1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"beginning\", 10, 20, 30, 40)\n    [10, 20, 30, 40, 1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"end\", 10, 20, 30, 40)\n    [1, 2, 3, 10, 20, 30, 40]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"beginning\", 10, 20, 30, 40)\n    [1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"end\", 10, 20, 30, 40)\n    [1, 2, 3]\n    \"\"\"\n/python/exercises/lists/list_manipulation_2.py\nfrom typing import List\n\n\ndef list_manipulation(lst: List[int], command: str, location: str, *args) -> List[int]:\n    \"\"\"\n    >>> list_manipulation([1, 2, 3], \"remove\", \"end\", 1)\n    [1, 2]\n    >>> list_manipulation([1, 2, 3], \"remove\", \"beginning\", 2)\n    [2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"beginning\", 20)\n    [20, 1, 2, 3]\n    >>> list_manipulation([1, 2, 3], \"add\", \"end\", 30)\n    [1, 2, 3, 30]\n    >>> list_manipulation([1, 2, 3], \"add\", \"beginning\", 10, 20)\n    [10, 20, 1, 2,"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n/README.md\n# Python Data Structures and Algorithms\n\nThis repository contains my implementations of various data structures and algorithms in Python.\n\n## Data Structures\n\n### Linked List\n\n### Stack\n\n### Queue\n\n### Tree\n\n### Graph\n\n## Algorithms\n\n### Sorting\n\n### Searching\n\n### Graph Traversal\n\n### Dynamic Programming\n\n### Greedy Algorithms\n\n### Divide and Conquer\n\n### Backtracking\n\n### Randomized Algorithms\n\n### String Algorithms\n\n### Bit Algorithms\n\n### Geometry Algorithms\n\n### Math Algorithms\n\n### Probability Algorithms\n\n### Cryptography Algorithms\n\n### Machine Learning Algorithms\n\n### Deep Learning Algorithms\n\n### Computer Vision Algorithms\n\n### Natural Language Processing Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n### Computer Vision Algorithms\n\n###"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n#    print(string)\n    if is_palindrome(string):\n        return string\n    else:\n        # Find the longest palindromic suffix of the string\n        suffix = find_longest_palindromic_suffix(string)\n        # Find the prefix of the string that comes before the palindromic suffix\n        prefix = string[:len(string) - len(suffix)]\n        # Reverse the prefix\n        prefix = prefix[::-1]\n        # Append the prefix to the suffix\n        return prefix + suffix\n\n\ndef find_longest_palindromic_suffix(string: str) -> str:\n    \"\"\" Find the longest palindromic suffix of a string.\n    >>> find_longest_palindromic_suffix('')\n    ''\n    >>> find_longest_palindromic_suffix('cat')\n    'at'\n    >>> find_longest_palindromic_suffix('cata')\n    'ta'\n    \"\"\"\n    # Find the longest palindromic suffix of the string\n    longest_suffix = ''\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if is_palindrome(string[i:j+1]):\n                if len(string[i:j+1]) > len(longest_suffix):\n                    longest_suffix = string[i:j+1]\n    return longest_suffix\n\n\ndef main():\n    \"\"\" Main function \"\"\"\n    # Read the input from the file\n    with open('input.txt', 'r') as input_file:\n        input_string = input_file.read()\n    # Find the shortest palindrome that begins with the input string\n    palindrome = make_palindrome(input_string)\n    # Write the result to the output file\n    with open('output.txt', 'w') as output_file:\n        output_file.write(palindrome)\n\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Palindromes\n\nThis is a solution to the [Palindromes](https://www.hackerrank.com/challenges/palindromes) problem on HackerRank.\n\n## Problem\n\nGiven a string, find the shortest palindrome that begins with the string.\n\n## Solution\n\nThe solution is implemented in Python 3.\n\nThe algorithm is based on the following idea:\n\n- Find the longest palindromic suffix of the string.\n- Find the prefix of the string that comes before the palindromic suffix.\n- Reverse the prefix.\n- Append the prefix to the suffix.\n\n## Usage\n\nThe solution can be run with the following command:\n\n```\npython3 palindromes.py\n```\n\nThe input and output files are located in the `data` directory.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_2(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_2(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_3(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_3(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_4(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_4(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_5(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_5(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_6(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_6(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_7(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_7(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_8(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list_8(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n/python/exercises/lists/lists.py\nfrom typing import List\n\n\ndef first(xs: List[int]) -> int:\n    \"\"\" Return the first element of the list.\n    >>> first([1, 2, 3])\n    1\n    >>> first([1])\n    1\n    \"\"\"\n\n\ndef last(xs: List[int]) -> int:\n    \"\"\" Return the last element of the list.\n    >>> last([1, 2, 3])\n    3\n    >>> last([1])\n    1\n    \"\"\"\n\n\ndef rest(xs: List[int]) -> List[int]:\n    \"\"\" Return the list without the first element.\n    >>> rest([1, 2, 3])\n    [2, 3]\n    >>> rest([1])\n    []\n    \"\"\"\n\n\ndef reverse(xs: List[int]) -> List[int]:\n    \"\"\" Return the list in reverse order.\n    >>> reverse([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse([1])\n    [1]\n    \"\"\"\n\n\ndef append(xs: List[int], ys: List[int]) -> List[int]:\n    \"\"\" Return the list with the elements of ys appended to the end of xs.\n    >>> append([1, 2], [3, 4])\n    [1, 2, 3, 4]\n    >>> append([1], [2])\n    [1, 2]\n    \"\"\"\n\n\ndef concat(xs: List[List[int]]) -> List[int]:\n    \"\"\" Return the list of all the elements of the lists in xs.\n    >>> concat([[1, 2], [3, 4]])\n    [1, 2, 3, 4]\n    >>> concat([[1], [2]])\n    [1, 2]\n    \"\"\"\n\n\ndef length(xs: List[int]) -> int:\n    \"\"\" Return the number of elements in the list.\n    >>> length([1, 2, 3])\n    3\n    >>> length([1])\n    1\n    \"\"\"\n\n\ndef empty(xs: List[int]) -> bool:\n    \"\"\" Return True if the list is empty, False otherwise.\n    >>> empty([1, 2, 3])\n    False\n    >>> empty([1])\n    False\n    >>> empty([])\n    True\n    \"\"\"\n\n\ndef index(xs: List[int], i: int) -> int:\n    \"\"\" Return the element at position i in the list.\n    >>> index([1, 2, 3], 0)\n    1\n    >>> index([1, 2, 3], 1)\n    2\n    >>> index([1, 2, 3], 2)\n    3\n    \"\"\"\n\n\ndef set_index(xs: List[int], i: int, x: int) -> List[int]:\n    \"\"\" Return the list with the element at position i replaced with x.\n    >>> set_index([1, 2, 3], 0, 4)\n    [4, 2, 3]\n    >>> set_index([1, 2, 3], 1, 4)\n    [1, 4, 3]\n    >>> set_index([1, 2, 3], 2, 4)\n    [1, 2, 4]\n    \"\"\"\n\n\ndef delete_index(xs: List[int], i: int) -> List[int]:\n    \"\"\" Return the list with the element at position i removed.\n    >>> delete_index([1, 2, 3], 0)\n    [2, 3]\n    >>> delete_index([1, 2, 3], 1)\n    [1, 3]\n    >>> delete_index([1, 2, 3], 2)\n    [1, 2]\n    \"\"\"\n\n\ndef delete(xs: List[int], x: int) -> List[int]:\n    \"\"\" Return the list with all occurrences of x removed.\n    >>> delete([1, 2, 3, 1, 2, 3], 1)\n    [2, 3, 2, 3]\n    >>> delete([1, 2, 3, 1, 2, 3], 2)\n    [1, 3, 1, "}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(13)\n    True\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Return True if n is perfect, False otherwise\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(10)\n    False\n    \"\"\"\n\ndef is_deficient(n: int) -> bool:\n    \"\"\" Return True if n is deficient, False otherwise\n    >>> is_deficient(6)\n    False\n    >>> is_deficient(10)\n    True\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Return True if n is abundant, False otherwise\n    >>> is_abundant(6)\n    True\n    >>> is_abundant(10)\n    False\n    \"\"\"\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Return True if n is a perfect square, False otherwise\n    >>> is_perfect_square(6)\n    False\n    >>> is_perfect_square(10)\n    False\n    >>> is_perfect_square(16)\n    True\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(1)\n    True\n    >>> is_palindrome(10)\n    False\n    >>> is_palindrome(121)\n    True\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is an Armstrong number, False otherwise\n    >>> is_armstrong(1)\n    True\n    >>> is_armstrong(10)\n    False\n    >>> is_armstrong(153)\n    True\n    \"\"\"\n\ndef is_strong(n: int) -> bool:\n    \"\"\" Return True if n is a strong number, False otherwise\n    >>> is_strong(1)\n    True\n    >>> is_strong(10)\n    False\n    >>> is_strong(145)\n    True\n    \"\"\"\n\ndef is_deficient_perfect_abundant(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect or abundant, False otherwise\n    >>> is_deficient_perfect_abundant(6)\n    True\n    >>> is_deficient_perfect_abundant(10)\n    False\n    >>> is_deficient_perfect_abundant(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant or strong, False otherwise\n    >>> is_deficient_perfect_abundant_strong(6)\n    True\n    >>> is_deficient_perfect_abundant_strong(10)\n    False\n    >>> is_deficient_perfect_abundant_strong(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant, strong or palindrome, False otherwise\n    >>> is_deficient_perfect_abundant_strong_palindrome(6)\n    True\n    >>> is_deficient_perfect_abundant_strong_palindrome(10)\n    False\n    >>> is_deficient_perfect_abundant_strong_palindrome(12)\n    False\n    \"\"\"\n\ndef is_deficient_perfect_abundant_strong_palindrome_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is deficient, perfect, abundant, strong, palindrome or armstrong, False otherwise\n    >>> is_deficient_perfect_abundant_strong_palindrome_armstrong(6)\n    True\n    >>> is_"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n/README.md\n# Python-Algorithms\n\nThis repository contains a collection of algorithms implemented in Python.\n\n## Algorithms\n\n### Sorting\n\n- [Bubble Sort](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/sorting/bubble_sort.py)\n- [Insertion Sort](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/sorting/insertion_sort.py)\n- [Merge Sort](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/sorting/merge_sort.py)\n- [Quick Sort](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/sorting/quick_sort.py)\n- [Selection Sort](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/sorting/selection_sort.py)\n\n### Searching\n\n- [Binary Search](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/searching/binary_search.py)\n- [Linear Search](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/searching/linear_search.py)\n\n### Graphs\n\n- [Breadth First Search](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/graphs/breadth_first_search.py)\n- [Depth First Search](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/graphs/depth_first_search.py)\n\n### Strings\n\n- [All Prefixes](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/all_prefixes.py)\n- [Longest Common Subsequence](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_common_subsequence.py)\n- [Longest Common Substring](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_common_substring.py)\n- [Longest Palindromic Substring](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_palindromic_substring.py)\n- [Longest Repeating Substring](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_substring.py)\n- [Longest Repeating Subsequence](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_subsequence.py)\n- [Longest Repeating Substring](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_substring.py)\n- [Longest Repeating Subsequence](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_subsequence.py)\n- [Longest Repeating Substring](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_substring.py)\n- [Longest Repeating Subsequence](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_subsequence.py)\n- [Longest Repeating Substring](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_substring.py)\n- [Longest Repeating Subsequence](https://github.com/kyle-mcdonald/Python-Algorithms/blob/master/strings/longest_repeating_subsequence.py)\n- [Longest Repeating Substring](https://github.com/"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_step(n: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive with step.\n    >>> string_sequence_with_step(0, 1)\n    '0'\n    >>> string_sequence_with_step(5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step(5, 2)\n    '0 2 4 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start(n: int, step: int, start: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto n inclusive with step.\n    >>> string_sequence_with_step_and_start(0, 1, 0)\n    '0'\n    >>> string_sequence_with_step_and_start(5, 1, 0)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 0)\n    '0 2 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 1)\n    '1 3 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end(start: int, end: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive with step.\n    >>> string_sequence_with_step_and_start_and_end(0, 5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start_and_end(0, 5, 2)\n    '0 2 4 5'\n    >>> string_sequence_with_step_and_start_and_end(1, 5, 2)\n    '1 3 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator(start: int, end: int, step: int, separator: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive with step.\n    >>> string_sequence_with_step_and_start_and_end_and_separator(0, 5, 1, ',')\n    '0,1,2,3,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator(0, 5, 2, ',')\n    '0,2,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator(1, 5, 2, ',')\n    '1,3,5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator_and_prefix(start: int, end: int, step: int, separator: str, prefix: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive with step.\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(0, 5, 1, ',', 'prefix')\n    'prefix 0,1,2,3,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(0, 5, 2, ',', 'prefix')\n    'prefix 0,2,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(1, 5, 2, ',', 'prefix')\n    'prefix 1,3,5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator_and_prefix_and_suffix(start: int, end: int, step: int"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_4('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_5('xyzXYZ')\n    3\n    >>> count_distinct_characters_5('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_6(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_6('xyzXYZ')\n    3\n    >>> count_distinct_characters_6('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_7(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_7('xyzXYZ')\n    3\n    >>> count_distinct_characters_7('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_8(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_8('xyzXYZ')\n    3\n    >>> count_distinct_characters_8('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_9(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_9('xyzXYZ')\n    3\n    >>> count_distinct_characters_9('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_10(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_10('xyzXYZ')\n    3\n    >>> count_distinct_characters_10('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_11(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_11('xyzXYZ')\n    3\n    >>> count_distinct_characters_11('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_12(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_12('xyzXYZ')\n    3\n    >>> count_distinct_characters_12('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_13(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n/README.md\n# Python-tasks\n\nThis repository contains tasks for Python programming language.\n\n## Tasks\n\n### 1. [Parse music](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/parse_music.py)\n\n### 2. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 3. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 4. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 5. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 6. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 7. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 8. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 9. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 10. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 11. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 12. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 13. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 14. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 15. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 16. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 17. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 18. [Find the longest word](https://github.com/Maksym-Kalynets/Python-tasks/blob/master/find_the_longest_word.py)\n\n### 19. [Find the longest word]("}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_3('', 'a')\n    0\n    >>> how_many_times_3('aaa', 'a')\n    3\n    >>> how_many_times_3('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_4(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_4('', 'a')\n    0\n    >>> how_many_times_4('aaa', 'a')\n    3\n    >>> how_many_times_4('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_5(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_5('', 'a')\n    0\n    >>> how_many_times_5('aaa', 'a')\n    3\n    >>> how_many_times_5('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_6(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_6('', 'a')\n    0\n    >>> how_many_times_6('aaa', 'a')\n    3\n    >>> how_many_times_6('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_7(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_7('', 'a')\n    0\n    >>> how_many_times_7('aaa', 'a')\n    3\n    >>> how_many_times_7('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_8(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_8('', 'a')\n    0\n    >>> how_many_times_8('aaa', 'a')\n    3\n    >>> how_many_times_8('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_9(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_9('', 'a')\n    0\n    >>> how_many_times_9('aaa', 'a')\n    3\n    >>> how_many_times_9('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_10(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_10('', 'a')\n    0\n    >>> how_many_times_10('aaa', 'a')\n    3\n    >>> how_many_times_10('aaaa',"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n#    numbers = numbers.split()\n#    numbers.sort()\n#    return''.join(numbers)\n\n    return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_3('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_4(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_4('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_5(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_5('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_6(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_6('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef sort_numbers_7(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_7('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n\n\ndef"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n/README.md\n# Python-Exercises\n\nThis repository contains a collection of exercises that I have completed in Python.\n\n## Exercises\n\n### Basics\n\n- [x] [Hello World](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/hello_world.py)\n- [x] [Variables](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/variables.py)\n- [x] [Strings](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/strings.py)\n- [x] [Lists](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/lists.py)\n- [x] [Tuples](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/tuples.py)\n- [x] [Dictionaries](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/dictionaries.py)\n- [x] [Sets](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/sets.py)\n- [x] [Functions](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/functions.py)\n- [x] [Modules](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/modules.py)\n- [x] [Classes](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/classes.py)\n- [x] [Exceptions](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/exceptions.py)\n- [x] [Input](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/input.py)\n- [x] [Output](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/output.py)\n- [x] [Errors](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/errors.py)\n- [x] [Files](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/files.py)\n- [x] [Time](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/time.py)\n- [x] [Random](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/random.py)\n- [x] [Math](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/math.py)\n- [x] [Date](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/date.py)\n- [x] [Regex](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/regex.py)\n- [x] [JSON](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/json.py)\n- [x] [CSV](https://github.com/Joshua-Brown/Python-Exercises/blob/master/Basics/csv.py)\n- [x] [SQLite](https://github.com/Joshua-Brown/Python-"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\ndef rescale_to_range(numbers: List[float], low: float, high: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range([1.0, 2.0, 3.0, 4.0, 5.0], -1, 1)\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \"\"\"\n\ndef rescale_to_range_inplace(numbers: List[float], low: float, high: float) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    >>> rescale_to_range_inplace(numbers, -1, 1)\n    >>> numbers\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \"\"\"\n\ndef rescale_to_range_inplace_2(numbers: List[float], low: float, high: float) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    >>> rescale_to_range_inplace_2(numbers, -1, 1)\n    >>> numbers\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \"\"\"\n\ndef rescale_to_range_inplace_3(numbers: List[float], low: float, high: float) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    >>> rescale_to_range_inplace_3(numbers, -1, 1)\n    >>> numbers\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \"\"\"\n\ndef rescale_to_range_inplace_4(numbers: List[float], low: float, high: float) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    >>> rescale_to_range_inplace_4(numbers, -1, 1)\n    >>> numbers\n    [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \"\"\"\n\ndef rescale_to_range_inplace_5(numbers: List[float], low: float, high: float) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    >>> rescale_to_range_inplace_5(numbers, -1, 1)\n    >>> numbers\n    [-1.0, -0.5, 0.0, 0."}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n/README.md\n# Python-101\n\n## Introduction\n\nThis repository contains a set of exercises to get familiar with Python.\n\n## Exercises\n\n### Exercise 1\n\nWrite a function that takes a list of any python values and returns a list of integers.\n\n### Exercise 2\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 3\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 4\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 5\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 6\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 7\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 8\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 9\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 10\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 11\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 12\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 13\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 14\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 15\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 16\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 17\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 18\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 19\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 20\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 21\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 22\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 23\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 24\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 25\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 26\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 27\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 28\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 29\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 30\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 31\n\nWrite a function that takes a list of integers and returns a list of even numbers.\n\n### Exercise 32\n\nWrite a function that takes a list of integers and returns a list of even"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('abc', '')\n    'abc'\n    >>> strcat('', 'def')\n    'def'\n    \"\"\"\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of char in string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'c')\n    'c'\n    >>> strchr('abc', 'd')\n    ''\n    \"\"\"\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'abd')\n    -1\n    >>> strcmp('abd', 'abc')\n    1\n    \"\"\"\n\ndef strcpy(string1: str, string2: str) -> str:\n    \"\"\" Copy string2 to string1\n    >>> strcpy('abc', 'def')\n    'def'\n    >>> strcpy('abc', '')\n    ''\n    >>> strcpy('', 'def')\n    'def'\n    \"\"\"\n\ndef strncat(string1: str, string2: str, n: int) -> str:\n    \"\"\" Concatenate string2 to string1, but only up to n characters\n    >>> strncat('abc', 'def', 2)\n    'abcdef'\n    >>> strncat('abc', 'def', 3)\n    'abcde'\n    >>> strncat('abc', 'def', 4)\n    'abcde'\n    >>> strncat('abc', 'def', 5)\n    'abcdef'\n    \"\"\"\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare string1 and string2, but only up to n characters\n    >>> strncmp('abc', 'abc', 2)\n    0\n    >>> strncmp('abc', 'abd', 2)\n    -1\n    >>> strncmp('abd', 'abc', 2)\n    1\n    \"\"\"\n\ndef strncpy(string1: str, string2: str, n: int) -> str:\n    \"\"\" Copy string2 to string1, but only up to n characters\n    >>> strncpy('abc', 'def', 2)\n    'de'\n    >>> strncpy('abc', 'def', 3)\n    'def'\n    >>> strncpy('abc', 'def', 4)\n    'def'\n    >>> strncpy('abc', 'def', 5)\n    'def'\n    \"\"\"\n\ndef strstr(string: str, substring: str) -> str:\n    \"\"\" Return first occurrence of substring in string\n    >>> strstr('abc', 'a')\n    'a'\n    >>> strstr('abc', 'b')\n    'b'\n    >>> strstr('abc', 'c')\n    'c'\n    >>> strstr('abc', 'd')\n    ''\n    \"\"\"\n\ndef strspn(string: str, substring: str) -> int:\n    \"\"\" Return number of characters in string that are in substring\n    >>> strspn('abc', 'a')\n    1\n    >>> strspn('abc', 'b')\n    1\n    >>> strspn('abc', 'c')\n    1\n    >>> strspn('abc', 'd')\n    0\n    \"\"\"\n\ndef strcspn(string: str, substring: str) -> int:\n    \"\"\" Return number of characters in string that are not in substring\n    >>> strcspn('abc', 'a')\n    2\n    >>> strcspn('abc', 'b')\n    2\n    >>> strcspn('abc', 'c')\n    2\n    >>> strcspn('abc', 'd')\n    3\n    \"\"\"\n\ndef strpbrk(string: str, substring: str) -> str:\n    \"\"\" Return first occurrence of any character in substring in string\n    >>>"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(15)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Check if a number is a palindrome\n    >>> is_palindrome(121)\n    True\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Check if a number is an Armstrong number\n    >>> is_armstrong(153)\n    True\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Check if a number is a perfect number\n    >>> is_perfect(6)\n    True\n    \"\"\"\n\ndef is_deficient(n: int) -> bool:\n    \"\"\" Check if a number is a deficient number\n    >>> is_deficient(6)\n    False\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Check if a number is an abundant number\n    >>> is_abundant(6)\n    True\n    \"\"\"\n\ndef is_strong(n: int) -> bool:\n    \"\"\" Check if a number is a strong number\n    >>> is_strong(6)\n    True\n    \"\"\"\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Check if a number is a perfect square\n    >>> is_perfect_square(6)\n    False\n    \"\"\"\n\ndef is_triangular(n: int) -> bool:\n    \"\"\" Check if a number is a triangular number\n    >>> is_triangular(6)\n    True\n    \"\"\"\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" Check if a number is a pentagonal number\n    >>> is_pentagonal(6)\n    True\n    \"\"\"\n\ndef is_hexagonal(n: int) -> bool:\n    \"\"\" Check if a number is a hexagonal number\n    >>> is_hexagonal(6)\n    True\n    \"\"\"\n\ndef is_heptagonal(n: int) -> bool:\n    \"\"\" Check if a number is a heptagonal number\n    >>> is_heptagonal(6)\n    True\n    \"\"\"\n\ndef is_octagonal(n: int) -> bool:\n    \"\"\" Check if a number is an octagonal number\n    >>> is_octagonal(6)\n    True\n    \"\"\"\n\ndef is_square(n: int) -> bool:\n    \"\"\" Check if a number is a square number\n    >>> is_square(6)\n    False\n    \"\"\"\n\ndef is_cube(n: int) -> bool:\n    \"\"\" Check if a number is a cube number\n    >>> is_cube(6)\n    False\n    \"\"\"\n\ndef is_square_pyramidal(n: int) -> bool:\n    \"\"\" Check if a number is a square pyramidal number\n    >>> is_square_pyramidal(6)\n    False\n    \"\"\"\n\ndef is_triangular_pyramidal(n: int) -> bool:\n    \"\"\" Check if a number is a triangular pyramidal number\n    >>> is_triangular_pyramidal(6)\n    False\n    \"\"\"\n\ndef is_pentagonal_pyramidal(n: int) -> bool:\n    \"\"\" Check if a number is a pentagonal pyramidal number\n    >>> is_pentagonal_pyramidal(6)\n    False\n    \"\"\"\n\ndef is_hexagonal_pyramidal(n: int) -> bool:\n    \"\"\" Check if a number is a hexagonal pyramidal number\n    >>> is_hexagonal_pyramidal(6)\n    False\n    \"\"\"\n\ndef is_heptagonal_pyramidal(n: int) -> bool:\n    \"\"\" Check if a number is a heptagonal pyramidal number\n    >>> is_heptagonal_pyramidal(6)\n    False\n    \"\"\"\n\ndef is_octagonal_pyramidal(n: int) -> bool:\n    \"\"\" Check if a number is an octagonal pyramidal number\n    >>> is_octagonal_pyramidal(6)\n    False\n    \"\"\""}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n/week03/day01/02_list_to_dict.py\n# Create a function that takes a list of strings as parameter,\n#  and returns a dictionary with every string as a key and it's length as a value\n#  Example: [\"hello\", \"edabit\"] should produce {\"hello\": 5, \"edabit\": 6}\n\ndef list_to_dict(lst):\n    return {i: len(i) for i in lst}\n/week03/day01/01_sum_of_digits.py\n# Create a function that takes a number as an argument and returns the sum of its digits.\n#  Examples\n#  sum_of_digits(6) \u279e 6\n#  sum_of_digits(123) \u279e 6\n#  sum_of_digits(4217) \u279e 12\n#  sum_of_digits(1) \u279e 1\n#  sum_of_digits(0) \u279e 0\n\ndef sum_of_digits(number):\n    return sum([int(i) for i in str(number)])\n/week03/day01/03_sum_of_numbers.py\n# Create a function that takes a list of numbers and returns the sum of the first two numbers.\n#  If the list only has one number, return that number.\n#  Examples\n#  sum_two([1, 2, 3]) \u279e 3\n#  sum_two([4, 1]) \u279e 4\n#  sum_two([4, 1, 7, 6]) \u279e 4\n#  sum_two([1]) \u279e 1\n\ndef sum_two(lst):\n    return sum(lst[:2]) if len(lst) > 1 else lst[0]\n/week03/day01/04_sum_of_numbers_in_list.py\n# Create a function that takes a list of numbers and returns the sum of the first and last number.\n#  If the list is empty, return 0.\n#  Examples\n#  sum_first_and_last([2, 7, 3]) \u279e 5\n#  sum_first_and_last([10]) \u279e 10\n#  sum_first_and_last([]) \u279e 0\n\ndef sum_first_and_last(lst):\n    return sum(lst[:2]) if len(lst) > 1 else lst[0] if len(lst) > 0 else 0\n/week03/day01/05_sum_of_numbers_in_list.py\n# Create a function that takes a list of numbers and returns the sum of the first and last number.\n#  If the list is empty, return 0.\n#  Examples\n#  sum_first_and_last([2, 7, 3]) \u279e 5\n#  sum_first_and_last([10]) \u279e 10\n#  sum_first_and_last([]) \u279e 0\n\ndef sum_first_and_last(lst):\n    return sum(lst[:2]) if len(lst) > 1 else lst[0] if len(lst) > 0 else 0\n/week03/day01/06_sum_of_numbers_in_list.py\n# Create a function that takes a list of numbers and returns the sum of the first and last number.\n#  If the list is empty, return 0.\n#  Examples\n#  sum_first_and_last([2, 7, 3]) \u279e 5\n#  sum_first_and_last([10]) \u279e 10\n#  sum_first_and_last([]) \u279e 0\n\ndef sum_first_and_last(lst):\n    return sum(lst[:2]) if len(lst) >"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n/python/exercises/lists/remove_duplicates.py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))\n/python/exercises/lists/remove_duplicates_2.py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n/python/exercises/lists/remove_duplicates_3.py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\n"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the characters.\n    >>> reverse_string('Hello')\n    'olleH'\n    \"\"\"\n\ndef reverse_words(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words.\n    >>> reverse_words('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_2(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_2('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_3(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_3('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_4(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_4('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_5(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_5('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_6(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_6('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_7(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_7('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_8(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_8('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_9(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_9('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_10(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_10('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_11(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_11('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_12(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_12('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_13(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_13('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_14(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_14('Hello World')\n   "}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n/README.md\n# Python 3.7.4\n\n## Installation\n\n```bash\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n```\n\n## Run\n\n```bash\n$ python3 main.py\n```\n\n## Test\n\n```bash\n$ python3 -m unittest\n```\n/main.py\nfrom typing import List\n\nfrom src.concatenate import concatenate\n\n\ndef main() -> None:\n    \"\"\" Main function\n    \"\"\"\n    print(concatenate(['a', 'b', 'c']))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n# BEGIN SOLUTION\n    return [s for s in strings if s.startswith(prefix)]\n# END SOLUTION\n\n\ndef test_filter_by_prefix():\n    assert filter_by_prefix([], 'a') == []\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/01-basics/01-hello-world/hello_world.py\n\"\"\"\nWrite a function that prints \"Hello, World!\" to the console.\n\"\"\"\n\n\ndef hello_world():\n    \"\"\"\n    >>> hello_world()\n    Hello, World!\n    \"\"\"\n\n# BEGIN SOLUTION\n    print(\"Hello, World!\")\n# END SOLUTION\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/01-basics/03-sum-of-digits/sum_of_digits.py\n\"\"\"\nWrite a function that takes a positive integer and returns the sum of its digits.\n\"\"\"\n\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"\n    >>> sum_of_digits(123)\n    6\n    >>> sum_of_digits(1000)\n    1\n    >>> sum_of_digits(1234567890)\n    45\n    \"\"\"\n\n# BEGIN SOLUTION\n    return sum([int(c) for c in str(n)])\n# END SOLUTION\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/01-basics/02-sum-of-squares/sum_of_squares.py\n\"\"\"\nWrite a function that takes a positive integer and returns the sum of its squares.\n\"\"\"\n\n\ndef sum_of_squares(n: int) -> int:\n    \"\"\"\n    >>> sum_of_squares(1)\n    1\n    >>> sum_of_squares(2)\n    5\n    >>> sum_of_squares(3)\n    14\n    \"\"\"\n\n# BEGIN SOLUTION\n    return sum([i**2 for i in range(1, n+1)])\n# END SOLUTION\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/01-basics/04-sum-of-digits-in-string/sum_of_digits_in_string.py\n\"\"\"\nWrite a function that takes a string and returns the sum of its digits.\n\"\"\"\n\n\ndef sum_of_digits_in_string(s: str) -> int:\n    \"\"\"\n    >>> sum_of_digits_in_string(\"123\")\n    6\n    >>> sum_of_digits_in_string(\"1000\")\n    1\n    >>> sum_of_digits_in_string(\"1234567890\")\n    45\n    \"\"\"\n\n# BEGIN SOLUTION\n    return sum([int(c) for c in s if c.isdigit()])\n# END SOLUTION\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/python/01-basics/05-sum-of-digits-in-string-2/sum_of_digits_in_string_2.py\n\"\"\"\nWrite a function that takes a string and returns the sum of its digits.\n\"\"\"\n\n\ndef sum_of_digits_in_string_2(s: str) -> int:\n    \"\"\"\n    >>> sum_of_digits_in_string_2(\"123\")\n    6\n    >>> sum_of_digits_in_string_2(\"1000\")\n    1\n    >>> sum_of_digits_in_string_2(\"1234567890\")\n    45\n    \"\"\"\n\n# BEGIN SOLUTION\n    return sum([int(c) for c in s if c.isdigit()])\n# END SOLUTION\n\n\nif __name__ == '__main__':\n    import doctest"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 4, 0, 123, -10]\n    \"\"\"\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([1, 2, 3, 4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -5, 3, -3, 9, 1, -10]\n    \"\"\"\n\ndef get_divisible_by(l: list, n: int):\n    \"\"\"Return only numbers divisible by n in the list.\n    >>> get_divisible_by([1, 2, 3, 4, 5, 6], 2)\n    [2, 4, 6]\n    >>> get_divisible_by([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n    [3, -3, 3, 9, -10]\n    \"\"\"\n\ndef get_divisible_by_and_even(l: list):\n    \"\"\"Return only numbers divisible by 2 and even in the list.\n    >>> get_divisible_by_and_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    >>> get_divisible_by_and_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 4, 0, 123, -10]\n    \"\"\"\n\ndef get_divisible_by_and_odd(l: list):\n    \"\"\"Return only numbers divisible by 2 and odd in the list.\n    >>> get_divisible_by_and_odd([1, 2, 3, 4, 5, 6])\n    [1, 3, 5]\n    >>> get_divisible_by_and_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -5, 3, -3, 9, 1, -10]\n    \"\"\"\n\ndef get_divisible_by_and_positive(l: list):\n    \"\"\"Return only numbers divisible by 2 and positive in the list.\n    >>> get_divisible_by_and_positive([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    >>> get_divisible_by_and_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 4, 0, 123, -10]\n   "}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n   "}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n#    if len(xs) % 2 == 0 and xs[-1]!= 0:\n    if len(xs) % 2 == 0:\n        return -xs[0] / xs[1]\n    else:\n        return None\n\n\ndef find_zero_interval(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of a polynomial in interval [a, b].\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if poly(xs, a) * poly(xs, b) > 0:\n        return None\n    else:\n        return find_zero(xs)\n\n\ndef find_zero_interval_recursive(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of a polynomial in interval [a, b].\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if poly(xs, a) * poly(xs, b) > 0:\n        return None\n    else:\n        m = (a + b) / 2\n        if poly(xs, m) == 0:\n            return m\n        elif poly(xs, m) * poly(xs, a) > 0:\n            return find_zero_interval_recursive(xs, a, m)\n        else:\n            return find_zero_interval_recursive(xs, m, b)\n\n\ndef find_zero_interval_recursive_2(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of a polynomial in interval [a, b].\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if poly(xs, a) * poly(xs, b) > 0:\n        return None\n    else:\n        m = (a + b) / 2\n        if poly(xs, m) == 0:\n            return m\n        elif poly(xs, m) * poly(xs, a) > 0:\n            return find_zero_interval_recursive_2(xs, a, m)\n        else:\n            return find_zero_interval_recursive_2(xs, m, b)\n\n\ndef find_zero_interval_recursive_3(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of a polynomial in interval [a, b].\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if poly(xs, a) * poly(xs, b) > 0:\n        return None\n    else:\n        m = (a + b) / 2\n        if poly(xs, m) == 0:\n            return m\n        elif poly(xs, m) * poly(xs, a) > 0:\n            return find_zero_interval_recursive_3(xs, a, m)\n        else:\n            return find_zero_interval_recursive_3(xs, m, b)\n\n\ndef find_zero_interval_recursive_4(xs: list, a: float, b: float):\n    \"\"\"\n    Find zero of a polynomial in interval [a, b].\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if poly(xs, a) * poly(xs, b) > 0:\n        return None\n    else:\n        m = (a + b) / 2\n        if poly(xs, m) == 0:\n            return m\n        elif poly(xs, m) * poly(xs, a) > 0:\n            return find"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_2([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_2([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_3(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_3([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_3([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_4(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_4([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_4([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_5(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_5([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_5([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_6(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_6([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_6([5, 6, 3, 4, 8, 9, 2])\n   "}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\ndef reverse(l: list):\n    \"\"\"Return a reversed list\n    >>> reverse([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 0, 9, 3, 3, 2, 5, 3, 5]\n    \"\"\"\n\ndef reverse_inplace(l: list):\n    \"\"\"Reverse a list in place\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> reverse_inplace(l)\n    >>> l\n    [123, 0, 9, 3, 3, 2, 5, 3, 5]\n    \"\"\"\n\ndef rotate(l: list, n: int):\n    \"\"\"Rotate a list by n positions\n    >>> rotate([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n    [3, 3, 9, 0, 123, 5, 3, 5, 2]\n    \"\"\"\n\ndef rotate_inplace(l: list, n: int):\n    \"\"\"Rotate a list by n positions in place\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> rotate_inplace(l, 3)\n    >>> l\n    [3, 3, 9, 0, 123, 5, 3, 5, 2]\n    \"\"\"\n\ndef rotate_left(l: list, n: int):\n    \"\"\"Rotate a list to the left by n positions\n    >>> rotate_left([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n    [2, 3, 3, 9, 0, 123, 5, 3, 5]\n    \"\"\"\n\ndef rotate_left_inplace(l: list, n: int):\n    \"\"\"Rotate a list to the left by n positions in place\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> rotate_left_inplace(l, 3)\n    >>> l\n    [2, 3, 3, 9, 0, 123, 5, 3, 5]\n    \"\"\"\n\ndef rotate_right(l: list, n: int):\n    \"\"\"Rotate a list to the right by n positions\n    >>> rotate_right([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n    [3, 3, 9, 0, 123, 5, 3, 5, 2]\n    \"\"\"\n\ndef rotate_right_inplace(l: list, n: int):\n    \"\"\"Rotate a list to the right by n positions in place\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> rotate_right_inplace(l, 3)\n    >>> l\n    [3, 3, 9, 0"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef sum_of_elements(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_of_elements([1, 2, 3])\n    6\n    >>> sum_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    106\n    \"\"\"\n\ndef average_of_elements(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>> average_of_elements([1, 2, 3])\n    2.0\n    >>> average_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10.5\n    \"\"\"\n\ndef count_of_elements(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_of_elements([1, 2, 3])\n    3\n    >>> count_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    11\n    \"\"\"\n\ndef count_of_elements_greater_than(l: list, n: int):\n    \"\"\"Return number of elements in the list that are greater than n.\n    >>> count_of_elements_greater_than([1, 2, 3], 2)\n    1\n    >>> count_of_elements_greater_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n    4\n    \"\"\"\n\ndef count_of_elements_less_than(l: list, n: int):\n    \"\"\"Return number of elements in the list that are less than n.\n    >>> count_of_elements_less_than([1, 2, 3], 2)\n    2\n    >>> count_of_elements_less_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n    7\n    \"\"\"\n\ndef count_of_elements_equal_to(l: list, n: int):\n    \"\"\"Return number of elements in the list that are equal to n.\n    >>> count_of_elements_equal_to([1, 2, 3], 2)\n    1\n    >>> count_of_elements_equal_to([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n    1\n    \"\"\"\n\ndef count_of_elements_between(l: list, n1: int, n2: int):\n    \"\"\"Return number of elements in the list that are between n1 and n2 (inclusive).\n    >>> count_of_elements_between(["}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print(50)\n    0\n    >>> fizz_buzz_print(78)\n    2\n    >>> fizz_buzz_print(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum(50)\n    0\n    >>> fizz_buzz_print_sum(78)\n    2\n    >>> fizz_buzz_print_sum(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum_sum(50)\n    0\n    >>> fizz_buzz_print_sum_sum(78)\n    2\n    >>> fizz_buzz_print_sum_sum(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum_sum_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum_sum_sum(50)\n    0\n    >>> fizz_buzz_print_sum_sum_sum(78)\n    2\n    >>> fizz_buzz_print_sum_sum_sum(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum_sum_sum_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum_sum_sum_sum(50)\n    0\n    >>> fizz_buzz_print_sum_sum_sum_sum(78)\n    2\n    >>> fizz_buzz_print_sum_sum_sum_sum(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum_sum_sum_sum_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum_sum_sum_sum_sum(50)\n    0\n    >>> fizz_buzz_print_sum_sum_sum_sum_sum(78)\n    2\n    >>> fizz_buzz_print_sum_sum_sum_sum_sum(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum_sum_sum_sum_sum_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum_sum_sum_sum_sum_sum(50)\n    0\n    >>> fizz_buzz_print_sum_sum_sum_sum_sum_sum(78)\n    2\n    >>> fizz_buzz_print_sum_sum_sum_sum_sum_sum(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_print_sum_sum_sum_sum_sum_sum_sum(n: int):\n    \"\"\"Print the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_print_sum_sum_sum_"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_2(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace_2(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace_2(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_3(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace_3(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace_3(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_4(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace_4(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace_4(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_5(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace_5(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace_5(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_6(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace_6(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace_6(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_7(l: list):\n    \"\"\"This function takes a list l and sorts the values at the even indicies of l in place.\n    >>> l = [1, 2, 3]\n    >>> sort_even_inplace_7(l)\n    >>> l\n    [1, 2, 3]\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace_7(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_inplace_8(l: list):\n   "}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n#     split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string and key. Returns encoded string.\n    \"\"\"\n    # create list of characters from key.\n    key_list = list(key)\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of encoded characters.\n    encoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in key.\n        key_index = key_list.index(s_list[i])\n        # get character from key.\n        key_char = key_list[key_index]\n        # get index of character in alphabet.\n        char_index = alphabet.index(key_char)\n        # get character from alphabet.\n        char = alphabet[char_index]\n        # add character to encoded list.\n        encoded_list.append(char)\n    # return encoded string.\n    return \"\".join(encoded_list)\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string and key. Returns decoded string.\n    \"\"\"\n    # create list of characters from key.\n    key_list = list(key)\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of decoded characters.\n    decoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in key.\n        key_index = key_list.index(s_list[i])\n        # get character from key.\n        key_char = key_list[key_index]\n        # get index of character in alphabet.\n        char_index = alphabet.index(key_char)\n        # get character from alphabet.\n        char = alphabet[char_index]\n        # add character to decoded list.\n        decoded_list.append(char)\n    # return decoded string.\n    return \"\".join(decoded_list)\n\n\ndef encode_rail_fence(s: str, n: int):\n    \"\"\"\n    takes as input string and number of rails. Returns encoded string.\n    \"\"\"\n    # create list of characters from string.\n    s_list = list(s)\n    # create list of encoded characters.\n    encoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in alphabet.\n        char_index = alphabet.index(s_list[i])\n        # get character from alphabet.\n        char = alphabet[char_index]\n        # add character to encoded list.\n        encoded_list.append(char)\n    # create list of encoded characters.\n    encoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in alphabet.\n        char_index = alphabet.index(s_list[i])\n        # get character from alphabet.\n        char = alphabet[char_index]\n        # add character to encoded list.\n        encoded_list.append(char)\n    # create list of encoded characters.\n    encoded_list = []\n    # iterate over characters in string.\n    for i in range(len(s_list)):\n        # get index of character in alphabet.\n        char_index = alphabet.index(s_list[i])\n        # get character from alphabet.\n        char = alphabet[char_index]\n        #"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen(n: int):\n    \"\"\"\n    prime_fib_gen returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen(1)\n    <generator object prime_fib_gen at 0x000001E7247097B8>\n    >>> prime_fib_gen(2)\n    <generator object prime_fib_gen at 0x000001E7247097B8>\n    >>> prime_fib_gen(3)\n    <generator object prime_fib_gen at 0x000001E7247097B8>\n    >>> prime_fib_gen(4)\n    <generator object prime_fib_gen at 0x000001E7247097B8>\n    >>> prime_fib_gen(5)\n    <generator object prime_fib_gen at 0x000001E7247097B8>\n    \"\"\"\n\ndef prime_fib_gen_2(n: int):\n    \"\"\"\n    prime_fib_gen_2 returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_2(1)\n    <generator object prime_fib_gen_2 at 0x000001E7247097B8>\n    >>> prime_fib_gen_2(2)\n    <generator object prime_fib_gen_2 at 0x000001E7247097B8>\n    >>> prime_fib_gen_2(3)\n    <generator object prime_fib_gen_2 at 0x000001E7247097B8>\n    >>> prime_fib_gen_2(4)\n    <generator object prime_fib_gen_2 at 0x000001E7247097B8>\n    >>> prime_fib_gen_2(5)\n    <generator object prime_fib_gen_2 at 0x000001E7247097B8>\n    \"\"\"\n\ndef prime_fib_gen_3(n: int):\n    \"\"\"\n    prime_fib_gen_3 returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_3(1)\n    <generator object prime_fib_gen_3 at 0x000001E7247097B8>\n    >>> prime_fib_gen_3(2)\n    <generator object prime_fib_gen_3 at 0x000001E7247097B8>\n    >>> prime_fib_gen_3(3)\n    <generator object prime_fib_gen_3 at 0x000001E7247097B8>\n    >>> prime_fib_gen_3(4)\n    <generator object prime_fib_gen_3 at 0x000001E7247097B8>\n    >>> prime_fib_gen_3(5)\n    <generator object prime_fib_gen_3 at 0x000001E7247097B8>\n    \"\"\"\n\ndef prime_fib_gen_4(n: int):\n    \"\"\"\n    prime_fib_gen_4 returns a generator that yields n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_4(1)\n    <generator object prime_fib_gen_4 at 0x"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1,"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_3(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_4(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_5(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_6(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_7(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_2([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_3(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_3([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_4(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_4([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_5(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_5([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_6(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_6([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_7(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_inplace_7([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_inplace_7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6"}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j]"}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive(8, 3)\n    '22'\n    >>> change_base_recursive(8, 2)\n    '1000'\n    >>> change_base_recursive(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_2(8, 3)\n    '22'\n    >>> change_base_recursive_2(8, 2)\n    '1000'\n    >>> change_base_recursive_2(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_3(8, 3)\n    '22'\n    >>> change_base_recursive_3(8, 2)\n    '1000'\n    >>> change_base_recursive_3(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_4(8, 3)\n    '22'\n    >>> change_base_recursive_4(8, 2)\n    '1000'\n    >>> change_base_recursive_4(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_5(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_5(8, 3)\n    '22'\n    >>> change_base_recursive_5(8, 2)\n    '1000'\n    >>> change_base_recursive_5(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_6(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_6(8, 3)\n    '22'\n    >>> change_base_recursive_6(8, 2)\n    '1000'\n    >>> change_base_recursive_6(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_7(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_7(8, 3)\n    '22'\n    >>> change_base_recursive_7(8, 2)\n    '1000'\n    >>> change_base_recursive_7(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_8(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_8(8, 3)\n    '22"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(5)\n    78.53981633974483\n    \"\"\"\n\ndef sphere_volume(r):\n    \"\"\"Given radius return volume for a sphere.\n    >>> sphere_volume(5)\n    523.5987755982989\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef cylinder_volume(r, h):\n    \"\"\"Given radius and height return volume for a cylinder.\n    >>> cylinder_volume(5, 3)\n    1413.7166941154066\n    \"\"\"\n\ndef cylinder_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cylinder.\n    >>> cylinder_surface_area(5, 3)\n    1570.7963267948966\n    \"\"\"\n\ndef cone_volume(r, h):\n    \"\"\"Given radius and height return volume for a cone.\n    >>> cone_volume(5, 3)\n    84.09671412921009\n    \"\"\"\n\ndef cone_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cone.\n    >>> cone_surface_area(5, 3)\n    157.07963267948966\n    \"\"\"\n\ndef pyramid_volume(b, h):\n    \"\"\"Given base and height return volume for a pyramid.\n    >>> pyramid_volume(5, 3)\n    7.5\n    \"\"\"\n\ndef pyramid_surface_area(b, h):\n    \"\"\"Given base and height return surface area for a pyramid.\n    >>> pyramid_surface_area(5, 3)\n    45.0\n    \"\"\"\n\ndef cube_volume(s):\n    \"\"\"Given side return volume for a cube.\n    >>> cube_volume(5)\n    125\n    \"\"\"\n\ndef cube_surface_area(s):\n    \"\"\"Given side return surface area for a cube.\n    >>> cube_surface_area(5)\n    150\n    \"\"\"\n\ndef rectangular_prism_volume(l, w, h):\n    \"\"\"Given length, width and height return volume for a rectangular prism.\n    >>> rectangular_prism_volume(5, 3, 4)\n    60\n    \"\"\"\n\ndef rectangular_prism_surface_area(l, w, h):\n    \"\"\"Given length, width and height return surface area for a rectangular prism.\n    >>> rectangular_prism_surface_area(5, 3, 4)\n    196\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(4) -> 2\n    fib5(5) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 2\n    fib6(5) -> 0\n    fib6(6) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    8\n    >>> fib6(7)\n    14\n    \"\"\"\n\ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 0\n    fib7(2) -> 2\n    fib7(3) -> 0\n    fib7(4) -> 2\n    fib7(5) -> 0\n    fib7(6) -> 2\n    fib7(7) -> 2\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n    Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n    >>> fib7(5)\n    4\n    >>> fib7(6)\n    8\n    >>> fib7(7)\n    14\n    \"\"\"\n\ndef fib8(n: int):\n    \"\"\"The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 0\n    fib8(2) -> 2\n    fib8(3) -> 0\n    fib8(4) -> 2\n    fib8(5) -> 0\n    fib8(6) -> 2\n    fib8(7) -> 2\n    fib8(8) -> 2\n    fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n    Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n    >>> fib8(5)\n    4\n    >>> fib8(6)\n    8"}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, "}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\ndef is_anagram(text1: str, text2: str):\n    \"\"\"\n    Checks if given strings are anagrams\n    >>> is_anagram('aba', 'aba')\n    True\n    >>> is_anagram('aba', 'aab')\n    True\n    >>> is_anagram('aba', 'abb')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram('aba')\n    True\n    >>> is_palindrome_anagram('aba')\n    True\n    >>> is_palindrome_anagram('aaaaa')\n    True\n    >>> is_palindrome_anagram('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_2('aba')\n    True\n    >>> is_palindrome_anagram_2('aba')\n    True\n    >>> is_palindrome_anagram_2('aaaaa')\n    True\n    >>> is_palindrome_anagram_2('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_3('aba')\n    True\n    >>> is_palindrome_anagram_3('aba')\n    True\n    >>> is_palindrome_anagram_3('aaaaa')\n    True\n    >>> is_palindrome_anagram_3('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_4('aba')\n    True\n    >>> is_palindrome_anagram_4('aba')\n    True\n    >>> is_palindrome_anagram_4('aaaaa')\n    True\n    >>> is_palindrome_anagram_4('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_5('aba')\n    True\n    >>> is_palindrome_anagram_5('aba')\n    True\n    >>> is_palindrome_anagram_5('aaaaa')\n    True\n    >>> is_palindrome_anagram_5('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_6('aba')\n    True\n    >>> is_palindrome_anagram_6('aba')\n    True\n    >>> is_palindrome_anagram_6('aaaaa')\n    True\n    >>> is_palindrome_anagram_6('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_7(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_7('aba')\n    True\n    >>> is_palindrome_anagram_7('aba')\n    True\n    >>> is_palindrome_anagram_7('aaaaa')\n    True\n    >>> is_palindrome_anagram_7('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_8(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_anagram_8('aba')\n    True\n    >>> is_palindrome_anagram_8('aba')\n    True\n    >>> is_palindrome_anagram_8('aaaaa')\n    True\n    >>> is_palindrome_anagram_8('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_anagram_9(text: str):\n    \"\"\"\n    Checks if given string is a palindrome and anagram\n    >>> is_palindrome_an"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast(3, 5)\n    3\n    >>> modp_fast(1101, 101)\n    2\n    >>> modp_fast(0, 101)\n    1\n    >>> modp_fast(3, 11)\n    8\n    >>> modp_fast(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_2(3, 5)\n    3\n    >>> modp_fast_2(1101, 101)\n    2\n    >>> modp_fast_2(0, 101)\n    1\n    >>> modp_fast_2(3, 11)\n    8\n    >>> modp_fast_2(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_3(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_3(3, 5)\n    3\n    >>> modp_fast_3(1101, 101)\n    2\n    >>> modp_fast_3(0, 101)\n    1\n    >>> modp_fast_3(3, 11)\n    8\n    >>> modp_fast_3(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_4(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_4(3, 5)\n    3\n    >>> modp_fast_4(1101, 101)\n    2\n    >>> modp_fast_4(0, 101)\n    1\n    >>> modp_fast_4(3, 11)\n    8\n    >>> modp_fast_4(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_5(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_5(3, 5)\n    3\n    >>> modp_fast_5(1101, 101)\n    2\n    >>> modp_fast_5(0, 101)\n    1\n    >>> modp_fast_5(3, 11)\n    8\n    >>> modp_fast_5(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_6(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_6(3, 5)\n    3\n    >>> modp_fast_6(1101, 101)\n    2\n    >>> modp_fast_6(0, 101)\n    1\n    >>> modp_fast_6(3, 11)\n    8\n    >>> modp_fast_6(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_7(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_7(3, 5)\n    3\n    >>> modp_fast_7(1101, 101)\n    2\n    >>> modp_fast_7(0, 101)\n    1\n    >>> modp_fast_7(3, 11)\n    8\n    >>> modp_fast_7(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_8"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n#    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by using vigenere cipher.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + ord(key[i % len(key)]) - 2 * ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(key[i % len(key)]) + 2 * ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef encode_caesar(s: str, key: int):\n    \"\"\"\n    returns encoded string by using caesar cipher.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_caesar(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_caesar function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_substitution(s: str, key: str):\n    \"\"\"\n    returns encoded string by using substitution cipher.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef decode_substitution(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_substitution function. Returns decoded string.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef encode_affine(s: str, key: int):\n    \"\"\"\n    returns encoded string by using affine cipher.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) * key + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_affine(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_affine function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) * key ** -1 % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_hill(s: str, key: list):\n    \"\"\"\n    returns encoded string by using hill cipher.\n    \"\"\"\n    return \"\".join([chr(((key[0][0] * ord(s[0]) + key[0][1] * ord(s[1])) % 26) + ord(\"a\")) for i in range(0, len(s), 2)])\n\n\ndef decode_hill(s: str, key: list):\n    \"\"\"\n    takes as input string encoded with encode_hill function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((key[0][0] * ord(s[0]) + key[0][1] * ord(s[1])) % 26) + ord(\"a\")) for i in range(0, len(s), 2)])\n\n\ndef encode_playfair(s: str, key: str):\n    \"\"\"\n    returns encoded string by using playfair cipher.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef decode_playfair(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_playfair function. Returns decoded string.\n    \"\"\"\n    return"}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', '"}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if"}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \"\"\"\n\ndef main():\n    \"\"\"Main function\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/README.md\n# Python-Unit-Testing\n\nThis repository contains the code for the Python Unit Testing tutorial.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\nYou will need to have Python 3.6 or higher installed on your machine.\n\n### Installing\n\nClone the repository to your local machine.\n\n```\ngit clone https://github.com/james-w-moore/Python-Unit-Testing.git\n```\n\n## Running the tests\n\nTo run the tests, navigate to the root directory of the project and run the following command:\n\n```\npython -m unittest discover -s tests -p \"*_test.py\"\n```\n\n## Built With\n\n* [Python](https://www.python.org/) - The programming language used\n* [PyCharm](https://www.jetbrains.com/pycharm/) - The IDE used\n\n## Authors\n\n* **** - *Initial work* - [james-w-moore](https://github.com/james-w-moore)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_2('dddddddabc', 'abcd')\n    True\n    >>> same_chars_2('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_2('abcd', 'dddddddabce')\n    False\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_3(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_3('abcd', 'dddddddabc')\n    True\n    >>> same_chars_3('dddddddabc', 'abcd')\n    True\n    >>> same_chars_3('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_3('abcd', 'dddddddabce')\n    False\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_4(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_4('abcd', 'dddddddabc')\n    True\n    >>> same_chars_4('dddddddabc', 'abcd')\n    True\n    >>> same_chars_4('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_4('abcd', 'dddddddabce')\n    False\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_5(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_5('abcd', 'dddddddabc')\n    True\n    >>> same_chars_5('dddddddabc', 'abcd')\n    True\n    >>> same_chars_5('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_5('abcd', 'dddddddabce')\n    False\n    >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_6(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_6('abcd', 'dddddddabc')\n    True\n    >>> same_chars_6('dddddddabc', 'abcd')\n    True\n    >>> same_chars_6('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_6('abcd', 'dddddddabce')\n    False\n    >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_7(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_7('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_7('abcd', 'dddddddabc')\n    True\n    >>> same_chars_7('dddddddabc', 'abcd')\n    True\n    >>> same_chars_7('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_7('abcd', 'dddddddabce')\n    False\n    >>> same_chars_7('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo(10)\n    55\n    >>> fib_rec_memo(1)\n    1\n    >>> fib_rec_memo(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail(10)\n    55\n    >>> fib_rec_tail(1)\n    1\n    >>> fib_rec_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo(10)\n    55\n    >>> fib_rec_tail_memo(1)\n    1\n    >>> fib_rec_tail_memo(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter(10)\n    55\n    >>> fib_rec_tail_memo_iter(1)\n    1\n    >>> fib_rec_tail_memo_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_2(10)\n    55\n    >>> fib_rec_tail_memo_iter_2(1)\n    1\n    >>> fib_rec_tail_memo_iter_2(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_3(10)\n    55\n    >>> fib_rec_tail_memo_iter_3(1)\n    1\n    >>> fib_rec_tail_memo_iter_3(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_4(10)\n    55\n    >>> fib_rec_tail_memo_iter_4(1)\n    1\n    >>> fib_rec_tail_memo_iter_4(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_5(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_5(10)\n    55\n    >>> fib_rec_tail_memo_iter_5(1)\n    1\n    >>> fib_rec_tail_memo_iter_5(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_6(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_6(10)\n    55\n    >>> fib_rec_tail_memo_iter_6(1)\n    1\n    >>> fib_rec_tail_memo_iter_6(8)\n    21\n    \"\"\"\n\ndef fib_rec_tail_memo_iter_7(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tail_memo_iter_7(10)"}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>>"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted([1, 2, 4, 20])\n    True\n    >>> is_sorted([1, 20, 4, 10])\n    False\n    >>> is_sorted([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_2(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_2([1, 2, 4, 20])\n    True\n    >>> is_sorted_2([1, 20, 4, 10])\n    False\n    >>> is_sorted_2([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_3(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_3([1, 2, 4, 20])\n    True\n    >>> is_sorted_3([1, 20, 4, 10])\n    False\n    >>> is_sorted_3([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_4(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_4([1, 2, 4, 20])\n    True\n    >>> is_sorted_4([1, 20, 4, 10])\n    False\n    >>> is_sorted_4([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_5(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_5([1, 2, 4, 20])\n    True\n    >>> is_sorted_5([1, 20, 4, 10])\n    False\n    >>> is_sorted_5([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_6(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_6([1, 2, 4, 20])\n    True\n    >>> is_sorted_6([1, 20, 4, 10])\n    False\n    >>> is_sorted_6([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_7(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_7([1, 2, 4, 20])\n    True\n    >>> is_sorted_7([1, 20, 4, 10])\n    False\n    >>> is_sorted_7([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_8(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_8([1, 2, 4, 20])\n    True\n    >>> is_sorted_8([1, 20, 4, 10])\n    False\n    >>> is_sorted_8([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_9(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_9([1, 2, 4, 20])\n    True\n    >>> is_sorted_9([1, 20, 4, 10])\n    False\n    >>> is_sorted_9([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_sorted_10(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_10([1, 2, 4, 20])\n    True\n    >>> is_sorted_10([1, 20, 4, 10])\n    False\n    >>> is_sorted_10([4, 1, 0, -10])\n    True"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\ndef common_with_counts(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1), (5, 2), (653, 2)]\n    >>> common_with_counts([5, 3, 2, 8], [3, 2])\n    [(2, 1), (3, 2)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0), (5, 2, 1), (653, 2, 4)]\n    >>> common_with_counts_and_positions([5, 3, 2, 8], [3, 2])\n    [(2, 1, 1), (3, 2, 0)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions_and_indices(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions_and_indices([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0, 0), (5, 2, 1, 1), (653, 2, 4, 4)]\n    >>> common_with_counts_and_positions_and_indices([5, 3, 2, 8], [3, 2])\n    [(2, 1, 1, 1), (3, 2, 0, 0)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions_and_indices_and_values(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions_and_indices_and_values([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0, 0, 1), (5, 2, 1, 1, 5), (653, 2, 4, 4, 653)]\n    >>> common_with_counts_and_positions_and_indices_and_values([5, 3, 2, 8], [3, 2])\n    [(2, 1, 1, 1, 2), (3, 2, 0, 0, 3)]\n\n    \"\"\"\n\ndef common_with_counts_and_positions_and_indices_and_values_and_indices(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_and_positions_and_indices_and_values_and_indices([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 1, 0, 0, 1, 0), (5, 2, 1, 1, 5,"}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_prime_fast(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast(13)\n    True\n    >>> is_prime_fast(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_2(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_2(13)\n    True\n    >>> is_prime_fast_2(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_3(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_3(13)\n    True\n    >>> is_prime_fast_3(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_4(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_4(13)\n    True\n    >>> is_prime_fast_4(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_5(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_5(13)\n    True\n    >>> is_prime_fast_5(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_6(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_6(13)\n    True\n    >>> is_prime_fast_6(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_7(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_7(13)\n    True\n    >>> is_prime_fast_7(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_8(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_8(13)\n    True\n    >>> is_prime_fast_8(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_9(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_9(13)\n    True\n    >>> is_prime_fast_9(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_10(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_10(13)\n    True\n    >>> is_prime_fast_10(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_11(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_11(13)\n    True\n    >>> is_prime_fast_11(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_12(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_12(13)\n    True\n    >>> is_prime_fast_12(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_13(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_13(13)\n    True\n    >>> is_prime_fast_13(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_14(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_fast_14(13)\n    True\n    >>> is_prime_fast_14(12)\n    False\n    \"\"\"\n\ndef is_prime_fast_15(n: int):\n    \"\"\"Return True if n"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    >>> integrate([3, 1, 2, 4, 5])\n    [0, 3, 1, 4, 5]\n    >>> integrate([1, 2, 3])\n    [0, 1, 3]\n    \"\"\"\n\ndef roots(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return roots of this polynomial in the same form.\n    >>> roots([3, 1, 2, 4, 5])\n    [0.0, -1.0, -0.5]\n    >>> roots([1, 2, 3])\n    [0.0, -1.0]\n    \"\"\"\n\ndef plot(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Plot this polynomial.\n    >>> plot([3, 1, 2, 4, 5])\n    >>> plot([1, 2, 3])\n    \"\"\"\n\ndef main():\n    \"\"\" Main function.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Polynomial\n\nThis is a simple polynomial class.\n\n## Installation\n\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\n```python\nfrom polynomial import Polynomial\n\np = Polynomial([1, 2, 3])\nprint(p)\nprint(p.derivative())\nprint(p.integrate())\nprint(p.roots())\np.plot()\n```\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\ndef fibfib_fast(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast(1)\n    0\n    >>> fibfib_fast(5)\n    4\n    >>> fibfib_fast(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo(1)\n    0\n    >>> fibfib_fast_memo(5)\n    4\n    >>> fibfib_fast_memo(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_iter(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo_iter(1)\n    0\n    >>> fibfib_fast_memo_iter(5)\n    4\n    >>> fibfib_fast_memo_iter(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_iter_2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo_iter_2(1)\n    0\n    >>> fibfib_fast_memo_iter_2(5)\n    4\n    >>> fibfib_fast_memo_iter_2(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_iter_3(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_fast_memo_iter_3(1)\n    0\n    >>> fibfib_fast_memo_iter_3(5)\n    4\n    >>> fibfib_fast_memo_iter_3(8)\n    24\n    \"\"\"\n\ndef fibfib_fast_memo_iter_4(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n   "}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACED"}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\ndef is_palindrome(x):\n    \"\"\"Return True if x is a palindrome, False otherwise.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Return True if x is prime, False otherwise.\n    >>> is_prime(7)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n\ndef is_palindrome_prime(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime(13)\n    True\n    >>> is_palindrome_prime(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fast(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fast(13)\n    True\n    >>> is_palindrome_prime_fast(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastest(13)\n    True\n    >>> is_palindrome_prime_fastest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastestest(13)\n    True\n    >>> is_palindrome_prime_fastestest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestestest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastestestest(13)\n    True\n    >>> is_palindrome_prime_fastestestest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestestestest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastestestestest(13)\n    True\n    >>> is_palindrome_prime_fastestestestest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestestestestest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastestestestestest(13)\n    True\n    >>> is_palindrome_prime_fastestestestestest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestestestestestest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastestestestestestest(13)\n    True\n    >>> is_palindrome_prime_fastestestestestestest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestestestestestestest(x):\n    \"\"\"Return True if x is a palindrome and prime, False otherwise.\n    >>> is_palindrome_prime_fastestestestestestestest(13)\n    True\n    >>> is_palindrome_prime_fastestestestestestestest(121)\n    False\n    \"\"\"\n\ndef is_palindrome_prime_fastestestestestestestestest(x):\n    \"\"\"Return True if"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\ndef isPrime(n):\n    \"\"\"Task\n    Write a function that takes a number and returns True if it is a prime number and False otherwise.\n\n    Examples:\n        isPrime(0) => False\n        isPrime(1) => False\n        isPrime(2) => True\n        isPrime(3) => True\n        isPrime(4) => False\n        isPrime(5) => True\n        isPrime(6) => False\n        isPrime(7) => True\n        isPrime(8) => False\n        isPrime(9) => False\n        isPrime(10) => False\n        isPrime(11) => True\n        isPrime(12) => False\n        isPrime(13) => True\n        isPrime(14) => False\n        isPrime(15) => False\n        isPrime(16) => False\n        isPrime(17) => True\n        isPrime(18) => False\n        isPrime(19) => True\n        isPrime(20) => False\n        isPrime(21) => False\n        isPrime(22) => False\n        isPrime(23) => True\n        isPrime(24) => False\n        isPrime(25) => False\n        isPrime(26) => False\n        isPrime(27) => False\n        isPrime(28) => False\n        isPrime(29) => True\n        isPrime(30) => False\n        isPrime(31) => True\n        isPrime(32) => False\n        isPrime(33) => False\n        isPrime(34) => False\n        isPrime(35) => False\n        isPrime(36) => False\n        isPrime(37) => True\n        isPrime(38) => False\n        isPrime(39) => False\n        isPrime(40) => False\n        isPrime(41) => True\n        isPrime(42) => False\n        isPrime(43) => True\n        isPrime(44) => False\n        isPrime(45) => False\n        isPrime(46) => False\n        isPrime(47) => True\n        isPrime(48) => False\n        isPrime(49) => False\n        isPrime(50) => False\n        isPrime(51) => False\n        isPrime(52) => False\n        isPrime(53) => True\n        isPrime(54) => False\n        isPrime(55) => False\n        isPrime(56) => False\n        isPrime(57) => False\n        isPrime(58) => False\n        isPrime(59) => True\n        isPrime(60) => False\n        isPrime(61) => True\n        isPrime(62) => False\n        isPrime(63) => False\n        isPrime(64) => False\n        isPrime(65) => False\n        isPrime(66) => False\n        isPrime(67) => True\n        isPrime(68) => False\n        isPrime(69) => False\n        isPrime(70) => False\n        isPrime(71) => True\n        isPrime(72) => False\n        isPrime(73) => True\n        isPrime(74) => False\n        isPrime(75) => False\n        isPrime(76) => False\n        isPrime(77) => False\n        isPrime(78) => False\n        isPrime(79) => True\n        isPrime(80) => False\n        isPrime(81) => False\n        isPrime(82) => False\n        isPrime(83) => True\n        isPrime("}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples = 0\n    oranges = 0\n    mango = 0\n    for i in s.split():\n        if i.isdigit():\n            if i.startswith('a'):\n                apples = int(i)\n            elif i.startswith('o'):\n                oranges = int(i)\n            elif i.startswith('m'):\n                mango = int(i)\n    return n - apples - oranges - mango\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples = 0\n    oranges = 0\n    mango = 0\n    for i in s.split():\n        if i.isdigit():\n            if i.startswith('a'):\n                apples = int(i)\n            elif i.startswith('o'):\n                oranges = int(i)\n            elif i.startswith('m'):\n                mango = int(i)\n    return n - apples - oranges - mango\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 orange"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 0:\n        return [min_value, arr.index(min_value)]\n    return []\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 0:\n        return [min"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst.count(lst[i]) >= lst[i]:\n                return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst.count(lst[i]) >= lst[i]:\n                return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst.count(lst[i]) >= lst[i]:\n                return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1])"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + strange_sort_list(lst) + [max_val]\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + strange_sort_list(lst) + [max_val]\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + strange_sort_list(lst) + [max_val]\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 10) == False\n    '''\n\ndef is_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area(3, 4, 5) == True\n    is_triangle_area(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_2(3, 4, 5) == True\n    is_triangle_area_2(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_3(3, 4, 5) == True\n    is_triangle_area_3(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_4(3, 4, 5) == True\n    is_triangle_area_4(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_5(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_5(3, 4, 5) == True\n    is_triangle_area_5(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_6(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly("}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_2(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_3(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_4(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_5(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_6(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_7(arr):\n    \"\"\"\n    Given an array"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if len(x) < len(lst2)] or [x for x in lst2 if len(x) < len(lst1)] or lst1\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) =="}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n    if x == 3:\n        return False\n    if x == 4:\n        return True\n    if x == 5:\n        return False\n    if x == 6:\n        return False\n    if x == 7:\n        return False\n    if x == 8:\n        return True\n    if x == 9:\n        return False\n    if x == 10:\n        return False\n    if x == 11:\n        return False\n    if x == 12:\n        return False\n    if x == 13:\n        return False\n    if x == 14:\n        return False\n    if x == 15:\n        return False\n    if x == 16:\n        return True\n    if x == 17:\n        return False\n    if x == 18:\n        return False\n    if x == 19:\n        return False\n    if x == 20:\n        return False\n    if x == 21:\n        return False\n    if x == 22:\n        return False\n    if x == 23:\n        return False\n    if x == 24:\n        return False\n    if x == 25:\n        return True\n    if x == 26:\n        return False\n    if x == 27:\n        return False\n    if x == 28:\n        return False\n    if x == 29:\n        return False\n    if x == 30:\n        return False\n    if x == 31:\n        return False\n    if x == 32:\n        return True\n    if x == 33:\n        return False\n    if x == 34:\n        return False\n    if x == 35:\n        return False\n    if x == 36:\n        return False\n    if x == 37:\n        return False\n    if x == 38:\n        return False\n    if x == 39:\n        return False\n    if x == 40:\n        return False\n    if x == 41:\n        return False\n    if x == 42:\n        return False\n    if x == 43:\n        return False\n    if x == 44:\n        return False\n    if x == 45:\n        return False\n    if x == 46:\n        return False\n    if x == 47:\n        return False\n    if x == 48:\n        return False\n    if x == 49:\n        return False\n    if x == 50:\n        return False\n    if x == 51:\n        return False\n    if x == 52:\n        return False\n    if"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(64) ==> False\n    isprime(0) ==> False\n    isprime(180) ==> False\n    '''\n\ndef isperfect(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a perfect number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isperfect(1) ==> False\n    isperfect(2) ==> False\n    isperfect(-1) ==> False\n    isperfect(64) ==> False\n    isperfect(0) ==> False\n    isperfect(180) ==> False\n    '''\n\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(1) ==> False\n    ispalindrome(2) ==> False\n    ispalindrome(-1) ==> False\n    ispalindrome(64) ==> False\n    ispalindrome(0) ==> False\n    ispalindrome(180) ==> False\n    '''\n\ndef isfibonacci(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a fibonacci number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isfibonacci(1) ==> False\n    isfibonacci(2) ==> False\n    isfibonacci(-1) ==> False\n    isfibonacci(64) ==> False\n    isfibonacci(0) ==> False\n    isfibonacci(180) ==> False\n    '''\n\ndef ispowerof2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 2.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof2(1) ==> True\n    ispowerof2(2) ==> True\n    ispowerof2(-1) ==> False\n    ispowerof2(64) ==> True\n    ispowerof2(0) ==> False\n    ispowerof2(180) ==> False\n    '''\n\ndef ispowerof3(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 3.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof3(1) ==> False\n    ispowerof3(2) ==> False\n    ispowerof3(-1) ==> False\n    ispowerof3(64) ==> False\n    ispowerof3(0) ==> False\n    ispowerof3(180) ==> False\n    '''\n\ndef ispowerof5(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 5.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof5("}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is a prime number, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 3 the output should be True.\n    For num = 4 the output should be False.\n    For num = 5 the output should be True.\n    For num = 6 the output should be False.\n    For num = 7 the output should be True.\n    For num = 8 the output should be False.\n    For num = 9 the output should be False.\n    For num = 10 the output should be False.\n    For num = 11 the output should be True.\n    For num = 12 the output should be False.\n    For num = 13 the output should be True.\n    For num = 14 the output should be False.\n    For num = 15 the output should be False.\n    For num = 16 the output should be False.\n    For num = 17 the output should be True.\n    For num = 18 the output should be False.\n    For num = 19 the output should be True.\n    For num = 20 the output should be False.\n    For num = 21 the output should be False.\n    For num = 22 the output should be False.\n    For num = 23 the output should be True.\n    For num = 24 the output should be False.\n    For num = 25 the output should be False.\n    For num = 26 the output should be False.\n    For num = 27 the output should be False.\n    For num = 28 the output should be False.\n    For num = 29 the output should be True.\n    For num = 30 the output should be False.\n    For num = 31 the output should be True.\n    For num = 32 the output should be False.\n    For num = 33 the output should be False.\n    For num = 34 the output should be False.\n    For num = 35 the output should be False.\n    For num = 36 the output should be False.\n    For num = 37 the output should be True.\n    For num = 38 the output should be False.\n    For num = 39 the output should be False.\n    For num = 40 the output should be False.\n    For num = 41 the output should be True.\n    For num = 42 the output should be False.\n    For num = 43 the output should be True.\n    For num = 44 the output should be False.\n    For num = 45 the output should be False.\n    For num = 46 the output should be False.\n    For num = 47 the output should be True.\n    For num = 48 the output should be False.\n    For num = 49 the output should be False.\n    For num = 50 the output should be False.\n    For num = 51 the output should be False.\n    For num = 52 the output should be False.\n    For"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    decimal format. The function should return an integer.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\") # returns 32\n    \"\"\"\n\ndef binary_to_hex(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    hexadecimal format. The function should return a string.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_hex(\"db1111db\")   # returns \"dbffdb\"\n    binary_to_hex(\"db100000db\") # returns \"db80db\"\n    \"\"\"\n\ndef hex_to_binary(hex):\n    \"\"\"You will be given a number in hexadecimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    hex_to_binary(\"dbffdb\")   # returns \"db1111111111db\"\n    hex_to_binary(\"db80db\")   # returns \"db100000000db\"\n    \"\"\"\n\ndef binary_to_hex_and_back(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_hex_and_back(\"db1111111111db\")   # returns \"dbffdb\"\n    binary_to_hex_and_back(\"db100000000db\")   # returns \"db80db\"\n    \"\"\"\n\ndef hex_to_binary_and_back(hex):\n    \"\"\"You will be given a number in hexadecimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    hex_to_binary_and_back(\"dbffdb\")   # returns \"db1111"}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B-' if grade >= 2.3 else\n        'C+' if grade >= 2.0 else\n        'C' if grade >= 1.7 else\n        'C-' if grade >= 1.3 else\n        'D+' if grade >= 1.0 else\n        'D' if grade >= 0.7 else\n        'D-' if grade >= 0.0 else\n        'E' if grade >= 0.0 else\n        'E' for grade in grades\n    ]\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\ndef count_vowels(string):\n    \"\"\"Write a function that takes a string and returns the number of vowels\n    in the string\n    Examples\n    count_vowels('Hello') == 2\n    count_vowels('abcdcba') == 5\n    count_vowels('kittens') == 4\n    count_vowels('orange') == 3\n    \"\"\"\n\ndef count_consonants(string):\n    \"\"\"Write a function that takes a string and returns the number of consonants\n    in the string\n    Examples\n    count_consonants('Hello') == 3\n    count_consonants('abcdcba') == 3\n    count_consonants('kittens') == 5\n    count_consonants('orange') == 4\n    \"\"\"\n\ndef count_vowels_and_consonants(string):\n    \"\"\"Write a function that takes a string and returns a dictionary with the\n    number of vowels and consonants in the string\n    Examples\n    count_vowels_and_consonants('Hello') == {'vowels': 2, 'consonants': 3}\n    count_vowels_and_consonants('abcdcba') == {'vowels': 5, 'consonants': 3}\n    count_vowels_and_consonants('kittens') == {'vowels': 4, 'consonants': 5}\n    count_vowels_and_consonants('orange') == {'vowels': 3, 'consonants': 4}\n    \"\"\"\n\ndef count_vowels_and_consonants_2(string):\n    \"\"\"Write a function that takes a string and returns a dictionary with the\n    number of vowels and consonants in the string\n    Examples\n    count_vowels_and_consonants_2('Hello') == {'vowels': 2, 'consonants': 3}\n    count_vowels_and_consonants_2('abcdcba') == {'vowels': 5, 'consonants': 3}\n    count_vowels_and_consonants_2('kittens') == {'vowels': 4, 'consonants': 5}\n    count_vowels_and_consonants_2('orange') == {'vowels': 3, 'consonants': 4}\n    \"\"\"\n\ndef count_vowels_and_consonants_3(string):\n    \"\"\"Write a function that takes a string and returns a dictionary with the\n    number of vowels and consonants in the string\n    Examples\n    count_vowels_and_consonants_3('Hello') == {'vowels': 2, 'consonants': 3}\n    count_vowels_and_consonants_3('abcdcba') == {'vowels': 5, 'consonants': 3}\n    count_vowels_and_consonants_3('kittens') == {'vowels': 4, 'consonants': 5}\n    count_vowels_and_consonants_3('orange') == {'vowels': 3, 'consonants': 4}\n    \"\"\"\n\ndef count_vowels_and_consonants_4(string):\n    \"\"\"Write a function that takes a string"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\ndef starts_one_ends_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1, but not both.\n    \"\"\"\n\ndef starts_one_ends_not_both_not_both_not_both_not_both_not_both_not_both_not(n):\n    \"\"\"\n    Given a"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:].replace('0','')\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)["}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a\n    palindrome, False otherwise.\n    A palindrome is a word, phrase, or sequence that reads the same backward as\n    forward, e.g., madam or nurses run.\n    Note: You should ignore case and spaces.\n\n    For example:\n    is_palindrome('madam') returns True\n    is_palindrome('nurses run') returns True\n    is_palindrome('hello') returns False\n    \"\"\"\n\ndef is_anagram(s1, s2):\n    \"\"\"\n    Write a function that takes two strings and returns True if they are anagrams,\n    False otherwise.\n    An anagram is a word or phrase formed by rearranging the letters of a\n    different word or phrase, typically using all the original letters exactly\n    once.\n    Note: You should ignore case and spaces.\n\n    For example:\n    is_anagram('hello', 'olleh') returns True\n    is_anagram('hello', 'olle') returns False\n    is_anagram('hello', 'hello') returns False\n    \"\"\"\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is a pangram,\n    False otherwise.\n    A pangram is a sentence that contains all the letters of the English\n    alphabet at least once.\n    Note: You should ignore case and spaces.\n\n    For example:\n    is_pangram('The quick brown fox jumps over the lazy dog') returns True\n    is_pangram('The quick brown fox jumps over the lazy dog') returns False\n    is_pangram('The quick brown fox jumps over the lazy dog') returns False\n    \"\"\"\n\ndef is_isogram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if it is an isogram,\n    False otherwise.\n    An isogram is a word or phrase without a repeating letter, e.g.,\n    moose or live.\n    Note: You should ignore case and spaces.\n\n    For example:\n    is_isogram('moose') returns True\n    is_isogram('live') returns False\n    is_isogram('live') returns False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Write a function that takes a positive integer and returns True if it is a\n    prime number, False otherwise.\n    A prime number is a positive integer that is divisible only by 1 and itself.\n    Note: You should ignore case and spaces.\n\n    For example:\n    is_prime(1) returns False\n    is_prime(2) returns True\n    is_prime(3) returns True\n    is_prime(4) returns False\n    is_prime(5) returns True\n    is_prime(6) returns False\n    is_prime(7) returns True\n    is_prime(8) returns False\n    is_prime(9) returns False\n    is_prime(10) returns False\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"\n    Write a function that takes a positive integer and returns True if it is a\n    perfect number, False otherwise.\n    A perfect number is a positive integer that is equal to the sum of its\n    positive divisors, excluding the number itself.\n    Note: You should ignore case and spaces.\n\n    For example:\n    is_perfect(1) returns False\n    is_perfect(2) returns False\n    is_perfect(3) returns False\n    is_perfect(4) returns True\n    is_perfect(5) returns False\n    is"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x]\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x]\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1)"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return [array[1], array[0]]\n        else:\n            return array\n    if len(array) > 2:\n        if sum(array[0], array[-1]) % 2 == 0:\n            return sort_array(array[1:]) + [array[0]]\n        else:\n            return [array[0]] + sort_array(array[1:])\n\ndef sum(a, b):\n    return a + b\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\nif __name__ == '__main__':\n    test_sort_array()\n/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nDigital root is the recursive sum of all the digits in a number.\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works:\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\ndef digital_root(n):\n    \"\"\"\n    Digital root is the recursive sum of all the digits in a number.\n    Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\n    Here"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef main():\n    \"\"\"Create a function main that takes no arguments and returns no\n    values. This function should call the functions encrypt and decrypt\n    and print the results.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Python-Programming\n\nThis repository contains the code for the Python Programming course.\n\n## Course Description\n\nThis course is designed to introduce students to the Python programming language. The course will cover the basics of Python programming, including variables, data types, control structures, functions, and modules. Students will also learn how to use Python to solve problems in a variety of domains, including data analysis, web development, and game development.\n\n## Course Objectives\n\nThe course objectives are as follows:\n\n- Learn the basics of Python programming\n- Learn how to use Python to solve problems in a variety of domains\n- Learn how to use Python to create interactive programs\n\n## Course Prerequisites\n\nThe course assumes that students have a basic understanding of programming concepts and have some experience with Python.\n\n## Course Content\n\nThe course content is as follows:\n\n- Introduction to Python\n- Variables and Data Types\n- Control Structures\n- Functions\n- Modules\n- Problem Solving with Python\n\n## Course Schedule\n\nThe course schedule is as follows:\n\n- Week 1: Introduction to Python\n- Week 2: Variables and Data Types\n- Week 3: Control Structures\n- Week 4: Functions\n- Week 5: Modules\n- Week 6: Problem Solving with Python\n\n## Course Materials\n\nThe course materials include the following:\n\n- Course syllabus\n- Course outline\n- Course slides\n- Course notes\n- Course assignments\n- Course quizzes\n- Course exams\n- Course feedback\n\n## Course Evaluation\n\nThe course evaluation is based on the following criteria:\n\n- Course content\n- Course assignments\n- Course quizzes\n- Course exams\n- Course feedback\n\n## Course Instructor\n\nThe course instructor is.\n\n## Course Location\n\nThe course location is TBD.\n\n## Course Dates\n\nThe course dates are TBD.\n\n## Course Fees\n\nThe course fees are TBD.\n\n## Course Registration\n\nThe course registration process is as follows:\n\n- Students must register for the course online.\n- Students must provide their name, email address, and phone number.\n- Students must provide a payment method.\n- Students must provide a payment amount.\n- Students must provide a payment date.\n- Students must provide a payment confirmation.\n- Students must provide a payment receipt.\n\n## Course Dates\n\nThe course dates are TBD.\n\n## Course Fees\n\nThe course fees are TBD.\n\n## Course Registration\n\nThe course registration process is as follows:\n\n- Students must register for the course online.\n- Students must provide their name, email address, and phone number.\n- Students must provide a payment method.\n- Students must provide a payment amount.\n- Students must provide a payment date.\n- Students must provide a payment confirmation.\n- Students must provide a payment receipt.\n\n## Course Dates\n"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for sentence in S.split('.') if sentence.split()[0] == 'I')\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.split()[0] == 'I' for sentence in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.split()[0] == 'I' for sentence in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.split()[0] == 'I' for sentence in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.split()[0] == 'I' for sentence in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(sentence.split()[0] == 'I' for sentence in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x == y + z or y == x + z or z == x + y) and type(x) == int and type(y)"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'TGST'\n    >>> encode_decode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file(filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file('test.txt')\n    'TGST'\n    >>> encode_decode_file('test.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_with_key(filename, key):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_with_key('test.txt', 1)\n    'TGST'\n    >>> encode_decode_file_with_key('test.txt', 1)\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_with_key_and_file(filename, key, output_filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_with_key_and_file('test.txt', 1, 'output.txt')\n    'TGST'\n    >>> encode_decode_file_with_key_and_file('test.txt', 1, 'output.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_with_key_and_file_and_key(filename, key, output_filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n    decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_with_key_and_file_and_key('test.txt', 1, 'output.txt', 2)\n    'TGST'\n    >>> encode_decode_file_with_key_and_file_and_key('test.txt', 1, 'output.txt', 2)\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_with_key_and_file_and_key_and_file(filename, key, output_filename):\n    \"\"\"\n    Write a function that takes a filename, encodes it, and then \n   "}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n           "}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        prime_list = []\n        for i in range(2, n):\n            if is_prime(i):\n                prime_list.append(i)\n        return prime_list\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if the number is prime and False\n    otherwise.\n    for example:\n    is_prime(5) => True\n    is_prime(11) => True\n    is_prime(0) => False\n    is_prime(1) => False\n    is_prime(18) => False\n    \"\"\"\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is prime and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_prime(1) should return False.\n    is_prime(2) should return True.\n    is_prime(10) should return False.\n    is_prime(17) should return True.\n    is_prime(100) should return False.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is palindrome and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_palindrome(1) should return True.\n    is_palindrome(2) should return False.\n    is_palindrome(10) should return False.\n    is_palindrome(17) should return False.\n    is_palindrome(100) should return False.\n    is_palindrome(101) should return True.\n    is_palindrome(1001) should return True.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is Armstrong number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_armstrong(1) should return True.\n    is_armstrong(2) should return False.\n    is_armstrong(10) should return False.\n    is_armstrong(17) should return False.\n    is_armstrong(100) should return False.\n    is_armstrong(101) should return False.\n    is_armstrong(1001) should return False.\n    is_armstrong(153) should return True.\n    is_armstrong(154) should return False.\n    is_armstrong(1634) should return False.\n    is_armstrong(1635) should return True.\n    is_armstrong(1636) should return False.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is perfect number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_perfect(1) should return False.\n    is_perfect(2) should return False.\n    is_perfect(10) should return False.\n    is_perfect(17) should return False.\n    is_perfect(100) should return False.\n    is_perfect(101) should return False.\n    is_perfect(1001) should return False.\n    is_perfect(153) should return True.\n    is_perfect(154) should return False.\n    is_perfect(1634) should return False.\n    is_perfect(1635) should return False.\n    is_perfect(1636) should return True.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is strong number and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_strong(1) should return False.\n    is_strong(2) should return False.\n    is_strong(10) should return False.\n    is_strong(17) should return False.\n    is_strong(100) should return False.\n    is_strong(101) should return False.\n    is_strong(1001) should return False.\n    is_strong(153) should return True.\n    is_strong(154) should return False.\n    is_strong(1634) should return False.\n    is_strong(1635) should return False.\n    is_strong(1636) should return True.\n    \"\"\"\n\ndef is_def"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_vowels('aBCdEf') returns 1\n    count_upper_vowels('abcdefg') returns 0\n    count_upper_vowels('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase consonants in odd indices.\n    \n    For example:\n    count_upper_consonants('aBCdEf') returns 2\n    count_upper_consonants('abcdefg') returns 3\n    count_upper_consonants('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in odd indices.\n    \n    For example:\n    count_upper_vowels_consonants('aBCdEf') returns 3\n    count_upper_vowels_consonants('abcdefg') returns 4\n    count_upper_vowels_consonants('dBBE') returns 2\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowels('aBCdEf') returns 3\n    count_upper_vowels_consonants_vowels('abcdefg') returns 4\n    count_upper_vowels_consonants_vowels('dBBE') returns 2\n    \"\"\"\n\ndef count_upper_vowels_consonants_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_consonants('aBCdEf') returns 3\n    count_upper_vowels_consonants_consonants('abcdefg') returns 4\n    count_upper_vowels_consonants_consonants('dBBE') returns 2\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowels_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowels_consonants('aBCdEf') returns 3\n    count_upper_vowels_consonants_vowels_consonants('abcdefg') returns 4\n    count_upper_vowels_consonants_vowels_consonants('dBBE') returns 2\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowels_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowels_vowels('aBCdEf') returns 3\n    count_upper_vowels_consonants_vowels_vowels('abcdefg') returns 4\n    count_upper_vowels_consonants_vowels_vowels('dBBE') returns 2\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowels_consonants_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in odd indices.\n    \n    For example:\n    count_upper"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\ndef is_prime(number):\n    '''\n    Create a function that takes a number as an argument and returns\n    True if the number is a prime number and False otherwise.\n\n    Examples\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    '''\n\ndef is_palindrome(word):\n    '''\n    Create a function that takes a string as an argument and returns\n    True if the string is a palindrome and False otherwise.\n\n    Examples\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"tacocat\")\n    True\n    >>> is_palindrome(\"palindrome\")\n    False\n    '''\n\ndef is_anagram(word1, word2):\n    '''\n    Create a function that takes two strings as arguments and returns\n    True if the strings are anagrams and False otherwise.\n\n    Examples\n    >>> is_anagram(\"cristian\", \"crisitna\")\n    True\n    >>> is_anagram(\"cristian\", \"crisitna\")\n    True\n    >>> is_anagram(\"cristian\", \"crisitna\")\n    True\n    '''\n\ndef is_pangram(sentence):\n    '''\n    Create a function that takes a string as an argument and returns\n    True if the string is a pangram and False otherwise.\n\n    Examples\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    '''\n\ndef is_isogram(word):\n    '''\n    Create a function that takes a string as an argument and returns\n    True if the string is an isogram and False otherwise.\n\n    Examples\n    >>> is_isogram(\"lumberjack\")\n    True\n    >>> is_isogram(\"lumberjack\")\n    True\n    >>> is_isogram(\"lumberjack\")\n    True\n    '''\n\ndef is_vowel(letter):\n    '''\n    Create a function that takes a character as an argument and returns\n    True if the character is a vowel and False otherwise.\n\n    Examples\n    >>> is_vowel(\"a\")\n    True\n    >>> is_vowel(\"a\")\n    True\n    >>> is_vowel(\"a\")\n    True\n    '''\n\ndef is_consonant(letter):\n    '''\n    Create a function that takes a character as an argument and returns\n    True if the character is a consonant and False otherwise.\n\n    Examples\n    >>> is_consonant(\"a\")\n    False\n    >>> is_consonant(\"a\")\n    False\n    >>> is_consonant(\"a\")\n    False\n    '''\n\ndef is_punctuation(character):\n    '''\n    Create a function that takes a character as an argument and returns\n    True if the character is a punctuation mark and False otherwise.\n\n    Examples\n    >>> is_punctuation(\"!\")\n    True\n    >>> is_punctuation(\"!\")\n    True\n    >>> is_punctuation(\"!\")\n    True\n    '''\n\ndef is_whitespace(character):\n    '''\n    Create a function that takes a character as an argument and returns\n    True if the character is a whitespace character and False otherwise.\n\n    Examples\n    >>> is_whitespace(\" \")\n    True\n    >>> is_whitespace(\" \")\n    True\n    >>> is_whitespace(\" \")\n    True\n    '''\n\ndef is_uppercase(character):\n    '''\n    Create a function that takes a character as an argument and returns\n    True if the character is uppercase and False otherwise.\n\n    Examples\n    >>> is_uppercase(\"A\")\n    True\n    >>> is_uppercase(\"A\")\n    True\n    >>> is_uppercase(\"A\")\n    True\n    '''\n\ndef is_lowercase(character):\n    '''\n    Create a function that takes a character as an argument and returns\n    True if the character is lowercase and False otherwise.\n\n    Examples\n    >>> is_lowercase(\"a"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_3(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_3(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_4(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_4(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_5(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_5(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_6(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_6(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_7(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_7(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_8(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\ndef words_string(s):\n    return s.split()\n\ndef words_string(s):\n    return s.split(', ')\n\ndef words_string(s):\n    return s.split(', ') if s.find(',')!= -1 else s.split(' ')\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split(' ')\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            if i % 2 == 0:\n                return i\n        return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            if i % 2 == 0:\n                return i\n        return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            if i % 2 == 0:\n                return i\n        return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1, 2):\n            if i % 2 == 0:\n                return i\n        return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n   "}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"You are given a positive integer n.\n    Return True if n is prime, False otherwise.\n    Example:\n    is_prime(1) => False\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => False\n    is_prime(10) => False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"You are given a positive integer n.\n    Return True if n is a palindrome, False otherwise.\n    Example:\n    is_palindrome(1) => True\n    is_palindrome(2) => False\n    is_palindrome(3) => False\n    is_palindrome(4) => False\n    is_palindrome(5) => False\n    is_palindrome(6) => True\n    is_palindrome(7) => False\n    is_palindrome(8) => False\n    is_palindrome(9) => False\n    is_palindrome(10) => False\n    is_palindrome(11) => True\n    is_palindrome(12) => False\n    is_palindrome(13) => False\n    is_palindrome(14) => False\n    is_palindrome(15) => False\n    is_palindrome(16) => True\n    is_palindrome(17) => False\n    is_palindrome(18) => False\n    is_palindrome(19) => False\n    is_palindrome(20) => False\n    is_palindrome(21) => False\n    is_palindrome(22) => True\n    is_palindrome(23) => False\n    is_palindrome(24) => False\n    is_palindrome(25) => False\n    is_palindrome(26) => False\n    is_palindrome(27) => False\n    is_palindrome(28) => False\n    is_palindrome(29) => False\n    is_palindrome(30) => False\n    is_palindrome(31) => False\n    is_palindrome(32) => False\n    is_palindrome(33) => True\n    is_palindrome(34) => False\n    is_palindrome(35) => False\n    is_palindrome(36) => False\n    is_palindrome(37) => False\n    is_palindrome(38) => False\n    is_palindrome(39) => False\n    is_palindrome(40) => False\n    is_palindrome(41) => True\n    is_palindrome(42) => False\n    is_palindrome(43) => False\n    is_palindrome(44) => False\n    is_palindrome(45) => False\n    is_palindrome(46) => False\n    is_palindrome(47) => False\n    is_palindrome(48) => False\n    is_palindrome(49) => False\n    is_palindrome(50) => False\n    is_palindrome(51) => False\n    is_palindrome(52) => False\n    is_palindrome(53) => False\n    is_palindrome(54) => False\n    is_palindrome(55) => False\n    is_palindrome(56) => False\n    is_palindrome(57) => False\n    is_palindrome(58) => False\n    is_palindrome(59) => False\n    is_palindrome(60) => False\n    is_palindrome(61) => True\n    is_palindrome(62) => False\n    is_palindrome(63) => False\n    is_palindrome(64) => False\n    is_palindrome(65) => False\n    is_palindrome(66"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(str(i) for i in x))\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(str(i) for i in x if i % 2 == 0))\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(str(i) for i in x if i % 2 == 0))\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(str(i) for i in x if i % 2 == 0))\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(str(i) for i in x if i % 2 == 0))\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        arr = sorted(arr)\n        arr = arr[::-1]\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                arr[i] = \"One\"\n            elif arr[i] == 2:\n                arr[i] = \"Two\"\n            elif arr[i] == 3:\n                arr[i] = \"Three\"\n            elif arr[i] == 4:\n                arr[i] = \"Four\"\n            elif arr[i] == 5:\n                arr[i] = \"Five\"\n            elif arr[i] == 6:\n                arr[i] = \"Six\"\n            elif arr[i] == 7:\n                arr[i] = \"Seven\"\n            elif arr[i] == 8:\n                arr[i] = \"Eight\"\n            elif arr[i] == 9:\n                arr[i] = \"Nine\"\n        return arr\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr ->"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    g(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef h(n):\n    \"\"\" Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef i(n):\n    \"\"\" Implement the function i that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    i(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef j(n):\n    \"\"\" Implement the function j that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    j(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef k(n):\n    \"\"\" Implement the function k that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    k(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef l(n):\n    \"\"\" Implement the function l that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    l(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef m(n"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n/leetcode/1001-1100/1001-1010/1009.complement-of-base-10-integer/complement-of-base-10-integer.py\n# Time:  O(logn)\n# Space: O(1)\n\nclass Solution(object):\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        return N ^ (1 << (N.bit_length() + 1) - 1)\n/leetcode/1001-1100/1001-1010/1005.maximize-sum-of-array-after-k-negations/maximize-sum-of-array-after-k-negations.py\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def largestSumAfterKNegations(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        for i in xrange(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        A.sort()\n        return sum(A) - 2*sum(A[:K]) if K else sum(A)\n/leetcode/1001-1100/1001-1010/1007.minimum-domino-rotations-for-equal-row/minimum-domino-rotations-for-equal-row.py\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def minDominoRotations(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        if not B:\n            return 0\n        if len(A)!= len(B):\n            return -1\n        if len(set(A)) == 1:\n            return 0\n        if len(set(B)) == 1:\n            return 0\n        return min(self.minDominoRotationsHelper(A, B, A[0]), self.minDominoRotationsHelper(A, B, B[0]))\n\n    def minDominoRotationsHelper(self, A, B, target):\n        countA, countB = 0, 0\n        for i in xrange(len(A)):\n            if A[i]!= target and B[i]!= target:\n                return -1\n            if A[i]!= target:\n                countA += 1\n            if B[i]!= target:\n                countB += 1\n        return min(countA, countB)\n/leetcode/1001-1100/1001-1010/1008.construct-binary-search-tree-from-preorder-traversal/construct-binary-search-tree-from-preorder-traversal.py\n# Time:  O(n)\n# Space: O(h)\n\nclass Solution(object):\n    def bstFromPreorder(self, preorder):\n        \"\"\"\n        :type preorder: List[int]"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the sum of\n    its digits.\n    >>> sum_digits(123) == 6\n    >>> sum_digits(12345) == 15\n    >>> sum_digits(1234567890) == 45\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num // 10)\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the sum of\n    its digits.\n    >>> sum_digits(123) == 6\n    >>> sum_digits(12345) == 15\n    >>> sum_digits(1234567890) == 45\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num // 10)\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the sum of\n    its digits.\n    >>> sum_digits(123) == 6\n    >>> sum_digits(12345) == 15\n    >>> sum_digits(1234567890) == 45\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num // 10)\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the sum of\n    its digits.\n    >>> sum_digits(123) == 6\n    >>> sum_digits(12345) == 15\n    >>> sum_digits(1234567890) == 45\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num // 10)\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the sum of\n    its digits.\n    >>> sum_digits(123) == 6\n    >>> sum_digits(12345) == 15\n    >>> sum_digits(1234567890) == 45\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num //"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return False\n        else:\n            return True\n    if len(arr) == 3:\n        if arr[0] > arr[1]:\n            return False\n        elif arr[1] > arr[2]:\n            return False\n        else:\n            return True\n    if len(arr) == 4:\n        if arr[0] > arr[1]:\n            return False\n        elif arr[1] > arr[2]:\n            return False\n        elif arr[2] > arr[3]:\n            return False\n        else:\n            return True\n    if len(arr) == 5:\n        if arr[0] > arr[1]:\n            return False\n        elif arr[1] > arr[2]:\n            return False\n        elif arr[2] > arr[3]:\n            return False\n        elif arr[3] > arr[4]:\n            return False\n        else:\n            return True\n    if len(arr) == 6:\n        if arr[0] > arr[1]:\n            return False\n        elif arr[1] > arr[2]:\n            return False\n        elif arr[2] > arr[3]:\n            return False\n        elif arr[3] > arr[4]:\n            return False\n        elif arr[4] > arr[5]:\n            return False\n        else:\n            return True\n    if len(arr) == 7:\n        if arr[0] > arr[1]:\n            return False\n        elif arr[1] > arr[2]:\n            return False\n        elif arr[2] > arr[3]:\n            return False\n        elif arr[3] > arr[4]:\n            return False\n        elif arr[4] > arr[5]:\n            return False\n        elif arr[5] > arr[6]:\n            return False\n        else:\n            return True\n    if len(arr) == 8:\n        if arr[0"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    print(exchange(lst1, lst2))\n\nif __name__ == '__main__':\n    main()\n/python/leetcode/easy/100_same_tree.py\n#!/usr/bin/env python3\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\nOutput: true\n\nExample 2:\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\nOutput: false\n\nExample 3:\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\nOutput: false\n\"\"\"\n\nfrom typing import Optional\n\nclass TreeNode:\n    \"\"\"Tree node.\"\"\"\n\n    def __init__(self, val=0, left=None, right=None):\n        \"\"\"Constructor.\"\"\"\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_same_tree(p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n    \"\"\"Check if two trees are the same.\"\"\"\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    p = TreeNode(1)\n    p.left = TreeNode(2)\n    p.right = TreeNode(3)\n    q = TreeNode(1)\n    q.left = TreeNode(2)\n    q.right = TreeNode(3)\n    print(is_same_tree(p, q))\n\nif __name__ == '__main__':\n    main()\n/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n#!/usr/bin/env python3\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values.\n(ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\nfrom typing import List, Optional\n\nclass TreeNode:\n    \"\"\"Tree node.\"\"\"\n\n    def __init__(self, val=0, left=None, right=None):\n        \"\"\"Constructor.\"\"\"\n        self.val = val\n        self.left = left\n        self"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = Counter(test)\n        test = test.most_common()\n        test = dict(test)\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = Counter(test)\n        test = test.most_common()\n        test = dict(test)\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = Counter(test)\n        test = test.most_common()\n        test = dict(test)\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n#     return (s,s==s[::-1])\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s==s[::-1])\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s,s"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {sum(1 for c in s if c in '13579')} in the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {sum(1 for c in s if c in '13579')} in the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {sum(1 for c in s if c in '13579')} in the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]\n\ndef"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums."}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\ndef max_fill_recursive(grid, capacity, row, col, visited):\n    \"\"\"\n    Recursive solution to the max_fill problem.\n    \"\"\"\n    if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]):\n        return 0\n    if grid[row][col] == 0:\n        return 0\n    if visited[row][col]:\n        return 0\n    visited[row][col] = True\n    return 1 + max_fill_recursive(grid, capacity, row + 1, col, visited) + \\\n        max_fill_recursive(grid, capacity, row - 1, col, visited) + \\\n        max_fill_recursive(grid, capacity, row, col + 1, visited) + \\\n        max_fill_recursive(grid, capacity, row, col - 1, visited)\n\ndef max_fill_iterative(grid, capacity):\n    \"\"\"\n    Iterative solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                max_fill += max_fill_recursive(grid, capacity, row, col, visited)\n    return max_fill\n\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                max_fill += max_fill_recursive(grid, capacity, row, col, visited)\n    return max_fill\n\ndef max_fill_dp_space_optimized(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                max_fill += max_fill_recursive(grid, capacity, row, col, visited)\n    return max_fill\n\ndef max_fill_dp_space_optimized(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    max_fill = 0\n    for row in"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    result = []\n    for word in s:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count\n\ndef count_consonants(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that returns \n    the number of consonants in the string s.\n    Note: you may assume the input string contains only letters.\n    Examples:\n    count_consonants(\"Mary had a little lamb\") ==> 10\n    count_consonants(\"simple white space\") ==> 0\n    count_consonants(\"Hello world\") ==> 8\n    count_consonants(\"Uncle sam\") ==> 5\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char not in vowels:\n           "}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    vowels_list = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_list.append(i)\n    if len(vowels_list) == 0:\n        return \"\"\n    elif len(vowels_list) == 1:\n        return word[vowels_list[0]]\n    else:\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == 0:\n                vowels_list.pop(i)\n                break\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == len(word) - 1:\n                vowels_list.pop(i)\n                break\n        if len(vowels_list) == 0:\n            return \"\"\n        else:\n            return word[vowels_list[0]]\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    vowels_list = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_list.append(i)\n    if len(vowels_list) == 0:\n        return \"\"\n    elif len(vowels_list) == 1:\n        return word[vowels_list[0]]\n    else:\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == 0:\n                vowels_list.pop(i)\n                break\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == len(word) - 1:\n                vowels_list.pop(i)\n                break\n        if len(vowels_list) == 0:\n            return \"\"\n        else:\n            return word[vowels_list[0]]\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    vowels_list = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_list.append(i)\n    if len(vowels_list) == 0:\n        return \"\"\n    elif len(vowels_list) == 1:\n        return word[vowels_list[0]]\n    else:\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == 0:\n                vowels_list.pop(i)\n                break\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == len(word) - 1:\n                vowels_list.pop(i)\n                break\n        if len(vowels_list) == 0:\n            return \"\"\n        else:\n            return word[vowels_list[0]]\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    vowels_list = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_list.append(i)\n    if len(vowels_list) == 0:\n        return \"\"\n    elif len(vowels_list) == 1:\n        return word[vowels_list[0]]\n    else:\n        for i in range(len(vowels_list)):\n            if vowels_list[i] == 0:\n                vowels_list.pop(i)\n                break\n        for i in range(len(vowels_list"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'No'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == lst[1] and lst[1] == lst[2]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5] and lst[5] == lst[6]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 8:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5] and lst[5] == lst[6] and lst[6] == lst[7]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 9:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5] and lst[5] == lst[6] and lst[6] == lst[7] and lst[7] == lst[8]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 10:\n        if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5] and lst[5] == lst[6] and lst[6] == lst[7] and lst[7] == lst[8] and lst"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example "}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n/CodeWars/7kyu/Is_this_a_triangle.py\ndef is_triangle(a, b, c):\n    \"\"\"\n    Write a function that accepts the lengths of the 3 sides of a triangle as arguments.\n    The function should return one of the following strings:\n    \"Equilateral\" if all sides are equal\n    \"Isosceles\" if exactly 2 sides are equal\n    \"Scalene\" if no sides are equal\n    \"Not a triangle\" if the sum of the lengths of any two sides equals less than the length of the third side.\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            return \"Equilateral\"\n        elif a == b or a == c or b == c:\n            return \"Isosceles\"\n        else:\n            return \"Scalene\"\n    else:\n        return \"Not a triangle\"\n/CodeWars/7kyu/Sum_of_odd_numbers.py\ndef row_sum_odd_numbers(n):\n    \"\"\"\n    Given the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n   19.....\n    Calculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\n    rowSumOddNumbers(1); // 1\n    rowSumOddNumbers(2); // 3 + 5 = 8\n    \"\"\"\n    return sum(range(1, 2 * n + 1, 2))\n/CodeWars/7kyu/Find_the_odd_int.py\ndef find_it(seq):\n    \"\"\"\n    Given an array of integers, find the one that appears an odd number of times.\n\n    There will always be only one integer that appears an odd number of times.\n    \"\"\"\n    return [i for i in seq if seq.count(i) % 2!= 0][0]\n/CodeWars/7kyu/Sum_of_odd_numbers.py\ndef row_sum_odd_numbers(n):\n    \"\"\"\n    Given the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n   19.....\n    Calculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\n    rowSumOddNumbers(1); // 1\n    rowSumOddNumbers(2); // 3 + 5 = 8\n    \"\"\"\n    return sum(range(1, 2 * n + 1, 2))\n/CodeWars/7kyu/Find_the_odd_int.py\ndef find_it(seq):\n    \"\"\"\n    Given an array of integers, find the one that appears an odd number of times.\n\n    There will always be only one integer that appears an odd number of times.\n    \"\"\"\n    return [i for i in seq if"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_2(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_3(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_4(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_5(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_6(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_7(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        "}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\ndef get_even_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_even_collatz(5) returns [2, 4] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 2, and 4.\n    \"\"\"\n\ndef get_collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1].\n    \"\"\"\n\ndef get_collatz_sequence_length(n):\n    \"\"\"\n    Given a positive integer n, return the length of the collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence_length(5) returns 6 # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1].\n    \"\"\"\n\ndef get_collatz_sequence_length_for_all(n):\n    \"\"\"\n    Given a positive integer n, return a dictionary that has the length of the collatz sequence for each number from 1 to n.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    else:\n        date_list = date.split(\"-\")\n        if len(date_list)!= 3:\n            return False\n        else:\n            if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n                return False\n            elif int(date_list[1]) < 1 or int(date_list[1]) > 31:\n                return False\n            elif int(date_list[2]) < 1900 or int(date_list[2]) > 2020:\n                return False\n            else:\n                if int(date_list[0]) == 1 or int(date_list[0]) == 3 or int(date_list[0]) == 5 or int(date_list[0]) == 7 or int(date_list[0]) == 8 or int(date_list[0]) == 10 or int(date_list[0]) == 12:\n                    if int(date_list[1]) > 31:\n                        return False\n                elif int(date_list[0]) == 4 or int(date_list[0]) == 6 or int(date_list[0]) == 9 or int(date_list[0]) == 11:\n                    if int(date_list[1]) > 30:\n                        return False\n                elif int(date_list[0]) == 2:\n                    if int(date_list[1]) > 29:\n                        return False\n                return True\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 3"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len([i for i in txt if ord(i)%2==1])\n\ndef split_words("}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return lst"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\" if len(set(range(interval1[0], interval1[1])).intersection(range(interval2[0], interval2[1]))) == 1 else \"NO\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\" if len(set(range(interval1[0], interval1[1])).intersection(range(interval2[0], interval2[1]))) == 1 else \"NO\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"\n    Return True if n is palindrome, False otherwise.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"\n    Return True if n is Armstrong number, False otherwise.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"\n    Return True if n is strong number, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"\n    Return True if n is deficient number, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"\n    Return True if n is perfect number, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"\n    Return True if n is abundant number, False otherwise.\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"\n    Return True if n is perfect square, False otherwise.\n    \"\"\"\n\ndef is_power_of_two(n):\n    \"\"\"\n    Return True if n is power of two, False otherwise.\n    \"\"\"\n\ndef is_power_of_three(n):\n    \"\"\"\n    Return True if n is power of three, False otherwise.\n    \"\"\"\n\ndef is_power_of_five(n):\n    \"\"\"\n    Return True if n is power of five, False otherwise.\n    \"\"\"\n\ndef is_power_of_seven(n):\n    \"\"\"\n    Return True if n is power of seven, False otherwise.\n    \"\"\"\n\ndef is_power_of_sixteen(n):\n    \"\"\"\n    Return True if n is power of sixteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_eight(n):\n    \"\"\"\n    Return True if n is power of eight, False otherwise.\n    \"\"\"\n\ndef is_power_of_nine(n):\n    \"\"\"\n    Return True if n is power of nine, False otherwise.\n    \"\"\"\n\ndef is_power_of_ten(n):\n    \"\"\"\n    Return True if n is power of ten, False otherwise.\n    \"\"\"\n\ndef is_power_of_eleven(n):\n    \"\"\"\n    Return True if n is power of eleven, False otherwise.\n    \"\"\"\n\ndef is_power_of_twelve(n):\n    \"\"\"\n    Return True if n is power of twelve, False otherwise.\n    \"\"\"\n\ndef is_power_of_thirteen(n):\n    \"\"\"\n    Return True if n is power of thirteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_fourteen(n):\n    \"\"\"\n    Return True if n is power of fourteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_fifteen(n):\n    \"\"\"\n    Return True if n is power of fifteen, False otherwise.\n    \"\"\"\n\ndef is_power_of_six"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3, 2, 8]\n        for i in range(3, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i / 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return True if n is an Armstrong number, False otherwise.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"Return True if n is a strong number, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Return True if n is a perfect number, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"Return True if n is a deficient number, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"Return True if n is an abundant number, False otherwise.\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"Return True if n is a perfect square, False otherwise.\n    \"\"\"\n\ndef is_power_of_2(n):\n    \"\"\"Return True if n is a power of 2, False otherwise.\n    \"\"\"\n\ndef is_power_of_3(n):\n    \"\"\"Return True if n is a power of 3, False otherwise.\n    \"\"\"\n\ndef is_power_of_5(n):\n    \"\"\"Return True if n is a power of 5, False otherwise.\n    \"\"\"\n\ndef is_power_of_10(n):\n    \"\"\"Return True if n is a power of 10, False otherwise.\n    \"\"\"\n\ndef is_power_of_20(n):\n    \"\"\"Return True if n is a power of 20, False otherwise.\n    \"\"\"\n\ndef is_power_of_100(n):\n    \"\"\"Return True if n is a power of 100, False otherwise.\n    \"\"\"\n\ndef is_power_of_200(n):\n    \"\"\"Return True if n is a power of 200, False otherwise.\n    \"\"\"\n\ndef is_power_of_1000(n):\n    \"\"\"Return True if n is a power of 1000, False otherwise.\n    \"\"\"\n\ndef is_power_of_2000(n):\n    \"\"\"Return True if n is a power of 2000, False otherwise.\n    \"\"\"\n\ndef is_power_of_10000(n):\n    \"\"\"Return True if n is a power of 10000, False otherwise.\n    \"\"\"\n\ndef is_power_of_20000(n):\n    \"\"\"Return True if n is a power of 20000, False otherwise.\n    \"\"\"\n\ndef is_power_of_100000(n):\n    \"\"\"Return True if n is a power of 100000, False otherwise.\n   "}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in lst])\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x))**2 for x in"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1]\n\ndef check_if_last"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\ndef count_positives_sum_negatives(lst):\n    '''\n    Create a function that takes a list of integers as an argument\n    and returns a list with two elements.\n    The first element is the number of positive integers in the list.\n    The second element is the sum of negative integers in the list.\n\n    Examples:\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, 5, 7]) == [3, 10]\n    count_positives_sum_negatives([2, 4, 1, 3, "}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two integers, strings, or floats, and returns\n    the larger of the two variables in its given variable type.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_two(1, 2.5) \u279e 2.5\n    compare_two(1, \"2,3\") \u279e 2.5\n    compare_two(\"5,1\", \"6\") \u279e 6\n    compare_two(\"1\", 1) \u279e 1\n    \"\"\"\n\ndef compare_three(a, b, c):\n    \"\"\"\n    Create a function that takes three integers, strings, or floats, and returns\n    the largest of the three variables in its given variable type.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_three(1, 2.5, 3) \u279e 3\n    compare_three(1, \"2,3\", 3) \u279e 3\n    compare_three(\"5,1\", \"6\", 3) \u279e 6\n    compare_three(\"1\", 1, 3) \u279e 3\n    \"\"\"\n\ndef compare_four(a, b, c, d):\n    \"\"\"\n    Create a function that takes four integers, strings, or floats, and returns\n    the largest of the four variables in its given variable type.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_four(1, 2.5, 3, 4) \u279e 4\n    compare_four(1, \"2,3\", 3, 4) \u279e 4\n    compare_four(\"5,1\", \"6\", 3, 4) \u279e 6\n    compare_four(\"1\", 1, 3, 4) \u279e 4\n    \"\"\"\n\ndef compare_five(a, b, c, d, e):\n    \"\"\"\n    Create a function that takes five integers, strings, or floats, and returns\n    the largest of the five variables in its given variable type.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_five(1, 2.5, 3, 4, 5) \u279e 5\n    compare_five(1, \"2,3\", 3, 4, 5) \u279e 5\n    compare_five(\"5,1\", \"6\", 3, 4, 5) \u279e 6\n    compare_five(\"1\", 1, 3, 4, 5) \u279e 5\n    \"\"\"\n\ndef compare_six(a, b, c, d, e, f):\n    \"\"\"\n    Create a function that takes six integers, strings, or floats, and returns\n    the largest of the six variables in its given variable type.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_six(1, 2.5, 3, 4, 5, 6) \u279e 6\n    compare_six(1, \"2,3\", 3, 4, 5, 6) \u279e 6\n    compare_six(\"5,1\", \"6\", 3, 4, 5, 6) \u279e 6\n    compare_six(\"1\", 1, 3, 4, 5, 6) \u279e 6\n    \"\"\"\n\ndef compare_seven(a, b, c, d, e, f, g):\n    \"\"\"\n    Create a function that takes seven integers, strings, or floats, and returns\n    the largest of the seven variables in its given variable type.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_seven(1, 2.5, 3, 4, 5, 6, 7) \u279e 7"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == False\n    is_equal_to_sum_odd(6) == True\n    is_equal_to_sum_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd(4) == True\n    is_equal_to_sum_even_odd(6) == True\n    is_equal_to_sum_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even(4) == False\n    is_equal_to_sum_even_odd_even(6) == True\n    is_equal_to_sum_even_odd_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_odd(4) == False\n    is_equal_to_sum_even_odd_odd(6) == False\n    is_equal_to_sum_even_odd_odd(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd(4) == True\n    is_equal_to_sum_even_odd_even_odd(6) == False\n    is_equal_to_sum_even_odd_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_even(4) == False\n    is_equal_to_sum_even_odd_even_odd_even(6) == True\n    is_equal_to_sum_even_odd_even_odd_even(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_odd(4) == False\n    is_equal_to_sum_even_odd_even_odd_odd(6) == False\n    is_equal_to_sum_even_odd_even_odd_odd(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_even_odd(4) == True\n    is_equal_to_sum_even_odd_even_odd_even_odd(6) == False\n    is_equal_to_sum_even_odd_even_odd_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_even_odd_"}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name.split('.')[0] == '':\n        return 'No'\n    elif file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name.split('.')[0] == '':\n        return 'No'\n    elif file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after"}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n   "}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    You are given a number n,\n    you have to return True if n is a prime number,\n    otherwise return False.\n\n    Example 1:\n        Input: n = 11\n        Output: True\n\n    Example 2:\n        Input: n = 12\n        Output: False\n\n    Constraints:\n        * 1 <= n <= 1000\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"\n    You are given a string word,\n    you have to return True if the word is a palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: word = \"abba\"\n        Output: True\n\n    Example 2:\n        Input: word = \"abba\"\n        Output: False\n\n    Constraints:\n        * 1 <= len(word) <= 100\n        * word contains only lowercase letters\n    \"\"\"\n\ndef is_anagram(word1, word2):\n    \"\"\"\n    You are given two strings word1 and word2,\n    you have to return True if the two words are anagrams,\n    otherwise return False.\n\n    Example 1:\n        Input: word1 = \"abc\", word2 = \"bca\"\n        Output: True\n\n    Example 2:\n        Input: word1 = \"abc\", word2 = \"abc\"\n        Output: True\n\n    Example 3:\n        Input: word1 = \"abc\", word2 = \"def\"\n        Output: False\n\n    Constraints:\n        * 1 <= len(word1) <= 100\n        * 1 <= len(word2) <= 100\n        * word1 and word2 contains only lowercase letters\n    \"\"\"\n\ndef is_palindrome_number(number):\n    \"\"\"\n    You are given a number number,\n    you have to return True if the number is a palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: number = 121\n        Output: True\n\n    Example 2:\n        Input: number = 123\n        Output: False\n\n    Constraints:\n        * 1 <= number <= 1000000000\n    \"\"\"\n\ndef is_palindrome_number_2(number):\n    \"\"\"\n    You are given a number number,\n    you have to return True if the number is a palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: number = 121\n        Output: True\n\n    Example 2:\n        Input: number = 123\n        Output: False\n\n    Constraints:\n        * 1 <= number <= 1000000000\n    \"\"\"\n\ndef is_palindrome_number_3(number):\n    \"\"\"\n    You are given a number number,\n    you have to return True if the number is a palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: number = 121\n        Output: True\n\n    Example 2:\n        Input: number = 123\n        Output: False\n\n    Constraints:\n        * 1 <= number <= 1000000000\n    \"\"\"\n\ndef is_palindrome_number_4(number):\n    \"\"\"\n    You are given a number number,\n    you have to return True if the number is a palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: number = 121\n        Output: True\n\n    Example 2:\n        Input: number = 123\n        Output: False\n\n    Constraints:\n        * 1 <= number <= 1000000000\n    \"\"\"\n\ndef is_palindrome_number_5(number):\n    \"\"\"\n    You are given a number number,\n    you have to return True if the number is a palindrome,\n    otherwise return False.\n\n    Example 1"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\","}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_3([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_3([]) == []\n    \"\"\"\n\ndef order_by_points_4(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_4([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_4([]) == []\n    \"\"\"\n\ndef order_by_points_5(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_5([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_5([]) == []\n    \"\"\"\n\ndef order_by_points_6(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_6([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_6([]) == []\n    \"\"\"\n\ndef order_by_points_7(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_7([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_7([]) == []\n    \"\"\"\n\ndef order_by_points_8(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_8([1, 11,"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109])"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \""}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 1"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef sum_of_squares(lst):\n    '''\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 14\n    sum_of_squares([-1, -2, 0]) == 1 + 4 + 0 = 5\n    sum_of_squares([9, -2]) == 81\n    sum_of_squares([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef sum_of_squares(lst):\n    '''\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 14\n    sum_of_squares([-1, -2, 0]) == 1 + 4 + 0 = 5\n    sum_of_squares([9, -2]) == 81\n    sum_of_squares([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef sum_of_squares(lst):\n    '''\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 14\n    sum_of_squares([-1, -2, 0]) == 1 + 4 + 0 = 5\n    sum_of_squares([9, -2]) == 81\n    sum_of_squares([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef sum_of_squares(lst):\n    '''\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 14\n    sum_of_squares([-1, -2, 0]) == 1 + 4 + 0 = 5\n    sum_of_squares([9, -2]) == 81\n    sum_of_squares([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef sum_of_squares(lst):\n    '''\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 14\n    sum_of_squares([-1, -2, 0]) == 1 + 4 + 0 = 5\n    sum_of_squares([9, -2]) == 81\n    sum_of_squares([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef sum_of_squares(lst):\n    '''\n    Given a list of numbers, return the sum of the squares of the numbers\n    in the list. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 1"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip"}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_extension_strength = strength(strongest_extension)\n    for extension in extensions:\n        if strength(extension) > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = strength(extension)\n    return class_name + '.' + strongest_extension\n\ndef strength(extension):\n    \"\"\"\n    \"\"\"\n    cap = 0\n    sm = 0\n    for char in extension:\n        if char.isupper():\n            cap += 1\n        elif char.islower():\n            sm += 1\n    return cap - sm\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_extension_strength = strength(strongest_extension)\n    for extension in extensions:\n        if strength(extension) > strongest_extension_strength:\n            strongest_extension = extension\n           "}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check("}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Given a number return True if it is a prime number and False if it is not.\n\n    Note: A prime number is only divisible by 1 and itself.\n\n    Example:\n        is_prime(1) ==> False\n        is_prime(2) ==> True\n        is_prime(-1) ==> False\n        is_prime(7) ==> True\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"Given a string, return True if the string is a palindrome. If not, return False.\n\n    Note: A palindrome is a word that is spelled the same forward and backward.\n\n    Example:\n        is_palindrome(\"racecar\") ==> True\n        is_palindrome(\"walter\") ==> False\n    \"\"\"\n\ndef is_pangram(sentence):\n    \"\"\"Given a string, return True if it is a pangram. If not, return False.\n\n    Note: Pangrams are words or sentences containing every letter of the alphabet at least once.\n\n    Example:\n        is_pangram(\"The quick brown fox jumps over the lazy dog\") ==> True\n        is_pangram(\"You shall not pass!\") ==> False (not \"You shall not PASS!\")\n    \"\"\"\n\ndef is_anagram(word1, word2):\n    \"\"\"Given two strings, check to see if they are anagrams. An anagram is when the two strings can be written using the exact same letters (just rearranged).\n\n    Note: Anagrams are case insensitive\n\n    Example:\n        is_anagram(\"\", \"I am a weakish speller\") ==> True\n        is_anagram(\"Twas brillig and the slithy toves\", \"Just gimme a brick\") ==> False\n    \"\"\"\n\ndef is_isogram(word):\n    \"\"\"Given a string, return True if the string is an isogram. If not, return False.\n\n    Note: An isogram is a word that has no duplicate letters.\n\n    Example:\n        is_isogram(\"lumberjack\") ==> True\n        is_isogram(\"background\") ==> False\n        is_isogram(\"abcdefg\") ==> True\n    \"\"\"\n\ndef is_armstrong(num):\n    \"\"\"Given a number determine if it is an Armstrong number.\n\n    Note: An n-digit number that is the sum of the nth powers of its digits is called an Armstrong number.\n\n    Example:\n        is_armstrong(153) ==> True\n        is_armstrong(123) ==> False\n    \"\"\"\n\ndef is_strong(num):\n    \"\"\"Given a number determine if it is a strong number.\n\n    Note: A number is strong if the sum of the factorial of each digit is equal to number itself.\n\n    Example:\n        is_strong(145) ==> False (not 1! + 4! + 5! = 145)\n        is_strong(1331) ==> True (1! + 3! + 3! + 1! = 1331)\n    \"\"\"\n\ndef is_deficient(num):\n    \"\"\"Given a number determine if it is a deficient number.\n\n    Note: A number is deficient if the sum of its factors is less than the number itself.\n\n    Example:\n        is_deficient(12) ==> False (6 + 3 + 2 = 11 < 12)\n        is_deficient(18) ==> True (6 + "}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral string, return its integer equivalent.\n    Restrictions: roman is a string of lowercase letters.\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\ndef main():\n    \"\"\"\n    The main function for this program.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n/README.md\n# Python-Practice\n\nThis is a repository for my Python practice.\n\n## Contents\n\n### 1. [Roman Numerals](https://github.com/joshua-chang/Python-Practice/tree/master/Roman%20Numerals)\n\nThis is a program that converts between Roman numerals and integers.\n\n### 2. [Tic-Tac-Toe](https://github.com/joshua-chang/Python-Practice/tree/master/Tic-Tac-Toe)\n\nThis is a program that plays Tic-Tac-Toe.\n\n### 3. [Word Count](https://github.com/joshua-chang/Python-Practice/tree/master/Word%20Count)\n\nThis is a program that counts the number of words in a text file.\n\n### 4. [Word Frequency](https://github.com/joshua-chang/Python-Practice/tree/master/Word%20Frequency)\n\nThis is a program that counts the number of times each word appears in a text file.\n/Word Count/word_count.py\n\"\"\"\nThis is a program that counts the number of words in a text file.\n\"\"\"\n\ndef word_count(filename):\n    \"\"\"\n    Given a filename, return the number of words in the file.\n    Restrictions: filename is a string.\n\n    Examples:\n    >>> word_count('example.txt') == 10\n    \"\"\"\n\ndef main():\n    \"\"\"\n    The main function for this program.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n/Word Frequency/word_frequency.py\n\"\"\"\nThis is a program that counts the number of times each word appears in a text file.\n\"\"\"\n\ndef word_frequency(filename):\n    \"\"\"\n    Given a filename, return a dictionary mapping each word to the number of times\n    it appears in the file.\n    Restrictions: filename is a string.\n\n    Examples:\n    >>> word_frequency('example.txt') == {'the': 2, 'cat': 1,'sat': 1, 'on': 1,'mat': 1}\n    \"\"\"\n\ndef main():\n    \"\"\"\n    The main function for this program.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n/Tic-Tac-Toe/tic_tac_toe.py\n\"\"\"\nThis is a program that plays Tic-Tac-Toe.\n\"\"\"\n\ndef print_board(board):\n    \"\"\""}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n\ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides are equal.\n    Example:\n    is_equilateral(3, 3, 3) == True\n    is_equilateral(1, 2, 3) == False\n    '''\n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle in which two sides are equal.\n    Example:\n    is_isosceles(3, 4, 4) == True\n    is_isosceles(1, 2, 3) == False\n    '''\n\ndef is_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a scalene triangle, False otherwise.\n    A scalene triangle is a triangle in which all three sides are different.\n    Example:\n    is_scalene(3, 4, 5) == True\n    is_scalene(1, 2, 3) == False\n    '''\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_acute_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an acute-angled triangle, False otherwise.\n    An acute-angled triangle is a triangle in which all three angles are less than\n    90 degree.\n    Example:\n    is_acute_angled_triangle(3, 4, 5) == True\n    is_acute_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_obtuse_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an obtuse-angled triangle, False otherwise.\n    An obtuse-angled triangle is a triangle in which one angle is greater than 90\n    degree.\n    Example:\n    is_obtuse_angled_triangle(3, 4, 5) == True\n    is_obtuse_angled_triangle(1, "}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(set(word))\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\ndef eat(number, need, remaining):\n    return [number + need, remaining - need]\n/7kyu/simple_fun_number_1_reverse_or_not.py\ndef reverse_or_not(n):\n    \"\"\"\n    You are given an array of integers.\n    You should return an array of the string representations of the integers.\n    If the number is divisible by 3, change it to reverse of it.\n    Otherwise, change it to the string representation.\n    \n    Example:\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    \n    Variables:\n    @n : array of integers\n    \n    Constrain:\n    * 0 <= n.length <= 1000\n    * 0 <= n[i] <= 1000\n    \n    Have fun :)\n    \"\"\"\n\ndef reverse_or_not(n):\n    return [str(i) if i % 3 else str(i)[::-1] for i in n]\n/7kyu/simple_fun_number_1_reverse_or_not.js\nfunction reverseOrNot(n) {\n    /*\n    You are given an array of integers.\n    You should return an array of the string representations of the integers.\n    If the number is divisible by 3, change it to reverse of it.\n    Otherwise, change it to the string representation.\n    \n    Example:\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    \n    Variables:\n    @n : array of integers\n    \n    Constrain:\n    * 0 <= n.length <= 1000\n    * 0 <= n[i] <= 1000\n    \n    Have fun :)\n    */\n\n    return n.map(i => i % 3? i : i.toString().split('').reverse().join(''));\n}\n/7kyu/simple_fun_number_1_reverse_or_not.rb\ndef reverse_or_not(n)\n    \"\"\"\n    You are given an array of integers.\n    You should return an array of the string representations of the integers.\n    If the number is divisible by 3, change it to reverse of it.\n    Otherwise, change it to the string representation.\n    \n    Example:\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    * reverse_or_not([12, 13, 14]) -> [\"12\", \"14\", \"31\"]\n    * reverse_or_not([12, "}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            if operator[i-1] == '+':\n                result += operand[i]\n            elif operator[i-1] == '-':\n                result -= operand[i]\n            elif operator[i-1] == '*':\n                result *= operand[i]\n            elif operator[i-1] == '//':\n                result //= operand[i]\n            elif operator[i-1] == '**':\n                result **= operand[i]\n    return result\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            if operator[i-1] == '+':\n                result += operand[i]\n            elif operator[i-1] == '-':\n                result -= operand[i]\n            elif operator[i-1] == '*':\n                result *= operand[i]\n            elif operator[i-1] == '//':\n                result //= operand[i]\n            elif operator[i-1] == '**':\n                result **= operand[i]\n    return result\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or v"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef md5_to_hex(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its equivalent hex string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef hex_to_md5(hex):\n    \"\"\"\n    Given a hex string 'hex', return its equivalent md5 hash equivalent string.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base64(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its equivalent base64 string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base64('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef base64_to_md5(base64):\n    \"\"\"\n    Given a base64 string 'base64', return its equivalent md5 hash equivalent string.\n    If 'base64' is an empty string, return None.\n\n    >>> base64_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base64_url(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its equivalent base64 url string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base64_url('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef base64_url_to_md5(base64_url):\n    \"\"\"\n    Given a base64 url string 'base64_url', return its equivalent md5 hash equivalent string.\n    If 'base64_url' is an empty string, return None.\n\n    >>> base64_url_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b67"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2!= 0:\n        a += 1\n    return [i for i in range(a, b + 1, 2)]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2!= 0:\n        a += 1\n    return [i for i in range(a, b + 1, 2)]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2!= 0:\n        a += 1\n    return [i for i in range(a, b + 1, 2)]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2!= 0:\n        a += 1\n    return [i for i in range(a, b + 1, 2)]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2!= 0:\n        a += 1\n    return [i for i in range(a, b + 1, 2)]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4"}
