{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n<file_sep>/week05/day02/02_list_manipulation.py\n# Create a list ('List A') which contains the following values\n# 10, 11, 12, 13, 14, 15\n# Create a second list ('List B') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a third list ('List C') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a fourth list ('List D') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a fifth list ('List E') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a sixth list ('List F') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a seventh list ('List G') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a eighth list ('List H') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a ninth list ('List I') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a tenth list ('List J') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a eleventh list ('List K') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a twelfth list ('List L') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a thirteenth list ('List M') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a fourteenth list ('List N') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a fifteenth list ('List O') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a sixteenth list ('List P') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a seventeenth list ('List Q') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a eighteenth list ('List R') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a nineteenth list ('List S') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a twentieth list ('List T') which contains the values\n# 4, 8, 12, 16, 20, 24\n# Create a twenty-first list ('List U') which contains the values\n# 1, 2, 3, 4, 5, 6\n# Create a twenty-second list ('List V') which contains the values\n# 10, 11, 12, 13, 14, 15\n# Create a twenty-third list ('List W') which contains the values\n# 4, 8, 12, 16, 20, 2"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n<file_sep>/python/recursion/fibonacci.py\ndef fibonacci(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n<file_sep>/python/recursion/reverse_string.py\ndef reverse_string(s):\n    \"\"\"\n    Return the reverse of the string s.\n    >>> reverse_string('abc')\n    'cba'\n    >>> reverse_string('a')\n    'a'\n    >>> reverse_string('madam')\n   'madam'\n    >>> reverse_string('123456789')\n    '987654321'\n    \"\"\"\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n<file_sep>/python/recursion/sum_digits.py\ndef sum_digits(n):\n    \"\"\"\n    Return the sum of the digits of positive integer n.\n    >>> sum_digits(23)\n    5\n    >>> sum_digits(496)\n    19\n    >>> sum_digits(1234567890)\n    45\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return sum_digits(n // 10) + n % 10\n<file_sep>/python/recursion/reverse_list.py\ndef reverse_list(lst):\n    \"\"\"\n    Return a new list that is the reverse of lst.\n    >>> reverse_list([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    >>> reverse_list([3, 1, 5, 4])\n    [4, 5, 1, 3]\n    >>> reverse_list([])\n    []\n    \"\"\"\n    if len(lst) == 0:\n        return lst\n    else:\n        return reverse_list(lst[1:]) + [lst[0]]\n<file_sep>/python/recursion/sum_list.py\ndef sum_list(lst):\n    \"\"\"\n    Return the sum of the numbers in the list lst.\n    >>> sum_list([1, 10])\n    11\n    >>> sum_list([1, -2, 3])\n    2\n    >>> sum_list([])\n    0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum_list(lst[1:]) + lst[0]\n<file_sep>/python/recursion/factorial.py\ndef factorial(n):\n    \"\"\"\n    Return n factorial.\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return factorial(n - 1) * n\n<file_sep>/python/recursion/sum_of_squares.py\ndef sum_of_squares(n):\n    \"\"\"\n    Return the sum of the squares of the numbers from 1 to n.\n    >>> sum_of_squares(2)\n    5\n    >>> sum_of_squares(3)\n    14\n    >>> sum_of_squares(10)\n    385\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum_of_squares(n - 1) + n ** 2\n<file_sep>/python/recursion/sum_of_n.py\ndef sum_of_n(n):\n    \"\"\"\n    Return the sum of 1 + 2 + 3 +... + n.\n    >>> sum"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_2(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_2(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_3(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_3(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_4(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_4(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_5(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_5(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_6(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_6(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_7(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_7(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_8(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_8(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_9(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_9(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_10(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_10(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_11(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_11(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number_12(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number_12(3.5)\n    0.5\n    \"\"\"\n\n"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n<file_sep>/python/tests/test_002_list_of_lists.py\nfrom python.exercises.002_list_of_lists import list_of_lists\n\n\ndef test_list_of_lists():\n    assert list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n<file_sep>/python/tests/test_001_sum_of_numbers.py\nfrom python.exercises.001_sum_of_numbers import sum_of_numbers\n\n\ndef test_sum_of_numbers():\n    assert sum_of_numbers([1, 2, 3]) == 6\n    assert sum_of_numbers([1, 2, 3]) == 6\n<file_sep>/python/exercises/002_list_of_lists.py\nfrom typing import List\n\n\ndef list_of_lists(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\" Given a list of lists, return a list of all the numbers in the list.\n    >>> list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n<file_sep>/python/exercises/001_sum_of_numbers.py\nfrom typing import List\n\n\ndef sum_of_numbers(numbers: List[int]) -> int:\n    \"\"\" Given a list of numbers, return the sum of all the numbers.\n    >>> sum_of_numbers([1, 2, 3])\n    6\n    \"\"\"\n<file_sep>/python/tests/test_003_below_zero.py\nfrom python.exercises.003_below_zero import below_zero\n\n\ndef test_below_zero():\n    assert below_zero([1, 2, 3]) is False\n    assert below_zero([1, 2, -4, 5]) is True\n<|endoftext|>"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n<file_sep>/src/python/data_structures/linked_list/linked_list.py\nfrom typing import Any, Optional\n\n\nclass Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self) -> None:\n        self.head = None\n\n    def append(self, data: Any) -> None:\n        \"\"\" Append a new node containing the data to the end of the list.\n        \"\"\"\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n\n        last_node = self.head\n        while last_node.next:\n            last_node = last_node.next\n        last_node.next = new_node\n\n    def prepend(self, data: Any) -> None:\n        \"\"\" Prepend a new node containing the data to the beginning of the list.\n        \"\"\"\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def delete(self, data: Any) -> None:\n        \"\"\" Delete the first node containing the data.\n        \"\"\"\n        if self.head is None:\n            return\n\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n\n        current_node = self.head\n        while current_node.next:\n            if current_node.next.data == data:\n                current_node.next = current_node.next.next\n                return\n            current_node = current_node.next\n\n    def find(self, data: Any) -> Optional[Node]:\n        \"\"\" Return the first node containing the data.\n        \"\"\"\n        current_node = self.head\n        while current_node:\n            if current_node.data == data:\n                return current_node\n            current_node = current_node.next\n        return None\n\n    def find_last(self, data: Any) -> Optional[Node]:\n        \"\"\" Return the last node containing the data.\n        \"\"\"\n        current_node = self.head\n        while current_node:\n            if current_node.data == data:\n                return current_node\n            current_node = current_node.next\n        return None\n\n    def delete_at_index(self, index: int) -> None:\n        \"\"\" Delete the node at the given index.\n        \"\"\"\n        if index == 0:\n            self.head = self.head.next\n            return\n\n        current_node = self.head\n        for i in range(index - 1):\n            current_node = current_node.next\n        current_node.next = current_node.next.next\n\n    def get_at_index(self, index: int) -> Optional[Node]:\n        \"\"\" Return the node at the given index.\n        \"\"\"\n        current_node = self.head\n        for i in range(index):\n            current_node = current_node.next\n        return current_node\n\n    def insert_at_index(self, index: int, data: Any) -> None:\n        \"\"\" Insert a new node containing the data at the given index.\n        \"\"\"\n        new_node = Node(data)\n        if index == 0:\n            new_node.next = self.head\n            self.head = new_node\n            return\n\n        current_node = self.head\n        for i in range(index - 1):\n            current_node = current_node.next\n        new_node.next = current_node.next\n        current_node.next = new_node\n\n    def reverse(self) -> None:\n        \"\"\" Reverse the list in-place.\n        \"\"\"\n        current_node = self.head\n        previous_node = None\n        while current_node:\n            next_node = current_node.next\n            current_node.next = previous_node\n            previous_node = current_node\n            current_node = next_node\n        self.head = previous_node\n\n    def print(self) -> None:\n        \"\"\" Print the list.\n        \"\"\"\n        current_node = self.head\n        while current_node:\n            print(current_node.data)\n            current_node = current_node.next\n<file_sep>/src/python/data_structures/linked_list"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n<file_sep>/02-python-basics/02-functions/02-function-parameters/02-function-parameters.py\ndef add_numbers(a, b):\n    return a + b\n\n\ndef add_numbers_with_default(a, b=1):\n    return a + b\n\n\ndef add_numbers_with_default_and_keyword(a, b=1, c=2):\n    return a + b + c\n\n\ndef add_numbers_with_default_and_keyword_and_positional(a, b=1, c=2):\n    return a + b + c\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments(a, b=1, *c):\n    return a + b + sum(c)\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_keyword_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_keyword_arguments_and_positional_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_keyword_arguments_and_positional_arguments_and_variable_number_of_positional_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_keyword_arguments_and_positional_arguments_and_variable_number_of_positional_arguments_and_keyword_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_keyword_arguments_and_positional_arguments_and_variable_number_of_positional_arguments_and_keyword_arguments_and_positional_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\ndef add_numbers_with_default_and_keyword_and_positional_and_variable_number_of_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_keyword_arguments_and_positional_arguments_and_variable_number_of_positional_arguments_and_keyword_arguments_and_positional_arguments_and_variable_number_of_positional_arguments(a, b=1, *c, **d):\n    return a + b + sum(c) + sum(d.values())\n\n\n"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n<file_sep>/python/leetcode/2020/07/07.py\nfrom typing import List\n\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\n        \"\"\"\n        if not points:\n            return 0\n\n        points.sort(key=lambda x: x[1])\n        arrow_count = 1\n        prev_end = points[0][1]\n        for start, end in points[1:]:\n            if start > prev_end:\n                arrow_count += 1\n                prev_end = end\n\n        return arrow_count\n<file_sep>/python/leetcode/2020/07/07.py\nfrom typing import List\n\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\n        \"\"\"\n        if not points:\n            return 0\n\n        points.sort(key=lambda x: x[1])\n        arrow_count = 1\n        prev_end = points[0][1]\n        for start, end in points[1:]:\n            if start > prev_end:\n                arrow_count += 1\n                prev_end = end\n\n        return arrow_count\n<file_sep>/python/leetcode/2020/07/07.py\nfrom typing import List\n\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\n        \"\"\"\n        if not points:\n            return 0\n\n        points.sort(key=lambda x: x[1])\n        arrow_count = 1\n        prev_end = points[0][1]\n        for start, end in points[1:]:\n            if start > prev_end:\n                arrow_count += 1\n                prev_end = end\n\n        return arrow_count\n<file_sep>/python/leetcode/2020/07/07.py\nfrom typing import List\n\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\n        \"\"\"\n        if not points:\n            return 0\n\n        points.sort(key=lambda x: x[1])\n        arrow_count = 1\n        prev_end = points[0][1]\n        for start, end in points[1:]:\n            if start > prev_end:\n                arrow_count += 1\n                prev_end = end\n\n        return arrow_count\n<file_sep>/python/leetcode/2020/07/07.py\nfrom typing import List\n\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\n        \"\"\"\n        if not points:\n            return 0\n\n        points.sort(key=lambda x: x[1])\n        arrow_count = 1\n        prev_end = points[0][1]\n        for start, end in points[1:]:\n            if start > prev_end:\n                arrow_count += 1\n                prev_end = end\n\n        return arrow_count\n<file_sep>/python/leetcode/2020/07/07.py\nfrom typing import List\n\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\n        \"\"\"\n        if not points:\n            return 0\n\n        points.sort(key=lambda x: x[1])\n        arrow_count = 1\n        prev_end = points[0][1]\n        for start,"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{:c}\".format(i), end=\"\")\n    else:\n        print(\"{:c}\".format(i - 32), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/101-remove_char_at.py\n#!/usr/bin/python3\ndef remove_char_at(str, n):\n    \"\"\"\n    Returns a string with the nth character removed\n    \"\"\"\n    return str[:n] + str[n + 1:]\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py~\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n   "}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n<file_sep>/02_lists/02_list_comprehensions/02_list_comprehensions.py\n\"\"\"\nList comprehensions are a way to create lists in a concise way.\n\nThe general syntax is:\n\n[expression for item in list]\n\nThe expression can be any Python expression, including another list comprehension.\n\nFor example, to create a list of the squares of the first 10 numbers, we can write:\n\n>>> [x**2 for x in range(10)]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nThe expression can also contain conditions, for example:\n\n>>> [x for x in range(10) if x % 2 == 0]\n[0, 2, 4, 6, 8]\n\nThe expression can also contain multiple fors, for example:\n\n>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n\"\"\"\n\n# 1. Create a list of the first 100 numbers that are divisible by 7.\n\n# 2. Create a list of the first 100 numbers that are divisible by 7 and 5.\n\n# 3. Create a list of the first 100 numbers that are divisible by 7 or 5.\n\n# 4. Create a list of the first 100 numbers that are divisible by 7 and not 5.\n\n# 5. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 6. Create a list of the first 100 numbers that are divisible by 7 and 5 but not both.\n\n# 7. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 8. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 9. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 10. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 11. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 12. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 13. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 14. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 15. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 16. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 17. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 18. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 19. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both.\n\n# 20. Create a list of the first 100 numbers that are divisible by 7 or 5 but not both"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n<file_sep>/README.md\n# Python-Algorithms\n\nThis repository contains a collection of algorithms implemented in Python.\n\n## Algorithms\n\n### Sorting\n\n- [Bubble Sort](https://github.com/juan-soto/Python-Algorithms/blob/master/sorting/bubble_sort.py)\n- [Insertion Sort](https://github.com/juan-soto/Python-Algorithms/blob/master/sorting/insertion_sort.py)\n- [Merge Sort](https://github.com/juan-soto/Python-Algorithms/blob/master/sorting/merge_sort.py)\n- [Quick Sort](https://github.com/juan-soto/Python-Algorithms/blob/master/sorting/quick_sort.py)\n- [Selection Sort](https://github.com/juan-soto/Python-Algorithms/blob/master/sorting/selection_sort.py)\n\n### Searching\n\n- [Binary Search](https://github.com/juan-soto/Python-Algorithms/blob/master/searching/binary_search.py)\n- [Linear Search](https://github.com/juan-soto/Python-Algorithms/blob/master/searching/linear_search.py)\n\n### Graphs\n\n- [Breadth First Search](https://github.com/juan-soto/Python-Algorithms/blob/master/graphs/breadth_first_search.py)\n- [Depth First Search](https://github.com/juan-soto/Python-Algorithms/blob/master/graphs/depth_first_search.py)\n- [Dijkstra's Algorithm](https://github.com/juan-soto/Python-Algorithms/blob/master/graphs/dijkstra.py)\n- [Floyd-Warshall Algorithm](https://github.com/juan-soto/Python-Algorithms/blob/master/graphs/floyd_warshall.py)\n- [Prim's Algorithm](https://github.com/juan-soto/Python-Algorithms/blob/master/graphs/prim.py)\n- [Topological Sort](https://github.com/juan-soto/Python-Algorithms/blob/master/graphs/topological_sort.py)\n\n### Strings\n\n- [Knuth-Morris-Pratt Algorithm](https://github.com/juan-soto/Python-Algorithms/blob/master/strings/knuth_morris_pratt.py)\n- [Rabin-Karp Algorithm](https://github.com/juan-soto/Python-Algorithms/blob/master/strings/rabin_karp.py)\n\n### Dynamic Programming\n\n- [Longest Common Subsequence](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest_common_subsequence.py)\n- [Longest Increasing Subsequence](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest_increasing_subsequence.py)\n- [Longest Palindromic Subsequence](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest_palindromic_subsequence.py)\n- [Longest Palindromic Substring](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest_palindromic_substring.py)\n- [Longest Repeated Substring](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest_repeated_substring.py)\n- [Longest Substring Without Repeating Characters](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest_substring_without_repeating_characters.py)\n- [Longest Substring with At Most K Distinct Characters](https://github.com/juan-soto/Python-Algorithms/blob/master/dynamic_programming/longest"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n#    if is_palindrome(string):\n#        return string\n#    for i in range(len(string), 0, -1):\n#        if is_palindrome(string[:i]):\n#            return string[:i] + string[:i][::-1]\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return string + string[::-1]\n\n\ndef make_palindrome_2(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return string + string[::-1]\n\n\ndef make_palindrome_3(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return string + string[::-1]\n\n\ndef make_palindrome_4(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return string + string[::-1]\n\n\ndef make_palindrome_5(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return string + string[::-1]\n\n\ndef make_palindrome_6(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a pal"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n<file_sep>/README.md\n# Python-for-Data-Science\n\nThis repository contains the code for the Python for Data Science course on Coursera.\n\n## Course Description\n\nThis course is an introduction to the Python programming language for data science. It covers the basics of the Python language, including data types, control flow, functions, and modules. It also covers the basics of data analysis and visualization using the Pandas and Matplotlib libraries.\n\n## Course Objectives\n\nBy the end of this course, you will be able to:\n\n- Use Python as a general-purpose programming language for data science\n- Use Python to manipulate and analyze data\n- Use Python to create data visualizations\n- Use Python to create interactive data visualizations\n- Use Python to create data applications\n\n## Course Content\n\nThe course covers the following topics:\n\n- Introduction to Python\n- Python Data Types\n- Python Control Flow\n- Python Functions\n- Python Modules\n- Pandas\n- Matplotlib\n- Data Visualization\n- Interactive Data Visualization\n- Data Applications\n\n## Course Prerequisites\n\nTo successfully complete this course, you should have a basic understanding of Python programming. You should also have some experience with data analysis and visualization using Python.\n\n## Course Schedule\n\nThe course is divided into 10 modules, each covering a specific topic. The course schedule is as follows:\n\n- Module 1: Introduction to Python\n- Module 2: Python Data Types\n- Module 3: Python Control Flow\n- Module 4: Python Functions\n- Module 5: Python Modules\n- Module 6: Pandas\n- Module 7: Matplotlib\n- Module 8: Data Visualization\n- Module 9: Interactive Data Visualization\n- Module 10: Data Applications\n\n## Course Materials\n\nThe course materials include the following:\n\n- Course syllabus\n- Course notes\n- Course assignments\n- Course quizzes\n- Course project\n\n## Course Evaluation\n\nThe course will be evaluated based on the following criteria:\n\n- Course completion\n- Course assignments\n- Course quizzes\n- Course project\n\n## Course Instructor\n\nThe course is taught by <NAME>, a data scientist and professor at the University of Michigan. He has more than 15 years of experience in data science and has taught courses on data analysis, machine learning, and data visualization.\n\n## Course Feedback\n\nIf you have any feedback or suggestions for the course, please feel free to reach out to the instructor.\n\n## Course Support\n\nIf you encounter any issues or have questions regarding the course, please refer to the course support resources provided by the instructor.\n\n## Course Conclusion\n\nCongratulations on completing the Python for Data Science course! You have learned the basics of Python programming, data analysis, and visualization using Python. You are now ready to apply these skills to your own projects and problems.\n\n## Course Resources\n\nThe course resources include the following:\n\n- Course syllabus\n- Course notes\n- Course assignments\n- Course quizzes\n- Course project\n- Course support resources\n\n## Course Reviews\n\nThe course has been reviewed by several students and professionals. Here are some of the reviews:\n\n- \"This course is a great introduction to Python for data science. It covers the basics of the Python language, including data types, control flow, functions, and modules. It also covers the basics of data analysis and visualization using the Pandas and Matplotlib libraries.\"\n- \"This course is a great introduction to Python for data science. It covers the basics of the Python language, including data types, control flow, functions, and modules. It also covers the basics of data analysis and visualization using the Pandas and Matplotlib libraries.\"\n- \"This course is a great introduction to Python for data science. It covers the basics of the Python language, including"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n<file_sep>/week02/day02/01_list_of_lists.py\n# Create a list of lists where the inner lists have 5 random numbers in them.\n# Print the third inner list.\n# Print the sum of the numbers in the 4th inner list.\n\nimport random\n\nlist_of_lists = []\n\nfor i in range(5):\n    inner_list = []\n    for j in range(5):\n        inner_list.append(random.randint(0, 100))\n    list_of_lists.append(inner_list)\n\nprint(list_of_lists[2])\nprint(sum(list_of_lists[3]))\n<file_sep>/week02/day02/04_append_a_list.py\n# - Create an empty list which will contain names (strings)\n# - Ask the user for a name\n# - Add it to the list\n# - If the user typed \"0\" as a name, aka \"None\" in English, print the list\n\nnames = []\n\nwhile True:\n    name = input(\"Enter a name: \")\n    if name == \"0\":\n        break\n    names.append(name)\n\nprint(names)\n<file_sep>/week02/day02/03_append_a_list.py\n# - Create an empty list which will contain names (strings)\n# - Ask the user for a name\n# - Add it to the list\n# - If the user typed \"0\" as a name, aka \"None\" in English, print the list\n\nnames = []\n\nwhile True:\n    name = input(\"Enter a name: \")\n    if name == \"0\":\n        break\n    names.append(name)\n\nprint(names)\n<file_sep>/week02/day02/02_list_of_lists.py\n# Create a list of lists where the inner lists have 5 random numbers in them.\n# Print the third inner list.\n# Print the sum of the numbers in the 4th inner list.\n\nimport random\n\nlist_of_lists = []\n\nfor i in range(5):\n    inner_list = []\n    for j in range(5):\n        inner_list.append(random.randint(0, 100))\n    list_of_lists.append(inner_list)\n\nprint(list_of_lists[2])\nprint(sum(list_of_lists[3]))\n<file_sep>/week02/day02/05_append_a_list.py\n# - Create an empty list which will contain names (strings)\n# - Ask the user for a name\n# - Add it to the list\n# - If the user typed \"0\" as a name, aka \"None\" in English, print the list\n\nnames = []\n\nwhile True:\n    name = input(\"Enter a name: \")\n    if name == \"0\":\n        break\n    names.append(name)\n\nprint(names)\n<file_sep>/week02/day02/06_append_a_list.py\n# - Create an empty list which will contain names (strings)\n# - Ask the user for a name\n# - Add it to the list\n# - If the user typed \"0\" as a name, aka \"None\" in English, print the list\n\nnames = []\n\nwhile True:\n    name = input(\"Enter a name: \")\n    if name == \"0\":\n        break\n    names.append(name)\n\nprint(names)\n<file_sep>/week02/day02/07_append_a_list.py\n# - Create an empty list which will contain names (strings)\n# - Ask the user for a name\n# - Add it to the list\n# - If the user typed \"0\" as a name, aka \"None\" in English, print the list\n\nnames = []\n\nwhile True:\n    name = input(\"Enter a name: \")\n    if name == \"0\":\n        break\n    names.append(name)\n\nprint(names)\n<file_sep>/week02/day02/08_append_a_list"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    False\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    False\n    >>> is_prime(37)\n    True\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)\n    False\n    >>> is_prime(41)\n    True\n    >>> is_prime(42)\n    False\n    >>> is_prime(43)\n    True\n    >>> is_prime(44)\n    False\n    >>> is_prime(45)\n    False\n    >>> is_prime(46)\n    False\n    >>> is_prime(47)\n    True\n    >>> is_prime(48)\n    False\n    >>> is_prime(49)\n    False\n    >>> is_prime(50)\n    False\n    >>> is_prime(51)\n    False\n    >>> is_prime(52)\n    False\n    >>> is_prime(53)\n    True\n    >>> is_prime(54)\n    False\n    >>> is_prime(55)\n    False\n    >>> is_prime(56)\n    False\n    >>> is_prime(57)\n    False\n    >>> is_prime(58)\n    False\n    >>> is_prime(59)\n    True\n    >>> is_prime(60)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(62)\n    False\n    >>> is_prime(63)\n    False\n    >>> is_prime(64)\n    False\n    >>> is_prime(65)\n    False\n    >>> is_prime(66)\n    False\n    >>> is_prime(67)\n    True\n    >>> is_prime(68)\n    False\n    >>> is_prime(69)\n    False\n    >>> is_prime(70)\n    False\n    >>> is_prime(71)\n    True\n    >>> is_prime(72)\n    False\n    >>> is_prime(73)\n    True\n    >>> is_prime(74)\n    False\n    >>> is_prime(75)\n    False\n    >>> is_prime(76)\n    False\n    >>> is_prime(77)\n    False\n    >>> is_prime(78)\n    False\n    >>> is_prime(79)\n    True"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{:c}\".format(i), end=\"\")\n    else:\n        print(\"{:c}\".format(i - 32), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/101-remove_char_at.py\n#!/usr/bin/python3\ndef remove_char_at(str, n):\n    \"\"\"\n    Returns a string with the nth character removed\n    \"\"\"\n    return str[:n] + str[n + 1:]\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py~\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef main():\n    print(add(1, 2))\n\nif __name__ == \"__main__\":\n    main()\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py~\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{:c}\".format(i), end=\"\")\n    else:\n        print(\"{:c}\".format(i - 32), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/101-remove_char_at.py~\n#!/usr/bin/python3\ndef remove_char_at(str, n):\n    \"\"\"\n    Returns a string with the nth character removed\n    \"\"\"\n    return str[:n] + str[n + 1:]\n\ndef main():\n    print(remove_char_at(\"Holberton\", 3))\n\nif __name__ == \"__main__\":\n    main()\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py~\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{:c}\".format(i), end=\"\")\n    else:\n        print(\"{:c}\".format(i - 32), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/101-remove_char_at.py~\n#!/usr/bin/python3\ndef remove_char_at(str, n):\n    \"\"\"\n    Returns a string with the nth character removed\n    \"\"\"\n    return str[:n] + str[n + 1:]\n\ndef main():\n    print(remove_char_at(\"Holberton\", 3))\n\nif __name__ == \"__main__\":\n    main()\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py~\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{:c}\".format(i), end=\"\")\n    else:\n        print(\"{:c}\".format(i - 32), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py~\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef main():\n    print(magic_"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_step(n: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive, with step.\n    >>> string_sequence_with_step(0, 1)\n    '0'\n    >>> string_sequence_with_step(5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step(5, 2)\n    '0 2 4 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start(n: int, step: int, start: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto n inclusive, with step.\n    >>> string_sequence_with_step_and_start(0, 1, 0)\n    '0'\n    >>> string_sequence_with_step_and_start(5, 1, 0)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 0)\n    '0 2 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 1)\n    '1 3 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end(start: int, end: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive, with step.\n    >>> string_sequence_with_step_and_start_and_end(0, 5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start_and_end(0, 5, 2)\n    '0 2 4 5'\n    >>> string_sequence_with_step_and_start_and_end(1, 5, 2)\n    '1 3 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator(start: int, end: int, step: int, separator: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive, with step.\n    >>> string_sequence_with_step_and_start_and_end_and_separator(0, 5, 1, ',')\n    '0,1,2,3,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator(0, 5, 2, ',')\n    '0,2,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator(1, 5, 2, ',')\n    '1,3,5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator_and_prefix(start: int, end: int, step: int, separator: str, prefix: str) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto end inclusive, with step.\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(0, 5, 1, ',', 'prefix')\n    'prefix0,1,2,3,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(0, 5, 2, ',', 'prefix')\n    'prefix0,2,4,5'\n    >>> string_sequence_with_step_and_start_and_end_and_separator_and_prefix(1, 5, 2, ',', 'prefix')\n    'prefix1,3,5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start_and_end_and_separator_and_prefix_and_suffix(start: int, end: int, step: int, separator: str, prefix: str, suffix: str) -> str:\n    \"\"\" Return a string containing space-delimited"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_4('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_5('xyzXYZ')\n    3\n    >>> count_distinct_characters_5('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_6(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_6('xyzXYZ')\n    3\n    >>> count_distinct_characters_6('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_7(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_7('xyzXYZ')\n    3\n    >>> count_distinct_characters_7('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_8(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_8('xyzXYZ')\n    3\n    >>> count_distinct_characters_8('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_9(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_9('xyzXYZ')\n    3\n    >>> count_distinct_characters_9('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_10(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_10('xyzXYZ')\n    3\n    >>> count_distinct_characters_10('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_11(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_11('xyzXYZ')\n    3\n    >>> count_distinct_characters_11('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_12(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_12('xyzXYZ')\n    3\n    >>> count_distinct_characters_12('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_13(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_13('xyzXYZ')\n    3\n    >>> count_distinct_characters_13('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_14(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_14('xyzXYZ')\n    3\n    >>> count_distinct_characters_14('"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n<file_sep>/README.md\n# Python-tasks\n\nThis repository contains tasks for Python developers.\n\n## Tasks\n\n### 1. [Music parser](https://github.com/Kirill-Korolev/Python-tasks/blob/master/music_parser.py)\n\n### 2. [FizzBuzz](https://github.com/Kirill-Korolev/Python-tasks/blob/master/fizzbuzz.py)\n\n### 3. [Fibonacci](https://github.com/Kirill-Korolev/Python-tasks/blob/master/fibonacci.py)\n\n### 4. [Prime numbers](https://github.com/Kirill-Korolev/Python-tasks/blob/master/prime_numbers.py)\n\n### 5. [Binary search](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search.py)\n\n### 6. [Binary search tree](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree.py)\n\n### 7. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 8. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 9. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 10. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 11. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 12. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 13. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 14. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 15. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 16. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 17. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 18. [Binary search tree (with recursion)](https://github.com/Kirill-Korolev/Python-tasks/blob/master/binary_search_tree_recursion.py)\n\n### 19. [Binary search tree (with recursion)](https"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_3('', 'a')\n    0\n    >>> how_many_times_3('aaa', 'a')\n    3\n    >>> how_many_times_3('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_4(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_4('', 'a')\n    0\n    >>> how_many_times_4('aaa', 'a')\n    3\n    >>> how_many_times_4('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_5(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_5('', 'a')\n    0\n    >>> how_many_times_5('aaa', 'a')\n    3\n    >>> how_many_times_5('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_6(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_6('', 'a')\n    0\n    >>> how_many_times_6('aaa', 'a')\n    3\n    >>> how_many_times_6('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_7(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_7('', 'a')\n    0\n    >>> how_many_times_7('aaa', 'a')\n    3\n    >>> how_many_times_7('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_8(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_8('', 'a')\n    0\n    >>> how_many_times_8('aaa', 'a')\n    3\n    >>> how_many_times_8('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_9(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_9('', 'a')\n    0\n    >>> how_many_times_9('aaa', 'a')\n    3\n    >>> how_many_times_9('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_10(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_10('', 'a')\n    0\n    >>> how_many_times_10('aaa', 'a')\n    3\n    >>> how_many_times_10('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_11(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_11('', 'a')\n    0\n    >>> how_many_times_11('aaa', 'a')\n    "}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n#     numbers = numbers.split()\n#     numbers.sort()\n#     return''.join(numbers)\n\n    return''.join(sorted(numbers.split()))\n\n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE DOING GREAT!\\n\")\n<file_sep>/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nDigital root is the recursive sum of all the digits in a number.\n\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.\n\nExamples\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\n\n\ndef digital_root(n):\n    \"\"\"\n    >>> digital_root(16)\n    7\n    >>> digital_root(942)\n    6\n    >>> digital_root(132189)\n    6\n    >>> digital_root(493193)\n    2\n    \"\"\"\n    if n < 10:\n        return n\n    return digital_root(sum(int(i) for i in str(n)))\n\n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE DOING GREAT!\\n\")\n<file_sep>/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\n\n\ndef row_sum_odd_numbers(n):\n    \"\"\"\n    >>> row_sum_odd_numbers(1)\n    1\n    >>> row_sum_odd_numbers(2)\n    8\n    >>> row_sum_odd_numbers(3)\n    27\n    >>> row_sum_odd_numbers(4)\n    64\n    \"\"\"\n    return sum(i for i in range(1, n * 2, 2))\n\n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE DOING GREAT!\\n\")\n<file_sep>/python/codewars/7kyu/sum_of_positive.py\n\"\"\"\nYou get an array of numbers, return the sum of all of the positives ones.\n\nExample [1,-4,7,12] => 1 + 7 + 12 = 20\n\nNote: if there is nothing to sum, the sum is default to 0.\n\"\"\"\n\n\ndef positive_sum(arr):\n    \"\"\"\n    >>> positive_sum([1, 2, 3, 4, 5])\n    15\n    >>> positive_sum([1, -2, 3, 4, 5])\n    1"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n<file_sep>/README.md\n# Python-Exercises\n\nThis repository contains a collection of exercises in Python.\n\n## Exercises\n\n### 1. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 2. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 3. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 4. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 5. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 6. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 7. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 8. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 9. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 10. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements.py)\n\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n### 11. [Find the closest elements](https://github.com/james-hill/Python-Exercises/blob/master/find_closest_elements"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\ndef rescale_to_range(numbers: List[float], low: float, high: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0)\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\ndef rescale_to_range_with_offset(numbers: List[float], low: float, high: float, offset: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range_with_offset([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0, 0.5)\n    [0.5, 0.75, 1.0, 1.25, 1.5]\n    \"\"\"\n\ndef rescale_to_range_with_offset_and_scale(numbers: List[float], low: float, high: float, offset: float, scale: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range_with_offset_and_scale([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0, 0.5, 2.0)\n    [0.5, 1.0, 1.5, 2.0, 2.5]\n    \"\"\"\n\ndef rescale_to_range_with_offset_and_scale_and_exponent(numbers: List[float], low: float, high: float, offset: float, scale: float, exponent: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range_with_offset_and_scale_and_exponent([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0, 0.5, 2.0, 2.0)\n    [0.5, 1.0, 1.5, 2.0, 2.5]\n    \"\"\"\n\ndef rescale_to_range_with_offset_and_scale_and_exponent_and_base(numbers: List[float], low: float, high: float, offset: float, scale: float, exponent: float, base: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range_with_offset_and_scale_and_exponent_and_base([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0, 0.5, 2.0, 2.0, 10.0)\n    [0.5, 1.0, 1.5, 2.0, 2.5]\n    \"\"\"\n\ndef rescale_to_range_with_offset_and_scale_and_exponent_and_base_and_power(numbers: List[float], low: float, high: float"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2!= 0:\n        print(\"{:c}\".format(i), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Function that does exactly the same as the\n    builtin function\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py~\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('abc', '')\n    'abc'\n    >>> strcat('', 'def')\n    'def'\n    \"\"\"\n\ndef strncat(string1: str, string2: str, n: int) -> str:\n    \"\"\" Concatenate two strings, but only n characters from string2\n    >>> strncat('abc', 'def', 2)\n    'abcdef'\n    >>> strncat('abc', 'def', 3)\n    'abcdef'\n    >>> strncat('abc', 'def', 4)\n    'abcdef'\n    >>> strncat('abc', 'def', 0)\n    'abc'\n    >>> strncat('abc', 'def', -1)\n    'abc'\n    \"\"\"\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of char in string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'c')\n    'c'\n    >>> strchr('abc', 'd')\n    ''\n    >>> strchr('abc', '')\n    ''\n    \"\"\"\n\ndef strncmp(string1: str, string2: str, n: int) -> int:\n    \"\"\" Compare two strings, but only n characters\n    >>> strncmp('abc', 'def', 2)\n    0\n    >>> strncmp('abc', 'def', 3)\n    0\n    >>> strncmp('abc', 'def', 4)\n    0\n    >>> strncmp('abc', 'def', 0)\n    0\n    >>> strncmp('abc', 'def', -1)\n    0\n    >>> strncmp('abc', 'def', 1)\n    -1\n    >>> strncmp('abc', 'def', 2)\n    -1\n    >>> strncmp('abc', 'def', 3)\n    -1\n    >>> strncmp('abc', 'def', 4)\n    -1\n    >>> strncmp('abc', 'def', 5)\n    -1\n    >>> strncmp('abc', 'def', 6)\n    -1\n    >>> strncmp('abc', 'def', 7)\n    -1\n    >>> strncmp('abc', 'def', 8)\n    -1\n    >>> strncmp('abc', 'def', 9)\n    -1\n    >>> strncmp('abc', 'def', 10)\n    -1\n    >>> strncmp('abc', 'def', 11)\n    -1\n    >>> strncmp('abc', 'def', 12)\n    -1\n    >>> strncmp('abc', 'def', 13)\n    -1\n    >>> strncmp('abc', 'def', 14)\n    -1\n    >>> strncmp('abc', 'def', 15)\n    -1\n    >>> strncmp('abc', 'def', 16)\n    -1\n    >>> strncmp('abc', 'def', 17)\n    -1\n    >>> strncmp('abc', 'def', 18)\n    -1\n    >>> strncmp('abc', 'def', 19)\n    -1\n    >>> strncmp('abc', 'def', 20)\n    -1\n    >>> strncmp('abc', 'def', 21)\n    -1\n    >>> strncmp('abc', 'def', 22)\n    -1\n    >>> strncmp('abc', 'def', 23)\n    -1\n    >>> strncmp('abc', 'def', 24)\n    -1\n    >>> strncmp('abc', 'def', 25)\n    -1\n    >>> strncmp('abc', 'def', 26)\n    -1\n    >>> strncmp('abc', 'def', 27)\n    -1\n    >>> strncmp('abc', 'def', 28)\n    -1\n    >>> strncmp('abc', 'def', 29)\n    -1\n    >>> strncmp('abc', 'def', 30)\n    -1\n    >>> strncmp('abc', 'def', 31)\n    -1\n    >>> strncmp('abc', 'def', 32)\n    -1\n    >>> strncmp('abc', 'def', 33)\n    -1\n    >>> str"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is an Armstrong number, False otherwise\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Return True if n is a perfect number, False otherwise\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Return True if n is an abundant number, False otherwise\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(6)\n    False\n    \"\"\"\n\ndef is_deficient(n: int) -> bool:\n    \"\"\" Return True if n is a deficient number, False otherwise\n    >>> is_deficient(12)\n    False\n    >>> is_deficient(6)\n    True\n    \"\"\"\n\ndef is_harshad(n: int) -> bool:\n    \"\"\" Return True if n is a Harshad number, False otherwise\n    >>> is_harshad(153)\n    True\n    >>> is_harshad(123)\n    False\n    \"\"\"\n\ndef is_strong(n: int) -> bool:\n    \"\"\" Return True if n is a strong number, False otherwise\n    >>> is_strong(145)\n    True\n    >>> is_strong(123)\n    False\n    \"\"\"\n\ndef is_emirp(n: int) -> bool:\n    \"\"\" Return True if n is an emirp number, False otherwise\n    >>> is_emirp(153)\n    True\n    >>> is_emirp(123)\n    False\n    \"\"\"\n\ndef is_happy(n: int) -> bool:\n    \"\"\" Return True if n is a happy number, False otherwise\n    >>> is_happy(153)\n    True\n    >>> is_happy(123)\n    False\n    \"\"\"\n\ndef is_lucky(n: int) -> bool:\n    \"\"\" Return True if n is a lucky number, False otherwise\n    >>> is_lucky(153)\n    True\n    >>> is_lucky(123)\n    False\n    \"\"\"\n\ndef is_happy_lucky(n: int) -> bool:\n    \"\"\" Return True if n is a happy lucky number, False otherwise\n    >>> is_happy_lucky(153)\n    True\n    >>> is_happy_lucky(123)\n    False\n    \"\"\"\n\ndef is_happy_emirp(n: int) -> bool:\n    \"\"\" Return True if n is a happy emirp number, False otherwise\n    >>> is_happy_emirp(153)\n    True\n    >>> is_happy_emirp(123)\n    False\n    \"\"\"\n\ndef is_happy_strong(n: int) -> bool:\n    \"\"\" Return True if n is a happy strong number, False otherwise\n    >>> is_happy_strong(153)\n    True\n    >>> is_happy_strong(123)\n    False\n    \"\"\"\n\ndef is_happy_abundant(n: int) -> bool:\n    \"\"\" Return True if n is a happy abundant number, False otherwise\n    >>> is_happy_abundant(153)\n    True\n    >>> is_happy_abundant(123)\n    False\n    \"\"\"\n\ndef is_happy_deficient(n: int) -> bool:\n    \"\"\" Return True if n is a happy deficient number, False otherwise\n    >>> is_happy_deficient(153)\n    True\n    >>> is_happy_deficient(123)\n    False\n    \"\"\"\n\ndef is_happy_harshad(n: int) -> bool:\n    \"\"\" Return True if n is a happy harshad number, False otherwise\n    >>> is_happy_harshad(153)"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n<file_sep>/week02/day03/01-list-manipulation/01-list-manipulation.py\n# Create a list of numbers\n# - fill it with random numbers with this line:\n#   import random\n#   random.randint(1, 100)\n#\n# - print the 3rd element of the list\n# - print the sum of the elements in the list\n# - print the sum of the elements at even positions in the list\n# - print the sum of the elements at odd positions in the list\n# - print the maximum of the elements in the list\n# - print the average of the elements in the list\n# - print the index of the first element that is larger than 10\n# - print the index of the first element that is larger than 100\n# - print the index of the first element that is larger than 1000\n# - print the index of the first element that is larger than 10000\n# - print the index of the first element that is larger than 100000\n# - print the index of the first element that is larger than 1000000\n# - print the index of the first element that is larger than 10000000\n# - print the index of the first element that is larger than 100000000\n# - print the index of the first element that is larger than 1000000000\n# - print the index of the first element that is larger than 10000000000\n# - print the index of the first element that is larger than 100000000000\n# - print the index of the first element that is larger than 1000000000000\n# - print the index of the first element that is larger than 10000000000000\n# - print the index of the first element that is larger than 100000000000000\n# - print the index of the first element that is larger than 1000000000000000\n# - print the index of the first element that is larger than 10000000000000000\n# - print the index of the first element that is larger than 100000000000000000\n# - print the index of the first element that is larger than 1000000000000000000\n# - print the index of the first element that is larger than 10000000000000000000\n# - print the index of the first element that is larger than 100000000000000000000\n# - print the index of the first element that is larger than 1000000000000000000000\n# - print the index of the first element that is larger than 10000000000000000000000\n# - print the index of the first element that is larger than 100000000000000000000000\n# - print the index of the first element that is larger than 1000000000000000000000000\n# - print the index of the first element that is larger than 10000000000000000000000000\n# - print the index of the first element that is larger than 10000000000000"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n<file_sep>/python/tests/test_remove_duplicates.py\nfrom python.remove_duplicates import remove_duplicates\n\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n<file_sep>/python/tests/test_reverse_string.py\nfrom python.reverse_string import reverse_string\n\n\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n<file_sep>/python/tests/test_reverse_words.py\nfrom python.reverse_words import reverse_words\n\n\ndef test_reverse_words():\n    assert reverse_words(\"hello world\") == \"world hello\"\n<file_sep>/python/reverse_words.py\nfrom typing import List\n\n\ndef reverse_words(sentence: str) -> str:\n    \"\"\" Reverse the order of words in a sentence.\n    >>> reverse_words(\"hello world\")\n    \"world hello\"\n    \"\"\"\n<file_sep>/python/tests/test_reverse_string.py\nfrom python.reverse_string import reverse_string\n\n\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n<file_sep>/python/tests/test_reverse_words.py\nfrom python.reverse_words import reverse_words\n\n\ndef test_reverse_words():\n    assert reverse_words(\"hello world\") == \"world hello\"\n<file_sep>/python/reverse_string.py\ndef reverse_string(string: str) -> str:\n    \"\"\" Reverse a string.\n    >>> reverse_string(\"hello\")\n    \"olleh\"\n    \"\"\"\n<|endoftext|>"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the characters.\n    >>> reverse_string('Hello')\n    'olleH'\n    \"\"\"\n\ndef reverse_words(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words.\n    >>> reverse_words('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_2(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_2('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_3(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_3('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_4(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_4('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_5(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_5('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_6(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_6('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_7(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_7('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_8(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_8('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_9(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_9('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_10(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_10('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_11(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_11('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_12(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_12('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_13(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_13('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_14(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_14('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_15(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the words in place.\n    >>> reverse_words_in_place_15('Hello World')\n    'World Hello'\n    \"\"\"\n\ndef reverse_words_in_place_"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n<file_sep>/src/01_basics/01_basics.py\n\"\"\"\nBasics\n\"\"\"\n\n# 1. Write a function that takes a list of numbers and returns the sum of the numbers.\n#    The function should return 0 if the list is empty.\n#    >>> sum_list([1, 2, 3])\n#    6\n#    >>> sum_list([])\n#    0\n\ndef sum_list(numbers: list) -> int:\n    \"\"\" Sum list of numbers\n    >>> sum_list([1, 2, 3])\n    6\n    >>> sum_list([])\n    0\n    \"\"\"\n\n# 2. Write a function that takes a list of numbers and returns the average of the numbers.\n#    The function should return 0 if the list is empty.\n#    >>> average_list([1, 2, 3])\n#    2.0\n#    >>> average_list([])\n#    0\n\ndef average_list(numbers: list) -> float:\n    \"\"\" Average list of numbers\n    >>> average_list([1, 2, 3])\n    2.0\n    >>> average_list([])\n    0\n    \"\"\"\n\n# 3. Write a function that takes a list of numbers and returns the smallest number in the list.\n#    The function should return 0 if the list is empty.\n#    >>> smallest_number([1, 2, 3])\n#    1\n#    >>> smallest_number([])\n#    0\n\ndef smallest_number(numbers: list) -> int:\n    \"\"\" Smallest number in list\n    >>> smallest_number([1, 2, 3])\n    1\n    >>> smallest_number([])\n    0\n    \"\"\"\n\n# 4. Write a function that takes a list of numbers and returns the largest number in the list.\n#    The function should return 0 if the list is empty.\n#    >>> largest_number([1, 2, 3])\n#    3\n#    >>> largest_number([])\n#    0\n\ndef largest_number(numbers: list) -> int:\n    \"\"\" Largest number in list\n    >>> largest_number([1, 2, 3])\n    3\n    >>> largest_number([])\n    0\n    \"\"\"\n\n# 5. Write a function that takes a list of numbers and returns the second largest number in the list.\n#    The function should return 0 if the list is empty.\n#    >>> second_largest_number([1, 2, 3])\n#    2\n#    >>> second_largest_number([])\n#    0\n\ndef second_largest_number(numbers: list) -> int:\n    \"\"\" Second largest number in list\n    >>> second_largest_number([1, 2, 3])\n    2\n    >>> second_largest_number([])\n    0\n    \"\"\"\n\n# 6. Write a function that takes a list of numbers and returns the second smallest number in the list.\n#    The function should return 0 if the list is empty.\n#    >>> second_smallest_number([1, 2, 3])\n#    2\n#    >>> second_smallest_number([])\n#    0\n\ndef second_smallest_number(numbers: list) -> int:\n    \"\"\" Second smallest number in list\n    >>> second_smallest_number([1, 2, 3])\n    2\n    >>> second_smallest_number([])\n    0\n    \"\"\"\n\n# 7. Write a function that takes a list of numbers and returns the number of even numbers in the list.\n#    The function should return 0 if the list is empty.\n#    >>> count_even_numbers([1, 2, 3])\n#    1\n#    >>> count_even_numbers([])\n#    0\n\ndef count_even_numbers(numbers: list) -> int:\n    \"\"\" Count even numbers in list\n    >>> count_even_numbers([1, 2, 3])\n    1\n    >>> count_even_numbers([])\n    0\n    \"\"\"\n\n# 8. Write a function that takes a list of numbers and returns the number of odd numbers in the list.\n#    The function should return 0 if the list is empty.\n#    >>> count_odd_numbers([1, 2, 3])\n#    2\n#    >>> count_odd_numbers([])\n#    0\n\ndef count_odd_"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(122, 96, -1):\n    if i % 2 == 0:\n        print(\"{:c}\".format(i), end=\"\")\n    else:\n        print(\"{:c}\".format(i - 32), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/101-remove_char_at.py\n#!/usr/bin/python3\ndef remove_char_at(str, n):\n    \"\"\"\n    Returns a string with the nth character removed\n    \"\"\"\n    return str[:n] + str[n + 1:]\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py~\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b\n    \"\"\"\n    return a + b\n\ndef add(a, b):\n    \"\"\"\n   "}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -5]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 6, 0, 123]\n    \"\"\"\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [-1, -4, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [3, -3, 3, 9, -10]\n    \"\"\"\n\ndef get_prime(l: list):\n    \"\"\"Return only prime numbers in the list.\n    >>> get_prime([-1, 2, -4, 5, 6])\n    [2, 5]\n    >>> get_prime([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 3, 9]\n    \"\"\"\n\ndef get_fibonacci(l: list):\n    \"\"\"Return only fibonacci numbers in the list.\n    >>> get_fibonacci([-1, 2, -4, 5, 6])\n    [2, 5]\n    >>> get_fibonacci([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 3, 9]\n    \"\"\"\n\ndef get_palindrome(l: list):\n    \"\"\"Return only palindrome numbers in the list.\n    >>> get_palindrome([-1, 2, -4, 5, 6])\n    [2, 5]\n    >>> get_palindrome([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 3, 9]\n    \"\"\"\n\ndef get_perfect(l: list):\n    \"\"\"Return only perfect numbers in the list.\n    >>> get_perfect([-1, 2, -4, 5, 6])\n    [2, 5]\n    >>> get_perfect([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 3, 9]\n    \"\"\"\n\ndef get_amicable(l: list):\n    \"\"\"Return only amicable numbers in the list.\n    >>> get_amicable([-1, 2, -4, 5, 6])\n    [2, 5]\n    >>> get_amicable([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 3, 9]\n    \"\"\"\n\ndef get_happy(l: list):\n    \"\"\"Return only happy numbers in the list.\n    >>> get_happy([-1, 2, -4, 5, 6])\n    [2, 5]"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n<file_sep>/README.md\n# Python-for-Data-Science\n\nThis repository contains the code for the Python for Data Science course on Coursera.\n\nThe course is taught by}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(sorted(l[i:i+3]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(sorted(l[i:i+3]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(sorted(l[i:i+3]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(sorted(l[i:i+3]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such"}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\ndef is_sorted(l: list):\n    \"\"\"Return True if a list is sorted in ascending order\n    >>> is_sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    False\n    >>> is_sorted([0, 2, 3, 5, 9, 123])\n    True\n    \"\"\"\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return True if s1 and s2 are anagrams\n    >>> is_anagram('abc', 'cba')\n    True\n    >>> is_anagram('abc', 'cb')\n    False\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('race')\n    False\n    \"\"\"\n\ndef is_pangram(s: str):\n    \"\"\"Return True if s is a pangram\n    >>> is_pangram('the quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('the quick brown fox jumps over the lazy cat')\n    False\n    \"\"\"\n\ndef is_isogram(s: str):\n    \"\"\"Return True if s is an isogram\n    >>> is_isogram('abc')\n    True\n    >>> is_isogram('abbc')\n    False\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    False\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    False\n    >>> is_prime(37)\n    True\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)\n    False\n    >>> is_prime(41)\n    True\n    >>> is_prime(42)\n    False\n    >>> is_prime(43)\n    True\n    >>> is_prime(44)\n    False\n    >>> is_prime(45)\n    False\n    >>> is_prime(46)\n    False\n    >>> is_prime(47)\n    True\n    >>> is_prime(48)\n    False\n    >>> is_prime(49)\n    False\n    >>> is_prime(50)\n    False\n    >>> is_prime(51)\n    False\n    >>> is_prime(52)\n    False\n    >>> is_prime(53)\n    True\n    >>> is_prime(54)\n    False\n    >>> is_prime(55)\n    False\n    >>> is_prime(56)\n    False\n    >>> is_prime(57)\n    False\n    >>> is"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef sum_of_elements(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_of_elements([1, 2, 3])\n    6\n    >>> sum_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    105\n    \"\"\"\n\ndef average_of_elements(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>> average_of_elements([1, 2, 3])\n    2.0\n    >>> average_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10.5\n    \"\"\"\n\ndef count_of_elements(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_of_elements([1, 2, 3])\n    3\n    >>> count_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    11\n    \"\"\"\n\ndef count_of_elements_greater_than(l: list, n: int):\n    \"\"\"Return number of elements in the list greater than n.\n    >>> count_of_elements_greater_than([1, 2, 3], 1)\n    2\n    >>> count_of_elements_greater_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n    1\n    \"\"\"\n\ndef count_of_elements_less_than(l: list, n: int):\n    \"\"\"Return number of elements in the list less than n.\n    >>> count_of_elements_less_than([1, 2, 3], 1)\n    0\n    >>> count_of_elements_less_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n    2\n    \"\"\"\n\ndef count_of_elements_equal_to(l: list, n: int):\n    \"\"\"Return number of elements in the list equal to n.\n    >>> count_of_elements_equal_to([1, 2, 3], 1)\n    1\n    >>> count_of_elements_equal_to([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n    0\n    \"\"\"\n\ndef count_of_elements_greater_than_or_equal_to(l: list, n: int):\n    \"\"\"Return number of elements in the list greater than or equal to n.\n    >>> count_of_elements_greater_than_or_equal_to([1, 2, 3], 1)\n    2\n    >>> count_of_elements_greater_than_or_equal_to([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n    3\n    \"\"\"\n\ndef count_of_elements_less_than_or_equal_to(l: list, n: int):\n    \"\"\"Return number of elements in the list less than or equal to n.\n    >>> count_of_elements_less_than_or_equal_to([1, 2, 3], 1)\n    1\n    >>> count_of_elements_less_than_or_equal_to([5, 3, -5, 2, -3, "}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_5(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_5(50)\n    0\n    >>> fizz_buzz_5(78)\n    2\n    >>> fizz_buzz_5(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_6(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_6(50)\n    0\n    >>> fizz_buzz_6(78)\n    2\n    >>> fizz_buzz_6(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_7(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_7(50)\n    0\n    >>> fizz_buzz_7(78)\n    2\n    >>> fizz_buzz_7(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_8(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_8(50)\n    0\n    >>> fizz_buzz_8(78)\n    2\n    >>> fizz_buzz_8(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_9(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_9(50)\n    0\n    >>> fizz_buzz_9(78)\n    2\n    >>> fizz_buzz_9(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_10(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_10(50)\n    0\n    >>> fizz_buzz_10(78)\n    2\n    >>> fizz_buzz_10(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_11(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_11(50)\n    0\n    >>> fizz_buzz_11(78)\n    2\n    >>> fizz_buzz_11(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_12(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_12(5"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\ndef sort_even(l"}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string and key. Returns encoded string.\n    \"\"\"\n    # create list of characters from key\n    key_list = list(key)\n    # create list of characters from string\n    s_list = list(s)\n    # create list of encoded characters\n    encoded_list = []\n    # iterate over characters in string\n    for i in range(len(s_list)):\n        # get index of character in key\n        key_index = key_list.index(s_list[i])\n        # get character from key\n        key_char = key_list[key_index]\n        # get index of character in alphabet\n        alphabet_index = alphabet.index(key_char)\n        # get character from alphabet\n        alphabet_char = alphabet[alphabet_index]\n        # get index of character in encoded alphabet\n        encoded_index = encoded_alphabet.index(alphabet_char)\n        # get character from encoded alphabet\n        encoded_char = encoded_alphabet[encoded_index]\n        # add character to encoded list\n        encoded_list.append(encoded_char)\n    # return encoded string\n    return \"\".join(encoded_list)\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string and key. Returns decoded string.\n    \"\"\"\n    # create list of characters from key\n    key_list = list(key)\n    # create list of characters from string\n    s_list = list(s)\n    # create list of decoded characters\n    decoded_list = []\n    # iterate over characters in string\n    for i in range(len(s_list)):\n        # get index of character in key\n        key_index = key_list.index(s_list[i])\n        # get character from key\n        key_char = key_list[key_index]\n        # get index of character in alphabet\n        alphabet_index = alphabet.index(key_char)\n        # get character from alphabet\n        alphabet_char = alphabet[alphabet_index]\n        # get index of character in decoded alphabet\n        decoded_index = decoded_alphabet.index(alphabet_char)\n        # get character from decoded alphabet\n        decoded_char = decoded_alphabet[decoded_index]\n        # add character to decoded list\n        decoded_list.append(decoded_char)\n    # return decoded string\n    return \"\".join(decoded_list)\n\n\ndef encode_affine(s: str, a: int, b: int):\n    \"\"\"\n    takes as input string and two integers. Returns encoded string.\n    \"\"\"\n    # create list of characters from string\n    s_list = list(s)\n    # create list of encoded characters\n    encoded_list = []\n    # iterate over characters in string\n    for i in range(len(s_list)):\n        # get character from string\n        char = s_list[i]\n        # get index of character in alphabet\n        alphabet_index = alphabet.index(char)\n        # get character from alphabet\n        alphabet_char = alphabet[alphabet_index]\n        # get index of character in encoded alphabet\n        encoded_index = (a * alphabet_index + b) % 26\n        # get character from encoded alphabet\n        encoded_char = encoded_alphabet[encoded_index]\n        # add character to encoded list\n        encoded_list.append(encoded_char)\n    # return encoded string\n    return \"\".join(encoded_list)\n\n\ndef decode_affine(s: str, a: int, b: int):\n    \"\"\"\n    takes as input string and two integers. Returns decoded string.\n    \"\"\"\n    # create list of characters from string\n    s_list = list(s)\n    # create list of decoded characters\n    decoded_list = []\n    # iterate over characters in string\n    for i in range(len(s_list)):\n        # get character from string\n        char = s_list[i]\n        # get index of character in alphabet\n        alphabet_index = encoded_alphabet.index(char)\n        # get character from"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen(n: int):\n    \"\"\"\n    prime_fib_gen returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen(1)\n    2\n    >>> prime_fib_gen(2)\n    3\n    >>> prime_fib_gen(3)\n    5\n    >>> prime_fib_gen(4)\n    13\n    >>> prime_fib_gen(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_2(n: int):\n    \"\"\"\n    prime_fib_gen_2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_2(1)\n    2\n    >>> prime_fib_gen_2(2)\n    3\n    >>> prime_fib_gen_2(3)\n    5\n    >>> prime_fib_gen_2(4)\n    13\n    >>> prime_fib_gen_2(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_3(n: int):\n    \"\"\"\n    prime_fib_gen_3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_3(1)\n    2\n    >>> prime_fib_gen_3(2)\n    3\n    >>> prime_fib_gen_3(3)\n    5\n    >>> prime_fib_gen_3(4)\n    13\n    >>> prime_fib_gen_3(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_4(n: int):\n    \"\"\"\n    prime_fib_gen_4 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_4(1)\n    2\n    >>> prime_fib_gen_4(2)\n    3\n    >>> prime_fib_gen_4(3)\n    5\n    >>> prime_fib_gen_4(4)\n    13\n    >>> prime_fib_gen_4(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_5(n: int):\n    \"\"\"\n    prime_fib_gen_5 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_5(1)\n    2\n    >>> prime_fib_gen_5(2)\n    3\n    >>> prime_fib_gen_5(3)\n    5\n    >>> prime_fib_gen_5(4)\n    13\n    >>> prime_fib_gen_5(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_6(n: int):\n    \"\"\"\n    prime_fib_gen_6 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_6(1)\n    2\n    >>> prime_fib_gen_6(2)\n    3\n    >>> prime_fib_gen_6(3)\n    5\n    >>> prime_fib_gen_6(4)\n    13\n    >>> prime_fib_gen_6(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_7(n: int):\n    \"\"\"\n    prime_fib_gen_7 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_7(1)\n    2\n    >>> prime_fib_gen_7(2)\n    3\n    >>> prime_fib_gen_7(3)\n    5\n    >>> prime_fib_gen_7(4)\n    13\n    >>> prime_fib_gen_7(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_8(n: int):\n    \"\"\"\n    prime_fib_gen_8 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_gen_8(1)\n    2\n    >>> prime_fib_gen_8(2)\n    3\n    >>> prime_fib_gen_8(3)\n    5\n    >>> prime_fib_gen_8(4)\n    13\n    >>> prime_fib_gen_8(5)\n    89\n    \"\"\"\n\ndef prime_fib_gen_9(n:"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_2(l: list):\n    \"\"\"\n    triples_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_2([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_2([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_2([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_3(l: list):\n    \"\"\"\n    triples_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_3([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_3([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_3([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_4(l: list):\n    \"\"\"\n    triples_sum_to_zero_4 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_4([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_4([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_4([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_4([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_4([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_5(l: list):\n    \"\"\"\n    triples_sum_to_zero_5 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_5([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_5([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_5([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_5([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_5([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_6(l: list):\n    \"\"\"\n    triples_sum_to_zero_6 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_6([1,"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_3(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_4(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_5(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_6(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_7(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to col"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace(l)\n    >>> l\n    [2, 3, 4]\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> incr_list_inplace(l)\n    >>> l\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_2(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace_2(l)\n    >>> l\n    [2, 3, 4]\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> incr_list_inplace_2(l)\n    >>> l\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_3(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace_3(l)\n    >>> l\n    [2, 3, 4]\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> incr_list_inplace_3(l)\n    >>> l\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_4(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace_4(l)\n    >>> l\n    [2, 3, 4]\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> incr_list_inplace_4(l)\n    >>> l\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_5(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace_5(l)\n    >>> l\n    [2, 3, 4]\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> incr_list_inplace_5(l)\n    >>> l\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_6(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace_6(l)\n    >>> l\n    [2, 3, 4]\n    >>> l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    >>> incr_list_inplace_6(l)\n    >>> l\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_inplace_7(l: list):\n    \"\"\"In-place version of incr_list.\n    >>> l = [1, 2, 3]\n    >>> incr_list_inplace"}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_3([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_4(l):\n    \"\"\"\n    pairs_sum_to_zero_4 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_4([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_4([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_4([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_4([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_4([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_5(l):\n    \"\"\"\n    pairs_sum_to_zero_5 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_5([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_5([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_5([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_5([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_5([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_6(l):\n    \"\"\"\n    pairs_sum_to_zero_6 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_6([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_6([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_6([1,"}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive(8, 3)\n    '22'\n    >>> change_base_recursive(8, 2)\n    '1000'\n    >>> change_base_recursive(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_2(8, 3)\n    '22'\n    >>> change_base_recursive_2(8, 2)\n    '1000'\n    >>> change_base_recursive_2(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_3(8, 3)\n    '22'\n    >>> change_base_recursive_3(8, 2)\n    '1000'\n    >>> change_base_recursive_3(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_4(8, 3)\n    '22'\n    >>> change_base_recursive_4(8, 2)\n    '1000'\n    >>> change_base_recursive_4(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_5(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_5(8, 3)\n    '22'\n    >>> change_base_recursive_5(8, 2)\n    '1000'\n    >>> change_base_recursive_5(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_6(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_6(8, 3)\n    '22'\n    >>> change_base_recursive_6(8, 2)\n    '1000'\n    >>> change_base_recursive_6(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_7(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_7(8, 3)\n    '22'\n    >>> change_base_recursive_7(8, 2)\n    '1000'\n    >>> change_base_recursive_7(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_8(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_8(8, 3)\n    '22'\n    >>> change_base_recursive_8(8, 2)\n    '1000'\n    >>> change_base_recursive_8(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_9(x: int, base: int):\n    \"\"\"Change"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(5)\n    78.53981633974483\n    \"\"\"\n\ndef sphere_volume(r):\n    \"\"\"Given radius return volume for a sphere.\n    >>> sphere_volume(5)\n    523.5987755982989\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef cylinder_volume(r, h):\n    \"\"\"Given radius and height return volume for a cylinder.\n    >>> cylinder_volume(5, 3)\n    1413.7166941154068\n    \"\"\"\n\ndef cylinder_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cylinder.\n    >>> cylinder_surface_area(5, 3)\n    1570.7963267948966\n    \"\"\"\n\ndef cone_volume(r, h):\n    \"\"\"Given radius and height return volume for a cone.\n    >>> cone_volume(5, 3)\n    176.71458676442586\n    \"\"\"\n\ndef cone_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cone.\n    >>> cone_surface_area(5, 3)\n    235.6194490192345\n    \"\"\"\n\ndef pyramid_volume(b, h):\n    \"\"\"Given base and height return volume for a pyramid.\n    >>> pyramid_volume(5, 3)\n    7.5\n    \"\"\"\n\ndef pyramid_surface_area(b, h):\n    \"\"\"Given base and height return surface area for a pyramid.\n    >>> pyramid_surface_area(5, 3)\n    45.0\n    \"\"\"\n\ndef prism_volume(b, h, l):\n    \"\"\"Given base, height and length return volume for a prism.\n    >>> prism_volume(5, 3, 2)\n    30.0\n    \"\"\"\n\ndef prism_surface_area(b, h, l):\n    \"\"\"Given base, height and length return surface area for a prism.\n    >>> prism_surface_area(5, 3, 2)\n    100.0\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef sphere_volume(r):\n    \"\"\"Given radius return volume for a sphere.\n    >>> sphere_volume(5)\n    523.5987755982989\n    \"\"\"\n\ndef cylinder_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cylinder.\n    >>> cylinder_surface_area(5, 3)\n    1570.7963267948966\n    \"\"\"\n\ndef cylinder_volume(r, h):\n    \"\"\"Given radius and height return volume for a cylinder.\n    >>> cylinder_volume(5, 3)\n    1413.7166941154068\n    \"\"\"\n\ndef cone_surface_area(r, h):\n    \"\"\"Given radius and height return surface area for a cone.\n    >>> cone_surface_area(5, 3)\n    235.6194490192345\n    \"\"\"\n\ndef cone_volume(r, h):\n    \"\"\"Given radius and height return volume for a cone.\n    >>> cone_volume(5, 3)\n    176.71458676442586\n    \"\"\"\n\ndef pyramid_surface_area(b, h):\n    \"\"\"Given base and height return surface area for a pyramid.\n    >>> pyramid_surface_area(5, 3)\n    45.0\n    \"\"\"\n\ndef pyramid"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(4) -> 2\n    fib5(5) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 2\n    fib6(5) -> 0\n    fib6(6) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    8\n    >>> fib6(7)\n    14\n    \"\"\"\n\ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 0\n    fib7(2) -> 2\n    fib7(3) -> 0\n    fib7(4) -> 2\n    fib7(5) -> 0\n    fib7(6) -> 2\n    fib7(7) -> 2\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n    Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n    >>> fib7(5)\n    4\n    >>> fib7(6)\n    8\n    >>> fib7(7)\n    14\n    \"\"\"\n\ndef fib8(n: int):\n    \"\"\"The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 0\n    fib8(2) -> 2\n    fib8(3) -> 0\n    fib8(4) -> 2\n    fib8(5) -> 0\n    fib8(6) -> 2\n    fib8(7) -> 2\n    fib8(8) -> 2\n    fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n    Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n    >>> fib8(5)\n    4\n    >>> fib8(6)\n    8"}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    3\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3, 3, 3, 3, "}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_2('')\n    True\n    >>> is_palindrome_recursive_2('aba')\n    True\n    >>> is_palindrome_recursive_2('aaaaa')\n    True\n    >>> is_palindrome_recursive_2('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_3('')\n    True\n    >>> is_palindrome_recursive_3('aba')\n    True\n    >>> is_palindrome_recursive_3('aaaaa')\n    True\n    >>> is_palindrome_recursive_3('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_4('')\n    True\n    >>> is_palindrome_recursive_4('aba')\n    True\n    >>> is_palindrome_recursive_4('aaaaa')\n    True\n    >>> is_palindrome_recursive_4('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_5('')\n    True\n    >>> is_palindrome_recursive_5('aba')\n    True\n    >>> is_palindrome_recursive_5('aaaaa')\n    True\n    >>> is_palindrome_recursive_5('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_6('')\n    True\n    >>> is_palindrome_recursive_6('aba')\n    True\n    >>> is_palindrome_recursive_6('aaaaa')\n    True\n    >>> is_palindrome_recursive_6('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_7(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_7('')\n    True\n    >>> is_palindrome_recursive_7('aba')\n    True\n    >>> is_palindrome_recursive_7('aaaaa')\n    True\n    >>> is_palindrome_recursive_7('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_8(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_8('')\n    True\n    >>> is_palindrome_recursive_8('aba')\n    True\n    >>> is_palindrome_recursive_8('aaaaa')\n    True\n    >>> is_palindrome_recursive_8('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_9(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_9('')\n    True\n    >>> is_palindrome_recursive_9('aba')\n    True\n    >>> is_palindrome_recursive_9('aaaaa')\n    True\n    >>> is_palindrome_recursive_9('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_10(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_10('')\n    True\n    >>> is_palindrome_recursive_10('aba')\n    True\n    >>> is_palindrome_recursive_10('aaaaa')\n    True\n    >>> is_palindrome_recursive_10('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_11(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_11('')\n    True\n    >>> is_palindrome_recursive_11('aba')\n    True\n    >>> is_palindrome_recursive_11('"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast(3, 5)\n    3\n    >>> modp_fast(1101, 101)\n    2\n    >>> modp_fast(0, 101)\n    1\n    >>> modp_fast(3, 11)\n    8\n    >>> modp_fast(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_2(3, 5)\n    3\n    >>> modp_fast_2(1101, 101)\n    2\n    >>> modp_fast_2(0, 101)\n    1\n    >>> modp_fast_2(3, 11)\n    8\n    >>> modp_fast_2(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_3(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_3(3, 5)\n    3\n    >>> modp_fast_3(1101, 101)\n    2\n    >>> modp_fast_3(0, 101)\n    1\n    >>> modp_fast_3(3, 11)\n    8\n    >>> modp_fast_3(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_4(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_4(3, 5)\n    3\n    >>> modp_fast_4(1101, 101)\n    2\n    >>> modp_fast_4(0, 101)\n    1\n    >>> modp_fast_4(3, 11)\n    8\n    >>> modp_fast_4(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_5(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_5(3, 5)\n    3\n    >>> modp_fast_5(1101, 101)\n    2\n    >>> modp_fast_5(0, 101)\n    1\n    >>> modp_fast_5(3, 11)\n    8\n    >>> modp_fast_5(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_6(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_6(3, 5)\n    3\n    >>> modp_fast_6(1101, 101)\n    2\n    >>> modp_fast_6(0, 101)\n    1\n    >>> modp_fast_6(3, 11)\n    8\n    >>> modp_fast_6(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_7(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_fast_7(3, 5)\n    3\n    >>> modp_fast_7(1101, 101)\n    2\n    >>> modp_fast_7(0, 101)\n    1\n    >>> modp_fast_7(3, 11)\n    8\n    >>> modp_fast_7(100, 101)\n    1\n    \"\"\"\n\ndef modp_fast_8(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>>"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n#    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + ord(key[i % len(key)]) - ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(key[i % len(key)]) - ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef encode_caesar(s: str, key: int):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_caesar(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_caesar function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_affine(s: str, key: int):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) * key + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_affine(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_affine function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) * key - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_substitution(s: str, key: str):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef decode_substitution(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_substitution function. Returns decoded string.\n    \"\"\"\n    return \"\".join([key[ord(ch) - ord(\"a\")] for ch in s])\n\n\ndef encode_rail_fence(s: str, key: int):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([s[i] for i in range(len(s)) if i % (key - 1) == 0])\n\n\ndef decode_rail_fence(s: str, key: int):\n    \"\"\"\n    takes as input string encoded with encode_rail_fence function. Returns decoded string.\n    \"\"\"\n    return \"\".join([s[i] for i in range(len(s)) if i % (key - 1) == 0])\n\n\ndef encode_morse(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([MORSE_CODE[ch] for ch in s])\n\n\ndef decode_morse(s: str):\n    \"\"\"\n    takes as input string encoded with encode_morse function. Returns decoded string.\n    \"\"\"\n    return \"\".join([MORSE_CODE_REVERSE[ch] for ch in s])\n\n\ndef encode_atbash(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key.\n    \"\"\"\n    return \"\".join([chr(25 - ord(ch) + ord(\""}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels."}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2,"}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \"\"\"\n\ndef square(x: int):\n    \"\"\"Square a number x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n\ndef cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \"\"\"\n\ndef mod(x: int, y: int):\n    \"\"\"Return the remainder of x divided by y\n    >>> mod(2, 3)\n    2\n    >>> mod(5, 7)\n    5\n    \"\"\"\n\ndef get_biggest_number(*args: int):\n    \"\"\"Return the biggest number from a list of numbers\n    >>> get_biggest_number(2, 3)\n    3\n    >>> get_biggest_number(5, 7)\n    7\n    \"\"\"\n\ndef get_smallest_number(*args: int):\n    \"\"\"Return the smallest number from a list of numbers\n    >>> get_smallest_number(2, 3)\n    2\n    >>> get_smallest_number(5, 7)\n    5\n    \"\"\"\n\ndef count_positive_numbers(*args: int):\n    \"\"\"Return the number of positive numbers in a list of numbers\n    >>> count_positive_numbers(2, 3)\n    1\n    >>> count_positive_numbers(5, 7)\n    2\n    \"\"\"\n\ndef sum_positive_numbers(*args: int):\n    \"\"\"Return the sum of positive numbers in a list of numbers\n    >>> sum_positive_numbers(2, 3)\n    5\n    >>> sum_positive_numbers(5, 7)\n    12\n    \"\"\"\n\ndef get_even_numbers(start: int, end: int):\n    \"\"\"Return a list of even numbers between start and end\n    >>> get_even_numbers(2, 3)\n    [2]\n    >>> get_even_numbers(5, 7)\n    [6]\n    \"\"\"\n\ndef get_odd_numbers(start: int, end: int):\n    \"\"\"Return a list of odd numbers between start and end\n    >>> get_odd_numbers(2, 3)\n    [3]\n    >>> get_odd_numbers(5, 7)\n    [5, 7]\n    \"\"\"\n\ndef get_squares(start: int, end: int):\n    \"\"\"Return a list of squares between start and end\n    >>> get_squares(2, 3)\n    [4]\n    >>> get_squares(5, 7)\n    [25, 49]\n    \"\"\"\n\ndef get_cubes(start: int, end: int):\n    \"\"\"Return a list of cubes between start and end\n    >>> get_cubes(2, 3)\n    [8]\n    >>> get_cubes(5, 7)\n    [125, 343]\n    \"\"\"\n\ndef get_powers(start: int, end: int, power: int):\n    \"\"\"Return a list of numbers raised to the power between start and end\n    >>> get_powers(2, 3, 2)\n    [4]\n    >>> get_powers(5, 7, 2)\n    [25, 49]\n    \"\"\"\n\ndef get_mod(start: int, end: int, mod: int):\n    \"\"\"Return a list of numbers that are the remainder of start divided by mod between start and end\n    >>> get_mod(2, 3, 2)\n    [0]\n    >>> get_mod(5, 7, 2)\n    [1]\n    \"\"\"\n\ndef get_fibonacci_sequence(length: int):\n    \"\"\"Return"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_2('dddddddabc', 'abcd')\n    True\n    >>> same_chars_2('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_2('abcd', 'dddddddabce')\n    False\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_3(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_3('abcd', 'dddddddabc')\n    True\n    >>> same_chars_3('dddddddabc', 'abcd')\n    True\n    >>> same_chars_3('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_3('abcd', 'dddddddabce')\n    False\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_4(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_4('abcd', 'dddddddabc')\n    True\n    >>> same_chars_4('dddddddabc', 'abcd')\n    True\n    >>> same_chars_4('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_4('abcd', 'dddddddabce')\n    False\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_5(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_5('abcd', 'dddddddabc')\n    True\n    >>> same_chars_5('dddddddabc', 'abcd')\n    True\n    >>> same_chars_5('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_5('abcd', 'dddddddabce')\n    False\n    >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_6(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_6('abcd', 'dddddddabc')\n    True\n    >>> same_chars_6('dddddddabc', 'abcd')\n    True\n    >>> same_chars_6('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_6('abcd', 'dddddddabce')\n    False\n    >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_7(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_7('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_7('abcd', 'dddddddabc')\n    True\n    >>> same_chars_7('dddddddabc', 'abcd')\n    True\n    >>> same_chars_7('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_7('abcd', 'dddddddabce')\n    False\n    >>> same_chars_7('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo(10)\n    55\n    >>> fib_rec_memo(1)\n    1\n    >>> fib_rec_memo(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter(10)\n    55\n    >>> fib_rec_memo_iter(1)\n    1\n    >>> fib_rec_memo_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail_tail_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail_tail_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail_tail_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail_tail_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail_tail_tail_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail_tail_tail_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail_tail_tail_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail_tail_tail_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail_tail_tail_tail_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail_tail_tail_tail_tail_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail_tail(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter_tail_tail_tail_tail_tail_tail_tail(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail_tail_tail(10)\n    55\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail_tail_tail(1)\n    1\n    >>> fib_rec_memo_iter_tail_tail_tail_tail_tail"}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('hannah')\n    True\n    \"\"\"\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return True if strings are anagrams.\n    >>> is_anagram('hello', 'olleh')\n    True\n    >>> is_anagram('hello', 'olleh')\n    True\n    >>> is_anagram('hello', 'olleh')\n    True\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    False\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    False\n    >>> is_prime(37)\n    True\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)\n    False\n    >>> is_prime(41)\n    True\n    >>> is_prime(42)\n    False\n    >>> is_prime(43)\n    True\n    >>> is_prime(44)\n    False\n    >>> is_prime(45)\n    False\n    >>> is_prime(46)\n    False\n    >>> is_prime(47)\n    True\n    >>> is_prime(48)\n    False\n    >>> is_prime(49)\n    False\n    >>> is_prime(50)\n    False\n    >>> is_prime(51)\n    False\n    >>> is_prime(52)\n    False\n    >>> is_prime(53)\n    True\n    >>> is_prime(54)\n    False\n    >>> is_prime(55)\n    False\n    >>> is_prime(56)\n    False\n    >>> is_prime(57)\n    False\n    >>> is_prime(58)\n    False\n    >>> is_prime(59)\n    True\n    >>> is_prime(60)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(62)\n    False\n    >>> is_prime(63)\n    False\n    >>> is_prime(64)\n    False\n    >>> is_prime(65)\n    False\n    >>> is_prime(66)\n    False\n    >>> is_prime(67)\n    True\n    >>> is_prime(68)\n    False\n    >>> is_prime(69)\n    False\n    >>> is_prime(70)\n    False\n    >>> is_prime(71)\n    True\n    >>> is_prime(7"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\ndef common_with_counts(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [(1, 2), (5, 2), (653, 2)]\n    >>> common_with_counts([5, 3, 2, 8], [3, 2])\n    [(2, 2), (3, 2)]\n\n    \"\"\"\n\ndef common_with_counts_dict(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_dict([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    {1: 2, 5: 2, 653: 2}\n    >>> common_with_counts_dict([5, 3, 2, 8], [3, 2])\n    {2: 2, 3: 2}\n\n    \"\"\"\n\ndef common_with_counts_dict_2(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_dict_2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    {1: 2, 5: 2, 653: 2}\n    >>> common_with_counts_dict_2([5, 3, 2, 8], [3, 2])\n    {2: 2, 3: 2}\n\n    \"\"\"\n\ndef common_with_counts_dict_3(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_dict_3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    {1: 2, 5: 2, 653: 2}\n    >>> common_with_counts_dict_3([5, 3, 2, 8], [3, 2])\n    {2: 2, 3: 2}\n\n    \"\"\"\n\ndef common_with_counts_dict_4(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_dict_4([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    {1: 2, 5: 2, 653: 2}\n    >>> common_with_counts_dict_4([5, 3, 2, 8], [3, 2])\n    {2: 2, 3: 2}\n\n    \"\"\"\n\ndef common_with_counts_dict_5(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_with_counts_dict_5([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    {1: 2, 5: 2, 653: 2}\n    >>> common_with_counts_dict_5(["}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef prime_factors(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1.\n    >>> prime_factors(13195)\n    [5, 7, 13, 29]\n    >>> prime_factors(2048)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(123321)\n    True\n    \"\"\"\n\ndef is_perfect(n: int):\n    \"\"\"Return True if n is a perfect number, False otherwise.\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_abundant(n: int):\n    \"\"\"Return True if n is an abundant number, False otherwise.\n    >>> is_abundant(6)\n    False\n    >>> is_abundant(12)\n    True\n    \"\"\"\n\ndef is_deficient(n: int):\n    \"\"\"Return True if n is a deficient number, False otherwise.\n    >>> is_deficient(6)\n    True\n    >>> is_deficient(12)\n    False\n    \"\"\"\n\ndef is_perfect_square(n: int):\n    \"\"\"Return True if n is a perfect square, False otherwise.\n    >>> is_perfect_square(12)\n    False\n    >>> is_perfect_square(16)\n    True\n    \"\"\"\n\ndef is_triangular(n: int):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    >>> is_triangular(12)\n    False\n    >>> is_triangular(16)\n    True\n    \"\"\"\n\ndef is_square(n: int):\n    \"\"\"Return True if n is a square number, False otherwise.\n    >>> is_square(12)\n    False\n    >>> is_square(16)\n    True\n    \"\"\"\n\ndef is_pentagonal(n: int):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    >>> is_pentagonal(12)\n    False\n    >>> is_pentagonal(16)\n    True\n    \"\"\"\n\ndef is_hexagonal(n: int):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    >>> is_hexagonal(12)\n    False\n    >>> is_hexagonal(16)\n    True\n    \"\"\"\n\ndef is_heptagonal(n: int):\n    \"\"\"Return True if n is a heptagonal number, False otherwise.\n    >>> is_heptagonal(12)\n    False\n    >>> is_heptagonal(16)\n    True\n    \"\"\"\n\ndef is_octagonal(n: int):\n    \"\"\"Return True if n is an octagonal number, False otherwise.\n    >>> is_octagonal(12)\n    False\n    >>> is_octagonal(16)\n    True\n    \"\"\"\n\ndef is_triangular_number(n: int):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    >>> is_triangular_number(12)\n    True\n    >>> is_triangular_number(16)\n    False\n    \"\"\"\n\ndef is_square_number(n: int):\n    \"\"\"Return True if n is a square number, False otherwise.\n    >>> is_square_number(12)\n    False\n    >>> is_square_number(16)\n    True\n    \"\"\"\n\ndef is_pentagonal_number(n: int):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    >>> is_pentagonal_number(12)\n    True\n    >>> is_pentagonal_number(16)\n    False\n    \"\"\"\n\ndef is_hexagonal_number(n: int):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    >>> is_hex"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\ndef is_palindrome(word: str):\n    \"\"\" return True if word is a palindrome.\n\n    >>> is_palindrome(\"abba\")\n    True\n    >>> is_palindrome(\"abcba\")\n    True\n    >>> is_palindrome(\"abccba\")\n    False\n    \"\"\"\n\ndef is_anagram(word1: str, word2: str):\n    \"\"\" return True if word1 is an anagram of word2.\n\n    >>> is_anagram(\"abba\", \"abba\")\n    True\n    >>> is_anagram(\"abba\", \"abca\")\n    False\n    >>> is_anagram(\"abba\", \"baab\")\n    True\n    \"\"\"\n\ndef is_anagram_of_palindrome(word: str):\n    \"\"\" return True if word is an anagram of a palindrome.\n\n    >>> is_anagram_of_palindrome(\"abba\")\n    True\n    >>> is_anagram_of_palindrome(\"abcba\")\n    True\n    >>> is_anagram_of_palindrome(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation(\"abba\")\n    True\n    >>> is_palindrome_permutation(\"abcba\")\n    True\n    >>> is_palindrome_permutation(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_2(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_2(\"abba\")\n    True\n    >>> is_palindrome_permutation_2(\"abcba\")\n    True\n    >>> is_palindrome_permutation_2(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_3(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_3(\"abba\")\n    True\n    >>> is_palindrome_permutation_3(\"abcba\")\n    True\n    >>> is_palindrome_permutation_3(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_4(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_4(\"abba\")\n    True\n    >>> is_palindrome_permutation_4(\"abcba\")\n    True\n    >>> is_palindrome_permutation_4(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_5(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_5(\"abba\")\n    True\n    >>> is_palindrome_permutation_5(\"abcba\")\n    True\n    >>> is_palindrome_permutation_5(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_6(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_6(\"abba\")\n    True\n    >>> is_palindrome_permutation_6(\"abcba\")\n    True\n    >>> is_palindrome_permutation_6(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_7(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_7(\"abba\")\n    True\n    >>> is_palindrome_permutation_7(\"abcba\")\n    True\n    >>> is_palindrome_permutation_7(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_8(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_8(\"abba\")\n    True\n    >>> is_palindrome_permutation_8(\"abcba\")\n    True\n    >>> is_palindrome_permutation_8(\"abccba\")\n    False\n    \"\"\"\n\ndef is_palindrome_permutation_9(word: str):\n    \"\"\" return True if word is a palindrome permutation.\n\n    >>> is_palindrome_permutation_9(\"abba\")\n    True\n    >>> is_palindrome_permutation_9(\"abcba\")\n    True\n    >>> is_palindrome_permutation_9(\"abccba\")\n    False\n    \"\"\"\n\ndef is_"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 1, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 3]\n    \"\"\"\n\ndef evaluate(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    27\n    >>> evaluate([1, 2, 3], 2)\n    13\n    \"\"\"\n\ndef roots(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return list of roots of this polynomial.\n    >>> roots([3, 1, 2, 4, 5])\n    [-1.0, -0.5]\n    >>> roots([1, 2, 3])\n    [-1.0]\n    \"\"\"\n\ndef plot(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Plot this polynomial.\n    >>> plot([3, 1, 2, 4, 5])\n    >>> plot([1, 2, 3])\n    \"\"\"\n\ndef main():\n    \"\"\" Read polynomial coefficients from the user and call the appropriate function.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n<file_sep>/README.md\n# CS1114\n\nThis is a repository for the CS1114 class at UC Davis.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\n\n### Prerequisites\n\nWhat things you need to install the software and how to install them\n\n```\nGive examples\n```\n\n### Installing\n\nA step by step series of examples that tell you how to get a development env running\n\nSay what the step will be\n\n```\nGive the example\n```\n\nAnd repeat\n\n```\nuntil finished\n```\n\nEnd with an example of getting some data out of the system or using it for a little demo\n\n## Running the tests\n\nExplain how to run the automated tests for this system\n\n### Break down into end to end tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n### And coding style tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n## Deployment\n\nAdd additional notes about how to deploy this on a live system\n\n## Built With\n\n* [Dropwizard](http://www.dropwizard.io/1.0.2/docs/) - The web framework used\n* [Maven](https://maven.apache.org/) - Dependency Management\n* [ROME](https://rometools.github.io/rome/) - Used to generate RSS Feeds\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags). \n\n## Authors\n\n* **<NAME>** - *Initial work* - [PurpleBooth](https://github.com/PurpleBooth)\n\nSee also the list of [contributors](https://github.com"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\ndef fibfib_rec(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_rec(1)\n    0\n    >>> fibfib_rec(5)\n    4\n    >>> fibfib_rec(8)\n    24\n    \"\"\"\n\ndef fibfib_iter(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_iter(1)\n    0\n    >>> fibfib_iter(5)\n    4\n    >>> fibfib_iter(8)\n    24\n    \"\"\"\n\ndef fibfib_iter_memo(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_iter_memo(1)\n    0\n    >>> fibfib_iter_memo(5)\n    4\n    >>> fibfib_iter_memo(8)\n    24\n    \"\"\"\n\ndef fibfib_iter_memo_2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_iter_memo_2(1)\n    0\n    >>> fibfib_iter_memo_2(5)\n    4\n    >>> fibfib_iter_memo_2(8)\n    24\n    \"\"\"\n\ndef fibfib_iter_memo_3(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_iter_memo_3(1)\n    0\n    >>> fibfib_iter_memo_3(5)\n    4\n    >>> fibfib_iter_memo_3(8)\n    24\n    \"\"\"\n\ndef fibfib_iter_memo_4(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYU\") == 4\n   "}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\ndef is_palindrome(x):\n    \"\"\"Return True if x is a palindrome, False otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Return True if x is prime, False otherwise.\n    >>> is_prime(12345)\n    False\n    >>> is_prime(12347)\n    True\n    \"\"\"\n\ndef is_perfect(x):\n    \"\"\"Return True if x is perfect, False otherwise.\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_power(x):\n    \"\"\"Return True if x is a power of 2, False otherwise.\n    >>> is_power(16)\n    True\n    >>> is_power(12)\n    False\n    \"\"\"\n\ndef is_power_of_2(x):\n    \"\"\"Return True if x is a power of 2, False otherwise.\n    >>> is_power_of_2(16)\n    True\n    >>> is_power_of_2(12)\n    False\n    \"\"\"\n\ndef is_power_of_3(x):\n    \"\"\"Return True if x is a power of 3, False otherwise.\n    >>> is_power_of_3(27)\n    True\n    >>> is_power_of_3(12)\n    False\n    \"\"\"\n\ndef is_power_of_4(x):\n    \"\"\"Return True if x is a power of 4, False otherwise.\n    >>> is_power_of_4(16)\n    True\n    >>> is_power_of_4(12)\n    False\n    \"\"\"\n\ndef is_power_of_5(x):\n    \"\"\"Return True if x is a power of 5, False otherwise.\n    >>> is_power_of_5(25)\n    True\n    >>> is_power_of_5(12)\n    False\n    \"\"\"\n\ndef is_power_of_6(x):\n    \"\"\"Return True if x is a power of 6, False otherwise.\n    >>> is_power_of_6(36)\n    True\n    >>> is_power_of_6(12)\n    False\n    \"\"\"\n\ndef is_power_of_7(x):\n    \"\"\"Return True if x is a power of 7, False otherwise.\n    >>> is_power_of_7(49)\n    True\n    >>> is_power_of_7(12)\n    False\n    \"\"\"\n\ndef is_power_of_8(x):\n    \"\"\"Return True if x is a power of 8, False otherwise.\n    >>> is_power_of_8(64)\n    True\n    >>> is_power_of_8(12)\n    False\n    \"\"\"\n\ndef is_power_of_9(x):\n    \"\"\"Return True if x is a power of 9, False otherwise.\n    >>> is_power_of_9(81)\n    True\n    >>> is_power_of_9(12)\n    False\n    \"\"\"\n\ndef is_power_of_10(x):\n    \"\"\"Return True if x is a power of 10, False otherwise.\n    >>> is_power_of_10(100)\n    True\n    >>> is_power_of_10(12)\n    False\n    \"\"\"\n\ndef is_power_of_11(x):\n    \"\"\"Return True if x is a power of 11, False otherwise.\n    >>> is_power_of_11(121)\n    True\n    >>> is_power_of_11(12)\n    False\n    \"\"\"\n\ndef is_power_of_12(x):\n    \"\"\"Return True if x is a power of 12, False otherwise.\n    >>> is_power_of_12(144)\n    True\n    >>> is_power_of_12(12)\n    False\n    \"\"\"\n\ndef is_power_of_13(x):\n    \"\"\"Return True if x is a power of 13, False otherwise.\n    >>> is_power_of_13(169)\n    True\n    >>> is_power_"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\ndef isPrime(n):\n    \"\"\"Task\n    Write a function that takes a number and returns True if it is a prime number and False otherwise.\n\n    Examples:\n        isPrime(1) => False\n        isPrime(2) => True\n        isPrime(3) => True\n        isPrime(4) => False\n        isPrime(5) => True\n        isPrime(6) => False\n        isPrime(7) => True\n        isPrime(8) => False\n        isPrime(9) => False\n        isPrime(10) => False\n        isPrime(11) => True\n        isPrime(12) => False\n        isPrime(13) => True\n        isPrime(14) => False\n        isPrime(15) => False\n        isPrime(16) => False\n        isPrime(17) => True\n        isPrime(18) => False\n        isPrime(19) => True\n        isPrime(20) => False\n        isPrime(21) => False\n        isPrime(22) => False\n        isPrime(23) => True\n        isPrime(24) => False\n        isPrime(25) => False\n        isPrime(26) => False\n        isPrime(27) => False\n        isPrime(28) => False\n        isPrime(29) => True\n        isPrime(30) => False\n        isPrime(31) => True\n        isPrime(32) => False\n        isPrime(33) => False\n        isPrime(34) => False\n        isPrime(35) => False\n        isPrime(36) => False\n        isPrime(37) => True\n        isPrime(38) => False\n        isPrime(39) => False\n        isPrime(40) => False\n        isPrime(41) => True\n        isPrime(42) => False\n        isPrime(43) => True\n        isPrime(44) => False\n        isPrime(45) => False\n        isPrime(46) => False\n        isPrime(47) => True\n        isPrime(48) => False\n        isPrime(49) => False\n        isPrime(50) => False\n        isPrime(51) => False\n        isPrime(52) => False\n        isPrime(53) => True\n        isPrime(54) => False\n        isPrime(55) => False\n        isPrime(56) => False\n        isPrime(57) => False\n        isPrime(58) => False\n        isPrime(59) => True\n        isPrime(60) => False\n        isPrime(61) => True\n        isPrime(62) => False\n        isPrime(63) => False\n        isPrime(64) => False\n        isPrime(65) => False\n        isPrime(66) => False\n        isPrime(67) => True\n        isPrime(68) => False\n        isPrime(69) => False\n        isPrime(70) => False\n        isPrime(71) => True\n        isPrime(72) => False\n        isPrime(73) => True\n        isPrime(74) => False\n        isPrime(75) => False\n        isPrime(76) => False\n        isPrime(77) => False\n        isPrime(78) => False\n        isPrime(79) => True\n        isPrime(80) => False\n        isPrime(81) => False\n        isPrime(82) => False\n        isPrime(83) => True\n        isPrime(84) => False\n        isPrime(85) => False\n        isPrime(86) => False\n        isPrime(87) => False\n        isPrime(88) => False\n        isPrime(89) => True\n        isPrime(90) => False\n        isPrime(91) => False\n        isPrime(92) => False\n        isPrime(93) => False\n        isPrime(94) => False\n        isPrime(95) => False\n        isPrime(96) => False\n        isPrime(97) => True\n        isPrime(98) => False\n        isPrime(99) =>"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    s = s.split()\n    s = s[0].split('and')\n    s = [int(i) for i in s]\n    return n - sum(s)\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    s = s.split()\n    s = s[0].split('and')\n    s = [int(i) for i in s]\n    return n - sum(s)\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\","}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 1:\n        return []\n    min_index = arr.index(min_value)\n    for i in range(min_index, len(arr)):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n    return []\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2,"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        min_lst = [min_val]\n        max_lst = [max_val]\n        for i in lst:\n            if i!= min_val and i!= max_val:\n                min_lst.append(i)\n                max_lst.append(i)\n        return min_lst + max_lst\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        min_lst = [min_val]\n        max_lst = [max_val]\n        for i in lst:\n            if i!= min_val and i!= max_val:\n                min_lst.append(i)\n                max_lst.append(i)\n        return min_lst + max_lst\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        min_lst = [min_val]\n        max_lst = [max_val]\n        for i in lst:\n            if i!= min_val and i!= max_val:\n                min_lst.append(i)\n                max_lst.append(i)\n        return min_lst + max_lst\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        min_lst = [min_val]\n        max_lst = [max_val]\n        for i in lst:\n            if i!= min_val and i!= max_val:\n                min_"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 10) == False\n    '''\n\ndef is_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area(3, 4, 5) == True\n    is_triangle_area(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_2(3, 4, 5) == True\n    is_triangle_area_2(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_3(3, 4, 5) == True\n    is_triangle_area_3(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_4(3, 4, 5) == True\n    is_triangle_area_4(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_5(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_5(3, 4, 5) == True\n    is_triangle_area_5(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_6(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_6(3, 4, 5) == True\n    is_triangle_area_6(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_7(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a valid triangle. \n    Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_area_7(3, 4, 5) == True\n    is_triangle_area_7(1, 2, 10) == False\n    '''\n\ndef is_triangle_area_8(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i] == q[-i-1] for i in range(len(q)//2))\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and all(q[i"}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef longest_palindrome(s):\n    \"\"\"\n    Given a string s, find the longest palindromic substring.\n\n    For example:\n    longest_palindrome(\"abaxyzzyxf\") == \"xyzzyx\"\n    longest_palindrome(\"abracadabra\") == \"abracadabra\"\n    \"\"\"\n\ndef longest_palindrome_subsequence(s):\n    \"\"\"\n    Given a string s, find the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence(\"abaxyzzyxf\") == \"xyzzyx\"\n    longest_palindrome_subsequence(\"abracadabra\") == \"abracadabra\"\n    \"\"\"\n\ndef longest_palindrome_subsequence_length(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length_dp(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length_dp(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp_space_optimized(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length_dp_space_optimized(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length_dp_space_optimized(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp_space_optimized_2(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length_dp_space_optimized_2(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length_dp_space_optimized_2(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp_space_optimized_3(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length_dp_space_optimized_3(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length_dp_space_optimized_3(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp_space_optimized_4(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length_dp_space_optimized_4(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length_dp_space_optimized_4(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp_space_optimized_5(s):\n    \"\"\"\n    Given a string s, find the length of the longest palindromic subsequence.\n\n    For example:\n    longest_palindrome_subsequence_length_dp_space_optimized_5(\"abaxyzzyxf\") == 5\n    longest_palindrome_subsequence_length_dp_space_optimized_5(\"abracadabra\") == 7\n    \"\"\"\n\ndef longest_palindrome_subsequence_length_dp_space_"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1)]\n\ndef total_match(lst1, lst2):\n    return [i for i in lst1 if len(i) < len(lst2)] or [i for i in lst2 if len(i) < len(lst1"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power(x, n):\n    return x == n**int(math.log(x, n))\n\ndef is_simple_power("}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\ndef is_prime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(-1) ==> False\n    is_prime(64) ==> False\n    is_prime(0) ==> False\n    is_prime(180) ==> False\n    '''\n\ndef is_perfect(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a perfect number.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_perfect(1) ==> False\n    is_perfect(2) ==> False\n    is_perfect(-1) ==> False\n    is_perfect(64) ==> False\n    is_perfect(0) ==> False\n    is_perfect(180) ==> False\n    '''\n\ndef is_palindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(1) ==> True\n    is_palindrome(2) ==> False\n    is_palindrome(-1) ==> False\n    is_palindrome(64) ==> False\n    is_palindrome(0) ==> True\n    is_palindrome(180) ==> False\n    '''\n\ndef is_armstrong(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is an Armstrong number.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_armstrong(1) ==> True\n    is_armstrong(2) ==> False\n    is_armstrong(-1) ==> False\n    is_armstrong(64) ==> False\n    is_armstrong(0) ==> True\n    is_armstrong(180) ==> False\n    '''\n\ndef is_power(a, b):\n    '''\n    Write a function that takes an integer a and an integer b and returns True \n    if this ingeger is a power of b.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_power(1, 1) ==> True\n    is_power(2, 1) ==> True\n    is_power(2, 2) ==> True\n    is_power(2, 3) ==> False\n    is_power(2, 4) ==> True\n    is_power(2, 5) ==> False\n    is_power(2, 6) ==> False\n    is_power(2, 7) ==> False\n    is_power(2, 8) ==> True\n    is_power(2, 9) ==> False\n    is_power(2, 10) ==> False\n    '''\n\ndef is_power_of_two(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of two.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_power_of_two(1) ==> True\n    is_power_of_two(2) ==> True\n    is_power_of_two(-1) ==> False\n    is_power_of_two(64) ==> True\n    is_power_of_two(0) ==> False\n    is_power_of_two(180) ==> False\n    '''\n\ndef is_power_of_three(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of three.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_power_of_three(1) ==> True\n    is_power_of_three(2) ==> False\n    is_power_of_three(-1) ==> False\n    is_power_of_three(64) ==> False\n    is_power_of_three(0) ==> False\n    is_power_of_three(180) ==> False\n    '''\n\ndef is_power_of_"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = 7 the output should be True.\n    For num = 10 the output should be False.\n    \"\"\"\n\ndef is_prime_2(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = 7 the output should be True.\n    For num = 10 the output should be False.\n    \"\"\"\n\ndef is_prime_3(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = 7 the output should be True.\n    For num = 10 the output should be False.\n    \"\"\"\n\ndef is_prime_4(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = 7 the output should be True.\n    For num = 10 the output should be False.\n    \"\"\"\n\ndef is_prime_5(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = 7 the output should be True.\n    For num = 10 the output should be False.\n    \"\"\"\n\ndef is_prime_6(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = 7 the output should be True.\n    For num = 10 the output should be False.\n    \"\"\"\n\ndef is_prime_7(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    and returns True if it is prime, and False otherwise.\n    Examples:\n    For num = 1 the output should be False.\n    For num = 2 the output should be True.\n    For num = 4 the output should be False.\n    For num = "}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n#     return \"db\" + bin(decimal)[2:] + \"db\"\n    return \"db\" + format(decimal, 'b') + \"db\"\n\n# print(decimal_to_binary(15))\n# print(decimal_to_binary(32))\n\n# def decimal_to_binary(decimal):\n#     \"\"\"You will be given a number in decimal form and your task is to convert it to\n#     binary format. The function should return a string, with each character representing a binary\n#     number. Each character in the string will be '0' or '1'.\n\n#     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n#     The extra characters are there to help with the format.\n\n#     Examples:\n#     decimal_to_binary(15)   # returns \"db1111db\"\n#     decimal_to_binary(32)   # returns \"db100000db\"\n#     \"\"\"\n\n#     return \"db\" + bin(decimal)[2:] + \"db\"\n\n# print(decimal_to_binary(15))\n# print(decimal_to_binary(32))\n\n# def decimal_to_binary(decimal):\n#     \"\"\"You will be given a number in decimal form and your task is to convert it to\n#     binary format. The function should return a string, with each character representing a binary\n#     number. Each character in the string will be '0' or '1'.\n\n#     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n#     The extra characters are there to help with the format.\n\n#     Examples:\n#     decimal_to_binary(15)   # returns \"db1111db\"\n#     decimal_to_binary(32)   # returns \"db100000db\"\n#     \"\"\"\n\n#     return \"db\" + bin(decimal)[2:] + \"db\"\n\n# print(decimal_to_binary(15))\n# print(decimal_to_binary(32))\n\n# def decimal_to_binary(decimal):\n#     \"\"\"You will be given a number in decimal form and your task is to convert it to\n#     binary format. The function should return a string, with each character representing a binary\n#     number. Each character in the string will be '0' or '1'.\n\n#     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n#     The extra characters are there to help with the format.\n\n#     Examples:\n#     decimal_to_binary(15)   # returns \"db1111db\"\n#     decimal_to_binary(32)   # returns \"db100000db\"\n#     \"\"\"\n\n#     return \"db\" + bin(decimal)[2:] + \"db\"\n\n# print(decimal_to_binary(15))\n# print(decimal_to_binary(32))\n\n# def decimal_to_binary(decimal):\n#     \"\"\"You will be given a number in decimal form and your task is to convert it to\n#     binary format. The function should return a string, with each character representing a binary\n#     number. Each character in the string will be '0' or '1'.\n\n#     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n#     The extra characters are there to help with the format.\n\n#     Examples:\n#     decimal_to_binary(15)   # returns \"db1111db\"\n#     decimal_to_binary(32)   # returns \"db100000db\"\n#     \"\"\""}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B-' if grade >= 2.3 else\n        'C+' if grade >= 2.0 else\n        'C' if grade >= 1.7 else\n        'C-' if grade >= 1.3 else\n        'D+' if grade >= 1.0 else\n        'D' if grade >= 0.7 else\n        'D-' if grade >= 0.0 else\n        'E' if grade >= 0.0 else\n        'F' for grade in grades\n    ]\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('tacocat') == True\n    is_palindrome('hello') == False\n    \"\"\"\n\ndef is_anagram(string1, string2):\n    \"\"\"Write a function that takes two strings and returns True if they are\n    anagrams or False otherwise\n    Examples\n    is_anagram('hello', 'olleh') == True\n    is_anagram('hello', 'olleh') == True\n    is_anagram('hello', 'olleh') == True\n    \"\"\"\n\ndef is_pangram(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a pangram or False otherwise\n    Examples\n    is_pangram('The quick brown fox jumps over the lazy dog') == True\n    is_pangram('The quick brown fox jumps over the lazy dog') == True\n    is_pangram('The quick brown fox jumps over the lazy dog') == True\n    \"\"\"\n\ndef is_isogram(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is an isogram or False otherwise\n    Examples\n    is_isogram('The quick brown fox jumps over the lazy dog') == True\n    is_isogram('The quick brown fox jumps over the lazy dog') == True\n    is_isogram('The quick brown fox jumps over the lazy dog') == True\n    \"\"\"\n\ndef is_palindrome_2(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome_2('racecar') == True\n    is_palindrome_2('tacocat') == True\n    is_palindrome_2('hello') == False\n    \"\"\"\n\ndef is_anagram_2(string1, string2):\n    \"\"\"Write a function that takes two strings and returns True if they are\n    anagrams or False otherwise\n    Examples\n    is_anagram_2('hello', 'olleh') == True\n    is_anagram_2('hello', 'olleh') == True\n    is_anagram_2('hello', 'olleh') == True\n    \"\"\"\n\ndef is_pangram_2(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a pangram or False otherwise\n    Examples\n    is_pangram_2('The quick brown fox jumps over the lazy dog') == True\n    is_pangram_2('The quick brown fox jumps over the lazy dog') == True\n    is_pangram_2('The quick brown fox jumps over the lazy dog') == True\n    \"\"\"\n\ndef is_isogram_2(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is an isogram or False otherwise\n    Examples\n    is_isogram_2('The quick brown fox jumps over the lazy dog') == True\n    is_isogram_2('The quick brown fox jumps over the lazy dog') == True\n    is_isogram_2('The quick brown fox jumps over the lazy dog') == True\n    \"\"\"\n\ndef is_palindrome_3(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome_3('racecar') == True\n    is_palindrome_3('tacocat') == True\n    is_palindrome_3('hello') == False\n    \"\"\"\n\ndef is_anagram_3(string1, string2):\n    \"\"\"Write a function that takes two strings and returns True if they are\n    anagrams or False otherwise\n    Examples\n    is_anagram_3('hello', 'olleh') == True\n    is_anagram_3('hello', 'olleh') == True\n    is_anagram_3('hello', 'olleh') == True\n    \"\"\"\n\ndef is_pangram_3(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a pangram or False otherwise\n    Examples\n    is_pangram_3('The quick brown fox"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\ndef starts_one_ends_one(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly one 1 in them.\n    \"\"\"\n\ndef starts_one_ends_two(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly two 1s in them.\n    \"\"\"\n\ndef starts_one_ends_three(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly three 1s in them.\n    \"\"\"\n\ndef starts_one_ends_four(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly four 1s in them.\n    \"\"\"\n\ndef starts_one_ends_five(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly five 1s in them.\n    \"\"\"\n\ndef starts_one_ends_six(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly six 1s in them.\n    \"\"\"\n\ndef starts_one_ends_seven(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly seven 1s in them.\n    \"\"\"\n\ndef starts_one_ends_eight(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly eight 1s in them.\n    \"\"\"\n\ndef starts_one_ends_nine(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly nine 1s in them.\n    \"\"\"\n\ndef starts_one_ends_ten(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly ten 1s in them.\n    \"\"\"\n\ndef starts_one_ends_eleven(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly eleven 1s in them.\n    \"\"\"\n\ndef starts_one_ends_twelve(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly twelve 1s in them.\n    \"\"\"\n\ndef starts_one_ends_thirteen(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly thirteen 1s in them.\n    \"\"\"\n\ndef starts_one_ends_fourteen(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly fourteen 1s in them.\n    \"\"\"\n\ndef starts_one_ends_fifteen(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly fifteen 1s in them.\n    \"\"\"\n\ndef starts_one_ends_sixteen(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly sixteen 1s in them.\n    \"\"\"\n\ndef starts_one_ends_seventeen(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly seventeen 1s in them.\n    \"\"\"\n\ndef starts_one_ends_eighteen(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n#     print(bin(N))\n#     print(bin(N)[2:])\n#     print(bin(N)[2:].replace('0', ''))\n#     print(bin(N)[2:].replace('0', '').replace('1', ''))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace('0', '').replace('1', '')))\n#     print(sum(int(i) for i in bin(N)[2:].replace"}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add_even_at_odd_indices([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_even_at_odd_indices(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a\n    palindrome, False otherwise.\n    A palindrome is a word that reads the same backward as forward.\n    For example:\n    is_palindrome('noon') returns True\n    is_palindrome('racecar') returns True\n    is_palindrome('hello') returns False\n    \"\"\"\n\ndef is_anagram(s1, s2):\n    \"\"\"\n    Write a function that takes two strings and returns True if they are\n    anagrams, False otherwise.\n    An anagram is a word that is formed by rearranging the letters of another\n    word.\n    For example:\n    is_anagram('silent', 'listen') returns True\n    is_anagram('silent', 'listen') returns False\n    \"\"\"\n\ndef is_pangram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a\n    pangram, False otherwise.\n    A pangram is a sentence that contains all the letters of the alphabet.\n    For example:\n    is_pangram('The quick brown fox jumps over the lazy dog') returns True\n    is_pangram('The quick brown fox jumps over the lazy dog') returns False\n    \"\"\"\n\ndef is_isogram(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is an\n    isogram, False otherwise.\n    An isogram is a word that has no repeating letters.\n    For example:\n    is_isogram('isogram') returns True\n    is_isogram('isogram') returns False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    prime, False otherwise.\n    A prime number is a number that is only divisible by 1 and itself.\n    For example:\n    is_prime(1) returns False\n    is_prime(2) returns True\n    is_prime(3) returns True\n    is_prime(4) returns False\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    perfect number, False otherwise.\n    A perfect number is a number that is equal to the sum of its factors.\n    For example:\n    is_perfect(6) returns True\n    is_perfect(6) returns False\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is an\n    armstrong number, False otherwise.\n    An armstrong number is a number that is equal to the sum of its digits\n    raised to the power of the number of digits.\n    For example:\n    is_armstrong(153) returns True\n    is_armstrong(153) returns False\n    \"\"\"\n\ndef is_happy(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    happy number, False otherwise.\n    A happy number is a number that is equal to the sum of the squares of its\n    digits.\n    For example:\n    is_happy(153) returns True\n    is_happy(153) returns False\n    \"\"\"\n\ndef is_happy(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    happy number, False otherwise.\n    A happy number is a number that is equal to the sum of the squares of its\n    digits.\n    For example:\n    is_happy(153) returns True\n    is_happy(153) returns False\n    \"\"\"\n\ndef is_happy(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    happy number, False otherwise.\n    A happy number is a number that is equal to the sum of the squares of its\n    digits.\n    For example:\n    is_happy(153) returns True\n    is_happy(153) returns False\n    \"\"\"\n\ndef is_happy(n):\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    happy"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x]\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x]\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1)"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array_3(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array_4(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array_5(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2,"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef main():\n    \"\"\"Create a main function that asks the user to input a string and\n    encrypts or decrypts the string depending on the user's input.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n<file_sep>/week_02/day_01/02_list_comprehension.py\n# List comprehension\n\n# Create a list of the first 100 numbers\n\n# Create a list of the first 100 even numbers\n\n# Create a list of the first 100 odd numbers\n\n# Create a list of the first 100 squares\n\n# Create a list of the first 100 cubes\n\n# Create a list of the first 100 factorials\n\n# Create a list of the first 100 fibonacci numbers\n\n# Create a list of the first 100 prime numbers\n\n# Create a list of the first 100 palindromes\n\n# Create a list of the first 100 perfect numbers\n\n# Create a list of the first 100 amicable numbers\n\n# Create a list of the first 100 happy numbers\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first 100 happy primes\n\n# Create a list of the first "}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for i in S.split('.') if i.split()[0] == 'I')\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(i.split()[0] == 'I' for i in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(i.split()[0] == 'I' for i in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(i.split()[0] == 'I' for i in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(i.split()[0] == 'I' for i in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(i.split()[0] == 'I' for i in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(i.split()[0] == 'I' for i in S.split('.'))\n\ndef is_bored(S):\n    \"\"\"\n    You"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and type(x) == int and type(y) == int and type(z) == int\n\ndef any_int(x, y, z):\n    return"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'TGST'\n    >>> encode_decode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file(filename):\n    \"\"\"\n    Write a function that takes a filename, and encodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file('test.txt')\n    'TGST'\n    >>> encode_decode_file('test2.txt')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode_file('test3.txt')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_with_key(filename, key):\n    \"\"\"\n    Write a function that takes a filename, and encodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_with_key('test.txt', 1)\n    'TGST'\n    >>> encode_decode_file_with_key('test2.txt', 1)\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode_file_with_key('test3.txt', 1)\n    'This is a message'\n    >>> encode_decode_file_with_key('test3.txt', 2)\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode_file_with_key('test3.txt', 3)\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file_with_key_and_mode(filename, key, mode):\n    \"\"\"\n    Write a function that takes a filename, and encodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode_file_with_key_and_mode('test.txt', 1, 'e')\n    'TGST'\n    >>> encode_decode_file_with_key_and_mode('test2.txt', 1, 'e')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode_file_with_key_and_mode('test3.txt', 1, 'e')\n    'This is a message'\n    >>> encode_decode_file_with_key_and_mode('test3.txt', 2, 'e')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode_file_with_key_and_mode('test3.txt', 3, 'e')\n    'This is a message'\n    >>> encode_decode_file_with_key_and_mode('test3.txt', 1, 'd')\n    'This is a message'\n    >>> encode_decode"}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            elif key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_list = []\n    for i in range(2,n):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is prime and False otherwise.\n    for example:\n    is_prime(2) => True\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(1) => False\n    is_prime(0) => False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is prime and False otherwise.\n    for example:\n    is_prime(2) => True\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(1) => False\n    is_prime(0) => False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is prime and False otherwise.\n    for example:\n    is_prime(2) => True\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(1) => False\n    is_prime(0) => False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is prime and False otherwise.\n    for example:\n    is_prime(2) => True\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(1) => False\n    is_prime(0) => False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is prime and False otherwise.\n    for example:\n    is_prime(2) => True\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(1) => False\n    is_prime(0) => False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns True if it is prime and False otherwise.\n    for example:\n    is_prime(2) => True\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(1) =>"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is prime and False if it is not.\n    Assume the input is always valid.\n    Examples:\n    is_prime(1) should return False.\n    is_prime(2) should return True.\n    is_prime(3) should return True.\n    is_prime(4) should return False.\n    is_prime(5) should return True.\n    is_prime(6) should return False.\n    is_prime(7) should return True.\n    is_prime(8) should return False.\n    is_prime(9) should return False.\n    is_prime(10) should return False.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if the number is a palindrome and False if it is not.\n    Assume the input is always valid.\n    Examples:\n    is_palindrome(1) should return True.\n    is_palindrome(2) should return False.\n    is_palindrome(3) should return False.\n    is_palindrome(4) should return False.\n    is_palindrome(5) should return False.\n    is_palindrome(6) should return False.\n    is_palindrome(7) should return False.\n    is_palindrome(8) should return False.\n    is_palindrome(9) should return False.\n    is_palindrome(10) should return False.\n    is_palindrome(11) should return True.\n    is_palindrome(12) should return False.\n    is_palindrome(13) should return False.\n    is_palindrome(14) should return False.\n    is_palindrome(15) should return False.\n    is_palindrome(16) should return False.\n    is_palindrome(17) should return False.\n    is_palindrome(18) should return False.\n    is_palindrome(19) should return False.\n    is_palindrome(20) should return False.\n    is_palindrome(21) should return False.\n    is_palindrome(22) should return True.\n    is_palindrome(23) should return False.\n    is_palindrome(24) should return False.\n    is_palindrome(25) should return False.\n    is_palindrome(26) should return False.\n    is_palindrome(27) should return False.\n    is_palindrome(28) should return False.\n    is_palindrome(29) should return False.\n    is_palindrome(30) should return False.\n    is_palindrome(31) should return False.\n    is_palindrome(32) should return False.\n    is_palindrome(33) should return False.\n    is_palindrome(34) should return False.\n    is_palindrome(35) should return False.\n    is_palindrome(36) should return False.\n    is_palindrome(37) should return False.\n    is_palindrome(38) should return False.\n    is_palindrome(39) should return False.\n    is_palindrome(40) should return False.\n    is_palindrome(41) should return True.\n    is_palindrome(42) should return False.\n    is_palindrome(43) should return False.\n    is_palindrome(44) should return False.\n    is_palindrome(45) should return False.\n    is_palindrome(46) should return False.\n    is_palindrome(47) should return False.\n    is_palindrome(48) should return False.\n    is_palindrome(49) should return False.\n    is_palindrome(50) should return False.\n    is_palindrome(51) should return False.\n    is_palindrome(52) should return False.\n    is_palindrome(53) should return False.\n    is_palindrome(54) should return False.\n    is_palindrome(55) should return False.\n    is_pal"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_vowels('aBCdEf') returns 1\n    count_upper_vowels('abcdefg') returns 0\n    count_upper_vowels('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase consonants in odd indices.\n    \n    For example:\n    count_upper_consonants('aBCdEf') returns 2\n    count_upper_consonants('abcdefg') returns 3\n    count_upper_consonants('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in even and odd indices.\n    \n    For example:\n    count_upper_vowels_consonants('aBCdEf') returns 1\n    count_upper_vowels_consonants('abcdefg') returns 3\n    count_upper_vowels_consonants('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowel_consonant(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in even and odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowel_consonant('aBCdEf') returns 1\n    count_upper_vowels_consonants_vowel_consonant('abcdefg') returns 3\n    count_upper_vowels_consonants_vowel_consonant('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowel_consonant_vowel_consonant(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in even and odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant('aBCdEf') returns 1\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant('abcdefg') returns 3\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in even and odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant('aBCdEf') returns 1\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant('abcdefg') returns 3\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant('dBBE') returns 1\n    \"\"\"\n\ndef count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels and consonants in even and odd indices.\n    \n    For example:\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant('aBCdEf') returns 1\n    count_upper_vowels_consonants_vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant('abcdefg') returns 3\n    count_upper_vowels_consonants"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\ndef is_prime(value):\n    '''\n    Create a function that takes a number as an argument and returns\n    True if the number is prime. Otherwise, return False.\n\n    Examples\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    False\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    False\n    >>> is_prime(37)\n    True\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)\n    False\n    >>> is_prime(41)\n    True\n    >>> is_prime(42)\n    False\n    >>> is_prime(43)\n    True\n    >>> is_prime(44)\n    False\n    >>> is_prime(45)\n    False\n    >>> is_prime(46)\n    False\n    >>> is_prime(47)\n    True\n    >>> is_prime(48)\n    False\n    >>> is_prime(49)\n    False\n    >>> is_prime(50)\n    False\n    >>> is_prime(51)\n    False\n    >>> is_prime(52)\n    False\n    >>> is_prime(53)\n    True\n    >>> is_prime(54)\n    False\n    >>> is_prime(55)\n    False\n    >>> is_prime(56)\n    False\n    >>> is_prime(57)\n    False\n    >>> is_prime(58)\n    False\n    >>> is_prime(59)\n    True\n    >>> is_prime(60)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(62)\n    False\n    >>> is_prime(63)\n    False\n    >>> is_prime(64)\n    False\n    >>> is_prime(65)\n    False\n    >>> is_prime(66)\n    False\n    >>> is_prime(67)\n    True\n    >>> is_prime(68)\n    False\n    >>> is_prime(69)\n    False\n    >>> is_prime(70)\n    False\n    >>> is_prime(71)\n    True\n    >>> is_prime(72)\n    False\n    >>> is_prime(73)\n    True\n    >>> is_prime(74)\n    False\n    >>> is_prime(75)\n    False\n    >>> is_prime(76)\n    False\n    >>>"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_3(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_3(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_4(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_4(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_5(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_5(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_6(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_6(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_7(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_7(3)\n    [3, 5, 7]\n    \"\"\"\n\ndef make_a_pile_8(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\ndef words_string(s):\n    return s.split()\n\ndef words_string(s):\n    return s.split(', ')\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []\n\ndef words_string(s):\n    return s.split(', ') if s else []"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        x += 1\n        if x % 2 == 0:\n            return x\n        else:\n            x += 1\n            if x % 2 == 0:\n                return x\n            else:\n                return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        x += 1\n        if x % 2 == 0:\n            return x\n        else:\n            x += 1\n            if x % 2 == 0:\n                return x\n            else:\n                return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        x += 1\n        if x % 2 == 0:\n            return x\n        else:\n            x += 1\n            if x % 2 == 0:\n                return x\n            else:\n                return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        x += 1\n        if x % 2 == 0:\n            return x\n        else:\n            x += 1\n            if x % 2 == 0:\n                return x\n            else:\n                return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        x += 1\n        if x % 2 == 0:\n            return x\n        else:\n            x += 1\n            if x % 2 == 0:\n                return x\n            else:\n                return -1\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\""}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"You are given a positive integer n, and your task is to determine whether\n    it is a prime number.\n    Example:\n    is_prime(1) => False\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => False\n    is_prime(10) => False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"You are given a positive integer n, and your task is to determine whether\n    it is a palindrome.\n    Example:\n    is_palindrome(1) => True\n    is_palindrome(2) => False\n    is_palindrome(3) => False\n    is_palindrome(4) => False\n    is_palindrome(5) => False\n    is_palindrome(6) => True\n    is_palindrome(7) => False\n    is_palindrome(8) => False\n    is_palindrome(9) => False\n    is_palindrome(10) => False\n    \"\"\"\n\ndef is_power_of_two(n):\n    \"\"\"You are given a positive integer n, and your task is to determine whether\n    it is a power of two.\n    Example:\n    is_power_of_two(1) => True\n    is_power_of_two(2) => True\n    is_power_of_two(3) => False\n    is_power_of_two(4) => True\n    is_power_of_two(5) => False\n    is_power_of_two(6) => False\n    is_power_of_two(7) => False\n    is_power_of_two(8) => True\n    is_power_of_two(9) => False\n    is_power_of_two(10) => False\n    \"\"\"\n\ndef is_power_of_three(n):\n    \"\"\"You are given a positive integer n, and your task is to determine whether\n    it is a power of three.\n    Example:\n    is_power_of_three(1) => True\n    is_power_of_three(2) => False\n    is_power_of_three(3) => True\n    is_power_of_three(4) => False\n    is_power_of_three(5) => False\n    is_power_of_three(6) => False\n    is_power_of_three(7) => False\n    is_power_of_three(8) => False\n    is_power_of_three(9) => True\n    is_power_of_three(10) => False\n    \"\"\"\n\ndef is_power_of_five(n):\n    \"\"\"You are given a positive integer n, and your task is to determine whether\n    it is a power of five.\n    Example:\n    is_power_of_five(1) => True\n    is_power_of_five(2) => False\n    is_power_of_five(3) => False\n    is_power_of_five(4) => False\n    is_power_of_five(5) => True\n    is_power_of_five(6) => False\n    is_power_of_five(7) => False\n    is_power_of_five(8) => False\n    is_power_of_five(9) => False\n    is_power_of_five(10) => False\n    \"\"\"\n\ndef is_power_of_ten(n):\n    \"\"\"You are given a positive integer n, and your task is to determine whether\n    it is a power of ten.\n    Example:\n    is_power_of_ten(1) => True\n    is_power_of_ten(2) => False\n    is_power_of_ten(3) => False\n    is_power_"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_3([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_4([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_5(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_5([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_5([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_6(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_6([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_6([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_7(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_7([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_7([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_8(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_8([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_8([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_9(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_9([15, 33, 1422, 1])\n    [1"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    return [str(i) for i in sorted(arr) if 0 < i < 10][::-1]\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    return [str(i) for i in sorted(arr) if 0 < i < 10][::-1]\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8,"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    g(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef h(n):\n    \"\"\" Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef i(n):\n    \"\"\" Implement the function i that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    i(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef j(n):\n    \"\"\" Implement the function j that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    j(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef k(n):\n    \"\"\" Implement the function k that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    k(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef l(n):\n    \"\"\" Implement the function l that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    l(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef m(n):\n    \"\"\" Implement the function m that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    m(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef n(n):\n    \"\"\" Implement the function n that takes n as a parameter,\n    and returns a list of size n, such that the value"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n<file_sep>/leetcode/0001-0100/0016.py\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n        Example:\n\n            Input: nums = [-1,2,1,-4], target = 1\n            Output: 2\n            Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n        Constraints:\n\n            3 <= nums.length <= 10^3\n            -10^3 <= nums[i] <= 10^3\n            -10^4 <= target <= 10^4\n        \"\"\"\n        nums.sort()\n        res = float('inf')\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return target\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                else:\n                    r -= 1\n        return res\n<file_sep>/leetcode/0001-0100/0040.py\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\n\n        Each number in candidates may only be used once in the combination.\n\n        Note:\n\n            All numbers (including target) will be positive integers.\n            The solution set must not contain duplicate combinations.\n\n        Example 1:\n\n            Input: candidates = [10,1,2,7,6,1,5], target = 8\n            Output:\n            [\n            [1,1,6],\n            [1,2,5],\n            [1,7],\n            [2,6]\n            ]\n\n        Example 2:\n\n            Input: candidates = [2,5,2,1,2], target = 5\n            Output:\n            [\n            [1,2,2],\n            [5]\n            ]\n\n        Constraints:\n\n            1 <= candidates.length <= 100\n            1 <= candidates[i] <= 50\n            1 <= target <= 30\n        \"\"\"\n        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res\n\n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i - 1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)\n<file_sep>/leetcode/0001-0100/0039.py\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\n\n       "}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums_2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_2([]) == 0\n    >>> count_nums_2([-1, 11, -11]) == 1\n    >>> count_nums_2([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_3(arr):\n    \"\"\"\n    Write a function count_nums_3 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_3([]) == 0\n    >>> count_nums_3([-1, 11, -11]) == 1\n    >>> count_nums_3([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_4(arr):\n    \"\"\"\n    Write a function count_nums_4 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_4([]) == 0\n    >>> count_nums_4([-1, 11, -11]) == 1\n    >>> count_nums_4([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_5(arr):\n    \"\"\"\n    Write a function count_nums_5 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_5([]) == 0\n    >>> count_nums_5([-1, 11, -11]) == 1\n    >>> count_nums_5([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_6(arr):\n    \"\"\"\n    Write a function count_nums_6 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_6([]) == 0\n    >>> count_nums_6([-1, 11, -11]) == 1\n    >>> count_nums_6([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_7(arr):\n    \"\"\"\n    Write a function count_nums_7 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_7([]) == 0\n    >>> count_nums_7([-1, 11, -11]) == 1\n    >>> count_nums_7([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_8(arr):\n    \"\"\"\n    Write a function count_nums_8 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3."}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n\nif __name__ == \"__main__\":\n    main()\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        s = s.lower()\n        s = ''.join(c for c in s if c.isalnum())\n        return s == s[::-1]\n<file_sep>/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if root is None:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n<file_sep>/python/leetcode/easy/110_balanced_binary_tree.py\n\"\"\"\nGiven a binary tree, determine if it is height-balanced.\n\nFor this problem, a height-balanced binary tree is defined as:\n\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\n\nExample 1:\n\nGiven the following tree [3,9,20,null,null,15,7]:\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nReturn true.\n\nExample 2:\n\nGiven the following tree [1,2,2,3,3,null,null,4,4]:\n\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\nReturn false.\n\"\"\"\n\n# Definition for a binary tree"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]\n        test = [i.lower() for i in test]\n        test = dict(Counter(test))\n        test = {k: v for k, v in test.items() if v == max(test.values())}\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]\n        test = [i.lower() for i in test]\n        test = dict(Counter(test))\n        test = {k: v for k, v in test.items() if v == max(test.values())}\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = [i for i in test]\n        test = [i for i in test if i.isalpha()]\n        test = [i.lower() for i in test]\n        test = dict(Counter(test))\n        test = {k: v for k, v in test.items() if v == max(test.values())}\n        return test\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n        test"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\ndef reverse_delete(s,c):\n    return (\"\".join([x for x in s if x not in c]),s[::-1]==s)\n\ndef reverse_delete(s,c):\n    return (\"\".join(filter(lambda x: x not in c, s)), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])\n\ndef reverse_delete(s,c):\n    return (\"\".join(x for x in s if x not in c), s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len([int(i) for i in lst[n] if int(i) % 2!= 0])} in the str{n+1}ng {n+1} of the {n+1}nput.\" for n in range(len(lst))]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len([int(i) for i in lst[n] if int(i) % 2!= 0])} in the str{n+1}ng {n+1} of the {n+1}nput.\" for n in range(len(lst))]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len([int(i) for i in lst[n] if int(i) % 2!= 0])} in the str{n+1}ng {n+1} of the {n+1}nput.\" for n in range(len(lst))]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum2([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum2([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum3(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum3([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum3([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum4(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum4([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum4([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum5(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum5([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum5([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum6(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum6([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum6([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum7(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum7([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum7([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum8(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum8([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum8([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum9(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum9([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum9([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum10(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum10([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum10([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySum11(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum11([2, 3, 4, 1, 2, 4]) == 10\n    maxSub"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\ndef max_fill_recursive(grid, capacity, row, col, visited, count):\n    \"\"\"\n    Recursive solution to the max_fill problem.\n    \"\"\"\n    if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or grid[row][col] == 0 or visited[row][col]:\n        return count\n    visited[row][col] = True\n    count += 1\n    count = max_fill_recursive(grid, capacity, row - 1, col, visited, count)\n    count = max_fill_recursive(grid, capacity, row + 1, col, visited, count)\n    count = max_fill_recursive(grid, capacity, row, col - 1, visited, count)\n    count = max_fill_recursive(grid, capacity, row, col + 1, visited, count)\n    return count\n\ndef max_fill_iterative(grid, capacity):\n    \"\"\"\n    Iterative solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0 or len(grid[0]) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    count = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                count += 1\n                count = max_fill_recursive(grid, capacity, row, col, visited, count)\n    return count\n\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0 or len(grid[0]) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    count = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                count += 1\n                count = max_fill_recursive(grid, capacity, row, col, visited, count)\n    return count\n\ndef max_fill_dp_space_optimized(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0 or len(grid[0]) == 0:\n        return 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    count = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1 and not visited[row][col]:\n                count += 1\n                count = max_fill_recursive(grid, capacity, row, col, visited, count)\n    return count\n\ndef max_fill_dp_space_optimized_2(grid, capacity):\n    \"\"\"\n    Dynamic programming solution to the max_fill problem.\n    \"\"\"\n    if len(grid) == 0 or len("}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    result = []\n    for word in s:\n        if len(word) == n:\n            result.append(word)\n    return result\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    result = []\n    for word in s:\n        if len(word) == n:\n            result.append(word)\n    return result\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    result = []\n    for word in s:\n        if len(word) == n:\n            result.append(word)\n    return result\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Un"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n   "}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' or lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' or lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == ')' or lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-3, -4, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [-4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [-3]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef kth_largest(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth largest \n    element in the array.\n\n    Example 1:\n\n        Input: arr = [3, 2, 1, 5, 6, 4], k = 2\n        Output: 5\n\n    Example 2:\n\n        Input: arr = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4\n        Output: 4\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [0, 1000].\n        3. 0 <= k <= arr.length\n    \"\"\"\n\ndef kth_smallest(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth smallest \n    element in the array.\n\n    Example 1:\n\n        Input: arr = [3, 2, 1, 5, 6, 4], k = 2\n        Output: 5\n\n    Example 2:\n\n        Input: arr = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4\n        Output: 4\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [0, 1000].\n        3. 0 <= k <= arr.length\n    \"\"\"\n\ndef kth_smallest_2(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth smallest \n    element in the array.\n\n    Example 1:\n\n        Input: arr = [3, 2, 1, 5, 6, 4], k = 2\n        Output: 5\n\n    Example 2:\n\n        Input: arr = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4\n        Output: 4\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [0, 1000].\n        3. 0 <= k <= arr.length\n    \"\"\"\n\ndef kth_smallest_3(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return the kth smallest \n    element in the array.\n\n    Example "}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 10. Write a function that takes a list of numbers and returns the sum of the first and last elements.\n\n# + id=\"37651533\"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the first and last elements.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 11. Write a function that takes a list of numbers and returns the sum of the first and last elements.\n\n# + id=\"37651533\"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the first and last elements.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 12. Write a function that takes a list of numbers and returns the sum of the first and last elements.\n\n# + id=\"37651533\"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the first and last elements.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 13. Write a function that takes a list of numbers and returns the sum of the first and last elements.\n\n# + id=\"37651533\"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the first and last elements.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 14. Write a function that takes a list of numbers and returns the sum of the first and last elements.\n\n# + id=\"37651533\"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the first and last elements.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 15. Write a function that takes a list of numbers and returns the sum of the first and last elements.\n\n# + id=\"37651533\"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the first and last elements.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"80812716\"\n# ## 16. Write a function that"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_2(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_3(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_4(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_5(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_6(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_7(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_8(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\ndef get_collatz_length(n):\n    \"\"\"\n    Given a positive integer n, return the length of the collatz sequence for n.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_length(5) returns 6 # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the length is 6.\n    \"\"\"\n\ndef get_collatz_length_for_range(start, end):\n    \"\"\"\n    Given a positive integer start and end, return the length of the longest collatz sequence in the range [start, end].\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_length_for_range(1, 10) returns 9 # The longest collatz sequence in the range [1, 10] is [9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1], so the length is 9.\n    \"\"\"\n\ndef get_collatz_length_for_range_with_cache(start, end):\n    \"\"\"\n    Given a positive integer start and end, return the length of the longest collatz sequence in the range [start, end].\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_length_for_range_with_cache(1, 10) returns 9 # The longest collatz sequence in the range [1, 10] is [9, 28, 14, 7, 22, 11, 34, 17, 52,"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n# Write your code here\n\n# Test your code here\n\n# + [markdown] id=\"64340332\"\n# ## 10. Write a function which takes a string and returns the number of words in the string.\n#\n# For example:\n#\n# ```python\n# count_words(\"I am a good boy\") => 4\n# ```\n\n# + id=\"07380551\"\ndef count_words(string):\n    \"\"\"You have to write a function which takes a string and returns the number of words in the string.\n\n    For example:\n\n    count_words(\"I am a good boy\") => 4\n    \"\"\"\n\n# Write your code here\n\n# Test your code here\n\n# + [markdown] id=\"77705612\"\n# ## 11. Write a function which takes a string and returns the number of vowels in the string.\n#\n# For example:\n#\n# ```python\n# count_vowels(\"I am a good boy\") => 5\n# ```\n\n# + id=\"11585321\"\ndef count_vowels(string):\n    \"\"\"You have to write a function which takes a string and returns the number of vowels in the string.\n\n    For example:\n\n    count_vowels(\"I am a good boy\") => 5\n    \"\"\"\n\n# Write your code here\n\n# Test your code here\n\n# + [markdown] id=\"65320694\"\n# ## 12. Write a function which takes a string and returns the number of consonants in the string.\n#\n# For example:\n#\n# ```python\n# count_consonants(\"I am a good boy\") => 9\n# ```\n\n# + id=\"42820960\"\ndef count_consonants(string):\n    \"\"\"You have to write a function which takes a string and returns the number of consonants in the string.\n\n    For example:\n\n    count_consonants(\"I am a good boy\") => 9\n    \"\"\"\n\n# Write your code here\n\n# Test your code here\n\n# + [markdown] id=\"67262930\"\n# ## 13. Write a function which takes a string and returns the number of digits in the string.\n#\n# For example:\n#\n# ```python\n# count_digits(\"I am a good boy\") => 0\n# ```\n\n# + id=\"67262930\"\ndef count_digits(string):\n    \"\"\"You have to write a function which takes a string and returns the number of digits in the string.\n\n    For example:\n\n    count_digits(\"I am a good boy\") => 0\n    \"\"\"\n\n# Write your code here\n\n# Test your code here\n\n# + [markdown] id=\"67262930\"\n# ## 14. Write a function which takes a string and returns the number of special characters in the string.\n#\n# For example:\n#\n# ```python\n# count_special_characters(\"I am a good boy\") => 0\n# ```\n\n# + id=\"67262930\"\ndef count_special_characters(string):"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])\n\ndef split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split(' ')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\ndef is_sorted(lst):\n    return lst == sorted(lst)\n\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted(lst):"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\" if len(range(interval1[0], interval2[1])) % 2 == 1 else \"NO\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\" if len(range(interval1[0], interval2[1])) % 2 == 1 else \"NO\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    You are given a string s.\n    Return True if s is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forward and backward.\n\n    Example:\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abba') == True\n    >>> is_"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def dfs(grid, k, i, j, path, visited):\n        if k == 0:\n            return path\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or visited[i][j]:\n            return None\n        visited[i][j] = True\n        path.append(grid[i][j])\n        res = dfs(grid, k - 1, i - 1, j, path, visited) or \\\n              dfs(grid, k - 1, i + 1, j, path, visited) or \\\n              dfs(grid, k - 1, i, j - 1, path, visited) or \\\n              dfs(grid, k - 1, i, j + 1, path, visited)\n        visited[i][j] = False\n        return res\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    return dfs(grid, k, 0, 0, [], visited)\n"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list\n\ndef tri(n):\n    \"\"\"Every"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Return True if n is perfect, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"Return True if n is abundant, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"Return True if n is deficient, False otherwise.\n    \"\"\"\n\ndef is_harshad(n):\n    \"\"\"Return True if n is a harshad number, False otherwise.\n    \"\"\"\n\ndef is_strong(n):\n    \"\"\"Return True if n is a strong number, False otherwise.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return True if n is an armstrong number, False otherwise.\n    \"\"\"\n\ndef is_happy(n):\n    \"\"\"Return True if n is a happy number, False otherwise.\n    \"\"\"\n\ndef is_lucky(n):\n    \"\"\"Return True if n is a lucky number, False otherwise.\n    \"\"\"\n\ndef is_emirp(n):\n    \"\"\"Return True if n is an emirp number, False otherwise.\n    \"\"\"\n\ndef is_mersenne(n):\n    \"\"\"Return True if n is a mersenne number, False otherwise.\n    \"\"\"\n\ndef is_perfect_square(n):\n    \"\"\"Return True if n is a perfect square, False otherwise.\n    \"\"\"\n\ndef is_triangular(n):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Return True if n is a square, False otherwise.\n    \"\"\"\n\ndef is_pentagonal(n):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    \"\"\"\n\ndef is_hexagonal(n):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    \"\"\"\n\ndef is_heptagonal(n):\n    \"\"\"Return True if n is a heptagonal number, False otherwise.\n    \"\"\"\n\ndef is_octagonal(n):\n    \"\"\"Return True if n is a octagonal number, False otherwise.\n    \"\"\"\n\ndef is_triangular_number(n):\n    \"\"\"Return True if n is a triangular number, False otherwise.\n    \"\"\"\n\ndef is_square_number(n):\n    \"\"\"Return True if n is a square number, False otherwise.\n    \"\"\"\n\ndef is_pentagonal_number(n):\n    \"\"\"Return True if n is a pentagonal number, False otherwise.\n    \"\"\"\n\ndef is_hexagonal_number(n):\n    \"\"\"Return True if n is a hexagonal number, False otherwise.\n    \"\"\"\n\ndef is_heptagonal_number(n):\n    \"\"\"Return True if n is a heptagonal number, False otherwise.\n    \"\"\"\n\ndef is_octagonal_number(n):\n    \"\"\"Return True if n is a octagonal number, False otherwise.\n    \"\"\"\n\ndef is_fibonacci(n):\n    \"\"\"Return True if n is a fibonacci number, False otherwise.\n    \"\"\"\n\ndef is_lucas(n):\n    \"\"\"Return True if n is a lucas number, False otherwise.\n    \"\"\"\n\ndef is_collatz(n):\n    \"\"\"Return True if n is a collatz number, False otherwise.\n    \"\"\"\n\ndef is_mersenne_prime(n):\n    \"\"\"Return True if n is a mersenne prime, False otherwise.\n    \"\"\"\n\ndef is_mersenne_prime(n):\n    \"\"\"Return True if n is a mersenne prime, False otherwise.\n    \"\"\"\n\ndef is_mersenne_prime(n):\n    \"\"\"Return True if n is a mersenne prime, False otherwise.\n    \"\"\"\n\ndef is_mersenne_prime(n):\n    \"\"\"Return True if n is a mersenne prime, False otherwise.\n    \"\"\"\n\ndef is_mersenne_prime(n):\n    \"\"\"Return True if n is a mersenne prime, False otherwise.\n    \"\"\"\n\ndef is_mersenne_prime(n):\n    \"\"\"Return True if n is a mersenne prime, False otherwise.\n    \"\"\"\n\ndef is"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x**2)) for x in lst])\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in''\n\ndef check_if_last_char_is_a_"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\ndef count_vowels(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels('abcde') == 2\n    count_vowels('hello') == 3\n    count_vowels('why') == 0\n    '''\n\ndef count_vowels_2(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_2('abcde') == 2\n    count_vowels_2('hello') == 3\n    count_vowels_2('why') == 0\n    '''\n\ndef count_vowels_3(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_3('abcde') == 2\n    count_vowels_3('hello') == 3\n    count_vowels_3('why') == 0\n    '''\n\ndef count_vowels_4(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_4('abcde') == 2\n    count_vowels_4('hello') == 3\n    count_vowels_4('why') == 0\n    '''\n\ndef count_vowels_5(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_5('abcde') == 2\n    count_vowels_5('hello') == 3\n    count_vowels_5('why') == 0\n    '''\n\ndef count_vowels_6(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_6('abcde') == 2\n    count_vowels_6('hello') == 3\n    count_vowels_6('why') == 0\n    '''\n\ndef count_vowels_7(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_7('abcde') == 2\n    count_vowels_7('hello') == 3\n    count_vowels_7('why') == 0\n    '''\n\ndef count_vowels_8(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_8('abcde') == 2\n    count_vowels_8('hello') == 3\n    count_vowels_8('why') == 0\n    '''\n\ndef count_vowels_9(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_9('abcde') == 2\n    count_vowels_9('hello') == 3\n    count_vowels_9('why') == 0\n    '''\n\ndef count_vowels_10(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_10('abcde') == 2\n    count_vowels_10('hello') == 3\n    count_vowels_10('why') == 0\n    '''\n\ndef count_vowels_11(string):\n    '''\n    Create a function that takes a string and returns the number of\n    vowels in the string.\n\n    Examples:\n    count_vowels_11"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns a list of\n    the integers that appear in both of the given lists in the same order as\n    they appear in the given lists.\n    Note: If a number appears in both lists, it should only be included once\n    in the returned list.\n\n    compare_two([1, 2, 3], [2, 3, 4]) \u279e [2, 3]\n    compare_two([1, 2, 3], [3, 4, 5]) \u279e [3]\n    compare_two([1, 2, 3], [1, 2, 3]) \u279e [1, 2, 3]\n    compare_two([1, 2, 3], [1, 2, 3, 4]) \u279e [1, 2, 3]\n    \"\"\"\n\ndef compare_three(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns a list of\n    the integers that appear in both of the given lists in the same order as\n    they appear in the given lists.\n    Note: If a number appears in both lists, it should only be included once\n    in the returned list.\n\n    compare_three([1, 2, 3], [2, 3, 4]) \u279e [2, 3]\n    compare_three([1, 2, 3], [3, 4, 5]) \u279e [3]\n    compare_three([1, 2, 3], [1, 2, 3]) \u279e [1, 2, 3]\n    compare_three([1, 2, 3], [1, 2, 3, 4]) \u279e [1, 2, 3]\n    \"\"\"\n\ndef compare_four(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns a list of\n    the integers that appear in both of the given lists in the same order as\n    they appear in the given lists.\n    Note: If a number appears in both lists, it should only be included once\n    in the returned list.\n\n    compare_four([1, 2, 3], [2, 3, 4]) \u279e [2, 3]\n    compare_four([1, 2, 3], [3, 4, 5]) \u279e [3]\n    compare_four([1, 2, 3], [1, 2, 3]) \u279e [1, 2, 3]\n    compare_four([1, 2, 3], [1, 2, 3, 4]) \u279e [1, 2, 3]\n    \"\"\"\n\ndef compare_five(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns a list of\n    the integers that appear in both of the given lists in the same order as\n    they appear in the given lists.\n    Note: If a number appears in both lists, it should only be included once\n    in the returned list.\n\n    compare_five([1, 2, 3], [2, 3, 4]) \u279e [2, 3]\n    compare_five([1, 2, 3], [3, 4, 5]) \u279e [3]\n    compare_five([1, 2, 3], [1, 2, 3]) \u279e [1, 2, 3]\n    compare_five([1, 2, 3], [1, 2, 3, 4]) \u279e [1, 2, 3]\n    \"\"\"\n\ndef compare_six(a, b):\n    \"\"\"\n    Create a function that takes two lists of integers and returns a list of\n    the integers that appear in both of the given lists in the same order as\n    they appear in the given lists.\n    Note: If a number appears in both lists, it should only be included once\n    in the returned"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == True\n    is_equal_to_sum_odd(6) == False\n    is_equal_to_sum_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd(4) == True\n    is_equal_to_sum_even_odd(6) == True\n    is_equal_to_sum_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even(4) == True\n    is_equal_to_sum_even_odd_even(6) == False\n    is_equal_to_sum_even_odd_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_odd(4) == False\n    is_equal_to_sum_even_odd_odd(6) == True\n    is_equal_to_sum_even_odd_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd(4) == True\n    is_equal_to_sum_even_odd_even_odd(6) == True\n    is_equal_to_sum_even_odd_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_even(4) == False\n    is_equal_to_sum_even_odd_even_odd_even(6) == False\n    is_equal_to_sum_even_odd_even_odd_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_odd(4) == False\n    is_equal_to_sum_even_odd_even_odd_odd(6) == True\n    is_equal_to_sum_even_odd_even_odd_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_even_odd(4) == False\n    is_equal_to_sum_even_odd_even_odd_even_odd(6) == False\n    is_equal_to_sum_even_odd_even_odd_even_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_even_odd_even_odd_even_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even or odd numbers\n    Example\n    is_equal_to_sum_even_odd_even_odd_even_odd_even(4) =="}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example "}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if not file_name.split('.')[0]:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if not file_name.split('.')[0]:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', '"}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n   "}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is prime,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 13\n        Output: True\n\n    Example 2:\n        Input: num = 12\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_palindrome(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 121\n        Output: True\n\n    Example 2:\n        Input: num = 123\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 14\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_palindrome_number(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 121\n        Output: True\n\n    Example 2:\n        Input: num = 123\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 14\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 14\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 14\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 14\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 14\n        Output: False\n\n    Constraints:\n        * 1 <= num <= 1000\n    \"\"\"\n\ndef is_perfect_square(num):\n    \"\"\"\n    You are given a number,\n    you have to return True if the number is a perfect square,\n    otherwise return False.\n\n    Example 1:\n        Input: num = 16\n        Output: True\n\n    Example 2:\n        Input: num = 1"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    if x_num * n_num % x_den == 0:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    if x_num * n_num % x_den == 0:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    if x_num * n_num % x_den == 0:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\ndef order_by_last_digit(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the last digit of each number.\n    Note: if there are several items with similar last digit,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_digit([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_last_digit([]) == []\n    \"\"\"\n\ndef order_by_length(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their length.\n    Note: if there are several items with similar length,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_length([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_length([]) == []\n    \"\"\"\n\ndef order_by_last_digit_and_length(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their last digit and their length.\n    Note: if there are several items with similar last digit and length,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_digit_and_length([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_last_digit_and_length([]) == []\n    \"\"\"\n\ndef order_by_last_digit_and_length_and_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their last digit, their length\n    and their sum of digits.\n    Note: if there are several items with similar last digit, length and sum of digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_digit_and_length_and_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_last_digit_and_length_and_points([]) == []\n    \"\"\"\n\ndef order_by_last_digit_and_length_and_points_and_first_digit(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their last digit, their length,\n    their sum of digits and their first digit.\n    Note: if there are several items with similar last digit, length, sum of digits and first digit,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_digit_and_length_and_points_and_first_digit([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_last_digit_and_length_and_points_and_first_digit([]) == []\n    \"\"\"\n\ndef order_by_last_digit_and_length_and_points_and_first_digit_and_sum_of_digits(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their last digit, their length,\n    their sum of digits, their first digit and their sum of digits.\n    Note: if there are several items with similar last digit, length, sum of digits, first digit and sum of digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_digit_and_length_and_points_and_first_digit_and_sum_of_digits([1, 11, -1, -11, -12]) == [-"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Write a function that accepts a number as a parameter and\n    returns True if the number is prime, False otherwise.\n    A prime number is a number that is only divisible by 1 and itself.\n    For example:\n    assert is_prime(1) == False\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(6) == False\n    assert is_prime(7) == True\n    assert is_prime(8) == False\n    assert is_prime(9) == False\n    assert is_prime(10) == False\n    assert is_prime(11) == True\n    assert is_prime(12) == False\n    assert is_prime(13) == True\n    assert is_prime(14) == False\n    assert is_prime(15) == False\n    assert is_prime(16) == False\n    assert is_prime(17) == True\n    assert is_prime(18) == False\n    assert is_prime(19) == True\n    assert is_prime(20) == False\n    assert is_prime(21) == False\n    assert is_prime(22) == False\n    assert is_prime(23) == True\n    assert is_prime(24) == False\n    assert is_prime(25) == False\n    assert is_prime(26) == False\n    assert is_prime(27) == False\n    assert is_prime(28) == False\n    assert is_prime(29) == True\n    assert is_prime(30) == False\n    assert is_prime(31) == True\n    assert is_prime(32) == False\n    assert is_prime(33) == False\n    assert is_prime(34) == False\n    assert is_prime(35) == False\n    assert is_prime(36) == False\n    assert is_prime(37) == True\n    assert is_prime(38) == False\n    assert is_prime(39) == False\n    assert is_prime(40) == False\n    assert is_prime(41) == True\n    assert is_prime(42) == False\n    assert is_prime(43) == True\n    assert is_prime(44) == False\n    assert is_prime(45) == False\n    assert is_prime(46) == False\n    assert is_prime(47) == True\n    assert is_prime(48) == False\n    assert is_prime(49) == False\n    assert is_prime(50) == False\n    assert is_prime(51) == False\n    assert is_prime(52) == False\n    assert is_prime(53) == True\n    assert is_prime(54) == False\n    assert is_prime(55) == False\n    assert is_prime(56) == False\n    assert is_prime(57) == False\n    assert is_prime(58) == False\n    assert is_prime(59) == True\n    assert is_prime(60) == False\n    assert is_prime(61) == True\n    assert is_prime(62) == False\n    assert is_prime(63) == False\n    assert is_prime(64) == False\n    assert is_prime(65) == False\n    assert is_prime(66) == False\n    assert is_prime(67) == True\n    assert is_prime(68) == False\n    assert is_prime(69) == False\n    assert is_prime(70) == False\n    assert is_prime(71) == True\n    assert is_prime(72) =="}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15,"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef is_prime(n):\n    '''\n    Return True if n is prime, False otherwise.\n    '''\n\ndef is_palindrome(n):\n    '''\n    Return True if n is a palindrome, False otherwise.\n    '''\n\ndef is_perfect(n):\n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n\ndef is_abundant(n):\n    '''\n    Return True if n is an abundant number, False otherwise.\n    '''\n\ndef is_deficient(n):\n    '''\n    Return True if n is a deficient number, False otherwise.\n    '''\n\ndef is_harshad(n):\n    '''\n    Return True if n is a harshad number, False otherwise.\n    '''\n\ndef is_strong(n):\n    '''\n    Return True if n is a strong number, False otherwise.\n    '''\n\ndef is_emirp(n):\n    '''\n    Return True if n is an emirp number, False otherwise.\n    '''\n\ndef is_armstrong(n):\n    '''\n    Return True if n is an armstrong number, False otherwise.\n    '''\n\ndef is_happy(n):\n    '''\n    Return True if n is a happy number, False otherwise.\n    '''\n\ndef is_lucky(n):\n    '''\n    Return True if n is a lucky number, False otherwise.\n    '''\n\ndef is_happy_lucky(n):\n    '''\n    Return True if n is a happy lucky number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong(n):\n    '''\n    Return True if n is a happy lucky armstrong number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect_abundant(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect abundant number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect_abundant_deficient(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect abundant deficient number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect_abundant_deficient_harshad(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect abundant deficient harshad number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect_abundant_deficient_harshad_prime(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect abundant deficient harshad prime number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect_abundant_deficient_harshad_prime_composite(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect abundant deficient harshad prime composite number, False otherwise.\n    '''\n\ndef is_happy_lucky_armstrong_emirp_strong_perfect_abundant_deficient_harshad_prime_composite_composite(n):\n    '''\n    Return True if n is a happy lucky armstrong emirp strong perfect ab"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return ["}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    return class_name + '.' + max(extensions, key=lambda x: (x.count('A') - x.count('a'), x))\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    return class_name + '.' + max(extensions, key=lambda x: (x.count('A') - x.count('a'), x))\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName."}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:].startswith(b):\n            return True\n        a = a[1:] + a[0]\n    return False\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if the integer is a palindrome, False otherwise.\n\n    A palindrome is a number that is the same forwards and backwards.\n\n     Example:\n        is_palindrome(123) ==> False\n        is_palindrome(121) ==> True\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Given an integer. return True if the integer is a prime number, False otherwise.\n\n    A prime number is a number that is only divisible by 1 and itself.\n\n     Example:\n        is_prime(121) ==> False\n        is_prime(127) ==> True\n    \"\"\"\n\ndef is_armstrong(num):\n    \"\"\"Given an integer. return True if the integer is an Armstrong number, False otherwise.\n\n    An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.\n\n     Example:\n        is_armstrong(153) ==> True\n        is_armstrong(123) ==> False\n    \"\"\"\n\ndef is_perfect(num):\n    \"\"\"Given an integer. return True if the integer is a perfect number, False otherwise.\n\n    A perfect number is a number that is equal to the sum of its proper divisors.\n\n     Example:\n        is_perfect(6) ==> True\n        is_perfect(12) ==> False\n    \"\"\"\n\ndef is_abundant(num):\n    \"\"\"Given an integer. return True if the integer is an abundant number, False otherwise.\n\n    An abundant number is a number that is greater than the sum of its proper divisors.\n\n     Example:\n        is_abundant(6) ==> False\n        is_abundant(12) ==> True\n    \"\"\"\n\ndef is_deficient(num):\n    \"\"\"Given an integer. return True if the integer is a deficient number, False otherwise.\n\n    A deficient number is a number that is less than the sum of its proper divisors.\n\n     Example:\n        is_deficient(6) ==> True\n        is_deficient(12) ==> False\n    \"\"\"\n\ndef is_harshad(num):\n    \"\"\"Given an integer. return True if the integer is a Harshad number, False otherwise.\n\n    A Harshad number is a number that is divisible by the sum of its digits.\n\n     Example:\n        is_harshad(18) ==> True\n        is_harshad(12) ==> False\n    \"\"\"\n\ndef is_strong(num):\n    \"\"\"Given an integer. return True if the integer is a strong number, False otherwise.\n\n    A strong number is a number that is equal to the sum of the factorial of its digits.\n\n     Example:\n        is_strong(145) ==> True\n        is_strong(12) ==> False\n    \"\"\"\n\ndef is_emirp(num):\n    \"\"\"Given an integer. return True if the integer is an emirp number, False otherwise.\n\n    An emirp number is a number that is prime and the reverse of itself is also prime.\n\n     Example:\n        is_emirp(121) ==> True\n        is_emirp(123) ==> False\n    \"\"\"\n\ndef is_happy(num):\n    \"\"\"Given an integer. return True if the integer is a happy number, False otherwise.\n\n    A happy number is a number that is equal to the sum of the squares of its digits.\n\n     Example:\n        is_happy(121) ==> True\n        is_happy(123) ==> False\n    \"\"\"\n\ndef is_lucky(num):\n    \"\"\"Given an integer. return True if the integer is a lucky number, False otherwise.\n\n    A lucky number is a number that is equal to the sum of the digits.\n\n     Example:\n        is_lucky(121) ==> True\n        is_lucky(123) ==> False\n    \"\"\"\n\ndef is_happy_lucky(num):\n    \"\"\"Given an integer. return True if the integer is a happy number or a lucky number, False otherwise.\n\n    A happy number or a lucky number is a number that is equal to the sum of the digits.\n\n     Example:\n        is_happy_lucky(121) ==> True\n        is_happy_lucky(123) ==> False\n    \"\"\"\n\ndef is_happy_lucky_prime(num"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral string, return its integer equivalent.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral string, return its integer equivalent.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    >>> roman_to_int('mcmxcix') == 1999\n    \"\"\"\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    >>> int_to_roman(1999) =='mcmxcix'\n    \"\"\"\n\ndef roman_to_roman(roman):\n    \"\"\"\n    Given a roman numeral string, return its roman numeral equivalent as a\n    string, and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> roman_to_roman('xix') == 'xix'\n    >>> roman_to_roman('clii') == 'clii'\n    >>> roman_to_roman('cdxxvi') == 'cdxxvi'\n    >>> roman_to_roman('mcmxcix') =='mcmxcix'\n    \"\"\"\n\ndef roman_to_roman_2(roman):\n    \"\"\"\n    Given a roman numeral string, return its roman numeral equivalent as a\n    string, and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> roman_to_roman_2('xix') == 'xix'\n    >>> roman_to_roman_2('clii') == 'clii'\n    >>> roman_to_roman_2('cdxxvi') == 'cdxxvi'\n    >>> roman_to_roman_2('mcmxcix') =='mcmxcix'\n    \"\"\"\n\ndef roman_to_roman_3(roman):\n    \"\"\"\n    Given a roman numeral string, return its roman numeral equivalent as a\n    string, and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> roman_to_roman_3('xix') == 'xix'\n    >>> roman_to_roman_3('clii') == 'clii'\n    >>> roman_to_roman_3('cdxxvi') == 'cdxxvi'\n    >>> roman_to_roman_3('mcmxcix') =='mcmxcix'\n    \"\"\"\n\ndef roman_to_roman_4(roman):\n    \"\"\"\n    Given a roman numeral string, return its roman numeral equivalent as a\n    string, and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> roman_to_roman_4('xix') == 'xix'\n    >>> roman_to_roman_4('clii') == 'clii'\n    >>> roman_to_roman_4('cdxxvi') == 'cdxxvi'\n    >>> roman_to_roman_4('mcmxcix') =='mcmxcix"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n\ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides are equal.\n    Example:\n    is_equilateral(3, 4, 5) == False\n    is_equilateral(1, 1, 1) == True\n    '''\n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle in which exactly two sides are equal.\n    Example:\n    is_isosceles(3, 4, 5) == False\n    is_isosceles(1, 2, 2) == True\n    '''\n\ndef is_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a scalene triangle, False otherwise.\n    A scalene triangle is a triangle in which all three sides are different.\n    Example:\n    is_scalene(3, 4, 5) == True\n    is_scalene(1, 2, 2) == False\n    '''\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_acute_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an acute-angled triangle, False otherwise.\n    An acute-angled triangle is a triangle in which all three angles are less than\n    90 degree.\n    Example:\n    is_acute_angled_triangle(3, 4, 5) == True\n    is_acute_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_obtuse_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an obtuse-angled triangle, False otherwise.\n    An obtuse-angled triangle is a triangle in which one angle is greater than\n    90 degree.\n    Example:\n    is_obtuse_angled_triangle(3, 4, 5) == False\n    is_obtuse_angled_triangle(1, 2, 3) == True\n    '''\n\ndef is_acute_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an acute-right-angled triangle, False otherwise.\n    An acute-right-angled triangle is a triangle in which one angle is right angle\n    and the other two angles are less than 90 degree.\n    Example:\n    is_acute_right_angled_triangle(3, 4, 5) == True\n    is_acute_right_angled_triangle(1, 2, 3) == False\n    '''\n\ndef is_obtuse_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an obtuse-right-angled triangle, False otherwise.\n    An obtuse"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \""}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n# 1.\ndef eat(number, need, remaining):\n    return [number + need, remaining - need]\n\n# 2.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 3.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 4.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 5.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 6.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 7.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 8.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 9.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 10.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 11.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 12.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 13.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 14.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 15.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 16.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 17.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 18.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 19.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 20.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 21.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 22.\ndef eat(number, need, remaining):\n    return [number + need, max(remaining - need, 0)]\n\n# 23"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            if operator[i-1] == '+':\n                result += operand[i]\n            elif operator[i-1] == '-':\n                result -= operand[i]\n            elif operator[i-1] == '*':\n                result *= operand[i]\n            elif operator[i-1] == '//':\n                result //= operand[i]\n            elif operator[i-1] == '**':\n                result **= operand[i]\n    return result\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            if operator[i-1] == '+':\n                result += operand[i]\n            elif operator[i-1] == '-':\n                result -= operand[i]\n            elif operator[i-1] == '*':\n                result *= operand[i]\n            elif operator[i-1] == '//':\n                result //= operand[i]\n            elif operator[i-1] == '**':\n                result **= operand[i]\n    return result\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its original string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef md5_to_int(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its integer equivalent.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_int('3e25960a79dbc69b674cd4ec67a72c62') == 10000000000000000000000000000000\n    \"\"\"\n\ndef int_to_md5(integer):\n    \"\"\"\n    Given an integer 'integer', return its md5 hash equivalent string.\n    If 'integer' is None, return None.\n\n    >>> int_to_md5(10000000000000000000000000000000) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_hex(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its hexadecimal equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef hex_to_md5(hex):\n    \"\"\"\n    Given a hexadecimal equivalent string 'hex', return its md5 hash equivalent string.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base64(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its base64 equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base64('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef base64_to_md5(base64):\n    \"\"\"\n    Given a base64 equivalent string 'base64', return its md5 hash equivalent string.\n    If 'base64' is an empty string, return None.\n\n    >>> base64_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_base32(md5):\n    \"\"\"\n    Given a md5 hash equivalent string'md5', return its base32 equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_base32('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef base"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2 == 1:\n        a += 1\n    if a == b:\n        return [a]\n    else:\n        return [a] + generate_integers(a + 2, b)\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2 == 1:\n        a += 1\n    if a == b:\n        return [a]\n    else:\n        return [a] + generate_integers(a + 2, b)\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2 == 1:\n        a += 1\n    if a == b:\n        return [a]\n    else:\n        return [a] + generate_integers(a + 2, b)\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2 == 1:\n        a += 1\n    if a == b:\n        return [a]\n    else:\n        return [a] + generate_integers(a + 2, b)\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    elif a % 2 == 1:\n        a += 1\n    if a == b:\n        return [a]\n    else:\n        return [a] + generate_integers(a + 2, b)\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a"}
